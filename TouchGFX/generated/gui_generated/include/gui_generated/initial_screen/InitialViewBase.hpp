/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef INITIALVIEWBASE_HPP
#define INITIALVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/initial_screen/InitialPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>

class InitialViewBase : public touchgfx::View<InitialPresenter>
{
public:
    InitialViewBase();
    virtual ~InitialViewBase();
    virtual void setupScreen();
    virtual void transitionBegins();

    /*
     * Custom Actions
     */
    virtual void screenTransitionEnds()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void changeToScreen1();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::FadeAnimator< touchgfx::TiledImage > background;
    touchgfx::FadeAnimator< touchgfx::CircleProgress > initializeProgress;
    touchgfx::PainterRGB565 initializeProgressPainter;
    touchgfx::FadeAnimator< touchgfx::ButtonWithLabel > initializeButton;
    touchgfx::FadeAnimator< touchgfx::TextArea > logo;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback < InitialViewBase, const touchgfx::FadeAnimator<touchgfx::CircleProgress>& > interaction7EndedCallback;
    touchgfx::Callback<InitialViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void interaction7EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::CircleProgress>& comp);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // INITIALVIEWBASE_HPP
