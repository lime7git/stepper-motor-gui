/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef INITIALVIEWBASE_HPP
#define INITIALVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/initial_screen/InitialPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>

class InitialViewBase : public touchgfx::View<InitialPresenter>
{
public:
    InitialViewBase();
    virtual ~InitialViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void transitionBegins();

    /*
     * Custom Actions
     */
    virtual void changeToScreen1();

    /*
     * Virtual Action Handlers
     */
    virtual void handleTickEvent1()
    {
        // Override and implement this function in Initial
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::FadeAnimator< touchgfx::TiledImage > tiledImage1;
    touchgfx::FadeAnimator< touchgfx::CircleProgress > circleProgress1;
    touchgfx::PainterRGB565 circleProgress1Painter;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // INITIALVIEWBASE_HPP
