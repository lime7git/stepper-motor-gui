/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/graph/Graph.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/QRCode.hpp>
#include <touchgfx/containers/SlideMenu.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void leftArrow()
    {
        // Override and implement this function in Main
    }
    virtual void rightArrow()
    {
        // Override and implement this function in Main
    }
    virtual void stop()
    {
        // Override and implement this function in Main
    }
    virtual void speedButtonDownClicked()
    {
        // Override and implement this function in Main
    }
    virtual void stepButtonDownClicked()
    {
        // Override and implement this function in Main
    }
    virtual void speedButtonUpClicked()
    {
        // Override and implement this function in Main
    }
    virtual void stepButtonUpClicked()
    {
        // Override and implement this function in Main
    }
    virtual void hardStopButtonClicked()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::TiledImage background;
    touchgfx::Container moveContainer;
    touchgfx::ButtonWithIcon moveLeftButton;
    touchgfx::ButtonWithIcon moveRightButton;
    touchgfx::ButtonWithLabel moveStopButton;
    touchgfx::BoxWithBorder currentPositionBox;
    touchgfx::TextAreaWithOneWildcard currentPositionText;
    touchgfx::TextArea currentPositionLabel;
    touchgfx::TextArea hardStopLabel;
    touchgfx::BoxWithBorder currentSpeedBox;
    touchgfx::TextAreaWithOneWildcard currentSpeedText;
    touchgfx::TextArea currentSpeedLabel;
    touchgfx::ToggleButton hardStopButton;
    touchgfx::Container settingsContainer;
    touchgfx::ButtonWithIcon speedDownButton;
    touchgfx::ButtonWithIcon speedUpButton;
    touchgfx::BoxWithBorder speedBox;
    touchgfx::TextAreaWithOneWildcard speedText;
    touchgfx::TextAreaWithOneWildcard accelerationText;
    touchgfx::TextAreaWithOneWildcard deccelerationText;
    touchgfx::TextArea speedLabel;
    touchgfx::TextArea deccelerationLabel;
    touchgfx::TextArea accelerationLabel;
    touchgfx::ButtonWithIcon stepDownButton;
    touchgfx::ButtonWithIcon stepUpButton;
    touchgfx::BoxWithBorder stepBox;
    touchgfx::BoxWithBorder stepBox_1;
    touchgfx::TextAreaWithOneWildcard stepText;
    touchgfx::TextArea stepLabel;
    touchgfx::Slider accelerationSlider;
    touchgfx::Slider deccelerationSlider;
    touchgfx::Graph<4> motionGraph;
    touchgfx::GraphElementGridX motionGraphMajorXAxisGrid;
    touchgfx::GraphElementGridY motionGraphMajorYAxisGrid;
    touchgfx::GraphLabelsX motionGraphMajorXAxisLabel;
    touchgfx::GraphLabelsY motionGraphMajorYAxisLabel;
    touchgfx::GraphElementLine motionGraphLine1;
    touchgfx::PainterRGB565 motionGraphLine1Painter;
    touchgfx::Container infoContainer;
    uint8_t qrBuffer_infoQRCode[QRCODE_BUFFER_SIZE(5)];
    uint8_t qrScratchBuffer_infoQRCode[QRCODE_BUFFER_SIZE(5)];
    touchgfx::QRCode infoQRCode;
    touchgfx::SlideMenu slideMenuLeft;
    touchgfx::ButtonWithIcon settingsButton;
    touchgfx::ButtonWithIcon infoButton;
    touchgfx::ButtonWithIcon deinitializeButton;
    touchgfx::ButtonWithIcon moveButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CURRENTPOSITIONTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar currentPositionTextBuffer[CURRENTPOSITIONTEXT_SIZE];
    static const uint16_t CURRENTSPEEDTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar currentSpeedTextBuffer[CURRENTSPEEDTEXT_SIZE];
    static const uint16_t SPEEDTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar speedTextBuffer[SPEEDTEXT_SIZE];
    static const uint16_t ACCELERATIONTEXT_SIZE = 6;
    touchgfx::Unicode::UnicodeChar accelerationTextBuffer[ACCELERATIONTEXT_SIZE];
    static const uint16_t DECCELERATIONTEXT_SIZE = 6;
    touchgfx::Unicode::UnicodeChar deccelerationTextBuffer[DECCELERATIONTEXT_SIZE];
    static const uint16_t STEPTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar stepTextBuffer[STEPTEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<MainViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // MAINVIEWBASE_HPP
