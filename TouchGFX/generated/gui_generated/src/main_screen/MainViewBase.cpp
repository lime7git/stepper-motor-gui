/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_PUZZLE_ID));
    background.setPosition(0, 1, 480, 272);
    background.setOffset(0, 0);
    add(background);

    moveContainer.setPosition(45, 0, 435, 272);
    moveContainer.setVisible(false);
    moveLeftButton.setXY(103, 190);
    moveLeftButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_50_50_E8F6FB_SVG_ID));
    moveLeftButton.setIconXY(5, 5);
    moveLeftButton.setAction(buttonCallback);
    moveContainer.add(moveLeftButton);

    moveRightButton.setXY(201, 190);
    moveRightButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_E8F6FB_SVG_ID));
    moveRightButton.setIconXY(5, 5);
    moveRightButton.setAction(buttonCallback);
    moveContainer.add(moveRightButton);

    moveStopButton.setXY(94, 116);
    moveStopButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_PRESSED_ID));
    moveStopButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_NQEL));
    moveStopButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    moveStopButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    moveStopButton.setAction(buttonCallback);
    moveContainer.add(moveStopButton);

    currentPositionBox.setPosition(315, 10, 112, 41);
    currentPositionBox.setColor(touchgfx::Color::getColorFromRGB(178, 171, 171));
    currentPositionBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    currentPositionBox.setBorderSize(2);
    currentPositionBox.setAlpha(120);
    moveContainer.add(currentPositionBox);

    currentPositionText.setPosition(325, 18, 92, 24);
    currentPositionText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    currentPositionText.setLinespacing(0);
    Unicode::snprintf(currentPositionTextBuffer, CURRENTPOSITIONTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_0V3L).getText());
    currentPositionText.setWildcard(currentPositionTextBuffer);
    currentPositionText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7YIA));
    moveContainer.add(currentPositionText);

    currentPositionLabel.setXY(71, 18);
    currentPositionLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    currentPositionLabel.setLinespacing(0);
    currentPositionLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GWQ6));
    moveContainer.add(currentPositionLabel);

    hardStopLabel.setXY(310, 170);
    hardStopLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    hardStopLabel.setLinespacing(0);
    hardStopLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EQ9D));
    moveContainer.add(hardStopLabel);

    currentSpeedBox.setPosition(315, 61, 112, 41);
    currentSpeedBox.setColor(touchgfx::Color::getColorFromRGB(178, 171, 171));
    currentSpeedBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    currentSpeedBox.setBorderSize(2);
    currentSpeedBox.setAlpha(120);
    moveContainer.add(currentSpeedBox);

    currentSpeedText.setPosition(325, 69, 92, 24);
    currentSpeedText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    currentSpeedText.setLinespacing(0);
    Unicode::snprintf(currentSpeedTextBuffer, CURRENTSPEEDTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7TLV).getText());
    currentSpeedText.setWildcard(currentSpeedTextBuffer);
    currentSpeedText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C8RX));
    moveContainer.add(currentSpeedText);

    currentSpeedLabel.setXY(71, 69);
    currentSpeedLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    currentSpeedLabel.setLinespacing(0);
    currentSpeedLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VRE0));
    moveContainer.add(currentSpeedLabel);

    hardStopButton.setXY(289, 194);
    hardStopButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_ON_DARK_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_OFF_NORMAL_ID));
    hardStopButton.forceState(true);
    hardStopButton.setAction(buttonCallback);
    moveContainer.add(hardStopButton);

    add(moveContainer);

    settingsContainer.setPosition(11, -1, 469, 272);
    speedDownButton.setXY(429, 144);
    speedDownButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID));
    speedDownButton.setIconXY(-7, -7);
    speedDownButton.setAction(buttonCallback);
    settingsContainer.add(speedDownButton);

    speedUpButton.setXY(429, 103);
    speedUpButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID));
    speedUpButton.setIconXY(-7, -7);
    speedUpButton.setAction(buttonCallback);
    settingsContainer.add(speedUpButton);

    speedBox.setPosition(309, 121, 112, 41);
    speedBox.setColor(touchgfx::Color::getColorFromRGB(178, 171, 171));
    speedBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    speedBox.setBorderSize(1);
    speedBox.setAlpha(120);
    settingsContainer.add(speedBox);

    speedText.setPosition(319, 129, 92, 24);
    speedText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    speedText.setLinespacing(0);
    Unicode::snprintf(speedTextBuffer, SPEEDTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YAUB).getText());
    speedText.setWildcard(speedTextBuffer);
    speedText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YAR7));
    settingsContainer.add(speedText);

    accelerationText.setPosition(421, 194, 44, 27);
    accelerationText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    accelerationText.setLinespacing(0);
    Unicode::snprintf(accelerationTextBuffer, ACCELERATIONTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4VX0).getText());
    accelerationText.setWildcard(accelerationTextBuffer);
    accelerationText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FRT8));
    settingsContainer.add(accelerationText);

    deccelerationText.setPosition(421, 236, 44, 27);
    deccelerationText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    deccelerationText.setLinespacing(0);
    Unicode::snprintf(deccelerationTextBuffer, DECCELERATIONTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_B6EG).getText());
    deccelerationText.setWildcard(deccelerationTextBuffer);
    deccelerationText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DKQN));
    settingsContainer.add(deccelerationText);

    speedLabel.setXY(292, 97);
    speedLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    speedLabel.setLinespacing(0);
    speedLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HWDJ));
    settingsContainer.add(speedLabel);

    deccelerationLabel.setXY(11, 197);
    deccelerationLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    deccelerationLabel.setLinespacing(0);
    deccelerationLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LQWD));
    settingsContainer.add(deccelerationLabel);

    accelerationLabel.setXY(0, 239);
    accelerationLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    accelerationLabel.setLinespacing(0);
    accelerationLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U4IV));
    settingsContainer.add(accelerationLabel);

    stepDownButton.setXY(429, 55);
    stepDownButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID));
    stepDownButton.setIconXY(-7, -7);
    stepDownButton.setAction(buttonCallback);
    settingsContainer.add(stepDownButton);

    stepUpButton.setXY(429, 14);
    stepUpButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID));
    stepUpButton.setIconXY(-7, -7);
    stepUpButton.setAction(buttonCallback);
    settingsContainer.add(stepUpButton);

    stepBox.setPosition(309, 32, 112, 41);
    stepBox.setColor(touchgfx::Color::getColorFromRGB(178, 171, 171));
    stepBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    stepBox.setBorderSize(1);
    stepBox.setAlpha(120);
    settingsContainer.add(stepBox);

    stepBox_1.setPosition(35, 29, 200, 130);
    stepBox_1.setColor(touchgfx::Color::getColorFromRGB(178, 171, 171));
    stepBox_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    stepBox_1.setBorderSize(1);
    stepBox_1.setAlpha(120);
    settingsContainer.add(stepBox_1);

    stepText.setPosition(320, 40, 92, 24);
    stepText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    stepText.setLinespacing(0);
    Unicode::snprintf(stepTextBuffer, STEPTEXT_SIZE, "%s", touchgfx::TypedText(T_STEPTARGET).getText());
    stepText.setWildcard(stepTextBuffer);
    stepText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U5KL));
    settingsContainer.add(stepText);

    stepLabel.setXY(291, 9);
    stepLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    stepLabel.setLinespacing(0);
    stepLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2MA8));
    settingsContainer.add(stepLabel);

    accelerationSlider.setXY(195, 195);
    accelerationSlider.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_ROUNDED_LIGHT_ID));
    accelerationSlider.setupHorizontalSlider(12, 9, 0, 0, 200);
    accelerationSlider.setValueRange(1, 32767);
    accelerationSlider.setValue(48);
    accelerationSlider.setNewValueCallback(sliderValueChangedCallback);
    settingsContainer.add(accelerationSlider);

    deccelerationSlider.setXY(195, 236);
    deccelerationSlider.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_ROUNDED_LIGHT_ID));
    deccelerationSlider.setupHorizontalSlider(12, 9, 0, 0, 200);
    deccelerationSlider.setValueRange(0, 32767);
    deccelerationSlider.setValue(48);
    deccelerationSlider.setNewValueCallback(sliderValueChangedCallback);
    settingsContainer.add(deccelerationSlider);

    motionGraph.setPosition(40, 34, 190, 120);
    motionGraph.setScaleX(1);
    motionGraph.setScaleY(1);
    motionGraph.setGraphAreaMargin(0, 0, 0, 0);
    motionGraph.setGraphAreaPadding(0, 0, 0, 0);
    motionGraph.setGraphRangeX(0, 100);
    motionGraph.setGraphRangeY(0, 100);
    motionGraphMajorXAxisGrid.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    motionGraphMajorXAxisGrid.setInterval(10);
    motionGraphMajorXAxisGrid.setLineWidth(1);
    motionGraphMajorXAxisGrid.setAlpha(100);
    motionGraphMajorXAxisGrid.setScale(1);
    motionGraph.addGraphElement(motionGraphMajorXAxisGrid);

    motionGraphMajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    motionGraphMajorYAxisGrid.setInterval(10);
    motionGraphMajorYAxisGrid.setLineWidth(1);
    motionGraphMajorYAxisGrid.setAlpha(100);
    motionGraphMajorYAxisGrid.setScale(1);
    motionGraph.addGraphElement(motionGraphMajorYAxisGrid);

    motionGraphMajorXAxisLabel.setInterval(10);
    motionGraphMajorXAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_EB5G));
    motionGraphMajorXAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    motionGraphMajorXAxisLabel.setScale(1);
    motionGraph.addBottomElement(motionGraphMajorXAxisLabel);

    motionGraphMajorYAxisLabel.setInterval(10);
    motionGraphMajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T___SINGLEUSE_0SXC));
    motionGraphMajorYAxisLabel.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    motionGraphMajorYAxisLabel.setScale(1);
    motionGraph.addLeftElement(motionGraphMajorYAxisLabel);

    motionGraphLine1Painter.setColor(touchgfx::Color::getColorFromRGB(196, 22, 22));
    motionGraphLine1.setPainter(motionGraphLine1Painter);
    motionGraphLine1.setLineWidth(2);
    motionGraph.addGraphElement(motionGraphLine1);


    motionGraph.addDataPoint(0, 59);
    motionGraph.addDataPoint(25, 89);
    motionGraph.addDataPoint(75, 61);
    settingsContainer.add(motionGraph);

    add(settingsContainer);

    infoContainer.setPosition(45, 0, 435, 272);
    infoContainer.setVisible(false);
    infoQRCode.setXY(307, 82);
    infoQRCode.setBuffers(qrBuffer_infoQRCode, qrScratchBuffer_infoQRCode);
    infoQRCode.setQRCodeVersion(5);
    infoQRCode.setScale(3);
    infoQRCode.convertStringToQRCode("github.com/lime7git");
    infoContainer.add(infoQRCode);

    add(infoContainer);

    slideMenuLeft.setXY(0, 0);
    slideMenuLeft.setup(touchgfx::SlideMenu::EAST,
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BACKGROUND_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        0, 0, 68, 110);
    slideMenuLeft.setState(touchgfx::SlideMenu::COLLAPSED);
    slideMenuLeft.setVisiblePixelsWhenCollapsed(25);
    slideMenuLeft.setHiddenPixelsWhenExpanded(0);
    slideMenuLeft.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    slideMenuLeft.setAnimationDuration(18);
    slideMenuLeft.setExpandedStateTimeout(180);
    settingsButton.setXY(4, 75);
    settingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_50_50_E8F6FB_SVG_ID));
    settingsButton.setIconXY(5, 5);
    settingsButton.setAlpha(200);
    settingsButton.setAction(buttonCallback);
    slideMenuLeft.add(settingsButton);

    infoButton.setXY(4, 140);
    infoButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_INFO_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_INFO_50_50_E8F6FB_SVG_ID));
    infoButton.setIconXY(5, 5);
    infoButton.setAlpha(200);
    infoButton.setAction(buttonCallback);
    slideMenuLeft.add(infoButton);

    deinitializeButton.setXY(4, 205);
    deinitializeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_POWER_SETTINGS_NEW_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_POWER_SETTINGS_NEW_50_50_E8F6FB_SVG_ID));
    deinitializeButton.setIconXY(5, 5);
    deinitializeButton.setAlpha(200);
    deinitializeButton.setAction(buttonCallback);
    slideMenuLeft.add(deinitializeButton);

    moveButton.setXY(4, 10);
    moveButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_OPEN_WITH_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_OPEN_WITH_50_50_E8F6FB_SVG_ID));
    moveButton.setIconXY(5, 5);
    moveButton.setAlpha(200);
    moveButton.setAction(buttonCallback);
    slideMenuLeft.add(moveButton);

    add(slideMenuLeft);
}

MainViewBase::~MainViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void MainViewBase::setupScreen()
{

}

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &moveLeftButton)
    {
        //leftArrow
        //When moveLeftButton clicked call virtual function
        //Call leftArrow
        leftArrow();
    }
    if (&src == &moveRightButton)
    {
        //rightArrow
        //When moveRightButton clicked call virtual function
        //Call rightArrow
        rightArrow();
    }
    if (&src == &moveStopButton)
    {
        //stop
        //When moveStopButton clicked call virtual function
        //Call stop
        stop();
    }
    if (&src == &moveButton)
    {
        //Interaction1
        //When moveButton clicked show moveContainer
        //Show moveContainer
        moveContainer.setVisible(true);
        moveContainer.invalidate();
        //Interaction5
        //When moveButton clicked hide settingsContainer
        //Hide settingsContainer
        settingsContainer.setVisible(false);
        settingsContainer.invalidate();
        //Interaction6
        //When moveButton clicked hide infoContainer
        //Hide infoContainer
        infoContainer.setVisible(false);
        infoContainer.invalidate();
        //Interaction14
        //When moveButton clicked animateToState slideMenuLeft
        //Set State on slideMenuLeft to Collapsed
        slideMenuLeft.animateToState(SlideMenu::COLLAPSED);
    }
    if (&src == &deinitializeButton)
    {
        //Interaction2
        //When deinitializeButton clicked change screen to Initial
        //Go to Initial with block transition
        application().gotoInitialScreenBlockTransition();
    }
    if (&src == &settingsButton)
    {
        //Interaction3
        //When settingsButton clicked show settingsContainer
        //Show settingsContainer
        settingsContainer.setVisible(true);
        settingsContainer.invalidate();
        //Interaction4
        //When settingsButton clicked hide moveContainer
        //Hide moveContainer
        moveContainer.setVisible(false);
        moveContainer.invalidate();
        //Interaction7
        //When settingsButton clicked hide infoContainer
        //Hide infoContainer
        infoContainer.setVisible(false);
        infoContainer.invalidate();
        //Interaction15
        //When settingsButton clicked animateToState slideMenuLeft
        //Set State on slideMenuLeft to Collapsed
        slideMenuLeft.animateToState(SlideMenu::COLLAPSED);
    }
    if (&src == &infoButton)
    {
        //Interaction8
        //When infoButton clicked hide settingsContainer
        //Hide settingsContainer
        settingsContainer.setVisible(false);
        settingsContainer.invalidate();
        //Interaction9
        //When infoButton clicked hide moveContainer
        //Hide moveContainer
        moveContainer.setVisible(false);
        moveContainer.invalidate();
        //Interaction10
        //When infoButton clicked show infoContainer
        //Show infoContainer
        infoContainer.setVisible(true);
        infoContainer.invalidate();
        //Interaction13
        //When infoButton clicked animateToState slideMenuLeft
        //Set State on slideMenuLeft to Collapsed
        slideMenuLeft.animateToState(SlideMenu::COLLAPSED);
    }
    if (&src == &speedDownButton)
    {
        //speedButtonDownClicked
        //When speedDownButton clicked call virtual function
        //Call speedButtonDownClicked
        speedButtonDownClicked();
    }
    if (&src == &stepDownButton)
    {
        //stepButtonDownClicked
        //When stepDownButton clicked call virtual function
        //Call stepButtonDownClicked
        stepButtonDownClicked();
    }
    if (&src == &speedUpButton)
    {
        //speedButtonUpClicked
        //When speedUpButton clicked call virtual function
        //Call speedButtonUpClicked
        speedButtonUpClicked();
    }
    if (&src == &stepUpButton)
    {
        //stepButtonUpClicked
        //When stepUpButton clicked call virtual function
        //Call stepButtonUpClicked
        stepButtonUpClicked();
    }
    if (&src == &hardStopButton)
    {
        //hardStopButtonClicked
        //When hardStopButton clicked call virtual function
        //Call hardStopButtonClicked
        hardStopButtonClicked();
    }
}

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &accelerationSlider)
    {
        //Interaction11
        //When accelerationSlider value changed execute C++ code
        //Execute C++ code
        Unicode::snprintf(accelerationTextBuffer, ACCELERATIONTEXT_SIZE, "%d", accelerationSlider.getValue());
        accelerationText.invalidate();
    }
    if (&src == &deccelerationSlider)
    {
        //Interaction12
        //When deccelerationSlider value changed execute C++ code
        //Execute C++ code
        Unicode::snprintf(deccelerationTextBuffer, DECCELERATIONTEXT_SIZE, "%d", deccelerationSlider.getValue());
        deccelerationText.invalidate();
    }
}
