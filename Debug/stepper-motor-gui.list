
stepper-motor-gui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7e8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae0  0800c9b0  0800c9b0  0000d9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e490  0800e490  000101a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e490  0800e490  0000f490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e498  0800e498  000101a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e498  0800e498  0000f498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e49c  0800e49c  0000f49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a4  20000000  0800e4a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  200001a4  0800e644  000101a4  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200009a8  0800e644  000109a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a4b1  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bbc  00000000  00000000  0003a685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024a8  00000000  00000000  00040248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c41  00000000  00000000  000426f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7f5  00000000  00000000  00044331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c57a  00000000  00000000  0006fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001052a5  00000000  00000000  0009c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a1345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099e4  00000000  00000000  001a1388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001aad6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001a4 	.word	0x200001a4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c998 	.word	0x0800c998

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001a8 	.word	0x200001a8
 8000204:	0800c998 	.word	0x0800c998

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <MX_CRC_Init+0x3c>)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <MX_CRC_Init+0x40>)
 8000500:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <MX_CRC_Init+0x3c>)
 8000504:	2200      	movs	r2, #0
 8000506:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <MX_CRC_Init+0x3c>)
 800050a:	2200      	movs	r2, #0
 800050c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <MX_CRC_Init+0x3c>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <MX_CRC_Init+0x3c>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MX_CRC_Init+0x3c>)
 800051c:	2201      	movs	r2, #1
 800051e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <MX_CRC_Init+0x3c>)
 8000522:	f005 ff1b 	bl	800635c <HAL_CRC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800052c:	f000 fea1 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200001c0 	.word	0x200001c0
 8000538:	40023000 	.word	0x40023000

0800053c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <HAL_CRC_MspInit+0x38>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d10b      	bne.n	8000566 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_CRC_MspInit+0x3c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <HAL_CRC_MspInit+0x3c>)
 8000554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <HAL_CRC_MspInit+0x3c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40023000 	.word	0x40023000
 8000578:	40023800 	.word	0x40023800

0800057c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <MX_DMA2D_Init+0x60>)
 8000584:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 80005b2:	f006 f983 	bl	80068bc <HAL_DMA2D_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005bc:	f000 fe59 	bl	8001272 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005c0:	2101      	movs	r1, #1
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <MX_DMA2D_Init+0x5c>)
 80005c4:	f006 fbe8 	bl	8006d98 <HAL_DMA2D_ConfigLayer>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005ce:	f000 fe50 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200001e4 	.word	0x200001e4
 80005dc:	4002b000 	.word	0x4002b000

080005e0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <HAL_DMA2D_MspInit+0x44>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d113      	bne.n	800061a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <HAL_DMA2D_MspInit+0x48>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <HAL_DMA2D_MspInit+0x48>)
 80005f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_DMA2D_MspInit+0x48>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	205a      	movs	r0, #90	@ 0x5a
 8000610:	f005 fdf5 	bl	80061fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000614:	205a      	movs	r0, #90	@ 0x5a
 8000616:	f005 fe0e 	bl	8006236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	4002b000 	.word	0x4002b000
 8000628:	40023800 	.word	0x40023800

0800062c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000644:	4b4c      	ldr	r3, [pc, #304]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000646:	4a4d      	ldr	r2, [pc, #308]	@ (800077c <MX_FMC_Init+0x150>)
 8000648:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800064a:	4b4b      	ldr	r3, [pc, #300]	@ (8000778 <MX_FMC_Init+0x14c>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000650:	4b49      	ldr	r3, [pc, #292]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000656:	4b48      	ldr	r3, [pc, #288]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000658:	2204      	movs	r2, #4
 800065a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800065c:	4b46      	ldr	r3, [pc, #280]	@ (8000778 <MX_FMC_Init+0x14c>)
 800065e:	2210      	movs	r2, #16
 8000660:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000662:	4b45      	ldr	r3, [pc, #276]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000664:	2240      	movs	r2, #64	@ 0x40
 8000666:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000668:	4b43      	ldr	r3, [pc, #268]	@ (8000778 <MX_FMC_Init+0x14c>)
 800066a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800066e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000670:	4b41      	ldr	r3, [pc, #260]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000676:	4b40      	ldr	r3, [pc, #256]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800067c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800067e:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000680:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000686:	4b3c      	ldr	r3, [pc, #240]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800069c:	2303      	movs	r3, #3
 800069e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4832      	ldr	r0, [pc, #200]	@ (8000778 <MX_FMC_Init+0x14c>)
 80006ae:	f009 fa7d 	bl	8009bac <HAL_SDRAM_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80006b8:	f000 fddb 	bl	8001272 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]

      /* Step 1: Configure a clock configuration enable command */
      Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80006c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000780 <MX_FMC_Init+0x154>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80006c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <MX_FMC_Init+0x154>)
 80006c8:	2210      	movs	r2, #16
 80006ca:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 1;
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <MX_FMC_Init+0x154>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = 0;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <MX_FMC_Init+0x154>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80006d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006dc:	4928      	ldr	r1, [pc, #160]	@ (8000780 <MX_FMC_Init+0x154>)
 80006de:	4826      	ldr	r0, [pc, #152]	@ (8000778 <MX_FMC_Init+0x14c>)
 80006e0:	f009 fa98 	bl	8009c14 <HAL_SDRAM_SendCommand>

      /* Step 2: Insert 100 us minimum delay */
      /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
      HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f005 fc8b 	bl	8006000 <HAL_Delay>

      /* Step 3: Configure a PALL (precharge all) command */
      Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80006ea:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <MX_FMC_Init+0x154>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80006f0:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_FMC_Init+0x154>)
 80006f2:	2210      	movs	r2, #16
 80006f4:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 1;
 80006f6:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <MX_FMC_Init+0x154>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = 0;
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_FMC_Init+0x154>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000706:	491e      	ldr	r1, [pc, #120]	@ (8000780 <MX_FMC_Init+0x154>)
 8000708:	481b      	ldr	r0, [pc, #108]	@ (8000778 <MX_FMC_Init+0x14c>)
 800070a:	f009 fa83 	bl	8009c14 <HAL_SDRAM_SendCommand>

      /* Step 4: Configure an Auto Refresh command */
      Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_FMC_Init+0x154>)
 8000710:	2203      	movs	r2, #3
 8000712:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_FMC_Init+0x154>)
 8000716:	2210      	movs	r2, #16
 8000718:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 8;
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_FMC_Init+0x154>)
 800071c:	2208      	movs	r2, #8
 800071e:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = 0;
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_FMC_Init+0x154>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800072a:	4915      	ldr	r1, [pc, #84]	@ (8000780 <MX_FMC_Init+0x154>)
 800072c:	4812      	ldr	r0, [pc, #72]	@ (8000778 <MX_FMC_Init+0x14c>)
 800072e:	f009 fa71 	bl	8009c14 <HAL_SDRAM_SendCommand>

      /* Step 5: Program the external memory mode register */
      tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8000732:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000736:	603b      	str	r3, [r7, #0]
               SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
               SDRAM_MODEREG_CAS_LATENCY_3            | \
               SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
               SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

      Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_FMC_Init+0x154>)
 800073a:	2204      	movs	r2, #4
 800073c:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_FMC_Init+0x154>)
 8000740:	2210      	movs	r2, #16
 8000742:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 1;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_FMC_Init+0x154>)
 8000746:	2201      	movs	r2, #1
 8000748:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = tmpmrd;
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <MX_FMC_Init+0x154>)
 800074e:	60d3      	str	r3, [r2, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000754:	490a      	ldr	r1, [pc, #40]	@ (8000780 <MX_FMC_Init+0x154>)
 8000756:	4808      	ldr	r0, [pc, #32]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000758:	f009 fa5c 	bl	8009c14 <HAL_SDRAM_SendCommand>

      /* Step 6: Set the refresh rate counter */
      /* Set the device refresh rate */
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800075c:	f240 712b 	movw	r1, #1835	@ 0x72b
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_FMC_Init+0x14c>)
 8000762:	f009 fa8c 	bl	8009c7e <HAL_SDRAM_ProgramRefreshRate>

      //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
      FMC_Bank1->BTCR[0] = 0x000030D2;
 8000766:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 800076a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800076e:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000234 	.word	0x20000234
 800077c:	a0000140 	.word	0xa0000140
 8000780:	20000224 	.word	0x20000224

08000784 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000798:	4b3a      	ldr	r3, [pc, #232]	@ (8000884 <HAL_FMC_MspInit+0x100>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d16d      	bne.n	800087c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80007a0:	4b38      	ldr	r3, [pc, #224]	@ (8000884 <HAL_FMC_MspInit+0x100>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007a6:	4b38      	ldr	r3, [pc, #224]	@ (8000888 <HAL_FMC_MspInit+0x104>)
 80007a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007aa:	4a37      	ldr	r2, [pc, #220]	@ (8000888 <HAL_FMC_MspInit+0x104>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80007b2:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <HAL_FMC_MspInit+0x104>)
 80007b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80007be:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80007c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d0:	230c      	movs	r3, #12
 80007d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	482c      	ldr	r0, [pc, #176]	@ (800088c <HAL_FMC_MspInit+0x108>)
 80007da:	f006 fc0b 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80007de:	f248 1333 	movw	r3, #33075	@ 0x8133
 80007e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f0:	230c      	movs	r3, #12
 80007f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4825      	ldr	r0, [pc, #148]	@ (8000890 <HAL_FMC_MspInit+0x10c>)
 80007fa:	f006 fbfb 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80007fe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000802:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <HAL_FMC_MspInit+0x110>)
 800081a:	f006 fbeb 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800081e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000822:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000830:	230c      	movs	r3, #12
 8000832:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4817      	ldr	r0, [pc, #92]	@ (8000898 <HAL_FMC_MspInit+0x114>)
 800083a:	f006 fbdb 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800083e:	2328      	movs	r3, #40	@ 0x28
 8000840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084e:	230c      	movs	r3, #12
 8000850:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4811      	ldr	r0, [pc, #68]	@ (800089c <HAL_FMC_MspInit+0x118>)
 8000858:	f006 fbcc 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800085c:	2308      	movs	r3, #8
 800085e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800086c:	230c      	movs	r3, #12
 800086e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <HAL_FMC_MspInit+0x11c>)
 8000876:	f006 fbbd 	bl	8006ff4 <HAL_GPIO_Init>
 800087a:	e000      	b.n	800087e <HAL_FMC_MspInit+0xfa>
    return;
 800087c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000268 	.word	0x20000268
 8000888:	40023800 	.word	0x40023800
 800088c:	40021000 	.word	0x40021000
 8000890:	40021800 	.word	0x40021800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40021400 	.word	0x40021400
 800089c:	40021c00 	.word	0x40021c00
 80008a0:	40020800 	.word	0x40020800

080008a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008ac:	f7ff ff6a 	bl	8000784 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b090      	sub	sp, #64	@ 0x40
 80008bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	4b7a      	ldr	r3, [pc, #488]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a79      	ldr	r2, [pc, #484]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b77      	ldr	r3, [pc, #476]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b74      	ldr	r3, [pc, #464]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a73      	ldr	r2, [pc, #460]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b71      	ldr	r3, [pc, #452]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80008fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b6e      	ldr	r3, [pc, #440]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a6d      	ldr	r2, [pc, #436]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	623b      	str	r3, [r7, #32]
 8000914:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000916:	4b68      	ldr	r3, [pc, #416]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a67      	ldr	r2, [pc, #412]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b65      	ldr	r3, [pc, #404]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800092a:	61fb      	str	r3, [r7, #28]
 800092c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800092e:	4b62      	ldr	r3, [pc, #392]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a61      	ldr	r2, [pc, #388]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b5c      	ldr	r3, [pc, #368]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a5b      	ldr	r2, [pc, #364]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b59      	ldr	r3, [pc, #356]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800095e:	4b56      	ldr	r3, [pc, #344]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a55      	ldr	r2, [pc, #340]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000964:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b53      	ldr	r3, [pc, #332]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000976:	4b50      	ldr	r3, [pc, #320]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 800097c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a49      	ldr	r2, [pc, #292]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b44      	ldr	r3, [pc, #272]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a43      	ldr	r2, [pc, #268]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab8 <MX_GPIO_Init+0x200>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f241 0104 	movw	r1, #4100	@ 0x1004
 80009dc:	4837      	ldr	r0, [pc, #220]	@ (8000abc <MX_GPIO_Init+0x204>)
 80009de:	f006 fdd9 	bl	8007594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2108      	movs	r1, #8
 80009e6:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <MX_GPIO_Init+0x208>)
 80009e8:	f006 fdd4 	bl	8007594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f2:	4834      	ldr	r0, [pc, #208]	@ (8000ac4 <MX_GPIO_Init+0x20c>)
 80009f4:	f006 fdce 	bl	8007594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f8:	2304      	movs	r3, #4
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a04:	2301      	movs	r3, #1
 8000a06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482b      	ldr	r0, [pc, #172]	@ (8000abc <MX_GPIO_Init+0x204>)
 8000a10:	f006 faf0 	bl	8006ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a14:	2308      	movs	r3, #8
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4825      	ldr	r0, [pc, #148]	@ (8000ac0 <MX_GPIO_Init+0x208>)
 8000a2c:	f006 fae2 	bl	8006ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	481c      	ldr	r0, [pc, #112]	@ (8000abc <MX_GPIO_Init+0x204>)
 8000a4a:	f006 fad3 	bl	8006ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a64:	4619      	mov	r1, r3
 8000a66:	4817      	ldr	r0, [pc, #92]	@ (8000ac4 <MX_GPIO_Init+0x20c>)
 8000a68:	f006 fac4 	bl	8006ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480e      	ldr	r0, [pc, #56]	@ (8000abc <MX_GPIO_Init+0x204>)
 8000a82:	f006 fab7 	bl	8006ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a86:	23c0      	movs	r3, #192	@ 0xc0
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a8a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <MX_GPIO_Init+0x210>)
 8000a9c:	f006 faaa 	bl	8006ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2017      	movs	r0, #23
 8000aa6:	f005 fbaa 	bl	80061fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aaa:	2017      	movs	r0, #23
 8000aac:	f005 fbc3 	bl	8006236 <HAL_NVIC_EnableIRQ>

}
 8000ab0:	bf00      	nop
 8000ab2:	3740      	adds	r7, #64	@ 0x40
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	40022800 	.word	0x40022800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40021800 	.word	0x40021800

08000acc <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0aa      	sub	sp, #168	@ 0xa8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2284      	movs	r2, #132	@ 0x84
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00b ff27 	bl	800c940 <memset>
  if(i2cHandle->Instance==I2C3)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a22      	ldr	r2, [pc, #136]	@ (8000b80 <HAL_I2C_MspInit+0xb4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d13c      	bne.n	8000b76 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f008 fc5e 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b16:	f000 fbac 	bl	8001272 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <HAL_I2C_MspInit+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <HAL_I2C_MspInit+0xb8>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <HAL_I2C_MspInit+0xb8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b32:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b52:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <HAL_I2C_MspInit+0xbc>)
 8000b5a:	f006 fa4b 	bl	8006ff4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <HAL_I2C_MspInit+0xb8>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <HAL_I2C_MspInit+0xb8>)
 8000b64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_I2C_MspInit+0xb8>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	37a8      	adds	r7, #168	@ 0xa8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40005c00 	.word	0x40005c00
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40021c00 	.word	0x40021c00

08000b8c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_I2C_MspDeInit+0x38>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10e      	bne.n	8000bbc <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_I2C_MspDeInit+0x3c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a09      	ldr	r2, [pc, #36]	@ (8000bc8 <HAL_I2C_MspDeInit+0x3c>)
 8000ba4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <HAL_I2C_MspDeInit+0x40>)
 8000bae:	f006 fbcd 	bl	800734c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8000bb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <HAL_I2C_MspDeInit+0x40>)
 8000bb8:	f006 fbc8 	bl	800734c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005c00 	.word	0x40005c00
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40021c00 	.word	0x40021c00

08000bd0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	@ 0x38
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2234      	movs	r2, #52	@ 0x34
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00b feaf 	bl	800c940 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000be2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000be4:	4a3a      	ldr	r2, [pc, #232]	@ (8000cd0 <MX_LTDC_Init+0x100>)
 8000be6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000be8:	4b38      	ldr	r3, [pc, #224]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bee:	4b37      	ldr	r3, [pc, #220]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bf4:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bfa:	4b34      	ldr	r3, [pc, #208]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c00:	4b32      	ldr	r3, [pc, #200]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c02:	2228      	movs	r2, #40	@ 0x28
 8000c04:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c06:	4b31      	ldr	r3, [pc, #196]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c08:	2209      	movs	r2, #9
 8000c0a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c0e:	2235      	movs	r2, #53	@ 0x35
 8000c10:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c14:	220b      	movs	r2, #11
 8000c16:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c1a:	f240 2215 	movw	r2, #533	@ 0x215
 8000c1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c22:	f240 121b 	movw	r2, #283	@ 0x11b
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000c28:	4b28      	ldr	r3, [pc, #160]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c2a:	f240 2235 	movw	r2, #565	@ 0x235
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000c30:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c32:	f240 121d 	movw	r2, #285	@ 0x11d
 8000c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c50:	481e      	ldr	r0, [pc, #120]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000c52:	f007 faa7 	bl	80081a4 <HAL_LTDC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c5c:	f000 fb09 	bl	8001272 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000c64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c68:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000c6e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c72:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c78:	23ff      	movs	r3, #255	@ 0xff
 8000c7a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c84:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c8a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000c90:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c96:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_LTDC_Init+0xfc>)
 8000cb6:	f007 fc07 	bl	80084c8 <HAL_LTDC_ConfigLayer>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000cc0:	f000 fad7 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3738      	adds	r7, #56	@ 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000026c 	.word	0x2000026c
 8000cd0:	40016800 	.word	0x40016800

08000cd4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0ae      	sub	sp, #184	@ 0xb8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	2284      	movs	r2, #132	@ 0x84
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00b fe23 	bl	800c940 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8000ebc <HAL_LTDC_MspInit+0x1e8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	f040 80d6 	bne.w	8000eb2 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d06:	2308      	movs	r3, #8
 8000d08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d0a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000d10:	2305      	movs	r3, #5
 8000d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f008 fb4e 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8000d36:	f000 fa9c 	bl	8001272 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d3a:	4b61      	ldr	r3, [pc, #388]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a60      	ldr	r2, [pc, #384]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b5e      	ldr	r3, [pc, #376]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4b5b      	ldr	r3, [pc, #364]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a5a      	ldr	r2, [pc, #360]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b58      	ldr	r3, [pc, #352]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d6a:	4b55      	ldr	r3, [pc, #340]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a54      	ldr	r2, [pc, #336]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b52      	ldr	r3, [pc, #328]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d82:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a4e      	ldr	r2, [pc, #312]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9a:	4b49      	ldr	r3, [pc, #292]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a48      	ldr	r2, [pc, #288]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b46      	ldr	r3, [pc, #280]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000db2:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a42      	ldr	r2, [pc, #264]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b40      	ldr	r3, [pc, #256]	@ (8000ec0 <HAL_LTDC_MspInit+0x1ec>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000de2:	230e      	movs	r3, #14
 8000de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4835      	ldr	r0, [pc, #212]	@ (8000ec4 <HAL_LTDC_MspInit+0x1f0>)
 8000df0:	f006 f900 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000df4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000df8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e0e:	230e      	movs	r3, #14
 8000e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	482b      	ldr	r0, [pc, #172]	@ (8000ec8 <HAL_LTDC_MspInit+0x1f4>)
 8000e1c:	f006 f8ea 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000e20:	23f7      	movs	r3, #247	@ 0xf7
 8000e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4821      	ldr	r0, [pc, #132]	@ (8000ecc <HAL_LTDC_MspInit+0x1f8>)
 8000e46:	f006 f8d5 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e64:	2309      	movs	r3, #9
 8000e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4817      	ldr	r0, [pc, #92]	@ (8000ed0 <HAL_LTDC_MspInit+0x1fc>)
 8000e72:	f006 f8bf 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000e76:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e90:	230e      	movs	r3, #14
 8000e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <HAL_LTDC_MspInit+0x200>)
 8000e9e:	f006 f8a9 	bl	8006ff4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2058      	movs	r0, #88	@ 0x58
 8000ea8:	f005 f9a9 	bl	80061fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000eac:	2058      	movs	r0, #88	@ 0x58
 8000eae:	f005 f9c2 	bl	8006236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	37b8      	adds	r7, #184	@ 0xb8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40016800 	.word	0x40016800
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40022400 	.word	0x40022400
 8000ecc:	40022800 	.word	0x40022800
 8000ed0:	40021800 	.word	0x40021800
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ee2:	f3bf 8f6f 	isb	sy
}
 8000ee6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <SCB_EnableICache+0x48>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef0:	f3bf 8f4f 	dsb	sy
}
 8000ef4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef6:	f3bf 8f6f 	isb	sy
}
 8000efa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <SCB_EnableICache+0x48>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <SCB_EnableICache+0x48>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f06:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <SCB_EnableDCache+0x84>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f32:	f3bf 8f4f 	dsb	sy
}
 8000f36:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <SCB_EnableDCache+0x84>)
 8000f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f3e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	0b5b      	lsrs	r3, r3, #13
 8000f44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f48:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f52:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000f5c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f62:	4911      	ldr	r1, [pc, #68]	@ (8000fa8 <SCB_EnableDCache+0x84>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	60ba      	str	r2, [r7, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1ef      	bne.n	8000f54 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1e5a      	subs	r2, r3, #1
 8000f78:	60fa      	str	r2, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1e5      	bne.n	8000f4a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f7e:	f3bf 8f4f 	dsb	sy
}
 8000f82:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <SCB_EnableDCache+0x84>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <SCB_EnableDCache+0x84>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f8e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f96:	f3bf 8f6f 	isb	sy
}
 8000f9a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000fb2:	f000 f927 	bl	8001204 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000fb6:	f7ff ff8f 	bl	8000ed8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000fba:	f7ff ffb3 	bl	8000f24 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f004 ffb9 	bl	8005f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f891 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f7ff fc77 	bl	80008b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000fca:	f000 fa15 	bl	80013f8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fce:	f000 fb41 	bl	8001654 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000fd2:	f000 fc0f 	bl	80017f4 <MX_USART2_UART_Init>
  MX_DMA2D_Init();
 8000fd6:	f7ff fad1 	bl	800057c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000fda:	f7ff fdf9 	bl	8000bd0 <MX_LTDC_Init>
  MX_FMC_Init();
 8000fde:	f7ff fb25 	bl	800062c <MX_FMC_Init>
  //MX_I2C3_Init();
  MX_CRC_Init();
 8000fe2:	f7ff fa89 	bl	80004f8 <MX_CRC_Init>
  MX_QUADSPI_Init();
 8000fe6:	f000 f94b 	bl	8001280 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  TS_IO_Init();
 8000fea:	f003 f8cd 	bl	8004188 <TS_IO_Init>

  uint32_t *externalRAM = 0xC0000000;
 8000fee:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  	const uint32_t size = 1000;
 8000ff4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  	//write external RAM
  	for(int i = 0; i < size; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ffe:	e008      	b.n	8001012 <main+0x66>
  	{
  	    externalRAM[i] = 0;
 8001000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001006:	4413      	add	r3, r2
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < size; i++)
 800100c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800100e:	3301      	adds	r3, #1
 8001010:	637b      	str	r3, [r7, #52]	@ 0x34
 8001012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001016:	429a      	cmp	r2, r3
 8001018:	d8f2      	bhi.n	8001000 <main+0x54>
  	}

  	BSP_LCD_Init();
 800101a:	f003 f903 	bl	8004224 <BSP_LCD_Init>

  	    // Select the LCD layer to be used using the BSP_LCD_SelectLayer() function.
  	    //BSP_LCD_SelectLayer(0);
  	    BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 800101e:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001022:	2001      	movs	r0, #1
 8001024:	f003 f996 	bl	8004354 <BSP_LCD_LayerDefaultInit>
  	    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8001028:	2001      	movs	r0, #1
 800102a:	f003 f9f3 	bl	8004414 <BSP_LCD_SelectLayer>

  	    // Enable the LCD display using the BSP_LCD_DisplayOn() function.
  	    BSP_LCD_DisplayOn();
 800102e:	f003 fd97 	bl	8004b60 <BSP_LCD_DisplayOn>

  	    // Clear the whole LCD using BSP_LCD_Clear() function or only one specified string line using the BSP_LCD_ClearStringLine() function.
  	    BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 8001032:	4825      	ldr	r0, [pc, #148]	@ (80010c8 <main+0x11c>)
 8001034:	f003 fa30 	bl	8004498 <BSP_LCD_Clear>
  	    HAL_Delay(1000);
 8001038:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800103c:	f004 ffe0 	bl	8006000 <HAL_Delay>


  	    BSP_LCD_Clear(LCD_COLOR_RED);
 8001040:	4822      	ldr	r0, [pc, #136]	@ (80010cc <main+0x120>)
 8001042:	f003 fa29 	bl	8004498 <BSP_LCD_Clear>
  	    HAL_Delay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104a:	f004 ffd9 	bl	8006000 <HAL_Delay>
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f003 fa21 	bl	8004498 <BSP_LCD_Clear>

  	    // Display a character on the specified line and column using the BSP_LCD_DisplayChar() function or a complete string line using the BSP_LCD_DisplayStringAtLine() function.
  	    BSP_LCD_DisplayStringAt(0, 0, "TEST", CENTER_MODE);
 8001056:	2301      	movs	r3, #1
 8001058:	4a1d      	ldr	r2, [pc, #116]	@ (80010d0 <main+0x124>)
 800105a:	2100      	movs	r1, #0
 800105c:	2000      	movs	r0, #0
 800105e:	f003 fa87 	bl	8004570 <BSP_LCD_DisplayStringAt>

  	//HAL_Delay(2000);

	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 1);
 8001062:	2101      	movs	r1, #1
 8001064:	2001      	movs	r0, #1
 8001066:	f004 fed7 	bl	8005e18 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 800106a:	2100      	movs	r1, #0
 800106c:	2001      	movs	r0, #1
 800106e:	f004 fe49 	bl	8005d04 <BSP_MotorControl_Init>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8001072:	4818      	ldr	r0, [pc, #96]	@ (80010d4 <main+0x128>)
 8001074:	f004 fdec 	bl	8005c50 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachBusyInterrupt(MyBusyInterruptHandler);
 8001078:	4817      	ldr	r0, [pc, #92]	@ (80010d8 <main+0x12c>)
 800107a:	f004 fe07 	bl	8005c8c <BSP_MotorControl_AttachBusyInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 800107e:	4817      	ldr	r0, [pc, #92]	@ (80010dc <main+0x130>)
 8001080:	f004 fdc8 	bl	8005c14 <BSP_MotorControl_AttachErrorHandler>
	//BSP_MotorControl_Move(0, BACKWARD, 1600);

	/* Wait for the motor of device 0 ends moving */
	//BSP_MotorControl_WaitWhileActive(0);

	BSP_MotorControl_CmdSoftHiZ(0);
 8001084:	2000      	movs	r0, #0
 8001086:	f004 fea5 	bl	8005dd4 <BSP_MotorControl_CmdSoftHiZ>

	BSP_TS_Init(480, 272);
 800108a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800108e:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001092:	f004 f933 	bl	80052fc <BSP_TS_Init>

    /* USER CODE BEGIN 3 */


	      TS_StateTypeDef state;
	      BSP_TS_GetState(&state);
 8001096:	463b      	mov	r3, r7
 8001098:	4618      	mov	r0, r3
 800109a:	f004 f96f 	bl	800537c <BSP_TS_GetState>
	      if (state.touchDetected == 1)
 800109e:	783b      	ldrb	r3, [r7, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10d      	bne.n	80010c0 <main+0x114>
	      {
	          x = state.touchX[0];
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <main+0x134>)
 80010a8:	801a      	strh	r2, [r3, #0]
	          y = state.touchY[0];
 80010aa:	89ba      	ldrh	r2, [r7, #12]
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <main+0x138>)
 80010ae:	801a      	strh	r2, [r3, #0]
	          //break point here
	         //BSP_LCD_Clear(LCD_COLOR_WHITE);
	          BSP_LCD_FillCircle(x, y, 10);
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <main+0x134>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <main+0x138>)
 80010b6:	8811      	ldrh	r1, [r2, #0]
 80010b8:	220a      	movs	r2, #10
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fcb0 	bl	8004a20 <BSP_LCD_FillCircle>
	      }
	      HAL_Delay(8);
 80010c0:	2008      	movs	r0, #8
 80010c2:	f004 ff9d 	bl	8006000 <HAL_Delay>
  {
 80010c6:	e7e6      	b.n	8001096 <main+0xea>
 80010c8:	ffd3d3d3 	.word	0xffd3d3d3
 80010cc:	ffff0000 	.word	0xffff0000
 80010d0:	0800c9b0 	.word	0x0800c9b0
 80010d4:	080011c5 	.word	0x080011c5
 80010d8:	080011f9 	.word	0x080011f9
 80010dc:	08001273 	.word	0x08001273
 80010e0:	20000314 	.word	0x20000314
 80010e4:	20000316 	.word	0x20000316

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	@ 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00b fc22 	bl	800c940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	4b2b      	ldr	r3, [pc, #172]	@ (80011bc <SystemClock_Config+0xd4>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a2a      	ldr	r2, [pc, #168]	@ (80011bc <SystemClock_Config+0xd4>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b28      	ldr	r3, [pc, #160]	@ (80011bc <SystemClock_Config+0xd4>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001124:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <SystemClock_Config+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a25      	ldr	r2, [pc, #148]	@ (80011c0 <SystemClock_Config+0xd8>)
 800112a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <SystemClock_Config+0xd8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113c:	2301      	movs	r3, #1
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001140:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001146:	2302      	movs	r3, #2
 8001148:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001150:	2319      	movs	r3, #25
 8001152:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001154:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001158:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115a:	2302      	movs	r3, #2
 800115c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800115e:	2302      	movs	r3, #2
 8001160:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	4618      	mov	r0, r3
 8001168:	f007 fca6 	bl	8008ab8 <HAL_RCC_OscConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001172:	f000 f87e 	bl	8001272 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001176:	f007 fb8d 	bl	8008894 <HAL_PWREx_EnableOverDrive>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001180:	f000 f877 	bl	8001272 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001190:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2107      	movs	r1, #7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 ff2c 	bl	8009000 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ae:	f000 f860 	bl	8001272 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3750      	adds	r7, #80	@ 0x50
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f004 fdba 	bl	8005d44 <BSP_MotorControl_CmdGetStatus>
 80011d0:	4603      	mov	r3, r0
 80011d2:	80fb      	strh	r3, [r7, #6]
  }
  else
  {
    // FORWARD
  }
  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_STOPPED )
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d008      	beq.n	80011f0 <MyFlagInterruptHandler+0x2c>
  {
       // MOTOR STOPPED
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_ACCELERATION )
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	d003      	beq.n	80011f0 <MyFlagInterruptHandler+0x2c>
  {
           // MOTOR ACCELERATION
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_DECELERATION )
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80011ee:	2b40      	cmp	r3, #64	@ 0x40
  if ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0)
  {
    //overcurrent detection
  }

}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <MyBusyInterruptHandler>:
  * @brief  This function is the User handler for the busy interrupt
  * @param  None
  * @retval None
  */
void MyBusyInterruptHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

   if (BSP_MotorControl_CheckBusyHw())
 80011fc:	f004 fdc8 	bl	8005d90 <BSP_MotorControl_CheckBusyHw>
   }
   else
   {
     /* To be customized (for example Switch off a LED) */
   }
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001216:	f005 f829 	bl	800626c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800121a:	2301      	movs	r3, #1
 800121c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800121e:	2300      	movs	r3, #0
 8001220:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001222:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8001226:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001228:	231b      	movs	r3, #27
 800122a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800122c:	2300      	movs	r3, #0
 800122e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001230:	2300      	movs	r3, #0
 8001232:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001234:	2303      	movs	r3, #3
 8001236:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001248:	463b      	mov	r3, r7
 800124a:	4618      	mov	r0, r3
 800124c:	f005 f846 	bl	80062dc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001250:	2301      	movs	r3, #1
 8001252:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001254:	2317      	movs	r3, #23
 8001256:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001258:	2301      	movs	r3, #1
 800125a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800125c:	463b      	mov	r3, r7
 800125e:	4618      	mov	r0, r3
 8001260:	f005 f83c 	bl	80062dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001264:	2004      	movs	r0, #4
 8001266:	f005 f819 	bl	800629c <HAL_MPU_Enable>

}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001276:	b672      	cpsid	i
}
 8001278:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127a:	bf00      	nop
 800127c:	e7fd      	b.n	800127a <Error_Handler+0x8>
	...

08001280 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 8001286:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <MX_QUADSPI_Init+0x54>)
 8001288:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 800128c:	2201      	movs	r2, #1
 800128e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 8001292:	2204      	movs	r2, #4
 8001294:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 8001298:	2210      	movs	r2, #16
 800129a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 800129e:	2218      	movs	r2, #24
 80012a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 80012a4:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80012a8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_QUADSPI_Init+0x50>)
 80012be:	f007 fb39 	bl	8008934 <HAL_QSPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80012c8:	f7ff ffd3 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000318 	.word	0x20000318
 80012d4:	a0001000 	.word	0xa0001000

080012d8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <HAL_QSPI_MspInit+0x10c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d170      	bne.n	80013dc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012fa:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 80012fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fe:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6393      	str	r3, [r2, #56]	@ 0x38
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a34      	ldr	r2, [pc, #208]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b32      	ldr	r3, [pc, #200]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a2e      	ldr	r2, [pc, #184]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_QSPI_MspInit+0x110>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800135a:	2304      	movs	r3, #4
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800136a:	2309      	movs	r3, #9
 800136c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	481d      	ldr	r0, [pc, #116]	@ (80013ec <HAL_QSPI_MspInit+0x114>)
 8001376:	f005 fe3d 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800137a:	2340      	movs	r3, #64	@ 0x40
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800138a:	230a      	movs	r3, #10
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4816      	ldr	r0, [pc, #88]	@ (80013f0 <HAL_QSPI_MspInit+0x118>)
 8001396:	f005 fe2d 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139a:	2304      	movs	r3, #4
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013aa:	2309      	movs	r3, #9
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	480e      	ldr	r0, [pc, #56]	@ (80013f0 <HAL_QSPI_MspInit+0x118>)
 80013b6:	f005 fe1d 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80013ba:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013cc:	2309      	movs	r3, #9
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <HAL_QSPI_MspInit+0x11c>)
 80013d8:	f005 fe0c 	bl	8006ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80013dc:	bf00      	nop
 80013de:	3730      	adds	r7, #48	@ 0x30
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	a0001000 	.word	0xa0001000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020c00 	.word	0x40020c00

080013f8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_SPI2_Init+0x74>)
 80013fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001470 <MX_SPI2_Init+0x78>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_SPI2_Init+0x74>)
 8001404:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_SPI2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_SPI2_Init+0x74>)
 8001412:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001416:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_SPI2_Init+0x74>)
 800141a:	2202      	movs	r2, #2
 800141c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <MX_SPI2_Init+0x74>)
 8001420:	2201      	movs	r2, #1
 8001422:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_SPI2_Init+0x74>)
 8001426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_SPI2_Init+0x74>)
 800142e:	2220      	movs	r2, #32
 8001430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_SPI2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_SPI2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_SPI2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_SPI2_Init+0x74>)
 8001446:	2207      	movs	r2, #7
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_SPI2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_SPI2_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_SPI2_Init+0x74>)
 8001458:	f008 fc3a 	bl	8009cd0 <HAL_SPI_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001462:	f7ff ff06 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000364 	.word	0x20000364
 8001470:	40003800 	.word	0x40003800

08001474 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a25      	ldr	r2, [pc, #148]	@ (8001528 <HAL_SPI_MspInit+0xb4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d144      	bne.n	8001520 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001496:	4b25      	ldr	r3, [pc, #148]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	4a24      	ldr	r2, [pc, #144]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a1e      	ldr	r2, [pc, #120]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_SPI_MspInit+0xb8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014de:	2302      	movs	r3, #2
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ee:	2305      	movs	r3, #5
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	480d      	ldr	r0, [pc, #52]	@ (8001530 <HAL_SPI_MspInit+0xbc>)
 80014fa:	f005 fd7b 	bl	8006ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014fe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001510:	2305      	movs	r3, #5
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <HAL_SPI_MspInit+0xc0>)
 800151c:	f005 fd6a 	bl	8006ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	@ 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40003800 	.word	0x40003800
 800152c:	40023800 	.word	0x40023800
 8001530:	40022000 	.word	0x40022000
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <HAL_MspInit+0x44>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a0e      	ldr	r2, [pc, #56]	@ (800157c <HAL_MspInit+0x44>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_MspInit+0x44>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_MspInit+0x44>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_MspInit+0x44>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_MspInit+0x44>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <NMI_Handler+0x4>

08001588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f004 fcf3 	bl	8005fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80015e2:	2040      	movs	r0, #64	@ 0x40
 80015e4:	f005 fff0 	bl	80075c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80015e8:	2080      	movs	r0, #128	@ 0x80
 80015ea:	f005 ffed 	bl	80075c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <TIM2_IRQHandler+0x10>)
 80015fa:	f009 fb2d 	bl	800ac58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200003f0 	.word	0x200003f0

08001608 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <LTDC_IRQHandler+0x10>)
 800160e:	f006 fe99 	bl	8008344 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000026c 	.word	0x2000026c

0800161c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <DMA2D_IRQHandler+0x10>)
 8001622:	f005 faa9 	bl	8006b78 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200001e4 	.word	0x200001e4

08001630 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	@ 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001686:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <MX_TIM2_Init+0xe8>)
 8001688:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <MX_TIM2_Init+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b29      	ldr	r3, [pc, #164]	@ (800173c <MX_TIM2_Init+0xe8>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <MX_TIM2_Init+0xe8>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b26      	ldr	r3, [pc, #152]	@ (800173c <MX_TIM2_Init+0xe8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b25      	ldr	r3, [pc, #148]	@ (800173c <MX_TIM2_Init+0xe8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ac:	4823      	ldr	r0, [pc, #140]	@ (800173c <MX_TIM2_Init+0xe8>)
 80016ae:	f008 ffeb 	bl	800a688 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016b8:	f7ff fddb 	bl	8001272 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c6:	4619      	mov	r1, r3
 80016c8:	481c      	ldr	r0, [pc, #112]	@ (800173c <MX_TIM2_Init+0xe8>)
 80016ca:	f009 fd03 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016d4:	f7ff fdcd 	bl	8001272 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d8:	4818      	ldr	r0, [pc, #96]	@ (800173c <MX_TIM2_Init+0xe8>)
 80016da:	f009 f839 	bl	800a750 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016e4:	f7ff fdc5 	bl	8001272 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4811      	ldr	r0, [pc, #68]	@ (800173c <MX_TIM2_Init+0xe8>)
 80016f8:	f00a fa42 	bl	800bb80 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001702:	f7ff fdb6 	bl	8001272 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	@ 0x60
 8001708:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM2_Init+0xe8>)
 800171e:	f009 fbc5 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001728:	f7ff fda3 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM2_Init+0xe8>)
 800172e:	f000 f82b 	bl	8001788 <HAL_TIM_MspPostInit>

}
 8001732:	bf00      	nop
 8001734:	3738      	adds	r7, #56	@ 0x38
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200003f0 	.word	0x200003f0

08001740 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001750:	d113      	bne.n	800177a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_TIM_Base_MspInit+0x44>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_TIM_Base_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_TIM_Base_MspInit+0x44>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201c      	movs	r0, #28
 8001770:	f004 fd45 	bl	80061fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001774:	201c      	movs	r0, #28
 8001776:	f004 fd5e 	bl	8006236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a8:	d11c      	bne.n	80017e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <HAL_TIM_MspPostInit+0x64>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <HAL_TIM_MspPostInit+0x64>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <HAL_TIM_MspPostInit+0x64>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <HAL_TIM_MspPostInit+0x68>)
 80017e0:	f005 fc08 	bl	8006ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_USART2_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	@ (8001850 <MX_USART2_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_USART2_UART_Init+0x58>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_USART2_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USART2_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_USART2_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USART2_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_USART2_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USART2_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_USART2_UART_Init+0x58>)
 8001838:	f00a fa58 	bl	800bcec <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f7ff fd16 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200004ac 	.word	0x200004ac
 8001850:	40004400 	.word	0x40004400

08001854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0aa      	sub	sp, #168	@ 0xa8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2284      	movs	r2, #132	@ 0x84
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f00b f863 	bl	800c940 <memset>
  if(uartHandle->Instance==USART2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	@ (8001904 <HAL_UART_MspInit+0xb0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d13a      	bne.n	80018fa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001888:	2300      	movs	r3, #0
 800188a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4618      	mov	r0, r3
 8001892:	f007 fd9b 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800189c:	f7ff fce9 	bl	8001272 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_UART_MspInit+0xb4>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	4a18      	ldr	r2, [pc, #96]	@ (8001908 <HAL_UART_MspInit+0xb4>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <HAL_UART_MspInit+0xb4>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_UART_MspInit+0xb4>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <HAL_UART_MspInit+0xb4>)
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_UART_MspInit+0xb4>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80018d0:	2360      	movs	r3, #96	@ 0x60
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <HAL_UART_MspInit+0xb8>)
 80018f6:	f005 fb7d 	bl	8006ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	37a8      	adds	r7, #168	@ 0xa8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40004400 	.word	0x40004400
 8001908:	40023800 	.word	0x40023800
 800190c:	40020c00 	.word	0x40020c00

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001948 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001914:	f7ff fe8c 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800191a:	490d      	ldr	r1, [pc, #52]	@ (8001950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001930:	4c0a      	ldr	r4, [pc, #40]	@ (800195c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800193e:	f00b f807 	bl	800c950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7ff fb33 	bl	8000fac <main>
  bx  lr    
 8001946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001954:	0800e4a0 	.word	0x0800e4a0
  ldr r2, =_sbss
 8001958:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 800195c:	200009a8 	.word	0x200009a8

08001960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC_IRQHandler>

08001962 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800196c:	20c8      	movs	r0, #200	@ 0xc8
 800196e:	f002 fc4d 	bl	800420c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001972:	f000 fa79 	bl	8001e68 <ft5336_I2C_InitializeIfRequired>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80019a6:	2300      	movs	r3, #0
 80019a8:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80019aa:	f000 fa5d 	bl	8001e68 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e010      	b.n	80019d6 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	21a8      	movs	r1, #168	@ 0xa8
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fc08 	bl	80041d0 <TS_IO_Read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80019c4:	7b7b      	ldrb	r3, [r7, #13]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b51      	cmp	r3, #81	@ 0x51
 80019ca:	d101      	bne.n	80019d0 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	3301      	adds	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d802      	bhi.n	80019e2 <ft5336_ReadID+0x4e>
 80019dc:	7bbb      	ldrb	r3, [r7, #14]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0e8      	beq.n	80019b4 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80019e2:	7b7b      	ldrb	r3, [r7, #13]
 80019e4:	b2db      	uxtb	r3, r3
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fa44 	bl	8001e88 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f932 	bl	8001c6c <ft5336_TS_DisableIT>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2102      	movs	r1, #2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fbd3 	bl	80041d0 <TS_IO_Read>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d901      	bls.n	8001a46 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <ft5336_TS_DetectTouch+0x50>)
 8001a4c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001a4e:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <ft5336_TS_DetectTouch+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	b2db      	uxtb	r3, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000560 	.word	0x20000560

08001a64 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001a86:	4b6d      	ldr	r3, [pc, #436]	@ (8001c3c <ft5336_TS_GetXY+0x1d8>)
 8001a88:	789a      	ldrb	r2, [r3, #2]
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <ft5336_TS_GetXY+0x1d8>)
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	f080 80cf 	bcs.w	8001c32 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001a94:	4b69      	ldr	r3, [pc, #420]	@ (8001c3c <ft5336_TS_GetXY+0x1d8>)
 8001a96:	789b      	ldrb	r3, [r3, #2]
 8001a98:	2b09      	cmp	r3, #9
 8001a9a:	d871      	bhi.n	8001b80 <ft5336_TS_GetXY+0x11c>
 8001a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa4 <ft5336_TS_GetXY+0x40>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001acd 	.word	0x08001acd
 8001aa8:	08001adf 	.word	0x08001adf
 8001aac:	08001af1 	.word	0x08001af1
 8001ab0:	08001b03 	.word	0x08001b03
 8001ab4:	08001b15 	.word	0x08001b15
 8001ab8:	08001b27 	.word	0x08001b27
 8001abc:	08001b39 	.word	0x08001b39
 8001ac0:	08001b4b 	.word	0x08001b4b
 8001ac4:	08001b5d 	.word	0x08001b5d
 8001ac8:	08001b6f 	.word	0x08001b6f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001acc:	2304      	movs	r3, #4
 8001ace:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001ad8:	2305      	movs	r3, #5
 8001ada:	753b      	strb	r3, [r7, #20]
      break;
 8001adc:	e051      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001ae2:	2309      	movs	r3, #9
 8001ae4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001aea:	230b      	movs	r3, #11
 8001aec:	753b      	strb	r3, [r7, #20]
      break;
 8001aee:	e048      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001af0:	2310      	movs	r3, #16
 8001af2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001af4:	230f      	movs	r3, #15
 8001af6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001af8:	2312      	movs	r3, #18
 8001afa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001afc:	2311      	movs	r3, #17
 8001afe:	753b      	strb	r3, [r7, #20]
      break;
 8001b00:	e03f      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001b02:	2316      	movs	r3, #22
 8001b04:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001b06:	2315      	movs	r3, #21
 8001b08:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001b0a:	2318      	movs	r3, #24
 8001b0c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001b0e:	2317      	movs	r3, #23
 8001b10:	753b      	strb	r3, [r7, #20]
      break;
 8001b12:	e036      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001b14:	231c      	movs	r3, #28
 8001b16:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001b18:	231b      	movs	r3, #27
 8001b1a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001b1c:	231e      	movs	r3, #30
 8001b1e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001b20:	231d      	movs	r3, #29
 8001b22:	753b      	strb	r3, [r7, #20]
      break;
 8001b24:	e02d      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001b26:	2322      	movs	r3, #34	@ 0x22
 8001b28:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001b2a:	2321      	movs	r3, #33	@ 0x21
 8001b2c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001b2e:	2324      	movs	r3, #36	@ 0x24
 8001b30:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001b32:	2323      	movs	r3, #35	@ 0x23
 8001b34:	753b      	strb	r3, [r7, #20]
      break;
 8001b36:	e024      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001b38:	2328      	movs	r3, #40	@ 0x28
 8001b3a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001b3c:	2327      	movs	r3, #39	@ 0x27
 8001b3e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001b40:	232a      	movs	r3, #42	@ 0x2a
 8001b42:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001b44:	2329      	movs	r3, #41	@ 0x29
 8001b46:	753b      	strb	r3, [r7, #20]
      break;
 8001b48:	e01b      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001b4a:	232e      	movs	r3, #46	@ 0x2e
 8001b4c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001b4e:	232d      	movs	r3, #45	@ 0x2d
 8001b50:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001b52:	2330      	movs	r3, #48	@ 0x30
 8001b54:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001b56:	232f      	movs	r3, #47	@ 0x2f
 8001b58:	753b      	strb	r3, [r7, #20]
      break;
 8001b5a:	e012      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001b5c:	2334      	movs	r3, #52	@ 0x34
 8001b5e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001b60:	2333      	movs	r3, #51	@ 0x33
 8001b62:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001b64:	2336      	movs	r3, #54	@ 0x36
 8001b66:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001b68:	2335      	movs	r3, #53	@ 0x35
 8001b6a:	753b      	strb	r3, [r7, #20]
      break;
 8001b6c:	e009      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001b6e:	233a      	movs	r3, #58	@ 0x3a
 8001b70:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001b72:	2339      	movs	r3, #57	@ 0x39
 8001b74:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001b76:	233c      	movs	r3, #60	@ 0x3c
 8001b78:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001b7a:	233b      	movs	r3, #59	@ 0x3b
 8001b7c:	753b      	strb	r3, [r7, #20]
      break;
 8001b7e:	e000      	b.n	8001b82 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001b80:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001b82:	89fb      	ldrh	r3, [r7, #14]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	7dfa      	ldrb	r2, [r7, #23]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fb20 	bl	80041d0 <TS_IO_Read>
 8001b90:	4603      	mov	r3, r0
 8001b92:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001b9c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	7dba      	ldrb	r2, [r7, #22]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fb12 	bl	80041d0 <TS_IO_Read>
 8001bac:	4603      	mov	r3, r0
 8001bae:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001bca:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	7d7a      	ldrb	r2, [r7, #21]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 faf7 	bl	80041d0 <TS_IO_Read>
 8001be2:	4603      	mov	r3, r0
 8001be4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001be6:	7cfb      	ldrb	r3, [r7, #19]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001bee:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	7d3a      	ldrb	r2, [r7, #20]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fae9 	bl	80041d0 <TS_IO_Read>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001c02:	7cfb      	ldrb	r3, [r7, #19]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001c1c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <ft5336_TS_GetXY+0x1dc>)
 8001c20:	881a      	ldrh	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <ft5336_TS_GetXY+0x1d8>)
 8001c28:	789b      	ldrb	r3, [r3, #2]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <ft5336_TS_GetXY+0x1d8>)
 8001c30:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000560 	.word	0x20000560
 8001c40:	20000564 	.word	0x20000564

08001c44 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	21a4      	movs	r1, #164	@ 0xa4
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 fa9c 	bl	800419c <TS_IO_Write>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	21a4      	movs	r1, #164	@ 0xa4
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fa88 	bl	800419c <TS_IO_Write>
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	6039      	str	r1, [r7, #0]
 8001ccc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 fa79 	bl	80041d0 <TS_IO_Read>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	4603      	mov	r3, r0
 8001d02:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001d14:	4b4d      	ldr	r3, [pc, #308]	@ (8001e4c <ft5336_TS_GetTouchInfo+0x158>)
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	f080 8090 	bcs.w	8001e42 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d85d      	bhi.n	8001de4 <ft5336_TS_GetTouchInfo+0xf0>
 8001d28:	a201      	add	r2, pc, #4	@ (adr r2, 8001d30 <ft5336_TS_GetTouchInfo+0x3c>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d59 	.word	0x08001d59
 8001d34:	08001d67 	.word	0x08001d67
 8001d38:	08001d75 	.word	0x08001d75
 8001d3c:	08001d83 	.word	0x08001d83
 8001d40:	08001d91 	.word	0x08001d91
 8001d44:	08001d9f 	.word	0x08001d9f
 8001d48:	08001dad 	.word	0x08001dad
 8001d4c:	08001dbb 	.word	0x08001dbb
 8001d50:	08001dc9 	.word	0x08001dc9
 8001d54:	08001dd7 	.word	0x08001dd7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001d60:	2308      	movs	r3, #8
 8001d62:	757b      	strb	r3, [r7, #21]
      break;
 8001d64:	e03f      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001d66:	2309      	movs	r3, #9
 8001d68:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001d6a:	230d      	movs	r3, #13
 8001d6c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001d6e:	230e      	movs	r3, #14
 8001d70:	757b      	strb	r3, [r7, #21]
      break;
 8001d72:	e038      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001d74:	230f      	movs	r3, #15
 8001d76:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001d78:	2313      	movs	r3, #19
 8001d7a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001d7c:	2314      	movs	r3, #20
 8001d7e:	757b      	strb	r3, [r7, #21]
      break;
 8001d80:	e031      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001d82:	2315      	movs	r3, #21
 8001d84:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001d86:	2319      	movs	r3, #25
 8001d88:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001d8a:	231a      	movs	r3, #26
 8001d8c:	757b      	strb	r3, [r7, #21]
      break;
 8001d8e:	e02a      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001d90:	231b      	movs	r3, #27
 8001d92:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001d94:	231f      	movs	r3, #31
 8001d96:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	757b      	strb	r3, [r7, #21]
      break;
 8001d9c:	e023      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001d9e:	2321      	movs	r3, #33	@ 0x21
 8001da0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001da2:	2325      	movs	r3, #37	@ 0x25
 8001da4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001da6:	2326      	movs	r3, #38	@ 0x26
 8001da8:	757b      	strb	r3, [r7, #21]
      break;
 8001daa:	e01c      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001dac:	2327      	movs	r3, #39	@ 0x27
 8001dae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001db0:	232b      	movs	r3, #43	@ 0x2b
 8001db2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001db4:	232c      	movs	r3, #44	@ 0x2c
 8001db6:	757b      	strb	r3, [r7, #21]
      break;
 8001db8:	e015      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001dba:	232d      	movs	r3, #45	@ 0x2d
 8001dbc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001dbe:	2331      	movs	r3, #49	@ 0x31
 8001dc0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001dc2:	2332      	movs	r3, #50	@ 0x32
 8001dc4:	757b      	strb	r3, [r7, #21]
      break;
 8001dc6:	e00e      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001dc8:	2333      	movs	r3, #51	@ 0x33
 8001dca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001dcc:	2337      	movs	r3, #55	@ 0x37
 8001dce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001dd0:	2338      	movs	r3, #56	@ 0x38
 8001dd2:	757b      	strb	r3, [r7, #21]
      break;
 8001dd4:	e007      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001dd6:	2339      	movs	r3, #57	@ 0x39
 8001dd8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001dda:	233d      	movs	r3, #61	@ 0x3d
 8001ddc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001dde:	233e      	movs	r3, #62	@ 0x3e
 8001de0:	757b      	strb	r3, [r7, #21]
      break;
 8001de2:	e000      	b.n	8001de6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001de4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	7dfa      	ldrb	r2, [r7, #23]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 f9ee 	bl	80041d0 <TS_IO_Read>
 8001df4:	4603      	mov	r3, r0
 8001df6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001df8:	7d3b      	ldrb	r3, [r7, #20]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	119b      	asrs	r3, r3, #6
 8001dfe:	f003 0203 	and.w	r2, r3, #3
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	7dba      	ldrb	r2, [r7, #22]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 f9de 	bl	80041d0 <TS_IO_Read>
 8001e14:	4603      	mov	r3, r0
 8001e16:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001e18:	7d3b      	ldrb	r3, [r7, #20]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001e22:	89fb      	ldrh	r3, [r7, #14]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	7d7a      	ldrb	r2, [r7, #21]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 f9d0 	bl	80041d0 <TS_IO_Read>
 8001e30:	4603      	mov	r3, r0
 8001e32:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001e34:	7d3b      	ldrb	r3, [r7, #20]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	111b      	asrs	r3, r3, #4
 8001e3a:	f003 0204 	and.w	r2, r3, #4
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000560 	.word	0x20000560

08001e50 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000560 	.word	0x20000560

08001e68 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001e6c:	f7ff fff0 	bl	8001e50 <ft5336_Get_I2C_InitializedStatus>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d104      	bne.n	8001e80 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001e76:	f002 f987 	bl	8004188 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001e7a:	4b02      	ldr	r3, [pc, #8]	@ (8001e84 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
  }
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000560 	.word	0x20000560

08001e88 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <Powerstep01_AttachErrorHandler+0x1c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000570 	.word	0x20000570

08001ec4 <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <Powerstep01_AttachFlagInterrupt+0x1c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	2000056c 	.word	0x2000056c

08001ee4 <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <Powerstep01_AttachBusyInterrupt+0x1c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000568 	.word	0x20000568

08001f04 <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <Powerstep01_ReadId+0x14>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000582 	.word	0x20000582

08001f1c <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 8001f24:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <Powerstep01_Init+0x84>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fc82 	bl	8005834 <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 8001f30:	f003 fdac 	bl	8005a8c <Powerstep01_Board_SpiInit>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 8001f3a:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8001f3e:	f001 f90b 	bl	8003158 <Powerstep01_ErrorHandler>
  } 
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 8001f42:	f003 fd15 	bl	8005970 <Powerstep01_Board_StepClockInit>
  
  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <Powerstep01_Init+0x84>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fd7d 	bl	8005a4c <Powerstep01_Board_ReleaseReset>
  
  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f003 fc50 	bl	80057f8 <Powerstep01_Board_Delay>

  if (pInit == 0)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h 
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <Powerstep01_Init+0x84>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 f9e7 	bl	8003338 <Powerstep01_SetRegisterToPredefinedValues>
 8001f6a:	e006      	b.n	8001f7a <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <Powerstep01_Init+0x84>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 fb31 	bl	80035dc <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <Powerstep01_Init+0x84>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fa00 	bl	8002386 <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 8001f86:	f000 fb8f 	bl	80026a8 <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <Powerstep01_Init+0x84>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <Powerstep01_Init+0x84>)
 8001f94:	801a      	strh	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000582 	.word	0x20000582

08001fa4 <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 8001fa8:	f003 fde4 	bl	8005b74 <Powerstep01_Board_BUSY_PIN_GetState>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 8001fb6:	2300      	movs	r3, #0
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 8001fc0:	f003 fde4 	bl	8005b8c <Powerstep01_Board_FLAG_PIN_GetState>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 8001fce:	2300      	movs	r3, #0
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 8001fe4:	4b67      	ldr	r3, [pc, #412]	@ (8002184 <Powerstep01_CmdGetParam+0x1b0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f080 80c4 	bcs.w	800217a <Powerstep01_CmdGetParam+0x1a6>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001ff6:	4b63      	ldr	r3, [pc, #396]	@ (8002184 <Powerstep01_CmdGetParam+0x1b0>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 8002006:	2300      	movs	r3, #0
 8002008:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 800200a:	4b5f      	ldr	r3, [pc, #380]	@ (8002188 <Powerstep01_CmdGetParam+0x1b4>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8002016:	f003 fc03 	bl	8005820 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 800201a:	2300      	movs	r3, #0
 800201c:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e030      	b.n	8002086 <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8002024:	4a59      	ldr	r2, [pc, #356]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 800202e:	4a57      	ldr	r2, [pc, #348]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	3301      	adds	r3, #1
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800203a:	4a54      	ldr	r2, [pc, #336]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	3302      	adds	r3, #2
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8002046:	4a51      	ldr	r2, [pc, #324]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	3303      	adds	r3, #3
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 8002052:	4a4f      	ldr	r2, [pc, #316]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 800205c:	4a4c      	ldr	r2, [pc, #304]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	3301      	adds	r3, #1
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 8002068:	4a49      	ldr	r2, [pc, #292]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	3302      	adds	r3, #2
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;    
 8002074:	4a46      	ldr	r2, [pc, #280]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	3303      	adds	r3, #3
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	3301      	adds	r3, #1
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <Powerstep01_CmdGetParam+0x1b0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4293      	cmp	r3, r2
 8002092:	d3c7      	bcc.n	8002024 <Powerstep01_CmdGetParam+0x50>
      }
      switch (param)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b1b      	cmp	r3, #27
 8002098:	bf8c      	ite	hi
 800209a:	2301      	movhi	r3, #1
 800209c:	2300      	movls	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d12c      	bne.n	80020fe <Powerstep01_CmdGetParam+0x12a>
 80020a4:	2201      	movs	r2, #1
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	409a      	lsls	r2, r3
 80020aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <Powerstep01_CmdGetParam+0x1c0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d113      	bne.n	80020e4 <Powerstep01_CmdGetParam+0x110>
 80020bc:	f002 031a 	and.w	r3, r2, #26
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d017      	beq.n	80020fe <Powerstep01_CmdGetParam+0x12a>
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	7b7b      	ldrb	r3, [r7, #13]
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	b2d1      	uxtb	r1, r2
 80020da:	4a2c      	ldr	r2, [pc, #176]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 80020dc:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 80020de:	2303      	movs	r3, #3
 80020e0:	73fb      	strb	r3, [r7, #15]
          break;
 80020e2:	e018      	b.n	8002116 <Powerstep01_CmdGetParam+0x142>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	7b7b      	ldrb	r3, [r7, #13]
 80020ea:	f042 0220 	orr.w	r2, r2, #32
 80020ee:	b2d1      	uxtb	r1, r2
 80020f0:	4a26      	ldr	r2, [pc, #152]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 80020f2:	4413      	add	r3, r2
 80020f4:	460a      	mov	r2, r1
 80020f6:	705a      	strb	r2, [r3, #1]
          maxArgumentNbBytes = 2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	73fb      	strb	r3, [r7, #15]
          break;
 80020fc:	e00b      	b.n	8002116 <Powerstep01_CmdGetParam+0x142>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	7b7b      	ldrb	r3, [r7, #13]
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d1      	uxtb	r1, r2
 800210a:	4a20      	ldr	r2, [pc, #128]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 800210c:	4413      	add	r3, r2
 800210e:	460a      	mov	r2, r1
 8002110:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8002116:	f003 fb7a 	bl	800580e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 800211a:	2301      	movs	r3, #1
 800211c:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <Powerstep01_CmdGetParam+0x1b4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	f47f af70 	bne.w	800200a <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	f1c3 0303 	rsb	r3, r3, #3
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e00c      	b.n	800214e <Powerstep01_CmdGetParam+0x17a>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4a15      	ldr	r2, [pc, #84]	@ (800218c <Powerstep01_CmdGetParam+0x1b8>)
 8002138:	441a      	add	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4914      	ldr	r1, [pc, #80]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 800213e:	440b      	add	r3, r1
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f001 fc46 	bl	80039d4 <Powerstep01_WriteBytes>
         loop++)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	3301      	adds	r3, #1
 800214c:	613b      	str	r3, [r7, #16]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d9ef      	bls.n	8002134 <Powerstep01_CmdGetParam+0x160>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 8002158:	4413      	add	r3, r2
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	041a      	lsls	r2, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 800215e:	7b7b      	ldrb	r3, [r7, #13]
 8002160:	490b      	ldr	r1, [pc, #44]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 8002162:	440b      	add	r3, r1
 8002164:	789b      	ldrb	r3, [r3, #2]
 8002166:	021b      	lsls	r3, r3, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8002168:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);    
 800216a:	7b7a      	ldrb	r2, [r7, #13]
 800216c:	4908      	ldr	r1, [pc, #32]	@ (8002190 <Powerstep01_CmdGetParam+0x1bc>)
 800216e:	440a      	add	r2, r1
 8002170:	78d2      	ldrb	r2, [r2, #3]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8002176:	f003 fb53 	bl	8005820 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 800217a:	697b      	ldr	r3, [r7, #20]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000574 	.word	0x20000574
 8002188:	20000580 	.word	0x20000580
 800218c:	20000578 	.word	0x20000578
 8002190:	2000057c 	.word	0x2000057c
 8002194:	0d2021e4 	.word	0x0d2021e4

08002198 <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 80021a6:	4b45      	ldr	r3, [pc, #276]	@ (80022bc <Powerstep01_CmdGetStatus+0x124>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	79fa      	ldrb	r2, [r7, #7]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d27e      	bcs.n	80022b0 <Powerstep01_CmdGetStatus+0x118>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80021b2:	4b42      	ldr	r3, [pc, #264]	@ (80022bc <Powerstep01_CmdGetStatus+0x124>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 80021c6:	4b3e      	ldr	r3, [pc, #248]	@ (80022c0 <Powerstep01_CmdGetStatus+0x128>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <Powerstep01_CmdGetStatus+0x42>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80021d2:	f003 fb25 	bl	8005820 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e030      	b.n	8002242 <Powerstep01_CmdGetStatus+0xaa>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80021e0:	4a38      	ldr	r2, [pc, #224]	@ (80022c4 <Powerstep01_CmdGetStatus+0x12c>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80021ea:	4a36      	ldr	r2, [pc, #216]	@ (80022c4 <Powerstep01_CmdGetStatus+0x12c>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	3301      	adds	r3, #1
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80021f6:	4a33      	ldr	r2, [pc, #204]	@ (80022c4 <Powerstep01_CmdGetStatus+0x12c>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	3302      	adds	r3, #2
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8002202:	4a30      	ldr	r2, [pc, #192]	@ (80022c4 <Powerstep01_CmdGetStatus+0x12c>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	3303      	adds	r3, #3
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 800220e:	4a2e      	ldr	r2, [pc, #184]	@ (80022c8 <Powerstep01_CmdGetStatus+0x130>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 8002218:	4a2b      	ldr	r2, [pc, #172]	@ (80022c8 <Powerstep01_CmdGetStatus+0x130>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	3301      	adds	r3, #1
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 8002224:	4a28      	ldr	r2, [pc, #160]	@ (80022c8 <Powerstep01_CmdGetStatus+0x130>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	3302      	adds	r3, #2
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;       
 8002230:	4a25      	ldr	r2, [pc, #148]	@ (80022c8 <Powerstep01_CmdGetStatus+0x130>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	3303      	adds	r3, #3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	3301      	adds	r3, #1
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <Powerstep01_CmdGetStatus+0x124>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4293      	cmp	r3, r2
 800224e:	d3c7      	bcc.n	80021e0 <Powerstep01_CmdGetStatus+0x48>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <Powerstep01_CmdGetStatus+0x12c>)
 8002254:	21d0      	movs	r1, #208	@ 0xd0
 8002256:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8002258:	f003 fad9 	bl	800580e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 8002260:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <Powerstep01_CmdGetStatus+0x128>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ad      	bne.n	80021c6 <Powerstep01_CmdGetStatus+0x2e>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	e00c      	b.n	800228a <Powerstep01_CmdGetStatus+0xf2>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <Powerstep01_CmdGetStatus+0x12c>)
 8002274:	441a      	add	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4913      	ldr	r1, [pc, #76]	@ (80022c8 <Powerstep01_CmdGetStatus+0x130>)
 800227a:	440b      	add	r3, r1
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f001 fba8 	bl	80039d4 <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	3301      	adds	r3, #1
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d9ef      	bls.n	8002270 <Powerstep01_CmdGetStatus+0xd8>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8002290:	7bbb      	ldrb	r3, [r7, #14]
 8002292:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <Powerstep01_CmdGetStatus+0x130>)
 8002294:	4413      	add	r3, r2
 8002296:	785b      	ldrb	r3, [r3, #1]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	b21a      	sxth	r2, r3
 800229c:	7bbb      	ldrb	r3, [r7, #14]
 800229e:	490a      	ldr	r1, [pc, #40]	@ (80022c8 <Powerstep01_CmdGetStatus+0x130>)
 80022a0:	440b      	add	r3, r1
 80022a2:	789b      	ldrb	r3, [r3, #2]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 80022ac:	f003 fab8 	bl	8005820 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 80022b0:	8afb      	ldrh	r3, [r7, #22]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000574 	.word	0x20000574
 80022c0:	20000580 	.word	0x20000580
 80022c4:	20000578 	.word	0x20000578
 80022c8:	2000057c 	.word	0x2000057c

080022cc <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2200      	movs	r2, #0
 80022da:	2170      	movs	r1, #112	@ 0x70
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 ff67 	bl	80031b0 <Powerstep01_SendCommand>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2178      	movs	r1, #120	@ 0x78
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 ff58 	bl	80031b0 <Powerstep01_SendCommand>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2160      	movs	r1, #96	@ 0x60
 800231a:	4618      	mov	r0, r3
 800231c:	f000 ff48 	bl	80031b0 <Powerstep01_SendCommand>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	603a      	str	r2, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	460b      	mov	r3, r1
 8002336:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800233e:	b2d9      	uxtb	r1, r3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ff33 	bl	80031b0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	460b      	mov	r3, r1
 8002360:	71bb      	strb	r3, [r7, #6]
 8002362:	4613      	mov	r3, r2
 8002364:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 8002366:	79ba      	ldrb	r2, [r7, #6]
 8002368:	797b      	ldrb	r3, [r7, #5]
 800236a:	4313      	orrs	r3, r2
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f063 037d 	orn	r3, r3, #125	@ 0x7d
 8002372:	b2d9      	uxtb	r1, r3
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 ff19 	bl	80031b0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2200      	movs	r2, #0
 8002394:	21a8      	movs	r1, #168	@ 0xa8
 8002396:	4618      	mov	r0, r3
 8002398:	f000 ff0a 	bl	80031b0 <Powerstep01_SendCommand>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2200      	movs	r2, #0
 80023b2:	21b8      	movs	r1, #184	@ 0xb8
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fefb 	bl	80031b0 <Powerstep01_SendCommand>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	603a      	str	r2, [r7, #0]
 80023cc:	71fb      	strb	r3, [r7, #7]
 80023ce:	460b      	mov	r3, r1
 80023d0:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 80023d2:	79bb      	ldrb	r3, [r7, #6]
 80023d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023d8:	b2d9      	uxtb	r1, r3
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fee6 	bl	80031b0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fed7 	bl	80031b0 <Powerstep01_SendCommand>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	460b      	mov	r3, r1
 8002416:	71bb      	strb	r3, [r7, #6]
 8002418:	4613      	mov	r3, r2
 800241a:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 800241c:	79ba      	ldrb	r2, [r7, #6]
 800241e:	797b      	ldrb	r3, [r7, #5]
 8002420:	4313      	orrs	r3, r2
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f063 036d 	orn	r3, r3, #109	@ 0x6d
 8002428:	b2d9      	uxtb	r1, r3
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2200      	movs	r2, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f000 febe 	bl	80031b0 <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2200      	movs	r2, #0
 800244a:	21c0      	movs	r1, #192	@ 0xc0
 800244c:	4618      	mov	r0, r3
 800244e:	f000 feaf 	bl	80031b0 <Powerstep01_SendCommand>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2200      	movs	r2, #0
 8002468:	21d8      	movs	r1, #216	@ 0xd8
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fea0 	bl	80031b0 <Powerstep01_SendCommand>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	603a      	str	r2, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
 8002484:	460b      	mov	r3, r1
 8002486:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800248e:	b2d9      	uxtb	r1, r3
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fe8b 	bl	80031b0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 80024b2:	4b5e      	ldr	r3, [pc, #376]	@ (800262c <Powerstep01_CmdSetParam+0x188>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	f080 80b2 	bcs.w	8002624 <Powerstep01_CmdSetParam+0x180>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80024c4:	4b59      	ldr	r3, [pc, #356]	@ (800262c <Powerstep01_CmdSetParam+0x188>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80024d8:	4b55      	ldr	r3, [pc, #340]	@ (8002630 <Powerstep01_CmdSetParam+0x18c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80024de:	7cbb      	ldrb	r3, [r7, #18]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80024e4:	f003 f99c 	bl	8005820 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e019      	b.n	8002526 <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80024f2:	4a50      	ldr	r2, [pc, #320]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80024fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4413      	add	r3, r2
 8002502:	3301      	adds	r3, #1
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8002508:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	4413      	add	r3, r2
 800250e:	3302      	adds	r3, #2
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8002514:	4a47      	ldr	r2, [pc, #284]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	4413      	add	r3, r2
 800251a:	3303      	adds	r3, #3
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <Powerstep01_CmdSetParam+0x188>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	4293      	cmp	r3, r2
 8002532:	d3de      	bcc.n	80024f2 <Powerstep01_CmdSetParam+0x4e>
      }
      switch (param)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b1a      	cmp	r3, #26
 8002538:	bf8c      	ite	hi
 800253a:	2301      	movhi	r3, #1
 800253c:	2300      	movls	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d13e      	bne.n	80025c2 <Powerstep01_CmdSetParam+0x11e>
 8002544:	2201      	movs	r2, #1
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	409a      	lsls	r2, r3
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <Powerstep01_CmdSetParam+0x194>)
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d120      	bne.n	800259e <Powerstep01_CmdSetParam+0xfa>
 800255c:	f002 030a 	and.w	r3, r2, #10
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d029      	beq.n	80025c2 <Powerstep01_CmdSetParam+0x11e>
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800256e:	7c7b      	ldrb	r3, [r7, #17]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	b2d1      	uxtb	r1, r2
 8002574:	4a2f      	ldr	r2, [pc, #188]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 8002576:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0c1a      	lsrs	r2, r3, #16
 800257c:	7c7b      	ldrb	r3, [r7, #17]
 800257e:	b2d1      	uxtb	r1, r2
 8002580:	4a2c      	ldr	r2, [pc, #176]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 8002582:	4413      	add	r3, r2
 8002584:	460a      	mov	r2, r1
 8002586:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0a1a      	lsrs	r2, r3, #8
 800258c:	7c7b      	ldrb	r3, [r7, #17]
 800258e:	b2d1      	uxtb	r1, r2
 8002590:	4a28      	ldr	r2, [pc, #160]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 8002592:	4413      	add	r3, r2
 8002594:	460a      	mov	r2, r1
 8002596:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 3;
 8002598:	2303      	movs	r3, #3
 800259a:	74fb      	strb	r3, [r7, #19]
          break;
 800259c:	e01a      	b.n	80025d4 <Powerstep01_CmdSetParam+0x130>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800259e:	7c7b      	ldrb	r3, [r7, #17]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	b2d1      	uxtb	r1, r2
 80025a4:	4a23      	ldr	r2, [pc, #140]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 80025a6:	4413      	add	r3, r2
 80025a8:	460a      	mov	r2, r1
 80025aa:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0a1a      	lsrs	r2, r3, #8
 80025b0:	7c7b      	ldrb	r3, [r7, #17]
 80025b2:	b2d1      	uxtb	r1, r2
 80025b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 80025b6:	4413      	add	r3, r2
 80025b8:	460a      	mov	r2, r1
 80025ba:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 2;
 80025bc:	2302      	movs	r3, #2
 80025be:	74fb      	strb	r3, [r7, #19]
          break;
 80025c0:	e008      	b.n	80025d4 <Powerstep01_CmdSetParam+0x130>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 80025c2:	7c7b      	ldrb	r3, [r7, #17]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	b2d1      	uxtb	r1, r2
 80025c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 80025ca:	4413      	add	r3, r2
 80025cc:	460a      	mov	r2, r1
 80025ce:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 80025d0:	2301      	movs	r3, #1
 80025d2:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80025d4:	7c7b      	ldrb	r3, [r7, #17]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	b2d1      	uxtb	r1, r2
 80025da:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 80025dc:	4413      	add	r3, r2
 80025de:	460a      	mov	r2, r1
 80025e0:	70da      	strb	r2, [r3, #3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80025e2:	f003 f914 	bl	800580e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <Powerstep01_CmdSetParam+0x18c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f af71 	bne.w	80024d8 <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	f1c3 0303 	rsb	r3, r3, #3
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e00c      	b.n	800261a <Powerstep01_CmdSetParam+0x176>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4a0c      	ldr	r2, [pc, #48]	@ (8002634 <Powerstep01_CmdSetParam+0x190>)
 8002604:	441a      	add	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	490c      	ldr	r1, [pc, #48]	@ (800263c <Powerstep01_CmdSetParam+0x198>)
 800260a:	440b      	add	r3, r1
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f001 f9e0 	bl	80039d4 <Powerstep01_WriteBytes>
         loop++)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d9ef      	bls.n	8002600 <Powerstep01_CmdSetParam+0x15c>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8002620:	f003 f8fe 	bl	8005820 <Powerstep01_Board_EnableIrq>
  }
}
 8002624:	bf00      	nop
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000574 	.word	0x20000574
 8002630:	20000580 	.word	0x20000580
 8002634:	20000578 	.word	0x20000578
 8002638:	052021e4 	.word	0x052021e4
 800263c:	2000057c 	.word	0x2000057c

08002640 <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2200      	movs	r2, #0
 800264e:	21a0      	movs	r1, #160	@ 0xa0
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fdad 	bl	80031b0 <Powerstep01_SendCommand>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2200      	movs	r2, #0
 800266c:	21b0      	movs	r1, #176	@ 0xb0
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fd9e 	bl	80031b0 <Powerstep01_SendCommand>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	460a      	mov	r2, r1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	4613      	mov	r3, r2
 800268a:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 8002692:	b2d9      	uxtb	r1, r3
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	2200      	movs	r2, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fd89 	bl	80031b0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	71fb      	strb	r3, [r7, #7]
 80026b2:	e028      	b.n	8002706 <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	4a23      	ldr	r2, [pc, #140]	@ (8002744 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 80026b8:	21d0      	movs	r1, #208	@ 0xd0
 80026ba:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 80026c0:	4413      	add	r3, r2
 80026c2:	2200      	movs	r2, #0
 80026c4:	705a      	strb	r2, [r3, #1]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 80026ca:	4413      	add	r3, r2
 80026cc:	2200      	movs	r2, #0
 80026ce:	709a      	strb	r2, [r3, #2]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002744 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 80026d4:	4413      	add	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	70da      	strb	r2, [r3, #3]
     spiRxBursts[0][loop] = 0;
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002748 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80026de:	2100      	movs	r1, #0
 80026e0:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4a18      	ldr	r2, [pc, #96]	@ (8002748 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80026e6:	4413      	add	r3, r2
 80026e8:	2200      	movs	r2, #0
 80026ea:	705a      	strb	r2, [r3, #1]
     spiRxBursts[2][loop] = 0;
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80026f0:	4413      	add	r3, r2
 80026f2:	2200      	movs	r2, #0
 80026f4:	709a      	strb	r2, [r3, #2]
     spiRxBursts[3][loop] = 0;
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4a13      	ldr	r2, [pc, #76]	@ (8002748 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80026fa:	4413      	add	r3, r2
 80026fc:	2200      	movs	r2, #0
 80026fe:	70da      	strb	r2, [r3, #3]
  for (loop = 0; loop < numberOfDevices; loop++)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	3301      	adds	r3, #1
 8002704:	71fb      	strb	r3, [r7, #7]
 8002706:	4b11      	ldr	r3, [pc, #68]	@ (800274c <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	429a      	cmp	r2, r3
 8002710:	d3d0      	bcc.n	80026b4 <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0; 
 8002712:	2300      	movs	r3, #0
 8002714:	71fb      	strb	r3, [r7, #7]
 8002716:	e00c      	b.n	8002732 <Powerstep01_FetchAndClearAllStatus+0x8a>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 800271c:	441a      	add	r2, r3
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	4909      	ldr	r1, [pc, #36]	@ (8002748 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8002722:	440b      	add	r3, r1
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f001 f954 	bl	80039d4 <Powerstep01_WriteBytes>
       loop++)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	3301      	adds	r3, #1
 8002730:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d9ef      	bls.n	8002718 <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000578 	.word	0x20000578
 8002748:	2000057c 	.word	0x2000057c
 800274c:	20000574 	.word	0x20000574

08002750 <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <Powerstep01_GetFetchedStatus+0x54>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	79fa      	ldrb	r2, [r7, #7]
 8002766:	429a      	cmp	r2, r3
 8002768:	d215      	bcs.n	8002796 <Powerstep01_GetFetchedStatus+0x46>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <Powerstep01_GetFetchedStatus+0x54>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 800277a:	7b7b      	ldrb	r3, [r7, #13]
 800277c:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <Powerstep01_GetFetchedStatus+0x58>)
 800277e:	4413      	add	r3, r2
 8002780:	785b      	ldrb	r3, [r3, #1]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b21a      	sxth	r2, r3
 8002786:	7b7b      	ldrb	r3, [r7, #13]
 8002788:	4907      	ldr	r1, [pc, #28]	@ (80027a8 <Powerstep01_GetFetchedStatus+0x58>)
 800278a:	440b      	add	r3, r1
 800278c:	789b      	ldrb	r3, [r3, #2]
 800278e:	b21b      	sxth	r3, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	b21b      	sxth	r3, r3
 8002794:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 8002796:	89fb      	ldrh	r3, [r7, #14]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20000574 	.word	0x20000574
 80027a8:	2000057c 	.word	0x2000057c

080027ac <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 80027b0:	4b02      	ldr	r3, [pc, #8]	@ (80027bc <Powerstep01_GetMotorHandle+0x10>)
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	20000034 	.word	0x20000034

080027c0 <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 80027c4:	4b02      	ldr	r3, [pc, #8]	@ (80027d0 <Powerstep01_GetFwVersion+0x10>)
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	00010500 	.word	0x00010500

080027d4 <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2103      	movs	r1, #3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fbf6 	bl	8001fd4 <Powerstep01_CmdGetParam>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fc7e 	bl	80030ec <Powerstep01_ConvertPosition>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 8002800:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <Powerstep01_GetNbDevices+0x14>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	20000574 	.word	0x20000574

08002814 <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2116      	movs	r1, #22
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fbd5 	bl	8001fd4 <Powerstep01_CmdGetParam>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fbc7 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002846:	60f8      	str	r0, [r7, #12]
  float value;
  switch (param)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	3b01      	subs	r3, #1
 800284c:	2b14      	cmp	r3, #20
 800284e:	f200 8090 	bhi.w	8002972 <Powerstep01_GetAnalogValue+0x15e>
 8002852:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <Powerstep01_GetAnalogValue+0x44>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	080028ad 	.word	0x080028ad
 800285c:	08002973 	.word	0x08002973
 8002860:	080028ad 	.word	0x080028ad
 8002864:	080028cd 	.word	0x080028cd
 8002868:	080028c1 	.word	0x080028c1
 800286c:	080028c1 	.word	0x080028c1
 8002870:	080028d9 	.word	0x080028d9
 8002874:	080028e5 	.word	0x080028e5
 8002878:	08002931 	.word	0x08002931
 800287c:	08002931 	.word	0x08002931
 8002880:	08002931 	.word	0x08002931
 8002884:	08002931 	.word	0x08002931
 8002888:	0800290d 	.word	0x0800290d
 800288c:	0800294f 	.word	0x0800294f
 8002890:	08002955 	.word	0x08002955
 8002894:	08002955 	.word	0x08002955
 8002898:	08002919 	.word	0x08002919
 800289c:	08002973 	.word	0x08002973
 80028a0:	08002925 	.word	0x08002925
 80028a4:	08002925 	.word	0x08002925
 80028a8:	080028f9 	.word	0x080028f9
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fc1d 	bl	80030ec <Powerstep01_ConvertPosition>
 80028b2:	ee07 0a90 	vmov	s15, r0
 80028b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ba:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 80028be:	e061      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f001 f8c9 	bl	8003a58 <Powerstep01_AccDec_RegVal_to_Steps_s2>
 80028c6:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80028ca:	e05b      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f001 fa45 	bl	8003d5c <Powerstep01_Speed_RegVal_to_Steps_s>
 80028d2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80028d6:	e055      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f001 f9f7 	bl	8003ccc <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 80028de:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80028e2:	e04f      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f001 fa1f 	bl	8003d30 <Powerstep01_MinSpd_RegVal_to_Steps_s>
 80028f2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 80028f6:	e045      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028fe:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f001 f90b 	bl	8003b1c <Powerstep01_FSSpd_RegVal_to_Steps_s>
 8002906:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800290a:	e03b      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f001 f93d 	bl	8003b8c <Powerstep01_IntSpd_RegVal_to_Steps_s>
 8002912:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002916:	e035      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f001 f96f 	bl	8003bfc <Powerstep01_KTherm_RegVal_to_Comp>
 800291e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002922:	e02f      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f001 fa53 	bl	8003dd0 <Powerstep01_StallOcd_RegVal_to_Th>
 800292a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800292e:	e029      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <Powerstep01_GetAnalogValue+0x12e>
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f001 f998 	bl	8003c6c <Powerstep01_Kval_RegVal_to_Perc>
 800293c:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 8002940:	e020      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f001 fa80 	bl	8003e48 <Powerstep01_Tval_RegVal_to_RefVoltage>
 8002948:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800294c:	e01a      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d016      	beq.n	8002982 <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <Powerstep01_GetAnalogValue+0x152>
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f001 f8b0 	bl	8003ac0 <Powerstep01_BEMFslope_RegVal_to_Perc>
 8002960:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 8002964:	e00e      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f001 faa3 	bl	8003eb2 <Powerstep01_Tmin_RegVal_to_Time>
 800296c:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002970:	e008      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297c:	edc7 7a05 	vstr	s15, [r7, #20]
 8002980:	e000      	b.n	8002984 <Powerstep01_GetAnalogValue+0x170>
        break;
 8002982:	bf00      	nop
  }
  return value;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	ee07 3a90 	vmov	s15, r3
}
 800298a:	eeb0 0a67 	vmov.f32	s0, s15
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fb16 	bl	8001fd4 <Powerstep01_CmdGetParam>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fb9e 	bl	80030ec <Powerstep01_ConvertPosition>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fbe6 	bl	8002198 <Powerstep01_CmdGetStatus>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 80029da:	2300      	movs	r3, #0
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	603a      	str	r2, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	460b      	mov	r3, r1
 80029f2:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 80029f4:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <Powerstep01_QueueCommands+0xd8>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	79fa      	ldrb	r2, [r7, #7]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d257      	bcs.n	8002ab0 <Powerstep01_QueueCommands+0xcc>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002a00:	4b2e      	ldr	r3, [pc, #184]	@ (8002abc <Powerstep01_QueueCommands+0xd8>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 8002a10:	79bb      	ldrb	r3, [r7, #6]
 8002a12:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8002a16:	2b8a      	cmp	r3, #138	@ 0x8a
 8002a18:	d01a      	beq.n	8002a50 <Powerstep01_QueueCommands+0x6c>
 8002a1a:	2b8a      	cmp	r3, #138	@ 0x8a
 8002a1c:	dc35      	bgt.n	8002a8a <Powerstep01_QueueCommands+0xa6>
 8002a1e:	2b82      	cmp	r3, #130	@ 0x82
 8002a20:	d016      	beq.n	8002a50 <Powerstep01_QueueCommands+0x6c>
 8002a22:	2b82      	cmp	r3, #130	@ 0x82
 8002a24:	dc31      	bgt.n	8002a8a <Powerstep01_QueueCommands+0xa6>
 8002a26:	2b40      	cmp	r3, #64	@ 0x40
 8002a28:	d012      	beq.n	8002a50 <Powerstep01_QueueCommands+0x6c>
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	db2d      	blt.n	8002a8a <Powerstep01_QueueCommands+0xa6>
 8002a2e:	2b68      	cmp	r3, #104	@ 0x68
 8002a30:	dc2b      	bgt.n	8002a8a <Powerstep01_QueueCommands+0xa6>
 8002a32:	2b50      	cmp	r3, #80	@ 0x50
 8002a34:	db29      	blt.n	8002a8a <Powerstep01_QueueCommands+0xa6>
 8002a36:	3b50      	subs	r3, #80	@ 0x50
 8002a38:	4a21      	ldr	r2, [pc, #132]	@ (8002ac0 <Powerstep01_QueueCommands+0xdc>)
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01c      	beq.n	8002a8a <Powerstep01_QueueCommands+0xa6>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	491c      	ldr	r1, [pc, #112]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002a54:	79ba      	ldrb	r2, [r7, #6]
 8002a56:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	141a      	asrs	r2, r3, #16
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	b2d1      	uxtb	r1, r2
 8002a60:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002a62:	4413      	add	r3, r2
 8002a64:	460a      	mov	r2, r1
 8002a66:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	121a      	asrs	r2, r3, #8
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	b2d1      	uxtb	r1, r2
 8002a70:	4a14      	ldr	r2, [pc, #80]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002a72:	4413      	add	r3, r2
 8002a74:	460a      	mov	r2, r1
 8002a76:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	b2d1      	uxtb	r1, r2
 8002a7e:	4a11      	ldr	r2, [pc, #68]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002a80:	4413      	add	r3, r2
 8002a82:	460a      	mov	r2, r1
 8002a84:	70da      	strb	r2, [r3, #3]
       break;
 8002a86:	bf00      	nop
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[3][spiIndex] = command;
    }
  }
}
 8002a88:	e012      	b.n	8002ab0 <Powerstep01_QueueCommands+0xcc>
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002a8e:	2100      	movs	r1, #0
 8002a90:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002a96:	4413      	add	r3, r2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002aa0:	4413      	add	r3, r2
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = command;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	4a06      	ldr	r2, [pc, #24]	@ (8002ac4 <Powerstep01_QueueCommands+0xe0>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	79ba      	ldrb	r2, [r7, #6]
 8002aae:	70da      	strb	r2, [r3, #3]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20000574 	.word	0x20000574
 8002ac0:	01010001 	.word	0x01010001
 8002ac4:	20000578 	.word	0x20000578

08002ac8 <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	211b      	movs	r1, #27
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fa7c 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002adc:	4603      	mov	r3, r0
 8002ade:	b29b      	uxth	r3, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 ffa9 	bl	8005a4c <Powerstep01_Board_ReleaseReset>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 ffac 	bl	8005a6c <Powerstep01_Board_Reset>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	460a      	mov	r2, r1
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8002b2c:	79bb      	ldrb	r3, [r7, #6]
 8002b2e:	2b07      	cmp	r3, #7
 8002b30:	d82a      	bhi.n	8002b88 <Powerstep01_SelectStepMode+0x6c>
 8002b32:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <Powerstep01_SelectStepMode+0x1c>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b59 	.word	0x08002b59
 8002b3c:	08002b5f 	.word	0x08002b5f
 8002b40:	08002b65 	.word	0x08002b65
 8002b44:	08002b6b 	.word	0x08002b6b
 8002b48:	08002b71 	.word	0x08002b71
 8002b4c:	08002b77 	.word	0x08002b77
 8002b50:	08002b7d 	.word	0x08002b7d
 8002b54:	08002b83 	.word	0x08002b83
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e016      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      break;    
 8002b62:	e013      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 8002b64:	2302      	movs	r3, #2
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;        
 8002b68:	e010      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6e:	e00d      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 8002b70:	2304      	movs	r3, #4
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;        
 8002b74:	e00a      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 8002b76:	2305      	movs	r3, #5
 8002b78:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7a:	e007      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 8002b7c:	2306      	movs	r3, #6
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e004      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 8002b82:	2307      	movs	r3, #7
 8002b84:	73fb      	strb	r3, [r7, #15]
      break;
 8002b86:	e001      	b.n	8002b8c <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e01c      	b.n	8002bc6 <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fbf9 	bl	8002386 <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	2116      	movs	r1, #22
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fa1b 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 8002ba8:	7bba      	ldrb	r2, [r7, #14]
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2116      	movs	r1, #22
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fc74 	bl	80024a4 <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fc4b 	bl	800245a <Powerstep01_CmdResetPos>
  
  return TRUE;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop

08002bd0 <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0; 
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	e00c      	b.n	8002bf6 <Powerstep01_SendQueuedCommands+0x26>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <Powerstep01_SendQueuedCommands+0x38>)
 8002be0:	441a      	add	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4909      	ldr	r1, [pc, #36]	@ (8002c0c <Powerstep01_SendQueuedCommands+0x3c>)
 8002be6:	440b      	add	r3, r1
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f000 fef2 	bl	80039d4 <Powerstep01_WriteBytes>
       loop++)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d9ef      	bls.n	8002bdc <Powerstep01_SendQueuedCommands+0xc>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000578 	.word	0x20000578
 8002c0c:	2000057c 	.word	0x2000057c

08002c10 <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f9d7 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002c26:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	1ad2      	subs	r2, r2, r3
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fc36 	bl	80024a4 <Powerstep01_CmdSetParam>
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2103      	movs	r1, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fc26 	bl	80024a4 <Powerstep01_CmdSetParam>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d804      	bhi.n	8002c7a <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 8002c70:	4a05      	ldr	r2, [pc, #20]	@ (8002c88 <Powerstep01_SetNbDevices+0x28>)
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 8002c7a:	2300      	movs	r3, #0
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	20000574 	.word	0x20000574

08002c8c <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2116      	movs	r1, #22
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f995 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 8002cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	d507      	bpl.n	8002cda <Powerstep01_SetAnalogValue+0x4e>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d004      	beq.n	8002cda <Powerstep01_SetAnalogValue+0x4e>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d001      	beq.n	8002cda <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	74fb      	strb	r3, [r7, #19]
  }
  switch (param)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	2b14      	cmp	r3, #20
 8002ce0:	f200 8191 	bhi.w	8003006 <Powerstep01_SetAnalogValue+0x37a>
 8002ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <Powerstep01_SetAnalogValue+0x60>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002da7 	.word	0x08002da7
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002da7 	.word	0x08002da7
 8002cf8:	08003007 	.word	0x08003007
 8002cfc:	08002e1b 	.word	0x08002e1b
 8002d00:	08002e1b 	.word	0x08002e1b
 8002d04:	08002e41 	.word	0x08002e41
 8002d08:	08002e67 	.word	0x08002e67
 8002d0c:	08002f5b 	.word	0x08002f5b
 8002d10:	08002f5b 	.word	0x08002f5b
 8002d14:	08002f5b 	.word	0x08002f5b
 8002d18:	08002f5b 	.word	0x08002f5b
 8002d1c:	08002ed7 	.word	0x08002ed7
 8002d20:	08002fa9 	.word	0x08002fa9
 8002d24:	08002fb5 	.word	0x08002fb5
 8002d28:	08002fb5 	.word	0x08002fb5
 8002d2c:	08002efd 	.word	0x08002efd
 8002d30:	08003007 	.word	0x08003007
 8002d34:	08002f35 	.word	0x08002f35
 8002d38:	08002f35 	.word	0x08002f35
 8002d3c:	08002e9f 	.word	0x08002e9f
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 8002d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d44:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8003028 <Powerstep01_SetAnalogValue+0x39c>
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	dc1c      	bgt.n	8002d8c <Powerstep01_SetAnalogValue+0x100>
 8002d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	d018      	beq.n	8002d92 <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 8002d60:	2116      	movs	r1, #22
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7ff f936 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	2201      	movs	r2, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	d502      	bpl.n	8002d92 <Powerstep01_SetAnalogValue+0x106>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 8002d90:	e13b      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 8002d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9a:	ee17 3a90 	vmov	r3, s15
 8002d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da2:	617b      	str	r3, [r7, #20]
      break;        
 8002da4:	e131      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 8002da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	d51c      	bpl.n	8002dee <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 8002db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002db8:	eef1 7a67 	vneg.f32	s15, s15
 8002dbc:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 8002dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc8:	ee17 3a90 	vmov	r3, s15
 8002dcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dd0:	d80a      	bhi.n	8002de8 <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8002dd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dda:	ee17 3a90 	vmov	r3, s15
 8002dde:	425b      	negs	r3, r3
 8002de0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002de4:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 8002de6:	e110      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 8002de8:	2300      	movs	r3, #0
 8002dea:	74fb      	strb	r3, [r7, #19]
      break;
 8002dec:	e10d      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 8002dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df6:	ee17 3a90 	vmov	r3, s15
 8002dfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dfe:	d209      	bcs.n	8002e14 <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8002e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002e10:	617b      	str	r3, [r7, #20]
      break;
 8002e12:	e0fa      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8002e14:	2300      	movs	r3, #0
 8002e16:	74fb      	strb	r3, [r7, #19]
      break;
 8002e18:	e0f7      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 8002e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e1e:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800302c <Powerstep01_SetAnalogValue+0x3a0>
 8002e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	dd02      	ble.n	8002e32 <Powerstep01_SetAnalogValue+0x1a6>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 8002e30:	e0eb      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 8002e32:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e36:	f000 fdf3 	bl	8003a20 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	617b      	str	r3, [r7, #20]
      break;
 8002e3e:	e0e4      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 8002e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e44:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003030 <Powerstep01_SetAnalogValue+0x3a4>
 8002e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	dd02      	ble.n	8002e58 <Powerstep01_SetAnalogValue+0x1cc>
 8002e52:	2300      	movs	r3, #0
 8002e54:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8002e56:	e0d8      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8002e58:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e5c:	f000 ff1a 	bl	8003c94 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002e60:	4603      	mov	r3, r0
 8002e62:	617b      	str	r3, [r7, #20]
      break;
 8002e64:	e0d1      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8002e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e6a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003034 <Powerstep01_SetAnalogValue+0x3a8>
 8002e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	dd02      	ble.n	8002e7e <Powerstep01_SetAnalogValue+0x1f2>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 8002e7c:	e0c5      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f8a6 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f403 5480 	and.w	r4, r3, #4096	@ 0x1000
 8002e8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e92:	f000 ff31 	bl	8003cf8 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4323      	orrs	r3, r4
 8002e9a:	617b      	str	r3, [r7, #20]
      break;      
 8002e9c:	e0b5      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 8002e9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003038 <Powerstep01_SetAnalogValue+0x3ac>
 8002ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eae:	dd02      	ble.n	8002eb6 <Powerstep01_SetAnalogValue+0x22a>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 8002eb4:	e0a9      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f88a 	bl	8001fd4 <Powerstep01_CmdGetParam>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f403 6480 	and.w	r4, r3, #1024	@ 0x400
 8002ec6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002eca:	f000 fe0f 	bl	8003aec <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4323      	orrs	r3, r4
 8002ed2:	617b      	str	r3, [r7, #20]
      break;
 8002ed4:	e099      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 8002ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eda:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800303c <Powerstep01_SetAnalogValue+0x3b0>
 8002ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	dd02      	ble.n	8002eee <Powerstep01_SetAnalogValue+0x262>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 8002eec:	e08d      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 8002eee:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ef2:	f000 fe2f 	bl	8003b54 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	617b      	str	r3, [r7, #20]
      break;
 8002efa:	e086      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 8002efc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	d408      	bmi.n	8002f20 <Powerstep01_SetAnalogValue+0x294>
 8002f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f12:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003040 <Powerstep01_SetAnalogValue+0x3b4>
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	dd02      	ble.n	8002f26 <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 8002f24:	e071      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 8002f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f2a:	f000 fe45 	bl	8003bb8 <Powerstep01_KTherm_Comp_to_RegVal>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	617b      	str	r3, [r7, #20]
      break;
 8002f32:	e06a      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 8002f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f38:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8003044 <Powerstep01_SetAnalogValue+0x3b8>
 8002f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	dd02      	ble.n	8002f4c <Powerstep01_SetAnalogValue+0x2c0>
 8002f46:	2300      	movs	r3, #0
 8002f48:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 8002f4a:	e05e      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8002f4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f50:	f000 ff1a 	bl	8003d88 <Powerstep01_StallOcd_Th_to_RegVal>
 8002f54:	4603      	mov	r3, r0
 8002f56:	617b      	str	r3, [r7, #20]
      break;
 8002f58:	e057      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 8002f5a:	7cbb      	ldrb	r3, [r7, #18]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d112      	bne.n	8002f86 <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 8002f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f64:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003044 <Powerstep01_SetAnalogValue+0x3b8>
 8002f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f70:	dd02      	ble.n	8002f78 <Powerstep01_SetAnalogValue+0x2ec>
 8002f72:	2300      	movs	r3, #0
 8002f74:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 8002f76:	e048      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 8002f78:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f7c:	f000 ff40 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002f80:	4603      	mov	r3, r0
 8002f82:	617b      	str	r3, [r7, #20]
      break;
 8002f84:	e041      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 8002f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	dd02      	ble.n	8002f9a <Powerstep01_SetAnalogValue+0x30e>
 8002f94:	2300      	movs	r3, #0
 8002f96:	74fb      	strb	r3, [r7, #19]
      break;
 8002f98:	e037      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 8002f9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f9e:	f000 fe47 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	617b      	str	r3, [r7, #20]
      break;
 8002fa6:	e030      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8002fa8:	7cbb      	ldrb	r3, [r7, #18]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb2:	e02a      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 8002fb4:	7cbb      	ldrb	r3, [r7, #18]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d112      	bne.n	8002fe0 <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 8002fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fbe:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003048 <Powerstep01_SetAnalogValue+0x3bc>
 8002fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	dd02      	ble.n	8002fd2 <Powerstep01_SetAnalogValue+0x346>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 8002fd0:	e01b      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 8002fd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fd6:	f000 ff4f 	bl	8003e78 <Powerstep01_Tmin_Time_to_RegVal>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	617b      	str	r3, [r7, #20]
      break;
 8002fde:	e014      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 8002fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fe4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800304c <Powerstep01_SetAnalogValue+0x3c0>
 8002fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff0:	dd02      	ble.n	8002ff8 <Powerstep01_SetAnalogValue+0x36c>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ff6:	e008      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 8002ff8:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ffc:	f000 fd42 	bl	8003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003000:	4603      	mov	r3, r0
 8003002:	617b      	str	r3, [r7, #20]
      break;
 8003004:	e001      	b.n	800300a <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 8003006:	2300      	movs	r3, #0
 8003008:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fa44 	bl	80024a4 <Powerstep01_CmdSetParam>
  }
  return result;
 800301c:	7cfb      	ldrb	r3, [r7, #19]
}
 800301e:	4618      	mov	r0, r3
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	43ff8000 	.word	0x43ff8000
 800302c:	4768c600 	.word	0x4768c600
 8003030:	4673e800 	.word	0x4673e800
 8003034:	44741333 	.word	0x44741333
 8003038:	46742400 	.word	0x46742400
 800303c:	44742000 	.word	0x44742000
 8003040:	3fbc0000 	.word	0x3fbc0000
 8003044:	447a0000 	.word	0x447a0000
 8003048:	42800000 	.word	0x42800000
 800304c:	3ecccccd 	.word	0x3ecccccd

08003050 <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4618      	mov	r0, r3
 800305e:	f002 fcc5 	bl	80059ec <Powerstep01_Board_StartStepClock>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 800306e:	f002 fce3 	bl	8005a38 <Powerstep01_Board_StopStepClock>
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 800307e:	2301      	movs	r3, #1
 8003080:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 8003082:	e016      	b.n	80030b2 <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 8003084:	2300      	movs	r3, #0
 8003086:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8003088:	2300      	movs	r3, #0
 800308a:	71bb      	strb	r3, [r7, #6]
 800308c:	e00b      	b.n	80030a6 <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 800308e:	79bb      	ldrb	r3, [r7, #6]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fc92 	bl	80029ba <Powerstep01_IsDeviceBusy>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	4313      	orrs	r3, r2
 800309e:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 80030a0:	79bb      	ldrb	r3, [r7, #6]
 80030a2:	3301      	adds	r3, #1
 80030a4:	71bb      	strb	r3, [r7, #6]
 80030a6:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	79ba      	ldrb	r2, [r7, #6]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d3ed      	bcc.n	800308e <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000574 	.word	0x20000574

080030c8 <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 80030d2:	bf00      	nop
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fc6f 	bl	80029ba <Powerstep01_IsDeviceBusy>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f8      	bne.n	80030d4 <Powerstep01_WaitWhileActive+0xc>
}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	43db      	mvns	r3, r3
 8003102:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003110:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	425b      	negs	r3, r3
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e001      	b.n	800311e <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 8003130:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <Powerstep01_BusyInterruptHandler+0x24>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <Powerstep01_BusyInterruptHandler+0x28>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 800313e:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <Powerstep01_BusyInterruptHandler+0x24>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <Powerstep01_BusyInterruptHandler+0x28>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
  }
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000568 	.word	0x20000568
 8003154:	20000581 	.word	0x20000581

08003158 <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8003162:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <Powerstep01_ErrorHandler+0x28>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 800316a:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <Powerstep01_ErrorHandler+0x28>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	4610      	mov	r0, r2
 8003172:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8003174:	e000      	b.n	8003178 <Powerstep01_ErrorHandler+0x20>
    while(1)
 8003176:	e7fe      	b.n	8003176 <Powerstep01_ErrorHandler+0x1e>
}
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000570 	.word	0x20000570

08003184 <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8003188:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <Powerstep01_FlagInterruptHandler+0x24>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <Powerstep01_FlagInterruptHandler+0x28>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8003196:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <Powerstep01_FlagInterruptHandler+0x24>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 800319c:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <Powerstep01_FlagInterruptHandler+0x28>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
  }
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000056c 	.word	0x2000056c
 80031ac:	20000581 	.word	0x20000581

080031b0 <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	603a      	str	r2, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
 80031bc:	460b      	mov	r3, r1
 80031be:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 80031c0:	4b59      	ldr	r3, [pc, #356]	@ (8003328 <Powerstep01_SendCommand+0x178>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	79fa      	ldrb	r2, [r7, #7]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f080 80a8 	bcs.w	800331e <Powerstep01_SendCommand+0x16e>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80031d2:	4b55      	ldr	r3, [pc, #340]	@ (8003328 <Powerstep01_SendCommand+0x178>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 80031e2:	2300      	movs	r3, #0
 80031e4:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80031e6:	4b51      	ldr	r3, [pc, #324]	@ (800332c <Powerstep01_SendCommand+0x17c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80031ec:	7abb      	ldrb	r3, [r7, #10]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80031f2:	f002 fb15 	bl	8005820 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e019      	b.n	8003234 <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8003200:	4a4b      	ldr	r2, [pc, #300]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 800320a:	4a49      	ldr	r2, [pc, #292]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	3301      	adds	r3, #1
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8003216:	4a46      	ldr	r2, [pc, #280]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	3302      	adds	r3, #2
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;   
 8003222:	4a43      	ldr	r2, [pc, #268]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	3303      	adds	r3, #3
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3301      	adds	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	4b3c      	ldr	r3, [pc, #240]	@ (8003328 <Powerstep01_SendCommand+0x178>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4293      	cmp	r3, r2
 8003240:	d3de      	bcc.n	8003200 <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 8003242:	79bb      	ldrb	r3, [r7, #6]
 8003244:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8003248:	2b8a      	cmp	r3, #138	@ 0x8a
 800324a:	d016      	beq.n	800327a <Powerstep01_SendCommand+0xca>
 800324c:	2b8a      	cmp	r3, #138	@ 0x8a
 800324e:	dc32      	bgt.n	80032b6 <Powerstep01_SendCommand+0x106>
 8003250:	2b82      	cmp	r3, #130	@ 0x82
 8003252:	d012      	beq.n	800327a <Powerstep01_SendCommand+0xca>
 8003254:	2b82      	cmp	r3, #130	@ 0x82
 8003256:	dc2e      	bgt.n	80032b6 <Powerstep01_SendCommand+0x106>
 8003258:	2b68      	cmp	r3, #104	@ 0x68
 800325a:	d00a      	beq.n	8003272 <Powerstep01_SendCommand+0xc2>
 800325c:	2b68      	cmp	r3, #104	@ 0x68
 800325e:	dc2a      	bgt.n	80032b6 <Powerstep01_SendCommand+0x106>
 8003260:	2b60      	cmp	r3, #96	@ 0x60
 8003262:	d006      	beq.n	8003272 <Powerstep01_SendCommand+0xc2>
 8003264:	2b60      	cmp	r3, #96	@ 0x60
 8003266:	dc26      	bgt.n	80032b6 <Powerstep01_SendCommand+0x106>
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d006      	beq.n	800327a <Powerstep01_SendCommand+0xca>
 800326c:	2b50      	cmp	r3, #80	@ 0x50
 800326e:	d004      	beq.n	800327a <Powerstep01_SendCommand+0xca>
 8003270:	e021      	b.n	80032b6 <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003278:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 800327a:	7a7b      	ldrb	r3, [r7, #9]
 800327c:	492c      	ldr	r1, [pc, #176]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 800327e:	79ba      	ldrb	r2, [r7, #6]
 8003280:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	0c1a      	lsrs	r2, r3, #16
 8003286:	7a7b      	ldrb	r3, [r7, #9]
 8003288:	b2d1      	uxtb	r1, r2
 800328a:	4a29      	ldr	r2, [pc, #164]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 800328c:	4413      	add	r3, r2
 800328e:	460a      	mov	r2, r1
 8003290:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	0a1a      	lsrs	r2, r3, #8
 8003296:	7a7b      	ldrb	r3, [r7, #9]
 8003298:	b2d1      	uxtb	r1, r2
 800329a:	4a25      	ldr	r2, [pc, #148]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 800329c:	4413      	add	r3, r2
 800329e:	460a      	mov	r2, r1
 80032a0:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80032a2:	7a7b      	ldrb	r3, [r7, #9]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d1      	uxtb	r1, r2
 80032a8:	4a21      	ldr	r2, [pc, #132]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 80032aa:	4413      	add	r3, r2
 80032ac:	460a      	mov	r2, r1
 80032ae:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 3;
 80032b0:	2303      	movs	r3, #3
 80032b2:	72fb      	strb	r3, [r7, #11]
          break;
 80032b4:	e012      	b.n	80032dc <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 80032b6:	7a7b      	ldrb	r3, [r7, #9]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 80032ba:	2100      	movs	r1, #0
 80032bc:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 80032be:	7a7b      	ldrb	r3, [r7, #9]
 80032c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 80032c2:	4413      	add	r3, r2
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 80032c8:	7a7b      	ldrb	r3, [r7, #9]
 80032ca:	4a19      	ldr	r2, [pc, #100]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 80032cc:	4413      	add	r3, r2
 80032ce:	2200      	movs	r2, #0
 80032d0:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = param;
 80032d2:	7a7b      	ldrb	r3, [r7, #9]
 80032d4:	4a16      	ldr	r2, [pc, #88]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 80032d6:	4413      	add	r3, r2
 80032d8:	79ba      	ldrb	r2, [r7, #6]
 80032da:	70da      	strb	r2, [r3, #3]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80032dc:	f002 fa97 	bl	800580e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 80032e4:	4b11      	ldr	r3, [pc, #68]	@ (800332c <Powerstep01_SendCommand+0x17c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f47f af7b 	bne.w	80031e6 <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes; 
 80032f0:	7afb      	ldrb	r3, [r7, #11]
 80032f2:	f1c3 0303 	rsb	r3, r3, #3
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e00c      	b.n	8003314 <Powerstep01_SendCommand+0x164>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003330 <Powerstep01_SendCommand+0x180>)
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	490c      	ldr	r1, [pc, #48]	@ (8003334 <Powerstep01_SendCommand+0x184>)
 8003304:	440b      	add	r3, r1
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f000 fb63 	bl	80039d4 <Powerstep01_WriteBytes>
         loop++)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3301      	adds	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d9ef      	bls.n	80032fa <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 800331a:	f002 fa81 	bl	8005820 <Powerstep01_Board_EnableIrq>
  }
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000574 	.word	0x20000574
 800332c:	20000580 	.word	0x20000580
 8003330:	20000578 	.word	0x20000578
 8003334:	2000057c 	.word	0x2000057c

08003338 <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	2200      	movs	r2, #0
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f8ab 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	2200      	movs	r2, #0
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff f8a5 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	2200      	movs	r2, #0
 800335e:	2103      	movs	r1, #3
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff f89f 	bl	80024a4 <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 8120 	bne.w	80035ae <Powerstep01_SetRegisterToPredefinedValues+0x276>
  {
    case 0:
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 800336e:	2308      	movs	r3, #8
 8003370:	73fb      	strb	r3, [r7, #15]
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8003372:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 80035b8 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 8003376:	f000 fb53 	bl	8003a20 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800337a:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	2105      	movs	r1, #5
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f88e 	bl	80024a4 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_ACC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8003388:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 80035b8 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 800338c:	f000 fb48 	bl	8003a20 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003390:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8003392:	461a      	mov	r2, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	2106      	movs	r1, #6
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f883 	bl	80024a4 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_DEC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 800339e:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80035b8 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 80033a2:	f000 fc77 	bl	8003c94 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 80033a6:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	2107      	movs	r1, #7
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f878 	bl	80024a4 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MAX_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
        POWERSTEP01_CONF_PARAM_LSPD_BIT_DEVICE_0|
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 80033b4:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 80035bc <Powerstep01_SetRegisterToPredefinedValues+0x284>
 80033b8:	f000 fc9e 	bl	8003cf8 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 80033bc:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 80033be:	461a      	mov	r2, r3
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	2108      	movs	r1, #8
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff f86d 	bl	80024a4 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MIN_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
        POWERSTEP01_CONF_PARAM_BOOST_MODE_DEVICE_0|
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 80033ca:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 80035c0 <Powerstep01_SetRegisterToPredefinedValues+0x288>
 80033ce:	f000 fb8d 	bl	8003aec <Powerstep01_FSSpd_Steps_s_to_RegVal>
 80033d2:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 80033d4:	461a      	mov	r2, r3
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2115      	movs	r1, #21
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff f862 	bl	80024a4 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_FS_SPD_DEVICE_0)); 
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2208      	movs	r2, #8
 80033e4:	2113      	movs	r1, #19
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f85c 	bl	80024a4 <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_OCD_TH_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	220b      	movs	r2, #11
 80033f0:	2116      	movs	r1, #22
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f856 	bl	80024a4 <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_SYNC_MODE_DEVICE_0 |
        (uint8_t)POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0|
        (uint8_t)POWERSTEP01_CONF_PARAM_STEP_MODE_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	22ef      	movs	r2, #239	@ 0xef
 80033fc:	2117      	movs	r1, #23
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff f850 	bl	80024a4 <Powerstep01_CmdSetParam>
        POWERSTEP01_CONF_PARAM_ALARM_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	22c3      	movs	r2, #195	@ 0xc3
 8003408:	2118      	movs	r1, #24
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f84a 	bl	80024a4 <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_IGATE_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TCC_DEVICE_0   | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TBOOST_DEVICE_0|
        (uint16_t)POWERSTEP01_CONF_PARAM_WD_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	2240      	movs	r2, #64	@ 0x40
 8003414:	2119      	movs	r1, #25
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f844 	bl	80024a4 <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_TBLANK_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TDT_DEVICE_0);
      // Voltage mode
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d175      	bne.n	800350e <Powerstep01_SetRegisterToPredefinedValues+0x1d6>
      {
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 8003422:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80035c4 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 8003426:	f000 fb95 	bl	8003b54 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 800342a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	210d      	movs	r1, #13
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f836 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_INT_SPD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
          Powerstep01_KTherm_Comp_to_RegVal(
 8003438:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800343c:	f000 fbbc 	bl	8003bb8 <Powerstep01_KTherm_Comp_to_RegVal>
 8003440:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	2111      	movs	r1, #17
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff f82b 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_K_THERM_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
          Powerstep01_StallOcd_Th_to_RegVal(
 800344e:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 80035c8 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 8003452:	f000 fc99 	bl	8003d88 <Powerstep01_StallOcd_Th_to_RegVal>
 8003456:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8003458:	461a      	mov	r2, r3
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	2114      	movs	r1, #20
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f820 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_STALL_TH_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
          Powerstep01_Kval_Perc_to_RegVal(
 8003464:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 80035cc <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8003468:	f000 fbe2 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 800346c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 800346e:	461a      	mov	r2, r3
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	2109      	movs	r1, #9
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f815 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_HOLD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
          Powerstep01_Kval_Perc_to_RegVal(
 800347a:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 80035cc <Powerstep01_SetRegisterToPredefinedValues+0x294>
 800347e:	f000 fbd7 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 8003482:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8003484:	461a      	mov	r2, r3
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	210a      	movs	r1, #10
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f80a 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_RUN_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
          Powerstep01_Kval_Perc_to_RegVal(
 8003490:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 80035cc <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8003494:	f000 fbcc 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 8003498:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 800349a:	461a      	mov	r2, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	210b      	movs	r1, #11
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe ffff 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_ACC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
          Powerstep01_Kval_Perc_to_RegVal(
 80034a6:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 80035cc <Powerstep01_SetRegisterToPredefinedValues+0x294>
 80034aa:	f000 fbc1 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 80034ae:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 80034b0:	461a      	mov	r2, r3
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	210c      	movs	r1, #12
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fff4 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80034bc:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 80035d0 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 80034c0:	f000 fae0 	bl	8003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80034c4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 80034c6:	461a      	mov	r2, r3
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	210e      	movs	r1, #14
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe ffe9 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_ST_SLP_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80034d2:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80035d4 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80034d6:	f000 fad5 	bl	8003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80034da:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 80034dc:	461a      	mov	r2, r3
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	210f      	movs	r1, #15
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ffde 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_ACC_DEVICE_0));  
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80034e8:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80035d4 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80034ec:	f000 faca 	bl	8003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80034f0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 80034f2:	461a      	mov	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2110      	movs	r1, #16
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe ffd3 	bl	80024a4 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8003504:	211a      	movs	r1, #26
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe ffcc 	bl	80024a4 <Powerstep01_CmdSetParam>
          (uint16_t)POWERSTEP01_CONF_PARAM_UVLOVAL_DEVICE_0       | 
          (uint16_t)POWERSTEP01_CONF_PARAM_VCCVAL_DEVICE_0        | 
          (uint16_t)POWERSTEP01_CONF_PARAM_TSW_DEVICE_0           |
          (uint16_t)POWERSTEP01_CONF_PARAM_PRED_DEVICE_0);          
      }
      break;
 800350c:	e04e      	b.n	80035ac <Powerstep01_SetRegisterToPredefinedValues+0x274>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800350e:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80035d8 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8003512:	f000 fc75 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003516:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2109      	movs	r1, #9
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe ffc0 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003524:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80035d8 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8003528:	f000 fc6a 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800352c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 800352e:	461a      	mov	r2, r3
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	210a      	movs	r1, #10
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe ffb5 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800353a:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80035d8 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 800353e:	f000 fc5f 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003542:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	210b      	movs	r1, #11
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe ffaa 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003550:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80035d8 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8003554:	f000 fc54 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003558:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 800355a:	461a      	mov	r2, r3
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	210c      	movs	r1, #12
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe ff9f 	bl	80024a4 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2235      	movs	r2, #53	@ 0x35
 800356a:	210e      	movs	r1, #14
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe ff99 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003572:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8003576:	f000 fc7f 	bl	8003e78 <Powerstep01_Tmin_Time_to_RegVal>
 800357a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 800357c:	461a      	mov	r2, r3
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	210f      	movs	r1, #15
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe ff8e 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003588:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 800358c:	f000 fc74 	bl	8003e78 <Powerstep01_Tmin_Time_to_RegVal>
 8003590:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	2110      	movs	r1, #16
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe ff83 	bl	80024a4 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f243 2208 	movw	r2, #12808	@ 0x3208
 80035a4:	211a      	movs	r1, #26
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe ff7c 	bl	80024a4 <Powerstep01_CmdSetParam>
      break;
 80035ac:	bf00      	nop
      }
      break;
#endif
    default: ;
  }
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	44c80000 	.word	0x44c80000
 80035bc:	00000000 	.word	0x00000000
 80035c0:	451c4000 	.word	0x451c4000
 80035c4:	42760c4a 	.word	0x42760c4a
 80035c8:	4404d000 	.word	0x4404d000
 80035cc:	418028f6 	.word	0x418028f6
 80035d0:	3d1c432d 	.word	0x3d1c432d
 80035d4:	3d801f75 	.word	0x3d801f75
 80035d8:	43a40f5c 	.word	0x43a40f5c

080035dc <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2101      	movs	r1, #1
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe ff58 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2102      	movs	r1, #2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe ff52 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	2200      	movs	r2, #0
 8003604:	2103      	movs	r1, #3
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe ff4c 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003612:	eeb0 0a67 	vmov.f32	s0, s15
 8003616:	f000 fa03 	bl	8003a20 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800361a:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2105      	movs	r1, #5
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe ff3e 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	edd3 7a02 	vldr	s15, [r3, #8]
 800362e:	eeb0 0a67 	vmov.f32	s0, s15
 8003632:	f000 f9f5 	bl	8003a20 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003636:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2106      	movs	r1, #6
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe ff30 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	edd3 7a03 	vldr	s15, [r3, #12]
 800364a:	eeb0 0a67 	vmov.f32	s0, s15
 800364e:	f000 fb21 	bl	8003c94 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8003652:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2107      	movs	r1, #7
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe ff22 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	edd3 7a04 	vldr	s15, [r3, #16]
 800366a:	eeb0 0a67 	vmov.f32	s0, s15
 800366e:	f000 fb11 	bl	8003c94 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8003672:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8003674:	4323      	orrs	r3, r4
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2108      	movs	r1, #8
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe ff10 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	edd3 7a06 	vldr	s15, [r3, #24]
 800368e:	eeb0 0a67 	vmov.f32	s0, s15
 8003692:	f000 fa2b 	bl	8003aec <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8003696:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8003698:	4323      	orrs	r3, r4
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2115      	movs	r1, #21
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fefe 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80036ae:	eeb0 0a67 	vmov.f32	s0, s15
 80036b2:	f000 fb69 	bl	8003d88 <Powerstep01_StallOcd_Th_to_RegVal>
 80036b6:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2113      	movs	r1, #19
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fef0 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80036d8:	4313      	orrs	r3, r2
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	2116      	movs	r1, #22
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fede 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80036ee:	461a      	mov	r2, r3
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	2117      	movs	r1, #23
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe fed5 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 8003706:	4313      	orrs	r3, r2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 8003710:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 8003716:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2118      	movs	r1, #24
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fec0 	bl	80024a4 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8003730:	4313      	orrs	r3, r2
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	2119      	movs	r1, #25
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe feb2 	bl	80024a4 <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 80b6 	bne.w	80038b6 <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003750:	eeb0 0a67 	vmov.f32	s0, s15
 8003754:	f000 f9fe 	bl	8003b54 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8003758:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 800375a:	461a      	mov	r2, r3
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	210d      	movs	r1, #13
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fe9f 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800376c:	eeb0 0a67 	vmov.f32	s0, s15
 8003770:	f000 fa22 	bl	8003bb8 <Powerstep01_KTherm_Comp_to_RegVal>
 8003774:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8003776:	461a      	mov	r2, r3
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	2111      	movs	r1, #17
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fe91 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	f000 fafc 	bl	8003d88 <Powerstep01_StallOcd_Th_to_RegVal>
 8003790:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8003792:	461a      	mov	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	2114      	movs	r1, #20
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fe83 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80037a4:	eeb0 0a67 	vmov.f32	s0, s15
 80037a8:	f000 fa42 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 80037ac:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 80037ae:	461a      	mov	r2, r3
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	2109      	movs	r1, #9
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fe75 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80037c0:	eeb0 0a67 	vmov.f32	s0, s15
 80037c4:	f000 fa34 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 80037c8:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 80037ca:	461a      	mov	r2, r3
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	210a      	movs	r1, #10
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fe67 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80037dc:	eeb0 0a67 	vmov.f32	s0, s15
 80037e0:	f000 fa26 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 80037e4:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 80037e6:	461a      	mov	r2, r3
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	210b      	movs	r1, #11
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe fe59 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80037f8:	eeb0 0a67 	vmov.f32	s0, s15
 80037fc:	f000 fa18 	bl	8003c30 <Powerstep01_Kval_Perc_to_RegVal>
 8003800:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8003802:	461a      	mov	r2, r3
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	210c      	movs	r1, #12
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fe4b 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003814:	eeb0 0a67 	vmov.f32	s0, s15
 8003818:	f000 f934 	bl	8003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800381c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 800381e:	461a      	mov	r2, r3
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	210e      	movs	r1, #14
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fe3d 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	f000 f926 	bl	8003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003838:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	210f      	movs	r1, #15
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fe2f 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800384c:	eeb0 0a67 	vmov.f32	s0, s15
 8003850:	f000 f918 	bl	8003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003854:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8003856:	461a      	mov	r2, r3
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	2110      	movs	r1, #16
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fe21 	bl	80024a4 <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
      (uint16_t)initPrm->vm.swMode | 
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 800386e:	4313      	orrs	r3, r2
 8003870:	b2da      	uxtb	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8003878:	4313      	orrs	r3, r2
 800387a:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 8003882:	4313      	orrs	r3, r2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 800388e:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 8003896:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
      (uint16_t)initPrm->vm.vccVal| 
 800389e:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 80038a6:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80038a8:	461a      	mov	r2, r3
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	211a      	movs	r1, #26
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fdf8 	bl	80024a4 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 80038b4:	e08a      	b.n	80039cc <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80038bc:	eeb0 0a67 	vmov.f32	s0, s15
 80038c0:	f000 fa9e 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80038c4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 80038c6:	461a      	mov	r2, r3
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	2109      	movs	r1, #9
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fde9 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80038d8:	eeb0 0a67 	vmov.f32	s0, s15
 80038dc:	f000 fa90 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80038e0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	210a      	movs	r1, #10
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fddb 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80038f4:	eeb0 0a67 	vmov.f32	s0, s15
 80038f8:	f000 fa82 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80038fc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 80038fe:	461a      	mov	r2, r3
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	210b      	movs	r1, #11
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fdcd 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003910:	eeb0 0a67 	vmov.f32	s0, s15
 8003914:	f000 fa74 	bl	8003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003918:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 800391a:	461a      	mov	r2, r3
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	210c      	movs	r1, #12
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fdbf 	bl	80024a4 <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
          (uint8_t)initPrm->cm.fastStep);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8003932:	4313      	orrs	r3, r2
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	210e      	movs	r1, #14
 800393c:	4618      	mov	r0, r3
 800393e:	f7fe fdb1 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003948:	eeb0 0a67 	vmov.f32	s0, s15
 800394c:	f000 fa94 	bl	8003e78 <Powerstep01_Tmin_Time_to_RegVal>
 8003950:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8003952:	461a      	mov	r2, r3
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	210f      	movs	r1, #15
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fda3 	bl	80024a4 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003964:	eeb0 0a67 	vmov.f32	s0, s15
 8003968:	f000 fa86 	bl	8003e78 <Powerstep01_Tmin_Time_to_RegVal>
 800396c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 800396e:	461a      	mov	r2, r3
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2110      	movs	r1, #16
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fd95 	bl	80024a4 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
          (uint16_t)initPrm->cm.swMode| 
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 8003986:	4313      	orrs	r3, r2
 8003988:	b2da      	uxtb	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8003990:	4313      	orrs	r3, r2
 8003992:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
          (uint16_t)initPrm->cm.tqReg| 
 800399a:	4313      	orrs	r3, r2
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
          (uint16_t)initPrm->cm.ocSd| 
 80039a6:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 80039ae:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
          (uint16_t)initPrm->cm.vccVal|
 80039b6:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
          (uint16_t)initPrm->cm.tsw|
 80039be:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80039c0:	461a      	mov	r2, r3
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	211a      	movs	r1, #26
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fd6c 	bl	80024a4 <Powerstep01_CmdSetParam>
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd90      	pop	{r4, r7, pc}

080039d4 <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <Powerstep01_WriteBytes+0x40>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f002 f887 	bl	8005afc <Powerstep01_Board_SpiWriteBytes>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 80039f4:	f24b 0001 	movw	r0, #45057	@ 0xb001
 80039f8:	f7ff fbae 	bl	8003158 <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <Powerstep01_WriteBytes+0x44>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8003a06:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <Powerstep01_WriteBytes+0x48>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
  }
}                     
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000574 	.word	0x20000574
 8003a18:	20000581 	.word	0x20000581
 8003a1c:	20000580 	.word	0x20000580

08003a20 <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 8003a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a2e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003a54 <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 8003a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a42:	ee17 3a90 	vmov	r3, s15
 8003a46:	b29b      	uxth	r3, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	3d8cbccc 	.word	0x3d8cbccc

08003a58 <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003a80 <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 8003a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003a72:	eeb0 0a67 	vmov.f32	s0, s15
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	4168d4a5 	.word	0x4168d4a5

08003a84 <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 8003a8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a92:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003abc <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 8003a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa6:	edc7 7a00 	vstr	s15, [r7]
 8003aaa:	783b      	ldrb	r3, [r7, #0]
 8003aac:	b2db      	uxtb	r3, r3
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	441f6000 	.word	0x441f6000

08003ac0 <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003ae8 <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 8003ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ada:	eeb0 0a67 	vmov.f32	s0, s15
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	3acd9a67 	.word	0x3acd9a67

08003aec <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 8003af6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003afa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003b18 <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 8003afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b06:	ee17 3a90 	vmov	r3, s15
 8003b0a:	b29b      	uxth	r3, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	3d8637bd 	.word	0x3d8637bd

08003b1c <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003b4c <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 8003b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b36:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003b50 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 8003b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	3f7fbe77 	.word	0x3f7fbe77
 8003b50:	41742400 	.word	0x41742400

08003b54 <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 8003b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b62:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003b88 <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 8003b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b6a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003b6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b76:	ee17 3a90 	vmov	r3, s15
 8003b7a:	b29b      	uxth	r3, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	418637bd 	.word	0x418637bd

08003b8c <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003bb4 <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 8003ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	3d7423d9 	.word	0x3d7423d9

08003bb8 <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 8003bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bce:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003bf8 <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 8003bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be2:	edc7 7a00 	vstr	s15, [r7]
 8003be6:	783b      	ldrb	r3, [r7, #0]
 8003be8:	b2db      	uxtb	r3, r3
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	42000000 	.word	0x42000000

08003bfc <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003c2c <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 8003c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8003c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	3d000000 	.word	0x3d000000

08003c30 <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 8003c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c3e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003c68 <Powerstep01_Kval_Perc_to_RegVal+0x38>
 8003c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003c4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c52:	edc7 7a00 	vstr	s15, [r7]
 8003c56:	783b      	ldrb	r3, [r7, #0]
 8003c58:	b2db      	uxtb	r3, r3
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	4023d70a 	.word	0x4023d70a

08003c6c <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	eeb5 7a09 	vmov.f32	s14, #89	@ 0x3ec80000  0.3906250
 8003c82:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003c86:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 8003c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ca2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003cc8 <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 8003ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003caa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003cae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb6:	ee17 3a90 	vmov	r3, s15
 8003cba:	b29b      	uxth	r3, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	3d8637bd 	.word	0x3d8637bd

08003ccc <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003cf4 <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 8003ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	41742400 	.word	0x41742400

08003cf8 <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 8003d02:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d06:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003d2c <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 8003d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d1a:	ee17 3a90 	vmov	r3, s15
 8003d1e:	b29b      	uxth	r3, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	408637bd 	.word	0x408637bd

08003d30 <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d42:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003d58 <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 8003d46:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	3e742400 	.word	0x3e742400

08003d5c <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003d84 <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 8003d72:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003d76:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	3c742400 	.word	0x3c742400

08003d88 <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 8003d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d96:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003dc8 <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 8003d9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d9e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003dcc <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 8003da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003daa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db2:	edc7 7a00 	vstr	s15, [r7]
 8003db6:	783b      	ldrb	r3, [r7, #0]
 8003db8:	b2db      	uxtb	r3, r3
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	41fa0000 	.word	0x41fa0000
 8003dcc:	3d03126f 	.word	0x3d03126f

08003dd0 <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	ee07 3a90 	vmov	s15, r3
 8003de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003dfc <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 8003de8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003dec:	eeb0 0a67 	vmov.f32	s0, s15
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	41fa0000 	.word	0x41fa0000

08003e00 <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 8003e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003e40 <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 8003e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e16:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003e44 <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 8003e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2a:	edc7 7a00 	vstr	s15, [r7]
 8003e2e:	783b      	ldrb	r3, [r7, #0]
 8003e30:	b2db      	uxtb	r3, r3
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40fa0000 	.word	0x40fa0000
 8003e44:	3e03126f 	.word	0x3e03126f

08003e48 <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3301      	adds	r3, #1
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003e74 <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 8003e60:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003e64:	eeb0 0a67 	vmov.f32	s0, s15
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40fa0000 	.word	0x40fa0000

08003e78 <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 8003e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e9e:	edc7 7a00 	vstr	s15, [r7]
 8003ea2:	783b      	ldrb	r3, [r7, #0]
 8003ea4:	b2db      	uxtb	r3, r3
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003eca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ece:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08c      	sub	sp, #48	@ 0x30
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a51      	ldr	r2, [pc, #324]	@ (800402c <I2Cx_MspInit+0x150>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d14d      	bne.n	8003f88 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003eec:	4b50      	ldr	r3, [pc, #320]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003f08:	2312      	movs	r3, #18
 8003f0a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003f10:	2302      	movs	r3, #2
 8003f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003f14:	2304      	movs	r3, #4
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003f18:	f107 031c 	add.w	r3, r7, #28
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4845      	ldr	r0, [pc, #276]	@ (8004034 <I2Cx_MspInit+0x158>)
 8003f20:	f003 f868 	bl	8006ff4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003f2a:	f107 031c 	add.w	r3, r7, #28
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4840      	ldr	r0, [pc, #256]	@ (8004034 <I2Cx_MspInit+0x158>)
 8003f32:	f003 f85f 	bl	8006ff4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003f36:	4b3e      	ldr	r3, [pc, #248]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f42:	4b3b      	ldr	r3, [pc, #236]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003f4e:	4b38      	ldr	r3, [pc, #224]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a37      	ldr	r2, [pc, #220]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f58:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003f5a:	4b35      	ldr	r3, [pc, #212]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a34      	ldr	r2, [pc, #208]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f64:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003f66:	2200      	movs	r2, #0
 8003f68:	210f      	movs	r1, #15
 8003f6a:	2048      	movs	r0, #72	@ 0x48
 8003f6c:	f002 f947 	bl	80061fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003f70:	2048      	movs	r0, #72	@ 0x48
 8003f72:	f002 f960 	bl	8006236 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003f76:	2200      	movs	r2, #0
 8003f78:	210f      	movs	r1, #15
 8003f7a:	2049      	movs	r0, #73	@ 0x49
 8003f7c:	f002 f93f 	bl	80061fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003f80:	2049      	movs	r0, #73	@ 0x49
 8003f82:	f002 f958 	bl	8006236 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003f86:	e04d      	b.n	8004024 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003f88:	4b29      	ldr	r3, [pc, #164]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	4a28      	ldr	r2, [pc, #160]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f94:	4b26      	ldr	r3, [pc, #152]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fa4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003fa6:	2312      	movs	r3, #18
 8003fa8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003fb6:	f107 031c 	add.w	r3, r7, #28
 8003fba:	4619      	mov	r1, r3
 8003fbc:	481e      	ldr	r0, [pc, #120]	@ (8004038 <I2Cx_MspInit+0x15c>)
 8003fbe:	f003 f819 	bl	8006ff4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003fc8:	f107 031c 	add.w	r3, r7, #28
 8003fcc:	4619      	mov	r1, r3
 8003fce:	481a      	ldr	r0, [pc, #104]	@ (8004038 <I2Cx_MspInit+0x15c>)
 8003fd0:	f003 f810 	bl	8006ff4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003fd4:	4b16      	ldr	r3, [pc, #88]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	4a15      	ldr	r2, [pc, #84]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003fda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe0:	4b13      	ldr	r3, [pc, #76]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003fec:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003ff2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ff6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8004030 <I2Cx_MspInit+0x154>)
 8003ffe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004002:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	210f      	movs	r1, #15
 8004008:	201f      	movs	r0, #31
 800400a:	f002 f8f8 	bl	80061fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800400e:	201f      	movs	r0, #31
 8004010:	f002 f911 	bl	8006236 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004014:	2200      	movs	r2, #0
 8004016:	210f      	movs	r1, #15
 8004018:	2020      	movs	r0, #32
 800401a:	f002 f8f0 	bl	80061fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800401e:	2020      	movs	r0, #32
 8004020:	f002 f909 	bl	8006236 <HAL_NVIC_EnableIRQ>
}
 8004024:	bf00      	nop
 8004026:	3730      	adds	r7, #48	@ 0x30
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000584 	.word	0x20000584
 8004030:	40023800 	.word	0x40023800
 8004034:	40021c00 	.word	0x40021c00
 8004038:	40020400 	.word	0x40020400

0800403c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f003 fddd 	bl	8007c04 <HAL_I2C_GetState>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d125      	bne.n	800409c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a14      	ldr	r2, [pc, #80]	@ (80040a4 <I2Cx_Init+0x68>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a13      	ldr	r2, [pc, #76]	@ (80040a8 <I2Cx_Init+0x6c>)
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e002      	b.n	8004066 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a12      	ldr	r2, [pc, #72]	@ (80040ac <I2Cx_Init+0x70>)
 8004064:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <I2Cx_Init+0x74>)
 800406a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff23 	bl	8003edc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f003 faba 	bl	8007610 <HAL_I2C_Init>
  }
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000584 	.word	0x20000584
 80040a8:	40005c00 	.word	0x40005c00
 80040ac:	40005400 	.word	0x40005400
 80040b0:	40912732 	.word	0x40912732

080040b4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	@ 0x28
 80040b8:	af04      	add	r7, sp, #16
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	4608      	mov	r0, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	72fb      	strb	r3, [r7, #11]
 80040c6:	460b      	mov	r3, r1
 80040c8:	813b      	strh	r3, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	b299      	uxth	r1, r3
 80040d6:	88f8      	ldrh	r0, [r7, #6]
 80040d8:	893a      	ldrh	r2, [r7, #8]
 80040da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040de:	9302      	str	r3, [sp, #8]
 80040e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	4603      	mov	r3, r0
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f003 fc70 	bl	80079d0 <HAL_I2C_Mem_Read>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	4619      	mov	r1, r3
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f832 	bl	8004168 <I2Cx_Error>
  }
  return status;    
 8004104:	7dfb      	ldrb	r3, [r7, #23]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b08a      	sub	sp, #40	@ 0x28
 8004112:	af04      	add	r7, sp, #16
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	4608      	mov	r0, r1
 8004118:	4611      	mov	r1, r2
 800411a:	461a      	mov	r2, r3
 800411c:	4603      	mov	r3, r0
 800411e:	72fb      	strb	r3, [r7, #11]
 8004120:	460b      	mov	r3, r1
 8004122:	813b      	strh	r3, [r7, #8]
 8004124:	4613      	mov	r3, r2
 8004126:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800412c:	7afb      	ldrb	r3, [r7, #11]
 800412e:	b299      	uxth	r1, r3
 8004130:	88f8      	ldrh	r0, [r7, #6]
 8004132:	893a      	ldrh	r2, [r7, #8]
 8004134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004138:	9302      	str	r3, [sp, #8]
 800413a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	4603      	mov	r3, r0
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f003 fb2f 	bl	80077a8 <HAL_I2C_Mem_Write>
 800414a:	4603      	mov	r3, r0
 800414c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	4619      	mov	r1, r3
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f805 	bl	8004168 <I2Cx_Error>
  }
  return status;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f003 fae7 	bl	8007748 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff ff5e 	bl	800403c <I2Cx_Init>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800418c:	4802      	ldr	r0, [pc, #8]	@ (8004198 <TS_IO_Init+0x10>)
 800418e:	f7ff ff55 	bl	800403c <I2Cx_Init>
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000584 	.word	0x20000584

0800419c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
 80041a6:	460b      	mov	r3, r1
 80041a8:	71bb      	strb	r3, [r7, #6]
 80041aa:	4613      	mov	r3, r2
 80041ac:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80041ae:	79bb      	ldrb	r3, [r7, #6]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	79f9      	ldrb	r1, [r7, #7]
 80041b4:	2301      	movs	r3, #1
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	1d7b      	adds	r3, r7, #5
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2301      	movs	r3, #1
 80041be:	4803      	ldr	r0, [pc, #12]	@ (80041cc <TS_IO_Write+0x30>)
 80041c0:	f7ff ffa5 	bl	800410e <I2Cx_WriteMultiple>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000584 	.word	0x20000584

080041d0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	4603      	mov	r3, r0
 80041d8:	460a      	mov	r2, r1
 80041da:	71fb      	strb	r3, [r7, #7]
 80041dc:	4613      	mov	r3, r2
 80041de:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80041e4:	79bb      	ldrb	r3, [r7, #6]
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	79f9      	ldrb	r1, [r7, #7]
 80041ea:	2301      	movs	r3, #1
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	f107 030f 	add.w	r3, r7, #15
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2301      	movs	r3, #1
 80041f6:	4804      	ldr	r0, [pc, #16]	@ (8004208 <TS_IO_Read+0x38>)
 80041f8:	f7ff ff5c 	bl	80040b4 <I2Cx_ReadMultiple>

  return read_value;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000584 	.word	0x20000584

0800420c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f001 fef3 	bl	8006000 <HAL_Delay>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004228:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800422a:	2228      	movs	r2, #40	@ 0x28
 800422c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800422e:	4b30      	ldr	r3, [pc, #192]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004230:	2209      	movs	r2, #9
 8004232:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004234:	4b2e      	ldr	r3, [pc, #184]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004236:	2235      	movs	r2, #53	@ 0x35
 8004238:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800423a:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800423c:	220b      	movs	r2, #11
 800423e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004240:	4b2b      	ldr	r3, [pc, #172]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004242:	f240 121b 	movw	r2, #283	@ 0x11b
 8004246:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004248:	4b29      	ldr	r3, [pc, #164]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800424a:	f240 2215 	movw	r2, #533	@ 0x215
 800424e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004250:	4b27      	ldr	r3, [pc, #156]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004252:	f240 121d 	movw	r2, #285	@ 0x11d
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004258:	4b25      	ldr	r3, [pc, #148]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800425a:	f240 2235 	movw	r2, #565	@ 0x235
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004260:	2100      	movs	r1, #0
 8004262:	4823      	ldr	r0, [pc, #140]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004264:	f000 fd74 	bl	8004d50 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004268:	4b21      	ldr	r3, [pc, #132]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800426a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800426e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004270:	4b1f      	ldr	r3, [pc, #124]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004272:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8004276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004280:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004288:	4b19      	ldr	r3, [pc, #100]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004290:	4b17      	ldr	r3, [pc, #92]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004292:	2200      	movs	r2, #0
 8004294:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004296:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80042a2:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80042a8:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 80042aa:	4a12      	ldr	r2, [pc, #72]	@ (80042f4 <BSP_LCD_Init+0xd0>)
 80042ac:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80042ae:	4810      	ldr	r0, [pc, #64]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 80042b0:	f004 f948 	bl	8008544 <HAL_LTDC_GetState>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80042ba:	2100      	movs	r1, #0
 80042bc:	480c      	ldr	r0, [pc, #48]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 80042be:	f000 fc6d 	bl	8004b9c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80042c2:	480b      	ldr	r0, [pc, #44]	@ (80042f0 <BSP_LCD_Init+0xcc>)
 80042c4:	f003 ff6e 	bl	80081a4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80042c8:	2201      	movs	r2, #1
 80042ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80042ce:	480a      	ldr	r0, [pc, #40]	@ (80042f8 <BSP_LCD_Init+0xd4>)
 80042d0:	f003 f960 	bl	8007594 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80042d4:	2201      	movs	r2, #1
 80042d6:	2108      	movs	r1, #8
 80042d8:	4808      	ldr	r0, [pc, #32]	@ (80042fc <BSP_LCD_Init+0xd8>)
 80042da:	f003 f95b 	bl	8007594 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80042de:	f000 fe57 	bl	8004f90 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80042e2:	4807      	ldr	r0, [pc, #28]	@ (8004300 <BSP_LCD_Init+0xdc>)
 80042e4:	f000 f8be 	bl	8004464 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200005d8 	.word	0x200005d8
 80042f4:	40016800 	.word	0x40016800
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40022800 	.word	0x40022800
 8004300:	20000004 	.word	0x20000004

08004304 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004308:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <BSP_LCD_GetXSize+0x20>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a06      	ldr	r2, [pc, #24]	@ (8004328 <BSP_LCD_GetXSize+0x24>)
 800430e:	2134      	movs	r1, #52	@ 0x34
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	3360      	adds	r3, #96	@ 0x60
 8004318:	681b      	ldr	r3, [r3, #0]
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	200006c0 	.word	0x200006c0
 8004328:	200005d8 	.word	0x200005d8

0800432c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <BSP_LCD_GetYSize+0x20>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a06      	ldr	r2, [pc, #24]	@ (8004350 <BSP_LCD_GetYSize+0x24>)
 8004336:	2134      	movs	r1, #52	@ 0x34
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3364      	adds	r3, #100	@ 0x64
 8004340:	681b      	ldr	r3, [r3, #0]
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	200006c0 	.word	0x200006c0
 8004350:	200005d8 	.word	0x200005d8

08004354 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004354:	b580      	push	{r7, lr}
 8004356:	b090      	sub	sp, #64	@ 0x40
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004364:	f7ff ffce 	bl	8004304 <BSP_LCD_GetXSize>
 8004368:	4603      	mov	r3, r0
 800436a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004370:	f7ff ffdc 	bl	800432c <BSP_LCD_GetYSize>
 8004374:	4603      	mov	r3, r0
 8004376:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8004380:	23ff      	movs	r3, #255	@ 0xff
 8004382:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800439a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800439e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80043a0:	2307      	movs	r3, #7
 80043a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80043a4:	f7ff ffae 	bl	8004304 <BSP_LCD_GetXSize>
 80043a8:	4603      	mov	r3, r0
 80043aa:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80043ac:	f7ff ffbe 	bl	800432c <BSP_LCD_GetYSize>
 80043b0:	4603      	mov	r3, r0
 80043b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80043b4:	88fa      	ldrh	r2, [r7, #6]
 80043b6:	f107 030c 	add.w	r3, r7, #12
 80043ba:	4619      	mov	r1, r3
 80043bc:	4812      	ldr	r0, [pc, #72]	@ (8004408 <BSP_LCD_LayerDefaultInit+0xb4>)
 80043be:	f004 f883 	bl	80084c8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	4911      	ldr	r1, [pc, #68]	@ (800440c <BSP_LCD_LayerDefaultInit+0xb8>)
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	3304      	adds	r3, #4
 80043d2:	f04f 32ff 	mov.w	r2, #4294967295
 80043d6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80043d8:	88fa      	ldrh	r2, [r7, #6]
 80043da:	490c      	ldr	r1, [pc, #48]	@ (800440c <BSP_LCD_LayerDefaultInit+0xb8>)
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3308      	adds	r3, #8
 80043e8:	4a09      	ldr	r2, [pc, #36]	@ (8004410 <BSP_LCD_LayerDefaultInit+0xbc>)
 80043ea:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	4907      	ldr	r1, [pc, #28]	@ (800440c <BSP_LCD_LayerDefaultInit+0xb8>)
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80043fe:	601a      	str	r2, [r3, #0]
}
 8004400:	bf00      	nop
 8004402:	3740      	adds	r7, #64	@ 0x40
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	200005d8 	.word	0x200005d8
 800440c:	200006c4 	.word	0x200006c4
 8004410:	20000004 	.word	0x20000004

08004414 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800441c:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <BSP_LCD_SelectLayer+0x1c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
} 
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	200006c0 	.word	0x200006c0

08004434 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800443c:	4b07      	ldr	r3, [pc, #28]	@ (800445c <BSP_LCD_SetTextColor+0x28>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4907      	ldr	r1, [pc, #28]	@ (8004460 <BSP_LCD_SetTextColor+0x2c>)
 8004442:	4613      	mov	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	601a      	str	r2, [r3, #0]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	200006c0 	.word	0x200006c0
 8004460:	200006c4 	.word	0x200006c4

08004464 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800446c:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <BSP_LCD_SetFont+0x2c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4908      	ldr	r1, [pc, #32]	@ (8004494 <BSP_LCD_SetFont+0x30>)
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3308      	adds	r3, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	601a      	str	r2, [r3, #0]
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	200006c0 	.word	0x200006c0
 8004494:	200006c4 	.word	0x200006c4

08004498 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449a:	b085      	sub	sp, #20
 800449c:	af02      	add	r7, sp, #8
 800449e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <BSP_LCD_Clear+0x48>)
 80044a2:	681c      	ldr	r4, [r3, #0]
 80044a4:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <BSP_LCD_Clear+0x48>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0e      	ldr	r2, [pc, #56]	@ (80044e4 <BSP_LCD_Clear+0x4c>)
 80044aa:	2134      	movs	r1, #52	@ 0x34
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	335c      	adds	r3, #92	@ 0x5c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461e      	mov	r6, r3
 80044b8:	f7ff ff24 	bl	8004304 <BSP_LCD_GetXSize>
 80044bc:	4605      	mov	r5, r0
 80044be:	f7ff ff35 	bl	800432c <BSP_LCD_GetYSize>
 80044c2:	4602      	mov	r2, r0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	2300      	movs	r3, #0
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	462a      	mov	r2, r5
 80044d0:	4631      	mov	r1, r6
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 fd10 	bl	8004ef8 <LL_FillBuffer>
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e0:	200006c0 	.word	0x200006c0
 80044e4:	200005d8 	.word	0x200005d8

080044e8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	80fb      	strh	r3, [r7, #6]
 80044f2:	460b      	mov	r3, r1
 80044f4:	80bb      	strh	r3, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80044fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <BSP_LCD_DisplayChar+0x80>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	491b      	ldr	r1, [pc, #108]	@ (800456c <BSP_LCD_DisplayChar+0x84>)
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	3308      	adds	r3, #8
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004516:	4b14      	ldr	r3, [pc, #80]	@ (8004568 <BSP_LCD_DisplayChar+0x80>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4c14      	ldr	r4, [pc, #80]	@ (800456c <BSP_LCD_DisplayChar+0x84>)
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4423      	add	r3, r4
 8004526:	3308      	adds	r3, #8
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800452c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004530:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <BSP_LCD_DisplayChar+0x80>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4c0d      	ldr	r4, [pc, #52]	@ (800456c <BSP_LCD_DisplayChar+0x84>)
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4423      	add	r3, r4
 8004540:	3308      	adds	r3, #8
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	889b      	ldrh	r3, [r3, #4]
 8004546:	3307      	adds	r3, #7
 8004548:	2b00      	cmp	r3, #0
 800454a:	da00      	bge.n	800454e <BSP_LCD_DisplayChar+0x66>
 800454c:	3307      	adds	r3, #7
 800454e:	10db      	asrs	r3, r3, #3
 8004550:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004554:	18ca      	adds	r2, r1, r3
 8004556:	88b9      	ldrh	r1, [r7, #4]
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fc14 	bl	8004d88 <DrawChar>
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bd90      	pop	{r4, r7, pc}
 8004568:	200006c0 	.word	0x200006c0
 800456c:	200006c4 	.word	0x200006c4

08004570 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004570:	b5b0      	push	{r4, r5, r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60ba      	str	r2, [r7, #8]
 8004578:	461a      	mov	r2, r3
 800457a:	4603      	mov	r3, r0
 800457c:	81fb      	strh	r3, [r7, #14]
 800457e:	460b      	mov	r3, r1
 8004580:	81bb      	strh	r3, [r7, #12]
 8004582:	4613      	mov	r3, r2
 8004584:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004586:	2301      	movs	r3, #1
 8004588:	83fb      	strh	r3, [r7, #30]
 800458a:	2300      	movs	r3, #0
 800458c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800459a:	e002      	b.n	80045a2 <BSP_LCD_DisplayStringAt+0x32>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3301      	adds	r3, #1
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	617a      	str	r2, [r7, #20]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f6      	bne.n	800459c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80045ae:	f7ff fea9 	bl	8004304 <BSP_LCD_GetXSize>
 80045b2:	4601      	mov	r1, r0
 80045b4:	4b50      	ldr	r3, [pc, #320]	@ (80046f8 <BSP_LCD_DisplayStringAt+0x188>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4850      	ldr	r0, [pc, #320]	@ (80046fc <BSP_LCD_DisplayStringAt+0x18c>)
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4403      	add	r3, r0
 80045c4:	3308      	adds	r3, #8
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	889b      	ldrh	r3, [r3, #4]
 80045ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ce:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d01c      	beq.n	8004610 <BSP_LCD_DisplayStringAt+0xa0>
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	dc33      	bgt.n	8004642 <BSP_LCD_DisplayStringAt+0xd2>
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d002      	beq.n	80045e4 <BSP_LCD_DisplayStringAt+0x74>
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d019      	beq.n	8004616 <BSP_LCD_DisplayStringAt+0xa6>
 80045e2:	e02e      	b.n	8004642 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad1      	subs	r1, r2, r3
 80045ea:	4b43      	ldr	r3, [pc, #268]	@ (80046f8 <BSP_LCD_DisplayStringAt+0x188>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4843      	ldr	r0, [pc, #268]	@ (80046fc <BSP_LCD_DisplayStringAt+0x18c>)
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4403      	add	r3, r0
 80045fa:	3308      	adds	r3, #8
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	889b      	ldrh	r3, [r3, #4]
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	89fb      	ldrh	r3, [r7, #14]
 800460a:	4413      	add	r3, r2
 800460c:	83fb      	strh	r3, [r7, #30]
      break;
 800460e:	e01b      	b.n	8004648 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004610:	89fb      	ldrh	r3, [r7, #14]
 8004612:	83fb      	strh	r3, [r7, #30]
      break;
 8004614:	e018      	b.n	8004648 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	b299      	uxth	r1, r3
 800461e:	4b36      	ldr	r3, [pc, #216]	@ (80046f8 <BSP_LCD_DisplayStringAt+0x188>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4836      	ldr	r0, [pc, #216]	@ (80046fc <BSP_LCD_DisplayStringAt+0x18c>)
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4403      	add	r3, r0
 800462e:	3308      	adds	r3, #8
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	889b      	ldrh	r3, [r3, #4]
 8004634:	fb11 f303 	smulbb	r3, r1, r3
 8004638:	b29a      	uxth	r2, r3
 800463a:	89fb      	ldrh	r3, [r7, #14]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	83fb      	strh	r3, [r7, #30]
      break;
 8004640:	e002      	b.n	8004648 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004642:	89fb      	ldrh	r3, [r7, #14]
 8004644:	83fb      	strh	r3, [r7, #30]
      break;
 8004646:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004648:	8bfb      	ldrh	r3, [r7, #30]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <BSP_LCD_DisplayStringAt+0xe6>
 800464e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004652:	2b00      	cmp	r3, #0
 8004654:	da1d      	bge.n	8004692 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004656:	2301      	movs	r3, #1
 8004658:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800465a:	e01a      	b.n	8004692 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	89b9      	ldrh	r1, [r7, #12]
 8004662:	8bfb      	ldrh	r3, [r7, #30]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff3f 	bl	80044e8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800466a:	4b23      	ldr	r3, [pc, #140]	@ (80046f8 <BSP_LCD_DisplayStringAt+0x188>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4923      	ldr	r1, [pc, #140]	@ (80046fc <BSP_LCD_DisplayStringAt+0x18c>)
 8004670:	4613      	mov	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3308      	adds	r3, #8
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	889a      	ldrh	r2, [r3, #4]
 8004680:	8bfb      	ldrh	r3, [r7, #30]
 8004682:	4413      	add	r3, r2
 8004684:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3301      	adds	r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
    i++;
 800468c:	8bbb      	ldrh	r3, [r7, #28]
 800468e:	3301      	adds	r3, #1
 8004690:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2dc      	uxtb	r4, r3
 80046a0:	f7ff fe30 	bl	8004304 <BSP_LCD_GetXSize>
 80046a4:	8bb9      	ldrh	r1, [r7, #28]
 80046a6:	4b14      	ldr	r3, [pc, #80]	@ (80046f8 <BSP_LCD_DisplayStringAt+0x188>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4d14      	ldr	r5, [pc, #80]	@ (80046fc <BSP_LCD_DisplayStringAt+0x18c>)
 80046ac:	4613      	mov	r3, r2
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	442b      	add	r3, r5
 80046b6:	3308      	adds	r3, #8
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	889b      	ldrh	r3, [r3, #4]
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ac3      	subs	r3, r0, r3
 80046c2:	b299      	uxth	r1, r3
 80046c4:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <BSP_LCD_DisplayStringAt+0x188>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	480c      	ldr	r0, [pc, #48]	@ (80046fc <BSP_LCD_DisplayStringAt+0x18c>)
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4403      	add	r3, r0
 80046d4:	3308      	adds	r3, #8
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	889b      	ldrh	r3, [r3, #4]
 80046da:	4299      	cmp	r1, r3
 80046dc:	bf2c      	ite	cs
 80046de:	2301      	movcs	r3, #1
 80046e0:	2300      	movcc	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4023      	ands	r3, r4
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1b7      	bne.n	800465c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bdb0      	pop	{r4, r5, r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200006c0 	.word	0x200006c0
 80046fc:	200006c4 	.word	0x200006c4

08004700 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af02      	add	r7, sp, #8
 8004706:	4603      	mov	r3, r0
 8004708:	80fb      	strh	r3, [r7, #6]
 800470a:	460b      	mov	r3, r1
 800470c:	80bb      	strh	r3, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004716:	4b26      	ldr	r3, [pc, #152]	@ (80047b0 <BSP_LCD_DrawHLine+0xb0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a26      	ldr	r2, [pc, #152]	@ (80047b4 <BSP_LCD_DrawHLine+0xb4>)
 800471c:	2134      	movs	r1, #52	@ 0x34
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	3348      	adds	r3, #72	@ 0x48
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d114      	bne.n	8004756 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <BSP_LCD_DrawHLine+0xb0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a20      	ldr	r2, [pc, #128]	@ (80047b4 <BSP_LCD_DrawHLine+0xb4>)
 8004732:	2134      	movs	r1, #52	@ 0x34
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	335c      	adds	r3, #92	@ 0x5c
 800473c:	681c      	ldr	r4, [r3, #0]
 800473e:	f7ff fde1 	bl	8004304 <BSP_LCD_GetXSize>
 8004742:	4602      	mov	r2, r0
 8004744:	88bb      	ldrh	r3, [r7, #4]
 8004746:	fb03 f202 	mul.w	r2, r3, r2
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	4413      	add	r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4423      	add	r3, r4
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e013      	b.n	800477e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004756:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <BSP_LCD_DrawHLine+0xb0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <BSP_LCD_DrawHLine+0xb4>)
 800475c:	2134      	movs	r1, #52	@ 0x34
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	335c      	adds	r3, #92	@ 0x5c
 8004766:	681c      	ldr	r4, [r3, #0]
 8004768:	f7ff fdcc 	bl	8004304 <BSP_LCD_GetXSize>
 800476c:	4602      	mov	r2, r0
 800476e:	88bb      	ldrh	r3, [r7, #4]
 8004770:	fb03 f202 	mul.w	r2, r3, r2
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4423      	add	r3, r4
 800477c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800477e:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <BSP_LCD_DrawHLine+0xb0>)
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	887c      	ldrh	r4, [r7, #2]
 8004786:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <BSP_LCD_DrawHLine+0xb0>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4d0b      	ldr	r5, [pc, #44]	@ (80047b8 <BSP_LCD_DrawHLine+0xb8>)
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	442b      	add	r3, r5
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	2300      	movs	r3, #0
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2301      	movs	r3, #1
 80047a0:	4622      	mov	r2, r4
 80047a2:	f000 fba9 	bl	8004ef8 <LL_FillBuffer>
}
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200006c0 	.word	0x200006c0
 80047b4:	200005d8 	.word	0x200005d8
 80047b8:	200006c4 	.word	0x200006c4

080047bc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	80fb      	strh	r3, [r7, #6]
 80047c6:	460b      	mov	r3, r1
 80047c8:	80bb      	strh	r3, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80047ce:	887b      	ldrh	r3, [r7, #2]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	f1c3 0303 	rsb	r3, r3, #3
 80047d6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80047dc:	887b      	ldrh	r3, [r7, #2]
 80047de:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80047e0:	e0c7      	b.n	8004972 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	4413      	add	r3, r2
 80047ea:	b298      	uxth	r0, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	88ba      	ldrh	r2, [r7, #4]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	b299      	uxth	r1, r3
 80047f6:	4b64      	ldr	r3, [pc, #400]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4c64      	ldr	r4, [pc, #400]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4423      	add	r3, r4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	f000 f8c1 	bl	8004990 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	b29b      	uxth	r3, r3
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	b298      	uxth	r0, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	b29b      	uxth	r3, r3
 800481c:	88ba      	ldrh	r2, [r7, #4]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	b299      	uxth	r1, r3
 8004822:	4b59      	ldr	r3, [pc, #356]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4c59      	ldr	r4, [pc, #356]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 8004828:	4613      	mov	r3, r2
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4423      	add	r3, r4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	f000 f8ab 	bl	8004990 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	b29a      	uxth	r2, r3
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	4413      	add	r3, r2
 8004842:	b298      	uxth	r0, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	b29b      	uxth	r3, r3
 8004848:	88ba      	ldrh	r2, [r7, #4]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	b299      	uxth	r1, r3
 800484e:	4b4e      	ldr	r3, [pc, #312]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4c4e      	ldr	r4, [pc, #312]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4423      	add	r3, r4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	f000 f895 	bl	8004990 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	b29b      	uxth	r3, r3
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	b298      	uxth	r0, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	b29b      	uxth	r3, r3
 8004874:	88ba      	ldrh	r2, [r7, #4]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	b299      	uxth	r1, r3
 800487a:	4b43      	ldr	r3, [pc, #268]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4c43      	ldr	r4, [pc, #268]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4423      	add	r3, r4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	f000 f87f 	bl	8004990 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	b29a      	uxth	r2, r3
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	4413      	add	r3, r2
 800489a:	b298      	uxth	r0, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	88bb      	ldrh	r3, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	b299      	uxth	r1, r3
 80048a6:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4c38      	ldr	r4, [pc, #224]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4423      	add	r3, r4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	f000 f869 	bl	8004990 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	b298      	uxth	r0, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	88bb      	ldrh	r3, [r7, #4]
 80048ce:	4413      	add	r3, r2
 80048d0:	b299      	uxth	r1, r3
 80048d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4c2d      	ldr	r4, [pc, #180]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 80048d8:	4613      	mov	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4423      	add	r3, r4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f000 f853 	bl	8004990 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	4413      	add	r3, r2
 80048f2:	b298      	uxth	r0, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	88bb      	ldrh	r3, [r7, #4]
 80048fa:	4413      	add	r3, r2
 80048fc:	b299      	uxth	r1, r3
 80048fe:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4c22      	ldr	r4, [pc, #136]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4423      	add	r3, r4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	f000 f83d 	bl	8004990 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	b29b      	uxth	r3, r3
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	b298      	uxth	r0, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	b29a      	uxth	r2, r3
 8004924:	88bb      	ldrh	r3, [r7, #4]
 8004926:	4413      	add	r3, r2
 8004928:	b299      	uxth	r1, r3
 800492a:	4b17      	ldr	r3, [pc, #92]	@ (8004988 <BSP_LCD_DrawCircle+0x1cc>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4c17      	ldr	r4, [pc, #92]	@ (800498c <BSP_LCD_DrawCircle+0x1d0>)
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4423      	add	r3, r4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	f000 f827 	bl	8004990 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	da06      	bge.n	8004956 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	009a      	lsls	r2, r3, #2
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4413      	add	r3, r2
 8004950:	3306      	adds	r3, #6
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e00a      	b.n	800496c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	009a      	lsls	r2, r3, #2
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4413      	add	r3, r2
 8004962:	330a      	adds	r3, #10
 8004964:	617b      	str	r3, [r7, #20]
      current_y--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3b01      	subs	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3301      	adds	r3, #1
 8004970:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	429a      	cmp	r2, r3
 8004978:	f67f af33 	bls.w	80047e2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}
 8004986:	bf00      	nop
 8004988:	200006c0 	.word	0x200006c0
 800498c:	200006c4 	.word	0x200006c4

08004990 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004990:	b5b0      	push	{r4, r5, r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	603a      	str	r2, [r7, #0]
 800499a:	80fb      	strh	r3, [r7, #6]
 800499c:	460b      	mov	r3, r1
 800499e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80049a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <BSP_LCD_DrawPixel+0x88>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <BSP_LCD_DrawPixel+0x8c>)
 80049a6:	2134      	movs	r1, #52	@ 0x34
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	3348      	adds	r3, #72	@ 0x48
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d116      	bne.n	80049e4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80049b6:	4b18      	ldr	r3, [pc, #96]	@ (8004a18 <BSP_LCD_DrawPixel+0x88>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <BSP_LCD_DrawPixel+0x8c>)
 80049bc:	2134      	movs	r1, #52	@ 0x34
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	335c      	adds	r3, #92	@ 0x5c
 80049c6:	681c      	ldr	r4, [r3, #0]
 80049c8:	88bd      	ldrh	r5, [r7, #4]
 80049ca:	f7ff fc9b 	bl	8004304 <BSP_LCD_GetXSize>
 80049ce:	4603      	mov	r3, r0
 80049d0:	fb03 f205 	mul.w	r2, r3, r5
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	4413      	add	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4423      	add	r3, r4
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	b292      	uxth	r2, r2
 80049e0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80049e2:	e015      	b.n	8004a10 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <BSP_LCD_DrawPixel+0x88>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0c      	ldr	r2, [pc, #48]	@ (8004a1c <BSP_LCD_DrawPixel+0x8c>)
 80049ea:	2134      	movs	r1, #52	@ 0x34
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	335c      	adds	r3, #92	@ 0x5c
 80049f4:	681c      	ldr	r4, [r3, #0]
 80049f6:	88bd      	ldrh	r5, [r7, #4]
 80049f8:	f7ff fc84 	bl	8004304 <BSP_LCD_GetXSize>
 80049fc:	4603      	mov	r3, r0
 80049fe:	fb03 f205 	mul.w	r2, r3, r5
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4423      	add	r3, r4
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bdb0      	pop	{r4, r5, r7, pc}
 8004a18:	200006c0 	.word	0x200006c0
 8004a1c:	200005d8 	.word	0x200005d8

08004a20 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	80bb      	strh	r3, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	f1c3 0303 	rsb	r3, r3, #3
 8004a3a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004a44:	4b44      	ldr	r3, [pc, #272]	@ (8004b58 <BSP_LCD_FillCircle+0x138>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4944      	ldr	r1, [pc, #272]	@ (8004b5c <BSP_LCD_FillCircle+0x13c>)
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fcec 	bl	8004434 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004a5c:	e061      	b.n	8004b22 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d021      	beq.n	8004aa8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	b298      	uxth	r0, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	88bb      	ldrh	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	b299      	uxth	r1, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	f7ff fe3d 	bl	8004700 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	b298      	uxth	r0, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	88ba      	ldrh	r2, [r7, #4]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	b299      	uxth	r1, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f7ff fe2c 	bl	8004700 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d021      	beq.n	8004af2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	b298      	uxth	r0, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	88ba      	ldrh	r2, [r7, #4]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	b299      	uxth	r1, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	f7ff fe18 	bl	8004700 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	b298      	uxth	r0, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	88bb      	ldrh	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	f7ff fe07 	bl	8004700 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da06      	bge.n	8004b06 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	4413      	add	r3, r2
 8004b00:	3306      	adds	r3, #6
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e00a      	b.n	8004b1c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	009a      	lsls	r2, r3, #2
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4413      	add	r3, r2
 8004b12:	330a      	adds	r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
      current_y--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d999      	bls.n	8004a5e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <BSP_LCD_FillCircle+0x138>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	490b      	ldr	r1, [pc, #44]	@ (8004b5c <BSP_LCD_FillCircle+0x13c>)
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fc79 	bl	8004434 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	88b9      	ldrh	r1, [r7, #4]
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fe37 	bl	80047bc <BSP_LCD_DrawCircle>
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200006c0 	.word	0x200006c0
 8004b5c:	200006c4 	.word	0x200006c4

08004b60 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004b64:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <BSP_LCD_DisplayOn+0x30>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <BSP_LCD_DisplayOn+0x30>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004b74:	2201      	movs	r2, #1
 8004b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b7a:	4806      	ldr	r0, [pc, #24]	@ (8004b94 <BSP_LCD_DisplayOn+0x34>)
 8004b7c:	f002 fd0a 	bl	8007594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004b80:	2201      	movs	r2, #1
 8004b82:	2108      	movs	r1, #8
 8004b84:	4804      	ldr	r0, [pc, #16]	@ (8004b98 <BSP_LCD_DisplayOn+0x38>)
 8004b86:	f002 fd05 	bl	8007594 <HAL_GPIO_WritePin>
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	200005d8 	.word	0x200005d8
 8004b94:	40022000 	.word	0x40022000
 8004b98:	40022800 	.word	0x40022800

08004b9c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b090      	sub	sp, #64	@ 0x40
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004ba6:	4b64      	ldr	r3, [pc, #400]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004baa:	4a63      	ldr	r2, [pc, #396]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bb2:	4b61      	ldr	r3, [pc, #388]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	4a5d      	ldr	r2, [pc, #372]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bca:	4b5b      	ldr	r3, [pc, #364]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bd6:	4b58      	ldr	r3, [pc, #352]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	4a57      	ldr	r2, [pc, #348]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bdc:	f043 0310 	orr.w	r3, r3, #16
 8004be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be2:	4b55      	ldr	r3, [pc, #340]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	623b      	str	r3, [r7, #32]
 8004bec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bee:	4b52      	ldr	r3, [pc, #328]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	4a51      	ldr	r2, [pc, #324]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004c06:	4b4c      	ldr	r3, [pc, #304]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	4a4b      	ldr	r2, [pc, #300]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c12:	4b49      	ldr	r3, [pc, #292]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004c1e:	4b46      	ldr	r3, [pc, #280]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	4a45      	ldr	r2, [pc, #276]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c2a:	4b43      	ldr	r3, [pc, #268]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004c36:	4b40      	ldr	r3, [pc, #256]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c42:	4b3d      	ldr	r3, [pc, #244]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	4a39      	ldr	r2, [pc, #228]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5a:	4b37      	ldr	r3, [pc, #220]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004c66:	4b34      	ldr	r3, [pc, #208]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6a:	4a33      	ldr	r2, [pc, #204]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c72:	4b31      	ldr	r3, [pc, #196]	@ (8004d38 <BSP_LCD_MspInit+0x19c>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004c7e:	2310      	movs	r3, #16
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c82:	2302      	movs	r3, #2
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004c8e:	230e      	movs	r3, #14
 8004c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c96:	4619      	mov	r1, r3
 8004c98:	4828      	ldr	r0, [pc, #160]	@ (8004d3c <BSP_LCD_MspInit+0x1a0>)
 8004c9a:	f002 f9ab 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004ca8:	2309      	movs	r3, #9
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4823      	ldr	r0, [pc, #140]	@ (8004d40 <BSP_LCD_MspInit+0x1a4>)
 8004cb4:	f002 f99e 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004cb8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004cc2:	230e      	movs	r3, #14
 8004cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004cc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cca:	4619      	mov	r1, r3
 8004ccc:	481d      	ldr	r0, [pc, #116]	@ (8004d44 <BSP_LCD_MspInit+0x1a8>)
 8004cce:	f002 f991 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004cd2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004cdc:	230e      	movs	r3, #14
 8004cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4818      	ldr	r0, [pc, #96]	@ (8004d48 <BSP_LCD_MspInit+0x1ac>)
 8004ce8:	f002 f984 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004cec:	23f7      	movs	r3, #247	@ 0xf7
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004cf4:	230e      	movs	r3, #14
 8004cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4813      	ldr	r0, [pc, #76]	@ (8004d4c <BSP_LCD_MspInit+0x1b0>)
 8004d00:	f002 f978 	bl	8006ff4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d12:	4619      	mov	r1, r3
 8004d14:	480b      	ldr	r0, [pc, #44]	@ (8004d44 <BSP_LCD_MspInit+0x1a8>)
 8004d16:	f002 f96d 	bl	8006ff4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d26:	4619      	mov	r1, r3
 8004d28:	4808      	ldr	r0, [pc, #32]	@ (8004d4c <BSP_LCD_MspInit+0x1b0>)
 8004d2a:	f002 f963 	bl	8006ff4 <HAL_GPIO_Init>
}
 8004d2e:	bf00      	nop
 8004d30:	3740      	adds	r7, #64	@ 0x40
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40021800 	.word	0x40021800
 8004d44:	40022000 	.word	0x40022000
 8004d48:	40022400 	.word	0x40022400
 8004d4c:	40022800 	.word	0x40022800

08004d50 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <BSP_LCD_ClockConfig+0x34>)
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004d60:	4b08      	ldr	r3, [pc, #32]	@ (8004d84 <BSP_LCD_ClockConfig+0x34>)
 8004d62:	22c0      	movs	r2, #192	@ 0xc0
 8004d64:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004d66:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <BSP_LCD_ClockConfig+0x34>)
 8004d68:	2205      	movs	r2, #5
 8004d6a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <BSP_LCD_ClockConfig+0x34>)
 8004d6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004d74:	4803      	ldr	r0, [pc, #12]	@ (8004d84 <BSP_LCD_ClockConfig+0x34>)
 8004d76:	f004 fb29 	bl	80093cc <HAL_RCCEx_PeriphCLKConfig>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200006dc 	.word	0x200006dc

08004d88 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	603a      	str	r2, [r7, #0]
 8004d92:	80fb      	strh	r3, [r7, #6]
 8004d94:	460b      	mov	r3, r1
 8004d96:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004da0:	4b53      	ldr	r3, [pc, #332]	@ (8004ef0 <DrawChar+0x168>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4953      	ldr	r1, [pc, #332]	@ (8004ef4 <DrawChar+0x16c>)
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3308      	adds	r3, #8
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	88db      	ldrh	r3, [r3, #6]
 8004db6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004db8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef0 <DrawChar+0x168>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	494d      	ldr	r1, [pc, #308]	@ (8004ef4 <DrawChar+0x16c>)
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	3308      	adds	r3, #8
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	889b      	ldrh	r3, [r3, #4]
 8004dce:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004dd0:	8a3b      	ldrh	r3, [r7, #16]
 8004dd2:	3307      	adds	r3, #7
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	da00      	bge.n	8004dda <DrawChar+0x52>
 8004dd8:	3307      	adds	r3, #7
 8004dda:	10db      	asrs	r3, r3, #3
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	8a3b      	ldrh	r3, [r7, #16]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	e076      	b.n	8004ede <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004df0:	8a3b      	ldrh	r3, [r7, #16]
 8004df2:	3307      	adds	r3, #7
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da00      	bge.n	8004dfa <DrawChar+0x72>
 8004df8:	3307      	adds	r3, #7
 8004dfa:	10db      	asrs	r3, r3, #3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004e0a:	8a3b      	ldrh	r3, [r7, #16]
 8004e0c:	3307      	adds	r3, #7
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da00      	bge.n	8004e14 <DrawChar+0x8c>
 8004e12:	3307      	adds	r3, #7
 8004e14:	10db      	asrs	r3, r3, #3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d002      	beq.n	8004e20 <DrawChar+0x98>
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d004      	beq.n	8004e28 <DrawChar+0xa0>
 8004e1e:	e00c      	b.n	8004e3a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	617b      	str	r3, [r7, #20]
      break;
 8004e26:	e016      	b.n	8004e56 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	3201      	adds	r2, #1
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
      break;
 8004e38:	e00d      	b.n	8004e56 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	041a      	lsls	r2, r3, #16
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3301      	adds	r3, #1
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	3202      	adds	r2, #2
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
      break;
 8004e54:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e036      	b.n	8004eca <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004e5c:	8a3a      	ldrh	r2, [r7, #16]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	1ad2      	subs	r2, r2, r3
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	4413      	add	r3, r2
 8004e66:	3b01      	subs	r3, #1
 8004e68:	2201      	movs	r2, #1
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	4413      	add	r3, r2
 8004e80:	b298      	uxth	r0, r3
 8004e82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <DrawChar+0x168>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	491b      	ldr	r1, [pc, #108]	@ (8004ef4 <DrawChar+0x16c>)
 8004e88:	4613      	mov	r3, r2
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	88bb      	ldrh	r3, [r7, #4]
 8004e96:	4619      	mov	r1, r3
 8004e98:	f7ff fd7a 	bl	8004990 <BSP_LCD_DrawPixel>
 8004e9c:	e012      	b.n	8004ec4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b298      	uxth	r0, r3
 8004ea8:	4b11      	ldr	r3, [pc, #68]	@ (8004ef0 <DrawChar+0x168>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4911      	ldr	r1, [pc, #68]	@ (8004ef4 <DrawChar+0x16c>)
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3304      	adds	r3, #4
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	88bb      	ldrh	r3, [r7, #4]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7ff fd66 	bl	8004990 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	8a3b      	ldrh	r3, [r7, #16]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3c4      	bcc.n	8004e5c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004ed2:	88bb      	ldrh	r3, [r7, #4]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	8a7b      	ldrh	r3, [r7, #18]
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d384      	bcc.n	8004df0 <DrawChar+0x68>
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	200006c0 	.word	0x200006c0
 8004ef4:	200006c4 	.word	0x200006c4

08004ef8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004f06:	4b1e      	ldr	r3, [pc, #120]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004f0c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f84 <LL_FillBuffer+0x8c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1d      	ldr	r2, [pc, #116]	@ (8004f88 <LL_FillBuffer+0x90>)
 8004f14:	2134      	movs	r1, #52	@ 0x34
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3348      	adds	r3, #72	@ 0x48
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d103      	bne.n	8004f2c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004f24:	4b16      	ldr	r3, [pc, #88]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f26:	2202      	movs	r2, #2
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	e002      	b.n	8004f32 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004f2c:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004f32:	4a13      	ldr	r2, [pc, #76]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f3a:	4a14      	ldr	r2, [pc, #80]	@ (8004f8c <LL_FillBuffer+0x94>)
 8004f3c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004f3e:	4810      	ldr	r0, [pc, #64]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f40:	f001 fcbc 	bl	80068bc <HAL_DMA2D_Init>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d115      	bne.n	8004f76 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	480c      	ldr	r0, [pc, #48]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f4e:	f001 ff23 	bl	8006d98 <HAL_DMA2D_ConfigLayer>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10e      	bne.n	8004f76 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69f9      	ldr	r1, [r7, #28]
 8004f62:	4807      	ldr	r0, [pc, #28]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f64:	f001 fcf4 	bl	8006950 <HAL_DMA2D_Start>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004f6e:	210a      	movs	r1, #10
 8004f70:	4803      	ldr	r0, [pc, #12]	@ (8004f80 <LL_FillBuffer+0x88>)
 8004f72:	f001 fd18 	bl	80069a6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000680 	.word	0x20000680
 8004f84:	200006c0 	.word	0x200006c0
 8004f88:	200005d8 	.word	0x200005d8
 8004f8c:	4002b000 	.word	0x4002b000

08004f90 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004f94:	4b29      	ldr	r3, [pc, #164]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004f96:	4a2a      	ldr	r2, [pc, #168]	@ (8005040 <BSP_SDRAM_Init+0xb0>)
 8004f98:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004fa0:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004fa6:	4b27      	ldr	r3, [pc, #156]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8004fa8:	2204      	movs	r2, #4
 8004faa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004fac:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8004fae:	2207      	movs	r2, #7
 8004fb0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004fb2:	4b24      	ldr	r3, [pc, #144]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004fb8:	4b22      	ldr	r3, [pc, #136]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8004fba:	2202      	movs	r2, #2
 8004fbc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004fbe:	4b21      	ldr	r3, [pc, #132]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004fca:	4b1c      	ldr	r3, [pc, #112]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004fd6:	4b19      	ldr	r3, [pc, #100]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004fd8:	2210      	movs	r2, #16
 8004fda:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004fdc:	4b17      	ldr	r3, [pc, #92]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004fde:	2240      	movs	r2, #64	@ 0x40
 8004fe0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004fe2:	4b16      	ldr	r3, [pc, #88]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fe8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004fea:	4b14      	ldr	r3, [pc, #80]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004ff0:	4b12      	ldr	r3, [pc, #72]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ff6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004ff8:	4b10      	ldr	r3, [pc, #64]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8004ffa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005000:	4b0e      	ldr	r3, [pc, #56]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8005002:	2200      	movs	r2, #0
 8005004:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005006:	2100      	movs	r1, #0
 8005008:	480c      	ldr	r0, [pc, #48]	@ (800503c <BSP_SDRAM_Init+0xac>)
 800500a:	f000 f87f 	bl	800510c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800500e:	490d      	ldr	r1, [pc, #52]	@ (8005044 <BSP_SDRAM_Init+0xb4>)
 8005010:	480a      	ldr	r0, [pc, #40]	@ (800503c <BSP_SDRAM_Init+0xac>)
 8005012:	f004 fdcb 	bl	8009bac <HAL_SDRAM_Init>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <BSP_SDRAM_Init+0xb8>)
 800501e:	2201      	movs	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e002      	b.n	800502a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005024:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <BSP_SDRAM_Init+0xb8>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800502a:	f240 6003 	movw	r0, #1539	@ 0x603
 800502e:	f000 f80d 	bl	800504c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005032:	4b05      	ldr	r3, [pc, #20]	@ (8005048 <BSP_SDRAM_Init+0xb8>)
 8005034:	781b      	ldrb	r3, [r3, #0]
}
 8005036:	4618      	mov	r0, r3
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000760 	.word	0x20000760
 8005040:	a0000140 	.word	0xa0000140
 8005044:	20000794 	.word	0x20000794
 8005048:	20000198 	.word	0x20000198

0800504c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005058:	4b2a      	ldr	r3, [pc, #168]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800505e:	4b29      	ldr	r3, [pc, #164]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005060:	2210      	movs	r2, #16
 8005062:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005064:	4b27      	ldr	r3, [pc, #156]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005066:	2201      	movs	r2, #1
 8005068:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800506a:	4b26      	ldr	r3, [pc, #152]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800506c:	2200      	movs	r2, #0
 800506e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005074:	4923      	ldr	r1, [pc, #140]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005076:	4824      	ldr	r0, [pc, #144]	@ (8005108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005078:	f004 fdcc 	bl	8009c14 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800507c:	2001      	movs	r0, #1
 800507e:	f000 ffbf 	bl	8006000 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005082:	4b20      	ldr	r3, [pc, #128]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005084:	2202      	movs	r2, #2
 8005086:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005088:	4b1e      	ldr	r3, [pc, #120]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800508a:	2210      	movs	r2, #16
 800508c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800508e:	4b1d      	ldr	r3, [pc, #116]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005090:	2201      	movs	r2, #1
 8005092:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005094:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005096:	2200      	movs	r2, #0
 8005098:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800509a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800509e:	4919      	ldr	r1, [pc, #100]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050a0:	4819      	ldr	r0, [pc, #100]	@ (8005108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050a2:	f004 fdb7 	bl	8009c14 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80050a6:	4b17      	ldr	r3, [pc, #92]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050a8:	2203      	movs	r2, #3
 80050aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80050ac:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050ae:	2210      	movs	r2, #16
 80050b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80050b2:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050b4:	2208      	movs	r2, #8
 80050b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80050b8:	4b12      	ldr	r3, [pc, #72]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80050be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050c2:	4910      	ldr	r1, [pc, #64]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050c4:	4810      	ldr	r0, [pc, #64]	@ (8005108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050c6:	f004 fda5 	bl	8009c14 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80050ca:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80050ce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050d2:	2204      	movs	r2, #4
 80050d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050d8:	2210      	movs	r2, #16
 80050da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80050dc:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050de:	2201      	movs	r2, #1
 80050e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a07      	ldr	r2, [pc, #28]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050e6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80050e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050ec:	4905      	ldr	r1, [pc, #20]	@ (8005104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050ee:	4806      	ldr	r0, [pc, #24]	@ (8005108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050f0:	f004 fd90 	bl	8009c14 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4804      	ldr	r0, [pc, #16]	@ (8005108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050f8:	f004 fdc1 	bl	8009c7e <HAL_SDRAM_ProgramRefreshRate>
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	200007b0 	.word	0x200007b0
 8005108:	20000760 	.word	0x20000760

0800510c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800510c:	b580      	push	{r7, lr}
 800510e:	b090      	sub	sp, #64	@ 0x40
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005116:	4b70      	ldr	r3, [pc, #448]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511a:	4a6f      	ldr	r2, [pc, #444]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6393      	str	r3, [r2, #56]	@ 0x38
 8005122:	4b6d      	ldr	r3, [pc, #436]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800512e:	4b6a      	ldr	r3, [pc, #424]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005132:	4a69      	ldr	r2, [pc, #420]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005134:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005138:	6313      	str	r3, [r2, #48]	@ 0x30
 800513a:	4b67      	ldr	r3, [pc, #412]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005146:	4b64      	ldr	r3, [pc, #400]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	4a63      	ldr	r2, [pc, #396]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 800514c:	f043 0304 	orr.w	r3, r3, #4
 8005150:	6313      	str	r3, [r2, #48]	@ 0x30
 8005152:	4b61      	ldr	r3, [pc, #388]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800515e:	4b5e      	ldr	r3, [pc, #376]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	4a5d      	ldr	r2, [pc, #372]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005164:	f043 0308 	orr.w	r3, r3, #8
 8005168:	6313      	str	r3, [r2, #48]	@ 0x30
 800516a:	4b5b      	ldr	r3, [pc, #364]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005176:	4b58      	ldr	r3, [pc, #352]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	4a57      	ldr	r2, [pc, #348]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 800517c:	f043 0310 	orr.w	r3, r3, #16
 8005180:	6313      	str	r3, [r2, #48]	@ 0x30
 8005182:	4b55      	ldr	r3, [pc, #340]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800518e:	4b52      	ldr	r3, [pc, #328]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	4a51      	ldr	r2, [pc, #324]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	6313      	str	r3, [r2, #48]	@ 0x30
 800519a:	4b4f      	ldr	r3, [pc, #316]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051a6:	4b4c      	ldr	r3, [pc, #304]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	4a4b      	ldr	r2, [pc, #300]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 80051ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80051b2:	4b49      	ldr	r3, [pc, #292]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051be:	4b46      	ldr	r3, [pc, #280]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c2:	4a45      	ldr	r2, [pc, #276]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 80051c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ca:	4b43      	ldr	r3, [pc, #268]	@ (80052d8 <BSP_SDRAM_MspInit+0x1cc>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051d6:	2302      	movs	r3, #2
 80051d8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80051da:	2301      	movs	r3, #1
 80051dc:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80051de:	2302      	movs	r3, #2
 80051e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80051e2:	230c      	movs	r3, #12
 80051e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80051e6:	2308      	movs	r3, #8
 80051e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80051ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051ee:	4619      	mov	r1, r3
 80051f0:	483a      	ldr	r0, [pc, #232]	@ (80052dc <BSP_SDRAM_MspInit+0x1d0>)
 80051f2:	f001 feff 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80051f6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80051fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005200:	4619      	mov	r1, r3
 8005202:	4837      	ldr	r0, [pc, #220]	@ (80052e0 <BSP_SDRAM_MspInit+0x1d4>)
 8005204:	f001 fef6 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005208:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800520e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005212:	4619      	mov	r1, r3
 8005214:	4833      	ldr	r0, [pc, #204]	@ (80052e4 <BSP_SDRAM_MspInit+0x1d8>)
 8005216:	f001 feed 	bl	8006ff4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800521a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800521e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005224:	4619      	mov	r1, r3
 8005226:	4830      	ldr	r0, [pc, #192]	@ (80052e8 <BSP_SDRAM_MspInit+0x1dc>)
 8005228:	f001 fee4 	bl	8006ff4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800522c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005236:	4619      	mov	r1, r3
 8005238:	482c      	ldr	r0, [pc, #176]	@ (80052ec <BSP_SDRAM_MspInit+0x1e0>)
 800523a:	f001 fedb 	bl	8006ff4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800523e:	2328      	movs	r3, #40	@ 0x28
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005246:	4619      	mov	r1, r3
 8005248:	4829      	ldr	r0, [pc, #164]	@ (80052f0 <BSP_SDRAM_MspInit+0x1e4>)
 800524a:	f001 fed3 	bl	8006ff4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800524e:	4b29      	ldr	r3, [pc, #164]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005254:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005256:	2280      	movs	r2, #128	@ 0x80
 8005258:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800525a:	4b26      	ldr	r3, [pc, #152]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 800525c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005260:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005262:	4b24      	ldr	r3, [pc, #144]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005268:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800526a:	4b22      	ldr	r3, [pc, #136]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 800526c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005270:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005272:	4b20      	ldr	r3, [pc, #128]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005274:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005278:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800527a:	4b1e      	ldr	r3, [pc, #120]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 800527c:	2200      	movs	r2, #0
 800527e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005280:	4b1c      	ldr	r3, [pc, #112]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005282:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005286:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005288:	4b1a      	ldr	r3, [pc, #104]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 800528a:	2200      	movs	r2, #0
 800528c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800528e:	4b19      	ldr	r3, [pc, #100]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005290:	2203      	movs	r2, #3
 8005292:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005294:	4b17      	ldr	r3, [pc, #92]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 8005296:	2200      	movs	r2, #0
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800529a:	4b16      	ldr	r3, [pc, #88]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80052a0:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 80052a2:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <BSP_SDRAM_MspInit+0x1ec>)
 80052a4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a12      	ldr	r2, [pc, #72]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ac:	4a11      	ldr	r2, [pc, #68]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80052b2:	4810      	ldr	r0, [pc, #64]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 80052b4:	f001 f9f2 	bl	800669c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80052b8:	480e      	ldr	r0, [pc, #56]	@ (80052f4 <BSP_SDRAM_MspInit+0x1e8>)
 80052ba:	f001 f941 	bl	8006540 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80052be:	2200      	movs	r2, #0
 80052c0:	210f      	movs	r1, #15
 80052c2:	2038      	movs	r0, #56	@ 0x38
 80052c4:	f000 ff9b 	bl	80061fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80052c8:	2038      	movs	r0, #56	@ 0x38
 80052ca:	f000 ffb4 	bl	8006236 <HAL_NVIC_EnableIRQ>
}
 80052ce:	bf00      	nop
 80052d0:	3740      	adds	r7, #64	@ 0x40
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40023800 	.word	0x40023800
 80052dc:	40020800 	.word	0x40020800
 80052e0:	40020c00 	.word	0x40020c00
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40021400 	.word	0x40021400
 80052ec:	40021800 	.word	0x40021800
 80052f0:	40021c00 	.word	0x40021c00
 80052f4:	200007c0 	.word	0x200007c0
 80052f8:	40026410 	.word	0x40026410

080052fc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	460a      	mov	r2, r1
 8005306:	80fb      	strh	r3, [r7, #6]
 8005308:	4613      	mov	r3, r2
 800530a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005310:	4a14      	ldr	r2, [pc, #80]	@ (8005364 <BSP_TS_Init+0x68>)
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005316:	4a14      	ldr	r2, [pc, #80]	@ (8005368 <BSP_TS_Init+0x6c>)
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800531c:	4b13      	ldr	r3, [pc, #76]	@ (800536c <BSP_TS_Init+0x70>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2070      	movs	r0, #112	@ 0x70
 8005322:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005324:	4b11      	ldr	r3, [pc, #68]	@ (800536c <BSP_TS_Init+0x70>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2070      	movs	r0, #112	@ 0x70
 800532a:	4798      	blx	r3
 800532c:	4603      	mov	r3, r0
 800532e:	2b51      	cmp	r3, #81	@ 0x51
 8005330:	d110      	bne.n	8005354 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005332:	4b0f      	ldr	r3, [pc, #60]	@ (8005370 <BSP_TS_Init+0x74>)
 8005334:	4a0d      	ldr	r2, [pc, #52]	@ (800536c <BSP_TS_Init+0x70>)
 8005336:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005338:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <BSP_TS_Init+0x78>)
 800533a:	2270      	movs	r2, #112	@ 0x70
 800533c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <BSP_TS_Init+0x7c>)
 8005340:	2208      	movs	r2, #8
 8005342:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <BSP_TS_Init+0x74>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <BSP_TS_Init+0x78>)
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	4610      	mov	r0, r2
 8005350:	4798      	blx	r3
 8005352:	e001      	b.n	8005358 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005354:	2303      	movs	r3, #3
 8005356:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000824 	.word	0x20000824
 8005368:	20000826 	.word	0x20000826
 800536c:	2000000c 	.word	0x2000000c
 8005370:	20000820 	.word	0x20000820
 8005374:	20000829 	.word	0x20000829
 8005378:	20000828 	.word	0x20000828

0800537c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b097      	sub	sp, #92	@ 0x5c
 8005380:	af02      	add	r7, sp, #8
 8005382:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005396:	4bb8      	ldr	r3, [pc, #736]	@ (8005678 <BSP_TS_GetState+0x2fc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	4ab7      	ldr	r2, [pc, #732]	@ (800567c <BSP_TS_GetState+0x300>)
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8198 	beq.w	80056e6 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ba:	e187      	b.n	80056cc <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80053bc:	4bae      	ldr	r3, [pc, #696]	@ (8005678 <BSP_TS_GetState+0x2fc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	4aae      	ldr	r2, [pc, #696]	@ (800567c <BSP_TS_GetState+0x300>)
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	4614      	mov	r4, r2
 80053c8:	f107 0120 	add.w	r1, r7, #32
 80053cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ce:	0052      	lsls	r2, r2, #1
 80053d0:	1888      	adds	r0, r1, r2
 80053d2:	f107 0114 	add.w	r1, r7, #20
 80053d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053d8:	0052      	lsls	r2, r2, #1
 80053da:	440a      	add	r2, r1
 80053dc:	4601      	mov	r1, r0
 80053de:	4620      	mov	r0, r4
 80053e0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80053e2:	4ba7      	ldr	r3, [pc, #668]	@ (8005680 <BSP_TS_GetState+0x304>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d117      	bne.n	800541a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80053ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	3350      	adds	r3, #80	@ 0x50
 80053f0:	443b      	add	r3, r7
 80053f2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80053f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	3350      	adds	r3, #80	@ 0x50
 80053fc:	443b      	add	r3, r7
 80053fe:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	3350      	adds	r3, #80	@ 0x50
 8005408:	443b      	add	r3, r7
 800540a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800540e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	3350      	adds	r3, #80	@ 0x50
 8005414:	443b      	add	r3, r7
 8005416:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800541a:	4b99      	ldr	r3, [pc, #612]	@ (8005680 <BSP_TS_GetState+0x304>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8005426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	3350      	adds	r3, #80	@ 0x50
 800542c:	443b      	add	r3, r7
 800542e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005432:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005436:	b29a      	uxth	r2, r3
 8005438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	3350      	adds	r3, #80	@ 0x50
 800543e:	443b      	add	r3, r7
 8005440:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005444:	4b8e      	ldr	r3, [pc, #568]	@ (8005680 <BSP_TS_GetState+0x304>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8005450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	3350      	adds	r3, #80	@ 0x50
 8005456:	443b      	add	r3, r7
 8005458:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800545c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005460:	b29a      	uxth	r2, r3
 8005462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	3350      	adds	r3, #80	@ 0x50
 8005468:	443b      	add	r3, r7
 800546a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800546e:	4b84      	ldr	r3, [pc, #528]	@ (8005680 <BSP_TS_GetState+0x304>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800547a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	3350      	adds	r3, #80	@ 0x50
 8005480:	443b      	add	r3, r7
 8005482:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	3350      	adds	r3, #80	@ 0x50
 800548c:	443b      	add	r3, r7
 800548e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	3350      	adds	r3, #80	@ 0x50
 8005498:	443b      	add	r3, r7
 800549a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800549e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	3350      	adds	r3, #80	@ 0x50
 80054a4:	443b      	add	r3, r7
 80054a6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80054aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	3350      	adds	r3, #80	@ 0x50
 80054b0:	443b      	add	r3, r7
 80054b2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4a72      	ldr	r2, [pc, #456]	@ (8005684 <BSP_TS_GetState+0x308>)
 80054ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	4299      	cmp	r1, r3
 80054c2:	d90d      	bls.n	80054e0 <BSP_TS_GetState+0x164>
 80054c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	3350      	adds	r3, #80	@ 0x50
 80054ca:	443b      	add	r3, r7
 80054cc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80054d0:	496c      	ldr	r1, [pc, #432]	@ (8005684 <BSP_TS_GetState+0x308>)
 80054d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	b29b      	uxth	r3, r3
 80054de:	e00c      	b.n	80054fa <BSP_TS_GetState+0x17e>
 80054e0:	4a68      	ldr	r2, [pc, #416]	@ (8005684 <BSP_TS_GetState+0x308>)
 80054e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	3350      	adds	r3, #80	@ 0x50
 80054f0:	443b      	add	r3, r7
 80054f2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80054fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	3350      	adds	r3, #80	@ 0x50
 8005504:	443b      	add	r3, r7
 8005506:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800550a:	4619      	mov	r1, r3
 800550c:	4a5e      	ldr	r2, [pc, #376]	@ (8005688 <BSP_TS_GetState+0x30c>)
 800550e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005514:	4299      	cmp	r1, r3
 8005516:	d90d      	bls.n	8005534 <BSP_TS_GetState+0x1b8>
 8005518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	3350      	adds	r3, #80	@ 0x50
 800551e:	443b      	add	r3, r7
 8005520:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005524:	4958      	ldr	r1, [pc, #352]	@ (8005688 <BSP_TS_GetState+0x30c>)
 8005526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005528:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800552c:	b29b      	uxth	r3, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	e00c      	b.n	800554e <BSP_TS_GetState+0x1d2>
 8005534:	4a54      	ldr	r2, [pc, #336]	@ (8005688 <BSP_TS_GetState+0x30c>)
 8005536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553c:	b29a      	uxth	r2, r3
 800553e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	3350      	adds	r3, #80	@ 0x50
 8005544:	443b      	add	r3, r7
 8005546:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	b29b      	uxth	r3, r3
 800554e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8005552:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005556:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800555a:	4413      	add	r3, r2
 800555c:	2b05      	cmp	r3, #5
 800555e:	dd15      	ble.n	800558c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	3350      	adds	r3, #80	@ 0x50
 8005566:	443b      	add	r3, r7
 8005568:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800556c:	4619      	mov	r1, r3
 800556e:	4a45      	ldr	r2, [pc, #276]	@ (8005684 <BSP_TS_GetState+0x308>)
 8005570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	3350      	adds	r3, #80	@ 0x50
 800557c:	443b      	add	r3, r7
 800557e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005582:	4619      	mov	r1, r3
 8005584:	4a40      	ldr	r2, [pc, #256]	@ (8005688 <BSP_TS_GetState+0x30c>)
 8005586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800558c:	4b3b      	ldr	r3, [pc, #236]	@ (800567c <BSP_TS_GetState+0x300>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b70      	cmp	r3, #112	@ 0x70
 8005592:	d119      	bne.n	80055c8 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	3350      	adds	r3, #80	@ 0x50
 800559a:	443b      	add	r3, r7
 800559c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	4413      	add	r3, r2
 80055a8:	460a      	mov	r2, r1
 80055aa:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80055ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	3350      	adds	r3, #80	@ 0x50
 80055b2:	443b      	add	r3, r7
 80055b4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055bc:	3304      	adds	r3, #4
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4413      	add	r3, r2
 80055c2:	460a      	mov	r2, r1
 80055c4:	809a      	strh	r2, [r3, #4]
 80055c6:	e022      	b.n	800560e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80055c8:	4b30      	ldr	r3, [pc, #192]	@ (800568c <BSP_TS_GetState+0x310>)
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	4619      	mov	r1, r3
 80055ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005684 <BSP_TS_GetState+0x308>)
 80055d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d6:	fb01 f303 	mul.w	r3, r1, r3
 80055da:	0b1b      	lsrs	r3, r3, #12
 80055dc:	b299      	uxth	r1, r3
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	460a      	mov	r2, r1
 80055e8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80055ea:	4b29      	ldr	r3, [pc, #164]	@ (8005690 <BSP_TS_GetState+0x314>)
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	4619      	mov	r1, r3
 80055f0:	4a25      	ldr	r2, [pc, #148]	@ (8005688 <BSP_TS_GetState+0x30c>)
 80055f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	0b1b      	lsrs	r3, r3, #12
 80055fe:	b299      	uxth	r1, r3
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005604:	3304      	adds	r3, #4
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4413      	add	r3, r2
 800560a:	460a      	mov	r2, r1
 800560c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800560e:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <BSP_TS_GetState+0x300>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f107 010c 	add.w	r1, r7, #12
 8005618:	f107 0210 	add.w	r2, r7, #16
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	460b      	mov	r3, r1
 8005624:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005626:	f7fc fb65 	bl	8001cf4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	b2d9      	uxtb	r1, r3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005632:	4413      	add	r3, r2
 8005634:	3316      	adds	r3, #22
 8005636:	460a      	mov	r2, r1
 8005638:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	b2d9      	uxtb	r1, r3
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005642:	4413      	add	r3, r2
 8005644:	3320      	adds	r3, #32
 8005646:	460a      	mov	r2, r1
 8005648:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d836      	bhi.n	80056be <BSP_TS_GetState+0x342>
 8005650:	a201      	add	r2, pc, #4	@ (adr r2, 8005658 <BSP_TS_GetState+0x2dc>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	08005669 	.word	0x08005669
 800565c:	08005695 	.word	0x08005695
 8005660:	080056a3 	.word	0x080056a3
 8005664:	080056b1 	.word	0x080056b1
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800566c:	4413      	add	r3, r2
 800566e:	331b      	adds	r3, #27
 8005670:	2201      	movs	r2, #1
 8005672:	701a      	strb	r2, [r3, #0]
          break;
 8005674:	e027      	b.n	80056c6 <BSP_TS_GetState+0x34a>
 8005676:	bf00      	nop
 8005678:	20000820 	.word	0x20000820
 800567c:	20000829 	.word	0x20000829
 8005680:	20000828 	.word	0x20000828
 8005684:	2000082c 	.word	0x2000082c
 8005688:	20000840 	.word	0x20000840
 800568c:	20000824 	.word	0x20000824
 8005690:	20000826 	.word	0x20000826
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005698:	4413      	add	r3, r2
 800569a:	331b      	adds	r3, #27
 800569c:	2202      	movs	r2, #2
 800569e:	701a      	strb	r2, [r3, #0]
          break;
 80056a0:	e011      	b.n	80056c6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a6:	4413      	add	r3, r2
 80056a8:	331b      	adds	r3, #27
 80056aa:	2203      	movs	r2, #3
 80056ac:	701a      	strb	r2, [r3, #0]
          break;
 80056ae:	e00a      	b.n	80056c6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056b4:	4413      	add	r3, r2
 80056b6:	331b      	adds	r3, #27
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
          break;
 80056bc:	e003      	b.n	80056c6 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 80056c4:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80056c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056c8:	3301      	adds	r3, #1
 80056ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d4:	4293      	cmp	r3, r2
 80056d6:	f4ff ae71 	bcc.w	80053bc <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f80a 	bl	80056f4 <BSP_TS_Get_GestureId>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80056e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3754      	adds	r7, #84	@ 0x54
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd90      	pop	{r4, r7, pc}
 80056f2:	bf00      	nop

080056f4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005704:	4b3b      	ldr	r3, [pc, #236]	@ (80057f4 <BSP_TS_Get_GestureId+0x100>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f7fc fad6 	bl	8001cc2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b49      	cmp	r3, #73	@ 0x49
 800571a:	d05e      	beq.n	80057da <BSP_TS_Get_GestureId+0xe6>
 800571c:	2b49      	cmp	r3, #73	@ 0x49
 800571e:	d860      	bhi.n	80057e2 <BSP_TS_Get_GestureId+0xee>
 8005720:	2b1c      	cmp	r3, #28
 8005722:	d83f      	bhi.n	80057a4 <BSP_TS_Get_GestureId+0xb0>
 8005724:	2b1c      	cmp	r3, #28
 8005726:	d85c      	bhi.n	80057e2 <BSP_TS_Get_GestureId+0xee>
 8005728:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <BSP_TS_Get_GestureId+0x3c>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	080057ab 	.word	0x080057ab
 8005734:	080057e3 	.word	0x080057e3
 8005738:	080057e3 	.word	0x080057e3
 800573c:	080057e3 	.word	0x080057e3
 8005740:	080057e3 	.word	0x080057e3
 8005744:	080057e3 	.word	0x080057e3
 8005748:	080057e3 	.word	0x080057e3
 800574c:	080057e3 	.word	0x080057e3
 8005750:	080057e3 	.word	0x080057e3
 8005754:	080057e3 	.word	0x080057e3
 8005758:	080057e3 	.word	0x080057e3
 800575c:	080057e3 	.word	0x080057e3
 8005760:	080057e3 	.word	0x080057e3
 8005764:	080057e3 	.word	0x080057e3
 8005768:	080057e3 	.word	0x080057e3
 800576c:	080057e3 	.word	0x080057e3
 8005770:	080057b3 	.word	0x080057b3
 8005774:	080057e3 	.word	0x080057e3
 8005778:	080057e3 	.word	0x080057e3
 800577c:	080057e3 	.word	0x080057e3
 8005780:	080057bb 	.word	0x080057bb
 8005784:	080057e3 	.word	0x080057e3
 8005788:	080057e3 	.word	0x080057e3
 800578c:	080057e3 	.word	0x080057e3
 8005790:	080057c3 	.word	0x080057c3
 8005794:	080057e3 	.word	0x080057e3
 8005798:	080057e3 	.word	0x080057e3
 800579c:	080057e3 	.word	0x080057e3
 80057a0:	080057cb 	.word	0x080057cb
 80057a4:	2b40      	cmp	r3, #64	@ 0x40
 80057a6:	d014      	beq.n	80057d2 <BSP_TS_Get_GestureId+0xde>
 80057a8:	e01b      	b.n	80057e2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80057b0:	e01a      	b.n	80057e8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80057b8:	e016      	b.n	80057e8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80057c0:	e012      	b.n	80057e8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2203      	movs	r2, #3
 80057c6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80057c8:	e00e      	b.n	80057e8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2204      	movs	r2, #4
 80057ce:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80057d0:	e00a      	b.n	80057e8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2205      	movs	r2, #5
 80057d6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80057d8:	e006      	b.n	80057e8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2206      	movs	r2, #6
 80057de:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80057e0:	e002      	b.n	80057e8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
      break;
 80057e6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000829 	.word	0x20000829

080057f8 <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fbfd 	bl	8006000 <HAL_Delay>
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005812:	b672      	cpsid	i
}
 8005814:	bf00      	nop
  __disable_irq();
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8005824:	b662      	cpsie	i
}
 8005826:	bf00      	nop
  __enable_irq();
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08c      	sub	sp, #48	@ 0x30
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (deviceId==0)
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 8088 	bne.w	8005956 <Powerstep01_Board_GpioInit+0x122>
  {
    /* GPIO Ports Clock Enable */
    __GPIOA_CLK_ENABLE();
 8005846:	4b46      	ldr	r3, [pc, #280]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	4a45      	ldr	r2, [pc, #276]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6313      	str	r3, [r2, #48]	@ 0x30
 8005852:	4b43      	ldr	r3, [pc, #268]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	69bb      	ldr	r3, [r7, #24]
    __GPIOB_CLK_ENABLE();
 800585e:	4b40      	ldr	r3, [pc, #256]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	4a3f      	ldr	r2, [pc, #252]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005864:	f043 0302 	orr.w	r3, r3, #2
 8005868:	6313      	str	r3, [r2, #48]	@ 0x30
 800586a:	4b3d      	ldr	r3, [pc, #244]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	697b      	ldr	r3, [r7, #20]
    __GPIOG_CLK_ENABLE();
 8005876:	4b3a      	ldr	r3, [pc, #232]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	4a39      	ldr	r2, [pc, #228]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 800587c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005880:	6313      	str	r3, [r2, #48]	@ 0x30
 8005882:	4b37      	ldr	r3, [pc, #220]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	693b      	ldr	r3, [r7, #16]
    __GPIOI_CLK_ENABLE();
 800588e:	4b34      	ldr	r3, [pc, #208]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	4a33      	ldr	r2, [pc, #204]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005898:	6313      	str	r3, [r2, #48]	@ 0x30
 800589a:	4b31      	ldr	r3, [pc, #196]	@ (8005960 <Powerstep01_Board_GpioInit+0x12c>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
    
    /* Configure Powerstep01 - Busy pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_PIN;
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80058aa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80058ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058b0:	2301      	movs	r3, #1
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80058b4:	2301      	movs	r3, #1
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, &GPIO_InitStruct);
 80058b8:	f107 031c 	add.w	r3, r7, #28
 80058bc:	4619      	mov	r1, r3
 80058be:	4829      	ldr	r0, [pc, #164]	@ (8005964 <Powerstep01_Board_GpioInit+0x130>)
 80058c0:	f001 fb98 	bl	8006ff4 <HAL_GPIO_Init>
    
    /* Set Priority of Exti line Interrupt used for the busy interrupt*/ 
    HAL_NVIC_SetPriority(BUSY_EXTI_LINE_IRQn, 6, 0);
 80058c4:	2200      	movs	r2, #0
 80058c6:	2106      	movs	r1, #6
 80058c8:	2017      	movs	r0, #23
 80058ca:	f000 fc98 	bl	80061fe <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line Interrupt used for the busy interrupt*/
    HAL_NVIC_EnableIRQ(BUSY_EXTI_LINE_IRQn);
 80058ce:	2017      	movs	r0, #23
 80058d0:	f000 fcb1 	bl	8006236 <HAL_NVIC_EnableIRQ>
    
    /* Configure Powerstep01 - Flag pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 80058d4:	2340      	movs	r3, #64	@ 0x40
 80058d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80058d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80058dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058de:	2301      	movs	r3, #1
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80058e2:	2301      	movs	r3, #1
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 80058e6:	f107 031c 	add.w	r3, r7, #28
 80058ea:	4619      	mov	r1, r3
 80058ec:	481d      	ldr	r0, [pc, #116]	@ (8005964 <Powerstep01_Board_GpioInit+0x130>)
 80058ee:	f001 fb81 	bl	8006ff4 <HAL_GPIO_Init>
    
    /* Set Priority of Exti lineInterrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(FLAG_EXTI_LINE_IRQn, 5, 0);
 80058f2:	2200      	movs	r2, #0
 80058f4:	2105      	movs	r1, #5
 80058f6:	2017      	movs	r0, #23
 80058f8:	f000 fc81 	bl	80061fe <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line  Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(FLAG_EXTI_LINE_IRQn);    
 80058fc:	2017      	movs	r0, #23
 80058fe:	f000 fc9a 	bl	8006236 <HAL_NVIC_EnableIRQ>
  
    /* Configure Powerstep01 - CS pin ----------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8005902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005908:	2301      	movs	r3, #1
 800590a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590c:	2300      	movs	r3, #0
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8005910:	2301      	movs	r3, #1
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8005914:	f107 031c 	add.w	r3, r7, #28
 8005918:	4619      	mov	r1, r3
 800591a:	4813      	ldr	r0, [pc, #76]	@ (8005968 <Powerstep01_Board_GpioInit+0x134>)
 800591c:	f001 fb6a 	bl	8006ff4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8005920:	2201      	movs	r2, #1
 8005922:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005926:	4810      	ldr	r0, [pc, #64]	@ (8005968 <Powerstep01_Board_GpioInit+0x134>)
 8005928:	f001 fe34 	bl	8007594 <HAL_GPIO_WritePin>
    
    /* Configure Powerstep01 - STBY/RESET pin --------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN;
 800592c:	2304      	movs	r3, #4
 800592e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005930:	2301      	movs	r3, #1
 8005932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005934:	2300      	movs	r3, #0
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8005938:	2301      	movs	r3, #1
 800593a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, &GPIO_InitStruct);
 800593c:	f107 031c 	add.w	r3, r7, #28
 8005940:	4619      	mov	r1, r3
 8005942:	480a      	ldr	r0, [pc, #40]	@ (800596c <Powerstep01_Board_GpioInit+0x138>)
 8005944:	f001 fb56 	bl	8006ff4 <HAL_GPIO_Init>
    
    /* Reset Powerstep0*/
    Powerstep01_Board_Reset(deviceId);
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f88e 	bl	8005a6c <Powerstep01_Board_Reset>
    
    /* Let a delay after reset */
    Powerstep01_Board_Delay(1); 
 8005950:	2001      	movs	r0, #1
 8005952:	f7ff ff51 	bl	80057f8 <Powerstep01_Board_Delay>
  }
}
 8005956:	bf00      	nop
 8005958:	3730      	adds	r7, #48	@ 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800
 8005964:	40021800 	.word	0x40021800
 8005968:	40020000 	.word	0x40020000
 800596c:	40022000 	.word	0x40022000

08005970 <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	@ 0x38
 8005974:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_ClockConfigTypeDef sClockSourceConfig;
  
  hTimStepClock.Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK;
 8005976:	4b1c      	ldr	r3, [pc, #112]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 8005978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800597c:	601a      	str	r2, [r3, #0]
  hTimStepClock.Init.Prescaler = TIMER_PRESCALER -1;
 800597e:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 8005980:	223f      	movs	r2, #63	@ 0x3f
 8005982:	605a      	str	r2, [r3, #4]
  hTimStepClock.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005984:	4b18      	ldr	r3, [pc, #96]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
  hTimStepClock.Init.Period = 0;
 800598a:	4b17      	ldr	r3, [pc, #92]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 800598c:	2200      	movs	r2, #0
 800598e:	60da      	str	r2, [r3, #12]
  hTimStepClock.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005990:	4b15      	ldr	r3, [pc, #84]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 8005992:	2200      	movs	r2, #0
 8005994:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&hTimStepClock);
 8005996:	4814      	ldr	r0, [pc, #80]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 8005998:	f004 feda 	bl	800a750 <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800599c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059a0:	603b      	str	r3, [r7, #0]
  HAL_TIM_ConfigClockSource(&hTimStepClock, &sClockSourceConfig);
 80059a2:	463b      	mov	r3, r7
 80059a4:	4619      	mov	r1, r3
 80059a6:	4810      	ldr	r0, [pc, #64]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 80059a8:	f005 fb94 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059ac:	2360      	movs	r3, #96	@ 0x60
 80059ae:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059b4:	2300      	movs	r3, #0
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_TIM_PWM_ConfigChannel(&hTimStepClock, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 80059bc:	f107 031c 	add.w	r3, r7, #28
 80059c0:	2200      	movs	r2, #0
 80059c2:	4619      	mov	r1, r3
 80059c4:	4808      	ldr	r0, [pc, #32]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 80059c6:	f005 fa71 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);
 80059d2:	f107 0310 	add.w	r3, r7, #16
 80059d6:	4619      	mov	r1, r3
 80059d8:	4803      	ldr	r0, [pc, #12]	@ (80059e8 <Powerstep01_Board_StepClockInit+0x78>)
 80059da:	f006 f8d1 	bl	800bb80 <HAL_TIMEx_MasterConfigSynchronization>
}
 80059de:	bf00      	nop
 80059e0:	3738      	adds	r7, #56	@ 0x38
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200008e0 	.word	0x200008e0

080059ec <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80059f6:	f003 fbef 	bl	80091d8 <HAL_RCC_GetSysClockFreq>
 80059fa:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	019b      	lsls	r3, r3, #6
 8005a00:	461a      	mov	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimStepClock, period);
 8005a0c:	4b09      	ldr	r3, [pc, #36]	@ (8005a34 <Powerstep01_Board_StartStepClock+0x48>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a14:	4a07      	ldr	r2, [pc, #28]	@ (8005a34 <Powerstep01_Board_StartStepClock+0x48>)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 8005a1a:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <Powerstep01_Board_StartStepClock+0x48>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0852      	lsrs	r2, r2, #1
 8005a22:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start_IT(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);  
 8005a24:	2100      	movs	r1, #0
 8005a26:	4803      	ldr	r0, [pc, #12]	@ (8005a34 <Powerstep01_Board_StartStepClock+0x48>)
 8005a28:	f004 ff00 	bl	800a82c <HAL_TIM_PWM_Start_IT>
}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	200008e0 	.word	0x200008e0

08005a38 <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&hTimStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4802      	ldr	r0, [pc, #8]	@ (8005a48 <Powerstep01_Board_StopStepClock+0x10>)
 8005a40:	f005 f83c 	bl	800aabc <HAL_TIM_PWM_Stop_IT>
}
 8005a44:	bf00      	nop
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200008e0 	.word	0x200008e0

08005a4c <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_SET);
 8005a56:	2201      	movs	r2, #1
 8005a58:	2104      	movs	r1, #4
 8005a5a:	4803      	ldr	r0, [pc, #12]	@ (8005a68 <Powerstep01_Board_ReleaseReset+0x1c>)
 8005a5c:	f001 fd9a 	bl	8007594 <HAL_GPIO_WritePin>
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40022000 	.word	0x40022000

08005a6c <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_RESET);
 8005a76:	2200      	movs	r2, #0
 8005a78:	2104      	movs	r1, #4
 8005a7a:	4803      	ldr	r0, [pc, #12]	@ (8005a88 <Powerstep01_Board_Reset+0x1c>)
 8005a7c:	f001 fd8a 	bl	8007594 <HAL_GPIO_WritePin>
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40022000 	.word	0x40022000

08005a8c <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8005a92:	4b18      	ldr	r3, [pc, #96]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005a94:	4a18      	ldr	r2, [pc, #96]	@ (8005af8 <Powerstep01_Board_SpiInit+0x6c>)
 8005a96:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8005a98:	4b16      	ldr	r3, [pc, #88]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8005a9e:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8005aa4:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8005aaa:	4b12      	ldr	r3, [pc, #72]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005aac:	2202      	movs	r2, #2
 8005aae:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8005ab0:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005ab8:	2207      	movs	r2, #7
 8005aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8005abc:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005abe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005ac2:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8005aca:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad0:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8005ad2:	4b08      	ldr	r3, [pc, #32]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8005ad8:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005ada:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005ade:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8005ae0:	4804      	ldr	r0, [pc, #16]	@ (8005af4 <Powerstep01_Board_SpiInit+0x68>)
 8005ae2:	f004 f8f5 	bl	8009cd0 <HAL_SPI_Init>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8005aea:	79fb      	ldrb	r3, [r7, #7]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000854 	.word	0x20000854
 8005af8:	40003800 	.word	0x40003800

08005afc <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b10:	4816      	ldr	r0, [pc, #88]	@ (8005b6c <Powerstep01_Board_SpiWriteBytes+0x70>)
 8005b12:	f001 fd3f 	bl	8007594 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	e016      	b.n	8005b4a <Powerstep01_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8005b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	2301      	movs	r3, #1
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	4811      	ldr	r0, [pc, #68]	@ (8005b70 <Powerstep01_Board_SpiWriteBytes+0x74>)
 8005b2a:	f004 f9b3 	bl	8009e94 <HAL_SPI_TransmitReceive>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <Powerstep01_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	3301      	adds	r3, #1
 8005b42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3301      	adds	r3, #1
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d3e4      	bcc.n	8005b1c <Powerstep01_Board_SpiWriteBytes+0x20>
 8005b52:	e000      	b.n	8005b56 <Powerstep01_Board_SpiWriteBytes+0x5a>
      break;
 8005b54:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8005b56:	2201      	movs	r2, #1
 8005b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b5c:	4803      	ldr	r0, [pc, #12]	@ (8005b6c <Powerstep01_Board_SpiWriteBytes+0x70>)
 8005b5e:	f001 fd19 	bl	8007594 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40020000 	.word	0x40020000
 8005b70:	20000854 	.word	0x20000854

08005b74 <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 8005b78:	2180      	movs	r1, #128	@ 0x80
 8005b7a:	4803      	ldr	r0, [pc, #12]	@ (8005b88 <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 8005b7c:	f001 fcf2 	bl	8007564 <HAL_GPIO_ReadPin>
 8005b80:	4603      	mov	r3, r0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40021800 	.word	0x40021800

08005b8c <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 8005b90:	2140      	movs	r1, #64	@ 0x40
 8005b92:	4803      	ldr	r0, [pc, #12]	@ (8005ba0 <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 8005b94:	f001 fce6 	bl	8007564 <HAL_GPIO_ReadPin>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40021800 	.word	0x40021800

08005ba4 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c4c <BSP_MotorControl_AttachErrorHandler+0x38>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <BSP_MotorControl_AttachErrorHandler+0x26>
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <BSP_MotorControl_AttachErrorHandler+0x38>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 8005c2e:	4b07      	ldr	r3, [pc, #28]	@ (8005c4c <BSP_MotorControl_AttachErrorHandler+0x38>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
 8005c38:	e004      	b.n	8005c44 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8005c3a:	f640 0002 	movw	r0, #2050	@ 0x802
 8005c3e:	f000 f843 	bl	8005cc8 <BSP_MotorControl_ErrorHandler>
  }
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2000099c 	.word	0x2000099c

08005c50 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8005c58:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8005c60:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8005c6a:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
 8005c74:	e004      	b.n	8005c80 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8005c76:	f640 0003 	movw	r0, #2051	@ 0x803
 8005c7a:	f000 f825 	bl	8005cc8 <BSP_MotorControl_ErrorHandler>
  }  
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2000099c 	.word	0x2000099c

08005c8c <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 8005c94:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <BSP_MotorControl_AttachBusyInterrupt+0x26>
 8005c9c:	4b09      	ldr	r3, [pc, #36]	@ (8005cc4 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	e004      	b.n	8005cbc <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8005cb2:	f640 0004 	movw	r0, #2052	@ 0x804
 8005cb6:	f000 f807 	bl	8005cc8 <BSP_MotorControl_ErrorHandler>
  }  
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	2000099c 	.word	0x2000099c

08005cc8 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <BSP_MotorControl_ErrorHandler+0x38>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <BSP_MotorControl_ErrorHandler+0x2e>
 8005cda:	4b09      	ldr	r3, [pc, #36]	@ (8005d00 <BSP_MotorControl_ErrorHandler+0x38>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8005ce6:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <BSP_MotorControl_ErrorHandler+0x38>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8005cf4:	e000      	b.n	8005cf8 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8005cf6:	e7fe      	b.n	8005cf6 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000099c 	.word	0x2000099c

08005d04 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	6039      	str	r1, [r7, #0]
 8005d0e:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8005d10:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <BSP_MotorControl_Init+0x3c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <BSP_MotorControl_Init+0x2a>
 8005d18:	4b09      	ldr	r3, [pc, #36]	@ (8005d40 <BSP_MotorControl_Init+0x3c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8005d22:	4b07      	ldr	r3, [pc, #28]	@ (8005d40 <BSP_MotorControl_Init+0x3c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6838      	ldr	r0, [r7, #0]
 8005d2a:	4798      	blx	r3
 8005d2c:	e004      	b.n	8005d38 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8005d2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005d32:	f7ff ffc9 	bl	8005cc8 <BSP_MotorControl_ErrorHandler>
  }  
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	2000099c 	.word	0x2000099c

08005d44 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8005d52:	4b0e      	ldr	r3, [pc, #56]	@ (8005d8c <BSP_MotorControl_CmdGetStatus+0x48>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00f      	beq.n	8005d7a <BSP_MotorControl_CmdGetStatus+0x36>
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <BSP_MotorControl_CmdGetStatus+0x48>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8005d66:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <BSP_MotorControl_CmdGetStatus+0x48>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6e:	79fa      	ldrb	r2, [r7, #7]
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	81fb      	strh	r3, [r7, #14]
 8005d78:	e003      	b.n	8005d82 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8005d7a:	f640 0022 	movw	r0, #2082	@ 0x822
 8005d7e:	f7ff ffa3 	bl	8005cc8 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8005d82:	89fb      	ldrh	r3, [r7, #14]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	2000099c 	.word	0x2000099c

08005d90 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <BSP_MotorControl_CheckBusyHw+0x40>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00d      	beq.n	8005dbe <BSP_MotorControl_CheckBusyHw+0x2e>
 8005da2:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd0 <BSP_MotorControl_CheckBusyHw+0x40>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 8005dae:	4b08      	ldr	r3, [pc, #32]	@ (8005dd0 <BSP_MotorControl_CheckBusyHw+0x40>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	71fb      	strb	r3, [r7, #7]
 8005dbc:	e003      	b.n	8005dc6 <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 8005dbe:	f640 002b 	movw	r0, #2091	@ 0x82b
 8005dc2:	f7ff ff81 	bl	8005cc8 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	2000099c 	.word	0x2000099c

08005dd4 <BSP_MotorControl_CmdSoftHiZ>:
 * @brief Issues Soft HiZ command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdSoftHiZ(uint8_t deviceId)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdSoftHiZ != 0))
 8005dde:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <BSP_MotorControl_CmdSoftHiZ+0x40>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00d      	beq.n	8005e02 <BSP_MotorControl_CmdSoftHiZ+0x2e>
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <BSP_MotorControl_CmdSoftHiZ+0x40>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <BSP_MotorControl_CmdSoftHiZ+0x2e>
  {
    motorDrvHandle->CmdSoftHiZ(deviceId);
 8005df2:	4b08      	ldr	r3, [pc, #32]	@ (8005e14 <BSP_MotorControl_CmdSoftHiZ+0x40>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005dfa:	79fa      	ldrb	r2, [r7, #7]
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	e004      	b.n	8005e0c <BSP_MotorControl_CmdSoftHiZ+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(51);
 8005e02:	f640 0033 	movw	r0, #2099	@ 0x833
 8005e06:	f7ff ff5f 	bl	8005cc8 <BSP_MotorControl_ErrorHandler>
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2000099c 	.word	0x2000099c

08005e18 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	460a      	mov	r2, r1
 8005e22:	80fb      	strh	r3, [r7, #6]
 8005e24:	4613      	mov	r3, r2
 8005e26:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8005e28:	4a40      	ldr	r2, [pc, #256]	@ (8005f2c <BSP_MotorControl_SetNbDevices+0x114>)
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	f641 124a 	movw	r2, #6474	@ 0x194a
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d105      	bne.n	8005e48 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8005e3c:	f7ff feb2 	bl	8005ba4 <L6474_GetMotorHandle>
 8005e40:	4603      	mov	r3, r0
 8005e42:	4a3b      	ldr	r2, [pc, #236]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	e055      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8005e48:	88fb      	ldrh	r3, [r7, #6]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8005e4e:	f7fc fcad 	bl	80027ac <Powerstep01_GetMotorHandle>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4a36      	ldr	r2, [pc, #216]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e04c      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	f641 023e 	movw	r2, #6206	@ 0x183e
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d105      	bne.n	8005e70 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8005e64:	f7ff feb6 	bl	8005bd4 <L6206_GetMotorHandle>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4a31      	ldr	r2, [pc, #196]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e041      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	f5b3 5fc2 	cmp.w	r3, #6208	@ 0x1840
 8005e76:	d105      	bne.n	8005e84 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8005e78:	f7ff feb4 	bl	8005be4 <L6208_GetMotorHandle>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e037      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2bdc      	cmp	r3, #220	@ 0xdc
 8005e88:	d105      	bne.n	8005e96 <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8005e8a:	f7ff feb3 	bl	8005bf4 <Stspin220_GetMotorHandle>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4a27      	ldr	r2, [pc, #156]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e02e      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	f641 1246 	movw	r2, #6470	@ 0x1946
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d004      	beq.n	8005eaa <BSP_MotorControl_SetNbDevices+0x92>
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	f641 1248 	movw	r2, #6472	@ 0x1948
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d105      	bne.n	8005eb6 <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8005eaa:	f7ff fe83 	bl	8005bb4 <l647x_GetMotorHandle>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	e01e      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	f641 1250 	movw	r2, #6480	@ 0x1950
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d004      	beq.n	8005eca <BSP_MotorControl_SetNbDevices+0xb2>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	f641 1252 	movw	r2, #6482	@ 0x1952
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d105      	bne.n	8005ed6 <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8005eca:	f7ff fe7b 	bl	8005bc4 <l648x_GetMotorHandle>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a17      	ldr	r2, [pc, #92]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e00e      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	2bf0      	cmp	r3, #240	@ 0xf0
 8005eda:	d002      	beq.n	8005ee2 <BSP_MotorControl_SetNbDevices+0xca>
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	2bfa      	cmp	r3, #250	@ 0xfa
 8005ee0:	d105      	bne.n	8005eee <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8005ee2:	f7ff fe8f 	bl	8005c04 <Stspin240_250_GetMotorHandle>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4a11      	ldr	r2, [pc, #68]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e002      	b.n	8005ef4 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8005eee:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8005efc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
  if ((motorDrvHandle != 0)&&
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8005f08:	797b      	ldrb	r3, [r7, #5]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8005f0e:	4b08      	ldr	r3, [pc, #32]	@ (8005f30 <BSP_MotorControl_SetNbDevices+0x118>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8005f16:	797a      	ldrb	r2, [r7, #5]
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200009a0 	.word	0x200009a0
 8005f30:	2000099c 	.word	0x2000099c

08005f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f38:	4b08      	ldr	r3, [pc, #32]	@ (8005f5c <HAL_Init+0x28>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a07      	ldr	r2, [pc, #28]	@ (8005f5c <HAL_Init+0x28>)
 8005f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f44:	2003      	movs	r0, #3
 8005f46:	f000 f94f 	bl	80061e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f4a:	200f      	movs	r0, #15
 8005f4c:	f000 f808 	bl	8005f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f50:	f7fb faf2 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40023c00 	.word	0x40023c00

08005f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f68:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <HAL_InitTick+0x54>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	4b12      	ldr	r3, [pc, #72]	@ (8005fb8 <HAL_InitTick+0x58>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4619      	mov	r1, r3
 8005f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 f967 	bl	8006252 <HAL_SYSTICK_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e00e      	b.n	8005fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d80a      	bhi.n	8005faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f94:	2200      	movs	r2, #0
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	f000 f92f 	bl	80061fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fa0:	4a06      	ldr	r2, [pc, #24]	@ (8005fbc <HAL_InitTick+0x5c>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e000      	b.n	8005fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000000 	.word	0x20000000
 8005fb8:	200001a0 	.word	0x200001a0
 8005fbc:	2000019c 	.word	0x2000019c

08005fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <HAL_IncTick+0x20>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <HAL_IncTick+0x24>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4413      	add	r3, r2
 8005fd0:	4a04      	ldr	r2, [pc, #16]	@ (8005fe4 <HAL_IncTick+0x24>)
 8005fd2:	6013      	str	r3, [r2, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	200001a0 	.word	0x200001a0
 8005fe4:	200009a4 	.word	0x200009a4

08005fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return uwTick;
 8005fec:	4b03      	ldr	r3, [pc, #12]	@ (8005ffc <HAL_GetTick+0x14>)
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	200009a4 	.word	0x200009a4

08006000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006008:	f7ff ffee 	bl	8005fe8 <HAL_GetTick>
 800600c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d005      	beq.n	8006026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800601a:	4b0a      	ldr	r3, [pc, #40]	@ (8006044 <HAL_Delay+0x44>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006026:	bf00      	nop
 8006028:	f7ff ffde 	bl	8005fe8 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	429a      	cmp	r2, r3
 8006036:	d8f7      	bhi.n	8006028 <HAL_Delay+0x28>
  {
  }
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	200001a0 	.word	0x200001a0

08006048 <__NVIC_SetPriorityGrouping>:
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006058:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <__NVIC_SetPriorityGrouping+0x40>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006064:	4013      	ands	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006070:	4b06      	ldr	r3, [pc, #24]	@ (800608c <__NVIC_SetPriorityGrouping+0x44>)
 8006072:	4313      	orrs	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006076:	4a04      	ldr	r2, [pc, #16]	@ (8006088 <__NVIC_SetPriorityGrouping+0x40>)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	60d3      	str	r3, [r2, #12]
}
 800607c:	bf00      	nop
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	e000ed00 	.word	0xe000ed00
 800608c:	05fa0000 	.word	0x05fa0000

08006090 <__NVIC_GetPriorityGrouping>:
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006094:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	f003 0307 	and.w	r3, r3, #7
}
 800609e:	4618      	mov	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <__NVIC_EnableIRQ>:
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	db0b      	blt.n	80060d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	f003 021f 	and.w	r2, r3, #31
 80060c4:	4907      	ldr	r1, [pc, #28]	@ (80060e4 <__NVIC_EnableIRQ+0x38>)
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	2001      	movs	r0, #1
 80060ce:	fa00 f202 	lsl.w	r2, r0, r2
 80060d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	e000e100 	.word	0xe000e100

080060e8 <__NVIC_SetPriority>:
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	6039      	str	r1, [r7, #0]
 80060f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db0a      	blt.n	8006112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	490c      	ldr	r1, [pc, #48]	@ (8006134 <__NVIC_SetPriority+0x4c>)
 8006102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006106:	0112      	lsls	r2, r2, #4
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	440b      	add	r3, r1
 800610c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006110:	e00a      	b.n	8006128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	4908      	ldr	r1, [pc, #32]	@ (8006138 <__NVIC_SetPriority+0x50>)
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	3b04      	subs	r3, #4
 8006120:	0112      	lsls	r2, r2, #4
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	440b      	add	r3, r1
 8006126:	761a      	strb	r2, [r3, #24]
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	e000e100 	.word	0xe000e100
 8006138:	e000ed00 	.word	0xe000ed00

0800613c <NVIC_EncodePriority>:
{
 800613c:	b480      	push	{r7}
 800613e:	b089      	sub	sp, #36	@ 0x24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f1c3 0307 	rsb	r3, r3, #7
 8006156:	2b04      	cmp	r3, #4
 8006158:	bf28      	it	cs
 800615a:	2304      	movcs	r3, #4
 800615c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	3304      	adds	r3, #4
 8006162:	2b06      	cmp	r3, #6
 8006164:	d902      	bls.n	800616c <NVIC_EncodePriority+0x30>
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3b03      	subs	r3, #3
 800616a:	e000      	b.n	800616e <NVIC_EncodePriority+0x32>
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43da      	mvns	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	401a      	ands	r2, r3
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006184:	f04f 31ff 	mov.w	r1, #4294967295
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	fa01 f303 	lsl.w	r3, r1, r3
 800618e:	43d9      	mvns	r1, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006194:	4313      	orrs	r3, r2
}
 8006196:	4618      	mov	r0, r3
 8006198:	3724      	adds	r7, #36	@ 0x24
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b4:	d301      	bcc.n	80061ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061b6:	2301      	movs	r3, #1
 80061b8:	e00f      	b.n	80061da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ba:	4a0a      	ldr	r2, [pc, #40]	@ (80061e4 <SysTick_Config+0x40>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3b01      	subs	r3, #1
 80061c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061c2:	210f      	movs	r1, #15
 80061c4:	f04f 30ff 	mov.w	r0, #4294967295
 80061c8:	f7ff ff8e 	bl	80060e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061cc:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <SysTick_Config+0x40>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061d2:	4b04      	ldr	r3, [pc, #16]	@ (80061e4 <SysTick_Config+0x40>)
 80061d4:	2207      	movs	r2, #7
 80061d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	e000e010 	.word	0xe000e010

080061e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ff29 	bl	8006048 <__NVIC_SetPriorityGrouping>
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	4603      	mov	r3, r0
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006210:	f7ff ff3e 	bl	8006090 <__NVIC_GetPriorityGrouping>
 8006214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f7ff ff8e 	bl	800613c <NVIC_EncodePriority>
 8006220:	4602      	mov	r2, r0
 8006222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff ff5d 	bl	80060e8 <__NVIC_SetPriority>
}
 800622e:	bf00      	nop
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	4603      	mov	r3, r0
 800623e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff ff31 	bl	80060ac <__NVIC_EnableIRQ>
}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ffa2 	bl	80061a4 <SysTick_Config>
 8006260:	4603      	mov	r3, r0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006270:	f3bf 8f5f 	dmb	sy
}
 8006274:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006276:	4b07      	ldr	r3, [pc, #28]	@ (8006294 <HAL_MPU_Disable+0x28>)
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	4a06      	ldr	r2, [pc, #24]	@ (8006294 <HAL_MPU_Disable+0x28>)
 800627c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006280:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006282:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <HAL_MPU_Disable+0x2c>)
 8006284:	2200      	movs	r2, #0
 8006286:	605a      	str	r2, [r3, #4]
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	e000ed00 	.word	0xe000ed00
 8006298:	e000ed90 	.word	0xe000ed90

0800629c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80062a4:	4a0b      	ldr	r2, [pc, #44]	@ (80062d4 <HAL_MPU_Enable+0x38>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80062ae:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <HAL_MPU_Enable+0x3c>)
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	4a09      	ldr	r2, [pc, #36]	@ (80062d8 <HAL_MPU_Enable+0x3c>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80062ba:	f3bf 8f4f 	dsb	sy
}
 80062be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80062c0:	f3bf 8f6f 	isb	sy
}
 80062c4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	e000ed90 	.word	0xe000ed90
 80062d8:	e000ed00 	.word	0xe000ed00

080062dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	785a      	ldrb	r2, [r3, #1]
 80062e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006358 <HAL_MPU_ConfigRegion+0x7c>)
 80062ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <HAL_MPU_ConfigRegion+0x7c>)
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	4a19      	ldr	r2, [pc, #100]	@ (8006358 <HAL_MPU_ConfigRegion+0x7c>)
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80062f8:	4a17      	ldr	r2, [pc, #92]	@ (8006358 <HAL_MPU_ConfigRegion+0x7c>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	7b1b      	ldrb	r3, [r3, #12]
 8006304:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	7adb      	ldrb	r3, [r3, #11]
 800630a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800630c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7a9b      	ldrb	r3, [r3, #10]
 8006312:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7b5b      	ldrb	r3, [r3, #13]
 800631a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800631c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7b9b      	ldrb	r3, [r3, #14]
 8006322:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006324:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7bdb      	ldrb	r3, [r3, #15]
 800632a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800632c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	7a5b      	ldrb	r3, [r3, #9]
 8006332:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	7a1b      	ldrb	r3, [r3, #8]
 800633a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800633c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006344:	4a04      	ldr	r2, [pc, #16]	@ (8006358 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006346:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006348:	6113      	str	r3, [r2, #16]
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	e000ed90 	.word	0xe000ed90

0800635c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e054      	b.n	8006418 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7f5b      	ldrb	r3, [r3, #29]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fa f8dc 	bl	800053c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10c      	bne.n	80063ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a22      	ldr	r2, [pc, #136]	@ (8006420 <HAL_CRC_Init+0xc4>)
 8006398:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0218 	bic.w	r2, r2, #24
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	e00c      	b.n	80063c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f834 	bl	8006424 <HAL_CRCEx_Polynomial_Set>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e028      	b.n	8006418 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	795b      	ldrb	r3, [r3, #5]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f04f 32ff 	mov.w	r2, #4294967295
 80063d6:	611a      	str	r2, [r3, #16]
 80063d8:	e004      	b.n	80063e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6912      	ldr	r2, [r2, #16]
 80063e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	04c11db7 	.word	0x04c11db7

08006424 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006434:	231f      	movs	r3, #31
 8006436:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
 8006446:	e063      	b.n	8006510 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006448:	bf00      	nop
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1e5a      	subs	r2, r3, #1
 800644e:	613a      	str	r2, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <HAL_CRCEx_Polynomial_Set+0x44>
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b18      	cmp	r3, #24
 800646c:	d846      	bhi.n	80064fc <HAL_CRCEx_Polynomial_Set+0xd8>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006503 	.word	0x08006503
 8006478:	080064fd 	.word	0x080064fd
 800647c:	080064fd 	.word	0x080064fd
 8006480:	080064fd 	.word	0x080064fd
 8006484:	080064fd 	.word	0x080064fd
 8006488:	080064fd 	.word	0x080064fd
 800648c:	080064fd 	.word	0x080064fd
 8006490:	080064fd 	.word	0x080064fd
 8006494:	080064f1 	.word	0x080064f1
 8006498:	080064fd 	.word	0x080064fd
 800649c:	080064fd 	.word	0x080064fd
 80064a0:	080064fd 	.word	0x080064fd
 80064a4:	080064fd 	.word	0x080064fd
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	080064fd 	.word	0x080064fd
 80064b0:	080064fd 	.word	0x080064fd
 80064b4:	080064e5 	.word	0x080064e5
 80064b8:	080064fd 	.word	0x080064fd
 80064bc:	080064fd 	.word	0x080064fd
 80064c0:	080064fd 	.word	0x080064fd
 80064c4:	080064fd 	.word	0x080064fd
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	080064fd 	.word	0x080064fd
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	080064d9 	.word	0x080064d9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b06      	cmp	r3, #6
 80064dc:	d913      	bls.n	8006506 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80064e2:	e010      	b.n	8006506 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b07      	cmp	r3, #7
 80064e8:	d90f      	bls.n	800650a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80064ee:	e00c      	b.n	800650a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	d90b      	bls.n	800650e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80064fa:	e008      	b.n	800650e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	75fb      	strb	r3, [r7, #23]
        break;
 8006500:	e006      	b.n	8006510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006502:	bf00      	nop
 8006504:	e004      	b.n	8006510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006506:	bf00      	nop
 8006508:	e002      	b.n	8006510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800650a:	bf00      	nop
 800650c:	e000      	b.n	8006510 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800650e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f023 0118 	bic.w	r1, r3, #24
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	430a      	orrs	r2, r1
 8006530:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800654c:	f7ff fd4c 	bl	8005fe8 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e099      	b.n	8006690 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800657c:	e00f      	b.n	800659e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800657e:	f7ff fd33 	bl	8005fe8 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b05      	cmp	r3, #5
 800658a:	d908      	bls.n	800659e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2203      	movs	r2, #3
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e078      	b.n	8006690 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e8      	bne.n	800657e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4b38      	ldr	r3, [pc, #224]	@ (8006698 <HAL_DMA_Init+0x158>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d107      	bne.n	8006608 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006600:	4313      	orrs	r3, r2
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0307 	bic.w	r3, r3, #7
 800661e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662e:	2b04      	cmp	r3, #4
 8006630:	d117      	bne.n	8006662 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00e      	beq.n	8006662 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8bd 	bl	80067c4 <DMA_CheckFifoParam>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2240      	movs	r2, #64	@ 0x40
 8006654:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800665e:	2301      	movs	r3, #1
 8006660:	e016      	b.n	8006690 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f874 	bl	8006758 <DMA_CalcBaseAndBitshift>
 8006670:	4603      	mov	r3, r0
 8006672:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006678:	223f      	movs	r2, #63	@ 0x3f
 800667a:	409a      	lsls	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	f010803f 	.word	0xf010803f

0800669c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e050      	b.n	8006750 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d101      	bne.n	80066be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80066ba:	2302      	movs	r3, #2
 80066bc:	e048      	b.n	8006750 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0201 	bic.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2221      	movs	r2, #33	@ 0x21
 80066fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f82a 	bl	8006758 <DMA_CalcBaseAndBitshift>
 8006704:	4603      	mov	r3, r0
 8006706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670c:	223f      	movs	r2, #63	@ 0x3f
 800670e:	409a      	lsls	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	3b10      	subs	r3, #16
 8006768:	4a13      	ldr	r2, [pc, #76]	@ (80067b8 <DMA_CalcBaseAndBitshift+0x60>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006772:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <DMA_CalcBaseAndBitshift+0x64>)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b03      	cmp	r3, #3
 8006784:	d908      	bls.n	8006798 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <DMA_CalcBaseAndBitshift+0x68>)
 800678e:	4013      	ands	r3, r2
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	659a      	str	r2, [r3, #88]	@ 0x58
 8006796:	e006      	b.n	80067a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	4b08      	ldr	r3, [pc, #32]	@ (80067c0 <DMA_CalcBaseAndBitshift+0x68>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	aaaaaaab 	.word	0xaaaaaaab
 80067bc:	0800e488 	.word	0x0800e488
 80067c0:	fffffc00 	.word	0xfffffc00

080067c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d11f      	bne.n	800681e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d856      	bhi.n	8006892 <DMA_CheckFifoParam+0xce>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <DMA_CheckFifoParam+0x28>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	0800680f 	.word	0x0800680f
 80067f4:	080067fd 	.word	0x080067fd
 80067f8:	08006893 	.word	0x08006893
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d046      	beq.n	8006896 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800680c:	e043      	b.n	8006896 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006816:	d140      	bne.n	800689a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800681c:	e03d      	b.n	800689a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006826:	d121      	bne.n	800686c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b03      	cmp	r3, #3
 800682c:	d837      	bhi.n	800689e <DMA_CheckFifoParam+0xda>
 800682e:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <DMA_CheckFifoParam+0x70>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006845 	.word	0x08006845
 8006838:	0800684b 	.word	0x0800684b
 800683c:	08006845 	.word	0x08006845
 8006840:	0800685d 	.word	0x0800685d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	73fb      	strb	r3, [r7, #15]
      break;
 8006848:	e030      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d025      	beq.n	80068a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800685a:	e022      	b.n	80068a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006860:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006864:	d11f      	bne.n	80068a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800686a:	e01c      	b.n	80068a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d903      	bls.n	800687a <DMA_CheckFifoParam+0xb6>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b03      	cmp	r3, #3
 8006876:	d003      	beq.n	8006880 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006878:	e018      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
      break;
 800687e:	e015      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00e      	beq.n	80068aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
      break;
 8006890:	e00b      	b.n	80068aa <DMA_CheckFifoParam+0xe6>
      break;
 8006892:	bf00      	nop
 8006894:	e00a      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      break;
 8006896:	bf00      	nop
 8006898:	e008      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      break;
 800689a:	bf00      	nop
 800689c:	e006      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      break;
 800689e:	bf00      	nop
 80068a0:	e004      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      break;   
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <DMA_CheckFifoParam+0xe8>
      break;
 80068aa:	bf00      	nop
    }
  } 
  
  return status; 
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop

080068bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e039      	b.n	8006942 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7f9 fe7c 	bl	80005e0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690c:	f023 0107 	bic.w	r1, r3, #7
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006922:	4b0a      	ldr	r3, [pc, #40]	@ (800694c <HAL_DMA2D_Init+0x90>)
 8006924:	4013      	ands	r3, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68d1      	ldr	r1, [r2, #12]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	430b      	orrs	r3, r1
 8006930:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	ffffc000 	.word	0xffffc000

08006950 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_DMA2D_Start+0x1c>
 8006968:	2302      	movs	r3, #2
 800696a:	e018      	b.n	800699e <HAL_DMA2D_Start+0x4e>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fa98 	bl	8006ebc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b086      	sub	sp, #24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d056      	beq.n	8006a70 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80069c2:	f7ff fb11 	bl	8005fe8 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80069c8:	e04b      	b.n	8006a62 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d023      	beq.n	8006a24 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ea:	f043 0202 	orr.w	r2, r3, #2
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a00:	f043 0201 	orr.w	r2, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2221      	movs	r2, #33	@ 0x21
 8006a0e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2204      	movs	r2, #4
 8006a14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e0a5      	b.n	8006b70 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d01a      	beq.n	8006a62 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a2c:	f7ff fadc 	bl	8005fe8 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <HAL_DMA2D_PollForTransfer+0x9c>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10f      	bne.n	8006a62 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a46:	f043 0220 	orr.w	r2, r3, #32
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2203      	movs	r2, #3
 8006a52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e086      	b.n	8006b70 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0ac      	beq.n	80069ca <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d061      	beq.n	8006b56 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a92:	f7ff faa9 	bl	8005fe8 <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006a98:	e056      	b.n	8006b48 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02e      	beq.n	8006b0a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aba:	f043 0204 	orr.w	r2, r3, #4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad0:	f043 0202 	orr.w	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae6:	f043 0201 	orr.w	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2229      	movs	r2, #41	@ 0x29
 8006af4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2204      	movs	r2, #4
 8006afa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e032      	b.n	8006b70 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d01a      	beq.n	8006b48 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b12:	f7ff fa69 	bl	8005fe8 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d302      	bcc.n	8006b28 <HAL_DMA2D_PollForTransfer+0x182>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10f      	bne.n	8006b48 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2203      	movs	r2, #3
 8006b38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e013      	b.n	8006b70 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0a1      	beq.n	8006a9a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2212      	movs	r2, #18
 8006b5c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d026      	beq.n	8006be8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d021      	beq.n	8006be8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb8:	f043 0201 	orr.w	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2204      	movs	r2, #4
 8006bcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d026      	beq.n	8006c40 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d021      	beq.n	8006c40 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c0a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2220      	movs	r2, #32
 8006c12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c18:	f043 0202 	orr.w	r2, r3, #2
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2204      	movs	r2, #4
 8006c24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d026      	beq.n	8006c98 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d021      	beq.n	8006c98 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c62:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2208      	movs	r2, #8
 8006c6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c70:	f043 0204 	orr.w	r2, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d013      	beq.n	8006cca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00e      	beq.n	8006cca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f853 	bl	8006d70 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d024      	beq.n	8006d1e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01f      	beq.n	8006d1e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006cec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01f      	beq.n	8006d68 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01a      	beq.n	8006d68 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d40:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2210      	movs	r2, #16
 8006d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f80e 	bl	8006d84 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_DMA2D_ConfigLayer+0x20>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e079      	b.n	8006eac <HAL_DMA2D_ConfigLayer+0x114>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	3318      	adds	r3, #24
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006de2:	4b35      	ldr	r3, [pc, #212]	@ (8006eb8 <HAL_DMA2D_ConfigLayer+0x120>)
 8006de4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b0a      	cmp	r3, #10
 8006dec:	d003      	beq.n	8006df6 <HAL_DMA2D_ConfigLayer+0x5e>
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d107      	bne.n	8006e06 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e005      	b.n	8006e12 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	061b      	lsls	r3, r3, #24
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d120      	bne.n	8006e5a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	ea02 0103 	and.w	r1, r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2b0a      	cmp	r3, #10
 8006e40:	d003      	beq.n	8006e4a <HAL_DMA2D_ConfigLayer+0xb2>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d127      	bne.n	8006e9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006e56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e58:	e01f      	b.n	8006e9a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	43db      	mvns	r3, r3
 8006e64:	ea02 0103 	and.w	r1, r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b0a      	cmp	r3, #10
 8006e82:	d003      	beq.n	8006e8c <HAL_DMA2D_ConfigLayer+0xf4>
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b09      	cmp	r3, #9
 8006e8a:	d106      	bne.n	8006e9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006e98:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	ff03000f 	.word	0xff03000f

08006ebc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b08b      	sub	sp, #44	@ 0x2c
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	041a      	lsls	r2, r3, #16
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	431a      	orrs	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ef4:	d174      	bne.n	8006fe0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006efc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f04:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f0c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d108      	bne.n	8006f2e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f2c:	e053      	b.n	8006fd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d106      	bne.n	8006f44 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f42:	e048      	b.n	8006fd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d111      	bne.n	8006f70 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	0cdb      	lsrs	r3, r3, #19
 8006f50:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	0a9b      	lsrs	r3, r3, #10
 8006f56:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	08db      	lsrs	r3, r3, #3
 8006f5c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	02db      	lsls	r3, r3, #11
 8006f66:	4313      	orrs	r3, r2
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f6e:	e032      	b.n	8006fd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d117      	bne.n	8006fa8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	0fdb      	lsrs	r3, r3, #31
 8006f7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	0cdb      	lsrs	r3, r3, #19
 8006f82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	0adb      	lsrs	r3, r3, #11
 8006f88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	08db      	lsrs	r3, r3, #3
 8006f8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	03db      	lsls	r3, r3, #15
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fa6:	e016      	b.n	8006fd6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	0f1b      	lsrs	r3, r3, #28
 8006fac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	0d1b      	lsrs	r3, r3, #20
 8006fb2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	0b1b      	lsrs	r3, r3, #12
 8006fb8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	091b      	lsrs	r3, r3, #4
 8006fbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	011a      	lsls	r2, r3, #4
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	031b      	lsls	r3, r3, #12
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006fde:	e003      	b.n	8006fe8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	60da      	str	r2, [r3, #12]
}
 8006fe8:	bf00      	nop
 8006fea:	372c      	adds	r7, #44	@ 0x2c
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b089      	sub	sp, #36	@ 0x24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007006:	2300      	movs	r3, #0
 8007008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	e175      	b.n	8007300 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007014:	2201      	movs	r2, #1
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4013      	ands	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	429a      	cmp	r2, r3
 800702e:	f040 8164 	bne.w	80072fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b01      	cmp	r3, #1
 800703c:	d005      	beq.n	800704a <HAL_GPIO_Init+0x56>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d130      	bne.n	80070ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	2203      	movs	r2, #3
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43db      	mvns	r3, r3
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	4013      	ands	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4313      	orrs	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007080:	2201      	movs	r2, #1
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	43db      	mvns	r3, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	4013      	ands	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	f003 0201 	and.w	r2, r3, #1
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	fa02 f303 	lsl.w	r3, r2, r3
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d017      	beq.n	80070e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	2203      	movs	r2, #3
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	43db      	mvns	r3, r3
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	4013      	ands	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	4313      	orrs	r3, r2
 80070e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d123      	bne.n	800713c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	08da      	lsrs	r2, r3, #3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3208      	adds	r2, #8
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	220f      	movs	r2, #15
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	43db      	mvns	r3, r3
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	4013      	ands	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	4313      	orrs	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	08da      	lsrs	r2, r3, #3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3208      	adds	r2, #8
 8007136:	69b9      	ldr	r1, [r7, #24]
 8007138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	2203      	movs	r2, #3
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4013      	ands	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f003 0203 	and.w	r2, r3, #3
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4313      	orrs	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 80be 	beq.w	80072fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800717e:	4b66      	ldr	r3, [pc, #408]	@ (8007318 <HAL_GPIO_Init+0x324>)
 8007180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007182:	4a65      	ldr	r2, [pc, #404]	@ (8007318 <HAL_GPIO_Init+0x324>)
 8007184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007188:	6453      	str	r3, [r2, #68]	@ 0x44
 800718a:	4b63      	ldr	r3, [pc, #396]	@ (8007318 <HAL_GPIO_Init+0x324>)
 800718c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007196:	4a61      	ldr	r2, [pc, #388]	@ (800731c <HAL_GPIO_Init+0x328>)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	3302      	adds	r3, #2
 800719e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	220f      	movs	r2, #15
 80071ae:	fa02 f303 	lsl.w	r3, r2, r3
 80071b2:	43db      	mvns	r3, r3
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	4013      	ands	r3, r2
 80071b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a58      	ldr	r2, [pc, #352]	@ (8007320 <HAL_GPIO_Init+0x32c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d037      	beq.n	8007232 <HAL_GPIO_Init+0x23e>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a57      	ldr	r2, [pc, #348]	@ (8007324 <HAL_GPIO_Init+0x330>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d031      	beq.n	800722e <HAL_GPIO_Init+0x23a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a56      	ldr	r2, [pc, #344]	@ (8007328 <HAL_GPIO_Init+0x334>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d02b      	beq.n	800722a <HAL_GPIO_Init+0x236>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a55      	ldr	r2, [pc, #340]	@ (800732c <HAL_GPIO_Init+0x338>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d025      	beq.n	8007226 <HAL_GPIO_Init+0x232>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a54      	ldr	r2, [pc, #336]	@ (8007330 <HAL_GPIO_Init+0x33c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01f      	beq.n	8007222 <HAL_GPIO_Init+0x22e>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a53      	ldr	r2, [pc, #332]	@ (8007334 <HAL_GPIO_Init+0x340>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d019      	beq.n	800721e <HAL_GPIO_Init+0x22a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a52      	ldr	r2, [pc, #328]	@ (8007338 <HAL_GPIO_Init+0x344>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <HAL_GPIO_Init+0x226>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a51      	ldr	r2, [pc, #324]	@ (800733c <HAL_GPIO_Init+0x348>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00d      	beq.n	8007216 <HAL_GPIO_Init+0x222>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a50      	ldr	r2, [pc, #320]	@ (8007340 <HAL_GPIO_Init+0x34c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <HAL_GPIO_Init+0x21e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a4f      	ldr	r2, [pc, #316]	@ (8007344 <HAL_GPIO_Init+0x350>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d101      	bne.n	800720e <HAL_GPIO_Init+0x21a>
 800720a:	2309      	movs	r3, #9
 800720c:	e012      	b.n	8007234 <HAL_GPIO_Init+0x240>
 800720e:	230a      	movs	r3, #10
 8007210:	e010      	b.n	8007234 <HAL_GPIO_Init+0x240>
 8007212:	2308      	movs	r3, #8
 8007214:	e00e      	b.n	8007234 <HAL_GPIO_Init+0x240>
 8007216:	2307      	movs	r3, #7
 8007218:	e00c      	b.n	8007234 <HAL_GPIO_Init+0x240>
 800721a:	2306      	movs	r3, #6
 800721c:	e00a      	b.n	8007234 <HAL_GPIO_Init+0x240>
 800721e:	2305      	movs	r3, #5
 8007220:	e008      	b.n	8007234 <HAL_GPIO_Init+0x240>
 8007222:	2304      	movs	r3, #4
 8007224:	e006      	b.n	8007234 <HAL_GPIO_Init+0x240>
 8007226:	2303      	movs	r3, #3
 8007228:	e004      	b.n	8007234 <HAL_GPIO_Init+0x240>
 800722a:	2302      	movs	r3, #2
 800722c:	e002      	b.n	8007234 <HAL_GPIO_Init+0x240>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <HAL_GPIO_Init+0x240>
 8007232:	2300      	movs	r3, #0
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	f002 0203 	and.w	r2, r2, #3
 800723a:	0092      	lsls	r2, r2, #2
 800723c:	4093      	lsls	r3, r2
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	4313      	orrs	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007244:	4935      	ldr	r1, [pc, #212]	@ (800731c <HAL_GPIO_Init+0x328>)
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	089b      	lsrs	r3, r3, #2
 800724a:	3302      	adds	r3, #2
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007252:	4b3d      	ldr	r3, [pc, #244]	@ (8007348 <HAL_GPIO_Init+0x354>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	43db      	mvns	r3, r3
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	4013      	ands	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007276:	4a34      	ldr	r2, [pc, #208]	@ (8007348 <HAL_GPIO_Init+0x354>)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800727c:	4b32      	ldr	r3, [pc, #200]	@ (8007348 <HAL_GPIO_Init+0x354>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	43db      	mvns	r3, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	4013      	ands	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072a0:	4a29      	ldr	r2, [pc, #164]	@ (8007348 <HAL_GPIO_Init+0x354>)
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072a6:	4b28      	ldr	r3, [pc, #160]	@ (8007348 <HAL_GPIO_Init+0x354>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	43db      	mvns	r3, r3
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	4013      	ands	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007348 <HAL_GPIO_Init+0x354>)
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007348 <HAL_GPIO_Init+0x354>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	43db      	mvns	r3, r3
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4013      	ands	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072f4:	4a14      	ldr	r2, [pc, #80]	@ (8007348 <HAL_GPIO_Init+0x354>)
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	3301      	adds	r3, #1
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	2b0f      	cmp	r3, #15
 8007304:	f67f ae86 	bls.w	8007014 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	3724      	adds	r7, #36	@ 0x24
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	40013800 	.word	0x40013800
 8007320:	40020000 	.word	0x40020000
 8007324:	40020400 	.word	0x40020400
 8007328:	40020800 	.word	0x40020800
 800732c:	40020c00 	.word	0x40020c00
 8007330:	40021000 	.word	0x40021000
 8007334:	40021400 	.word	0x40021400
 8007338:	40021800 	.word	0x40021800
 800733c:	40021c00 	.word	0x40021c00
 8007340:	40022000 	.word	0x40022000
 8007344:	40022400 	.word	0x40022400
 8007348:	40013c00 	.word	0x40013c00

0800734c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007356:	2300      	movs	r3, #0
 8007358:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800735e:	2300      	movs	r3, #0
 8007360:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	e0d9      	b.n	800751c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007368:	2201      	movs	r2, #1
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4013      	ands	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	429a      	cmp	r2, r3
 8007380:	f040 80c9 	bne.w	8007516 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007384:	4a6b      	ldr	r2, [pc, #428]	@ (8007534 <HAL_GPIO_DeInit+0x1e8>)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	089b      	lsrs	r3, r3, #2
 800738a:	3302      	adds	r3, #2
 800738c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007390:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	220f      	movs	r2, #15
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a63      	ldr	r2, [pc, #396]	@ (8007538 <HAL_GPIO_DeInit+0x1ec>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d037      	beq.n	800741e <HAL_GPIO_DeInit+0xd2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a62      	ldr	r2, [pc, #392]	@ (800753c <HAL_GPIO_DeInit+0x1f0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d031      	beq.n	800741a <HAL_GPIO_DeInit+0xce>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a61      	ldr	r2, [pc, #388]	@ (8007540 <HAL_GPIO_DeInit+0x1f4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d02b      	beq.n	8007416 <HAL_GPIO_DeInit+0xca>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a60      	ldr	r2, [pc, #384]	@ (8007544 <HAL_GPIO_DeInit+0x1f8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d025      	beq.n	8007412 <HAL_GPIO_DeInit+0xc6>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a5f      	ldr	r2, [pc, #380]	@ (8007548 <HAL_GPIO_DeInit+0x1fc>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01f      	beq.n	800740e <HAL_GPIO_DeInit+0xc2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a5e      	ldr	r2, [pc, #376]	@ (800754c <HAL_GPIO_DeInit+0x200>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d019      	beq.n	800740a <HAL_GPIO_DeInit+0xbe>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007550 <HAL_GPIO_DeInit+0x204>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <HAL_GPIO_DeInit+0xba>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a5c      	ldr	r2, [pc, #368]	@ (8007554 <HAL_GPIO_DeInit+0x208>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00d      	beq.n	8007402 <HAL_GPIO_DeInit+0xb6>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007558 <HAL_GPIO_DeInit+0x20c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d007      	beq.n	80073fe <HAL_GPIO_DeInit+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a5a      	ldr	r2, [pc, #360]	@ (800755c <HAL_GPIO_DeInit+0x210>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d101      	bne.n	80073fa <HAL_GPIO_DeInit+0xae>
 80073f6:	2309      	movs	r3, #9
 80073f8:	e012      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 80073fa:	230a      	movs	r3, #10
 80073fc:	e010      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 80073fe:	2308      	movs	r3, #8
 8007400:	e00e      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 8007402:	2307      	movs	r3, #7
 8007404:	e00c      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 8007406:	2306      	movs	r3, #6
 8007408:	e00a      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 800740a:	2305      	movs	r3, #5
 800740c:	e008      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 800740e:	2304      	movs	r3, #4
 8007410:	e006      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 8007412:	2303      	movs	r3, #3
 8007414:	e004      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 8007416:	2302      	movs	r3, #2
 8007418:	e002      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <HAL_GPIO_DeInit+0xd4>
 800741e:	2300      	movs	r3, #0
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	f002 0203 	and.w	r2, r2, #3
 8007426:	0092      	lsls	r2, r2, #2
 8007428:	4093      	lsls	r3, r2
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	d132      	bne.n	8007496 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007430:	4b4b      	ldr	r3, [pc, #300]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	43db      	mvns	r3, r3
 8007438:	4949      	ldr	r1, [pc, #292]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 800743a:	4013      	ands	r3, r2
 800743c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800743e:	4b48      	ldr	r3, [pc, #288]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	43db      	mvns	r3, r3
 8007446:	4946      	ldr	r1, [pc, #280]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 8007448:	4013      	ands	r3, r2
 800744a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800744c:	4b44      	ldr	r3, [pc, #272]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	43db      	mvns	r3, r3
 8007454:	4942      	ldr	r1, [pc, #264]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 8007456:	4013      	ands	r3, r2
 8007458:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800745a:	4b41      	ldr	r3, [pc, #260]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	43db      	mvns	r3, r3
 8007462:	493f      	ldr	r1, [pc, #252]	@ (8007560 <HAL_GPIO_DeInit+0x214>)
 8007464:	4013      	ands	r3, r2
 8007466:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	220f      	movs	r2, #15
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007478:	4a2e      	ldr	r2, [pc, #184]	@ (8007534 <HAL_GPIO_DeInit+0x1e8>)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	089b      	lsrs	r3, r3, #2
 800747e:	3302      	adds	r3, #2
 8007480:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	43da      	mvns	r2, r3
 8007488:	482a      	ldr	r0, [pc, #168]	@ (8007534 <HAL_GPIO_DeInit+0x1e8>)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	089b      	lsrs	r3, r3, #2
 800748e:	400a      	ands	r2, r1
 8007490:	3302      	adds	r3, #2
 8007492:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	2103      	movs	r1, #3
 80074a0:	fa01 f303 	lsl.w	r3, r1, r3
 80074a4:	43db      	mvns	r3, r3
 80074a6:	401a      	ands	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	08da      	lsrs	r2, r3, #3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3208      	adds	r2, #8
 80074b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	220f      	movs	r2, #15
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	43db      	mvns	r3, r3
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	08d2      	lsrs	r2, r2, #3
 80074cc:	4019      	ands	r1, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3208      	adds	r2, #8
 80074d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	2103      	movs	r1, #3
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	43db      	mvns	r3, r3
 80074e6:	401a      	ands	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	2101      	movs	r1, #1
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	fa01 f303 	lsl.w	r3, r1, r3
 80074f8:	43db      	mvns	r3, r3
 80074fa:	401a      	ands	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	2103      	movs	r1, #3
 800750a:	fa01 f303 	lsl.w	r3, r1, r3
 800750e:	43db      	mvns	r3, r3
 8007510:	401a      	ands	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	3301      	adds	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b0f      	cmp	r3, #15
 8007520:	f67f af22 	bls.w	8007368 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40013800 	.word	0x40013800
 8007538:	40020000 	.word	0x40020000
 800753c:	40020400 	.word	0x40020400
 8007540:	40020800 	.word	0x40020800
 8007544:	40020c00 	.word	0x40020c00
 8007548:	40021000 	.word	0x40021000
 800754c:	40021400 	.word	0x40021400
 8007550:	40021800 	.word	0x40021800
 8007554:	40021c00 	.word	0x40021c00
 8007558:	40022000 	.word	0x40022000
 800755c:	40022400 	.word	0x40022400
 8007560:	40013c00 	.word	0x40013c00

08007564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
 8007580:	e001      	b.n	8007586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
 80075a0:	4613      	mov	r3, r2
 80075a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075a4:	787b      	ldrb	r3, [r7, #1]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075aa:	887a      	ldrh	r2, [r7, #2]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80075b0:	e003      	b.n	80075ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80075b2:	887b      	ldrh	r3, [r7, #2]
 80075b4:	041a      	lsls	r2, r3, #16
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	619a      	str	r2, [r3, #24]
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80075d2:	4b08      	ldr	r3, [pc, #32]	@ (80075f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075d4:	695a      	ldr	r2, [r3, #20]
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	4013      	ands	r3, r2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d006      	beq.n	80075ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075de:	4a05      	ldr	r2, [pc, #20]	@ (80075f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f806 	bl	80075f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40013c00 	.word	0x40013c00

080075f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e08b      	b.n	800773a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7f9 fa48 	bl	8000acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2224      	movs	r2, #36	@ 0x24
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0201 	bic.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007660:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007670:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d107      	bne.n	800768a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007686:	609a      	str	r2, [r3, #8]
 8007688:	e006      	b.n	8007698 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007696:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d108      	bne.n	80076b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076ae:	605a      	str	r2, [r3, #4]
 80076b0:	e007      	b.n	80076c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6859      	ldr	r1, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <HAL_I2C_Init+0x134>)
 80076ce:	430b      	orrs	r3, r1
 80076d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1a      	ldr	r2, [r3, #32]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	02008000 	.word	0x02008000

08007748 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e021      	b.n	800779e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2224      	movs	r2, #36	@ 0x24
 800775e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0201 	bic.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7f9 fa0a 	bl	8000b8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	4608      	mov	r0, r1
 80077b2:	4611      	mov	r1, r2
 80077b4:	461a      	mov	r2, r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	817b      	strh	r3, [r7, #10]
 80077ba:	460b      	mov	r3, r1
 80077bc:	813b      	strh	r3, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	f040 80f9 	bne.w	80079c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_I2C_Mem_Write+0x34>
 80077d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d105      	bne.n	80077e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0ed      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_I2C_Mem_Write+0x4e>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e0e6      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077fe:	f7fe fbf3 	bl	8005fe8 <HAL_GetTick>
 8007802:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	2319      	movs	r3, #25
 800780a:	2201      	movs	r2, #1
 800780c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fad1 	bl	8007db8 <I2C_WaitOnFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e0d1      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2221      	movs	r2, #33	@ 0x21
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2240      	movs	r2, #64	@ 0x40
 800782c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a3a      	ldr	r2, [r7, #32]
 800783a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007840:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007848:	88f8      	ldrh	r0, [r7, #6]
 800784a:	893a      	ldrh	r2, [r7, #8]
 800784c:	8979      	ldrh	r1, [r7, #10]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f9e1 	bl	8007c20 <I2C_RequestMemoryWrite>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0a9      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007874:	b29b      	uxth	r3, r3
 8007876:	2bff      	cmp	r3, #255	@ 0xff
 8007878:	d90e      	bls.n	8007898 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	22ff      	movs	r2, #255	@ 0xff
 800787e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007884:	b2da      	uxtb	r2, r3
 8007886:	8979      	ldrh	r1, [r7, #10]
 8007888:	2300      	movs	r3, #0
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fc55 	bl	8008140 <I2C_TransferConfig>
 8007896:	e00f      	b.n	80078b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	8979      	ldrh	r1, [r7, #10]
 80078aa:	2300      	movs	r3, #0
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fc44 	bl	8008140 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fad4 	bl	8007e6a <I2C_WaitOnTXISFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e07b      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d034      	beq.n	8007970 <HAL_I2C_Mem_Write+0x1c8>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d130      	bne.n	8007970 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007914:	2200      	movs	r2, #0
 8007916:	2180      	movs	r1, #128	@ 0x80
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fa4d 	bl	8007db8 <I2C_WaitOnFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e04d      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800792c:	b29b      	uxth	r3, r3
 800792e:	2bff      	cmp	r3, #255	@ 0xff
 8007930:	d90e      	bls.n	8007950 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22ff      	movs	r2, #255	@ 0xff
 8007936:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800793c:	b2da      	uxtb	r2, r3
 800793e:	8979      	ldrh	r1, [r7, #10]
 8007940:	2300      	movs	r3, #0
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fbf9 	bl	8008140 <I2C_TransferConfig>
 800794e:	e00f      	b.n	8007970 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007954:	b29a      	uxth	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800795e:	b2da      	uxtb	r2, r3
 8007960:	8979      	ldrh	r1, [r7, #10]
 8007962:	2300      	movs	r3, #0
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fbe8 	bl	8008140 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d19e      	bne.n	80078b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 faba 	bl	8007ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e01a      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2220      	movs	r2, #32
 8007994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6859      	ldr	r1, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <HAL_I2C_Mem_Write+0x224>)
 80079a2:	400b      	ands	r3, r1
 80079a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e000      	b.n	80079c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80079c2:	2302      	movs	r3, #2
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	fe00e800 	.word	0xfe00e800

080079d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	461a      	mov	r2, r3
 80079de:	4603      	mov	r3, r0
 80079e0:	817b      	strh	r3, [r7, #10]
 80079e2:	460b      	mov	r3, r1
 80079e4:	813b      	strh	r3, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	f040 80fd 	bne.w	8007bf2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_I2C_Mem_Read+0x34>
 80079fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d105      	bne.n	8007a10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0f1      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_I2C_Mem_Read+0x4e>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e0ea      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a26:	f7fe fadf 	bl	8005fe8 <HAL_GetTick>
 8007a2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2319      	movs	r3, #25
 8007a32:	2201      	movs	r2, #1
 8007a34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f9bd 	bl	8007db8 <I2C_WaitOnFlagUntilTimeout>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0d5      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2222      	movs	r2, #34	@ 0x22
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2240      	movs	r2, #64	@ 0x40
 8007a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a3a      	ldr	r2, [r7, #32]
 8007a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a70:	88f8      	ldrh	r0, [r7, #6]
 8007a72:	893a      	ldrh	r2, [r7, #8]
 8007a74:	8979      	ldrh	r1, [r7, #10]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4603      	mov	r3, r0
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f921 	bl	8007cc8 <I2C_RequestMemoryRead>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0ad      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2bff      	cmp	r3, #255	@ 0xff
 8007aa0:	d90e      	bls.n	8007ac0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	8979      	ldrh	r1, [r7, #10]
 8007ab0:	4b52      	ldr	r3, [pc, #328]	@ (8007bfc <HAL_I2C_Mem_Read+0x22c>)
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fb41 	bl	8008140 <I2C_TransferConfig>
 8007abe:	e00f      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	8979      	ldrh	r1, [r7, #10]
 8007ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8007bfc <HAL_I2C_Mem_Read+0x22c>)
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fb30 	bl	8008140 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2104      	movs	r1, #4
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 f964 	bl	8007db8 <I2C_WaitOnFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e07c      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d034      	beq.n	8007ba0 <HAL_I2C_Mem_Read+0x1d0>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d130      	bne.n	8007ba0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b44:	2200      	movs	r2, #0
 8007b46:	2180      	movs	r1, #128	@ 0x80
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f935 	bl	8007db8 <I2C_WaitOnFlagUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e04d      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2bff      	cmp	r3, #255	@ 0xff
 8007b60:	d90e      	bls.n	8007b80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	8979      	ldrh	r1, [r7, #10]
 8007b70:	2300      	movs	r3, #0
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fae1 	bl	8008140 <I2C_TransferConfig>
 8007b7e:	e00f      	b.n	8007ba0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	8979      	ldrh	r1, [r7, #10]
 8007b92:	2300      	movs	r3, #0
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fad0 	bl	8008140 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d19a      	bne.n	8007ae0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f9a2 	bl	8007ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e01a      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c00 <HAL_I2C_Mem_Read+0x230>)
 8007bd2:	400b      	ands	r3, r1
 8007bd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	80002400 	.word	0x80002400
 8007c00:	fe00e800 	.word	0xfe00e800

08007c04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c12:	b2db      	uxtb	r3, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4603      	mov	r3, r0
 8007c30:	817b      	strh	r3, [r7, #10]
 8007c32:	460b      	mov	r3, r1
 8007c34:	813b      	strh	r3, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	8979      	ldrh	r1, [r7, #10]
 8007c40:	4b20      	ldr	r3, [pc, #128]	@ (8007cc4 <I2C_RequestMemoryWrite+0xa4>)
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fa79 	bl	8008140 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c4e:	69fa      	ldr	r2, [r7, #28]
 8007c50:	69b9      	ldr	r1, [r7, #24]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 f909 	bl	8007e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e02c      	b.n	8007cbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d105      	bne.n	8007c74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c68:	893b      	ldrh	r3, [r7, #8]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c72:	e015      	b.n	8007ca0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c74:	893b      	ldrh	r3, [r7, #8]
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	69b9      	ldr	r1, [r7, #24]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f8ef 	bl	8007e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e012      	b.n	8007cbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c96:	893b      	ldrh	r3, [r7, #8]
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2180      	movs	r1, #128	@ 0x80
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f884 	bl	8007db8 <I2C_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	80002000 	.word	0x80002000

08007cc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	817b      	strh	r3, [r7, #10]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	813b      	strh	r3, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	8979      	ldrh	r1, [r7, #10]
 8007ce8:	4b20      	ldr	r3, [pc, #128]	@ (8007d6c <I2C_RequestMemoryRead+0xa4>)
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fa26 	bl	8008140 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	69b9      	ldr	r1, [r7, #24]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f8b6 	bl	8007e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e02c      	b.n	8007d62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d105      	bne.n	8007d1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d0e:	893b      	ldrh	r3, [r7, #8]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d18:	e015      	b.n	8007d46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d1a:	893b      	ldrh	r3, [r7, #8]
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	69b9      	ldr	r1, [r7, #24]
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 f89c 	bl	8007e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e012      	b.n	8007d62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d3c:	893b      	ldrh	r3, [r7, #8]
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2140      	movs	r1, #64	@ 0x40
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f831 	bl	8007db8 <I2C_WaitOnFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	80002000 	.word	0x80002000

08007d70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d103      	bne.n	8007d8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d007      	beq.n	8007dac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	619a      	str	r2, [r3, #24]
  }
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dc8:	e03b      	b.n	8007e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f8d6 	bl	8007f80 <I2C_IsErrorOccurred>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e041      	b.n	8007e62 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d02d      	beq.n	8007e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de6:	f7fe f8ff 	bl	8005fe8 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d302      	bcc.n	8007dfc <I2C_WaitOnFlagUntilTimeout+0x44>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d122      	bne.n	8007e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4013      	ands	r3, r2
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	bf0c      	ite	eq
 8007e0c:	2301      	moveq	r3, #1
 8007e0e:	2300      	movne	r3, #0
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d113      	bne.n	8007e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1e:	f043 0220 	orr.w	r2, r3, #32
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e00f      	b.n	8007e62 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bf0c      	ite	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	2300      	movne	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d0b4      	beq.n	8007dca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e76:	e033      	b.n	8007ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f87f 	bl	8007f80 <I2C_IsErrorOccurred>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e031      	b.n	8007ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d025      	beq.n	8007ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e94:	f7fe f8a8 	bl	8005fe8 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d302      	bcc.n	8007eaa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d11a      	bne.n	8007ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d013      	beq.n	8007ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e007      	b.n	8007ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d1c4      	bne.n	8007e78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f04:	e02f      	b.n	8007f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f838 	bl	8007f80 <I2C_IsErrorOccurred>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e02d      	b.n	8007f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1a:	f7fe f865 	bl	8005fe8 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d302      	bcc.n	8007f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d11a      	bne.n	8007f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	d013      	beq.n	8007f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f42:	f043 0220 	orr.w	r2, r3, #32
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e007      	b.n	8007f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d1c8      	bne.n	8007f06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	@ 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d068      	beq.n	800807e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2210      	movs	r2, #16
 8007fb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fb4:	e049      	b.n	800804a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d045      	beq.n	800804a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fbe:	f7fe f813 	bl	8005fe8 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d302      	bcc.n	8007fd4 <I2C_IsErrorOccurred+0x54>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d13a      	bne.n	800804a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fe6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ff6:	d121      	bne.n	800803c <I2C_IsErrorOccurred+0xbc>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ffe:	d01d      	beq.n	800803c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008000:	7cfb      	ldrb	r3, [r7, #19]
 8008002:	2b20      	cmp	r3, #32
 8008004:	d01a      	beq.n	800803c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008014:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008016:	f7fd ffe7 	bl	8005fe8 <HAL_GetTick>
 800801a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800801c:	e00e      	b.n	800803c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800801e:	f7fd ffe3 	bl	8005fe8 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b19      	cmp	r3, #25
 800802a:	d907      	bls.n	800803c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	f043 0320 	orr.w	r3, r3, #32
 8008032:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800803a:	e006      	b.n	800804a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b20      	cmp	r3, #32
 8008048:	d1e9      	bne.n	800801e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b20      	cmp	r3, #32
 8008056:	d003      	beq.n	8008060 <I2C_IsErrorOccurred+0xe0>
 8008058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0aa      	beq.n	8007fb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2220      	movs	r2, #32
 800806e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	f043 0304 	orr.w	r3, r3, #4
 8008076:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	f043 0301 	orr.w	r3, r3, #1
 8008096:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	f043 0308 	orr.w	r3, r3, #8
 80080b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80080c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00b      	beq.n	80080ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	f043 0302 	orr.w	r3, r3, #2
 80080da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80080ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01c      	beq.n	800812e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fe3b 	bl	8007d70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6859      	ldr	r1, [r3, #4]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4b0d      	ldr	r3, [pc, #52]	@ (800813c <I2C_IsErrorOccurred+0x1bc>)
 8008106:	400b      	ands	r3, r1
 8008108:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2220      	movs	r2, #32
 800811a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800812e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008132:	4618      	mov	r0, r3
 8008134:	3728      	adds	r7, #40	@ 0x28
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	fe00e800 	.word	0xfe00e800

08008140 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	607b      	str	r3, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	817b      	strh	r3, [r7, #10]
 800814e:	4613      	mov	r3, r2
 8008150:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008152:	897b      	ldrh	r3, [r7, #10]
 8008154:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008158:	7a7b      	ldrb	r3, [r7, #9]
 800815a:	041b      	lsls	r3, r3, #16
 800815c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008160:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	4313      	orrs	r3, r2
 800816a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800816e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	0d5b      	lsrs	r3, r3, #21
 800817a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800817e:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <I2C_TransferConfig+0x60>)
 8008180:	430b      	orrs	r3, r1
 8008182:	43db      	mvns	r3, r3
 8008184:	ea02 0103 	and.w	r1, r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	03ff63ff 	.word	0x03ff63ff

080081a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e0bf      	b.n	8008336 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7f8 fd82 	bl	8000cd4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80081e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6999      	ldr	r1, [r3, #24]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6899      	ldr	r1, [r3, #8]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b4a      	ldr	r3, [pc, #296]	@ (8008340 <HAL_LTDC_Init+0x19c>)
 8008218:	400b      	ands	r3, r1
 800821a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6899      	ldr	r1, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68d9      	ldr	r1, [r3, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	4b3e      	ldr	r3, [pc, #248]	@ (8008340 <HAL_LTDC_Init+0x19c>)
 8008246:	400b      	ands	r3, r1
 8008248:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	041b      	lsls	r3, r3, #16
 8008250:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68d9      	ldr	r1, [r3, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1a      	ldr	r2, [r3, #32]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6919      	ldr	r1, [r3, #16]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b33      	ldr	r3, [pc, #204]	@ (8008340 <HAL_LTDC_Init+0x19c>)
 8008274:	400b      	ands	r3, r1
 8008276:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827c:	041b      	lsls	r3, r3, #16
 800827e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6919      	ldr	r1, [r3, #16]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6959      	ldr	r1, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <HAL_LTDC_Init+0x19c>)
 80082a2:	400b      	ands	r3, r1
 80082a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6959      	ldr	r1, [r3, #20]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80082ca:	021b      	lsls	r3, r3, #8
 80082cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80082e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0206 	orr.w	r2, r2, #6
 8008312:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	f000f800 	.word	0xf000f800

08008344 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0304 	and.w	r3, r3, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	d023      	beq.n	80083ae <HAL_LTDC_IRQHandler+0x6a>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01e      	beq.n	80083ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0204 	bic.w	r2, r2, #4
 800837e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2204      	movs	r2, #4
 8008386:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800838e:	f043 0201 	orr.w	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2204      	movs	r2, #4
 800839c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f86f 	bl	800848c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d023      	beq.n	8008400 <HAL_LTDC_IRQHandler+0xbc>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01e      	beq.n	8008400 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0202 	bic.w	r2, r2, #2
 80083d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2202      	movs	r2, #2
 80083d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083e0:	f043 0202 	orr.w	r2, r3, #2
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f846 	bl	800848c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01b      	beq.n	8008442 <HAL_LTDC_IRQHandler+0xfe>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d016      	beq.n	8008442 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0201 	bic.w	r2, r2, #1
 8008422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2201      	movs	r2, #1
 800842a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f82f 	bl	80084a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <HAL_LTDC_IRQHandler+0x140>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 0308 	and.w	r3, r3, #8
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0208 	bic.w	r2, r2, #8
 8008464:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2208      	movs	r2, #8
 800846c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f818 	bl	80084b4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80084c8:	b5b0      	push	{r4, r5, r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <HAL_LTDC_ConfigLayer+0x1a>
 80084de:	2302      	movs	r3, #2
 80084e0:	e02c      	b.n	800853c <HAL_LTDC_ConfigLayer+0x74>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2202      	movs	r2, #2
 80084ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2134      	movs	r1, #52	@ 0x34
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	4413      	add	r3, r2
 80084fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4614      	mov	r4, r2
 8008506:	461d      	mov	r5, r3
 8008508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800850a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800850e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f81f 	bl	8008560 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2201      	movs	r2, #1
 8008528:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bdb0      	pop	{r4, r5, r7, pc}

08008544 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008552:	b2db      	uxtb	r3, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008560:	b480      	push	{r7}
 8008562:	b089      	sub	sp, #36	@ 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	0c1b      	lsrs	r3, r3, #16
 8008578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800857c:	4413      	add	r3, r2
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	01db      	lsls	r3, r3, #7
 800858c:	4413      	add	r3, r2
 800858e:	3384      	adds	r3, #132	@ 0x84
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	4611      	mov	r1, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	01d2      	lsls	r2, r2, #7
 800859c:	440a      	add	r2, r1
 800859e:	3284      	adds	r2, #132	@ 0x84
 80085a0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80085a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4619      	mov	r1, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	01db      	lsls	r3, r3, #7
 80085c4:	440b      	add	r3, r1
 80085c6:	3384      	adds	r3, #132	@ 0x84
 80085c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085de:	4413      	add	r3, r2
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	01db      	lsls	r3, r3, #7
 80085ee:	4413      	add	r3, r2
 80085f0:	3384      	adds	r3, #132	@ 0x84
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	4611      	mov	r1, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	01d2      	lsls	r2, r2, #7
 80085fe:	440a      	add	r2, r1
 8008600:	3284      	adds	r2, #132	@ 0x84
 8008602:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008606:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008616:	4413      	add	r3, r2
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	01db      	lsls	r3, r3, #7
 8008624:	440b      	add	r3, r1
 8008626:	3384      	adds	r3, #132	@ 0x84
 8008628:	4619      	mov	r1, r3
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4313      	orrs	r3, r2
 800862e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	01db      	lsls	r3, r3, #7
 800863a:	4413      	add	r3, r2
 800863c:	3384      	adds	r3, #132	@ 0x84
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	6812      	ldr	r2, [r2, #0]
 8008644:	4611      	mov	r1, r2
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	01d2      	lsls	r2, r2, #7
 800864a:	440a      	add	r2, r1
 800864c:	3284      	adds	r2, #132	@ 0x84
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	01db      	lsls	r3, r3, #7
 800865e:	4413      	add	r3, r2
 8008660:	3384      	adds	r3, #132	@ 0x84
 8008662:	461a      	mov	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	061b      	lsls	r3, r3, #24
 8008684:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	01db      	lsls	r3, r3, #7
 8008690:	4413      	add	r3, r2
 8008692:	3384      	adds	r3, #132	@ 0x84
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	4413      	add	r3, r2
 80086a2:	3384      	adds	r3, #132	@ 0x84
 80086a4:	461a      	mov	r2, r3
 80086a6:	2300      	movs	r3, #0
 80086a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086b0:	461a      	mov	r2, r3
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4619      	mov	r1, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	01db      	lsls	r3, r3, #7
 80086c4:	440b      	add	r3, r1
 80086c6:	3384      	adds	r3, #132	@ 0x84
 80086c8:	4619      	mov	r1, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	01db      	lsls	r3, r3, #7
 80086da:	4413      	add	r3, r2
 80086dc:	3384      	adds	r3, #132	@ 0x84
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	4611      	mov	r1, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	01d2      	lsls	r2, r2, #7
 80086ea:	440a      	add	r2, r1
 80086ec:	3284      	adds	r2, #132	@ 0x84
 80086ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	01db      	lsls	r3, r3, #7
 80086fe:	4413      	add	r3, r2
 8008700:	3384      	adds	r3, #132	@ 0x84
 8008702:	461a      	mov	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	01db      	lsls	r3, r3, #7
 8008714:	4413      	add	r3, r2
 8008716:	3384      	adds	r3, #132	@ 0x84
 8008718:	69da      	ldr	r2, [r3, #28]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	01db      	lsls	r3, r3, #7
 8008724:	440b      	add	r3, r1
 8008726:	3384      	adds	r3, #132	@ 0x84
 8008728:	4619      	mov	r1, r3
 800872a:	4b58      	ldr	r3, [pc, #352]	@ (800888c <LTDC_SetConfig+0x32c>)
 800872c:	4013      	ands	r3, r2
 800872e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	69da      	ldr	r2, [r3, #28]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	6809      	ldr	r1, [r1, #0]
 800873c:	4608      	mov	r0, r1
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	01c9      	lsls	r1, r1, #7
 8008742:	4401      	add	r1, r0
 8008744:	3184      	adds	r1, #132	@ 0x84
 8008746:	4313      	orrs	r3, r2
 8008748:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	01db      	lsls	r3, r3, #7
 8008754:	4413      	add	r3, r2
 8008756:	3384      	adds	r3, #132	@ 0x84
 8008758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	01db      	lsls	r3, r3, #7
 8008764:	4413      	add	r3, r2
 8008766:	3384      	adds	r3, #132	@ 0x84
 8008768:	461a      	mov	r2, r3
 800876a:	2300      	movs	r3, #0
 800876c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	01db      	lsls	r3, r3, #7
 8008778:	4413      	add	r3, r2
 800877a:	3384      	adds	r3, #132	@ 0x84
 800877c:	461a      	mov	r2, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008782:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800878c:	2304      	movs	r3, #4
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e01b      	b.n	80087ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d102      	bne.n	80087a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800879a:	2303      	movs	r3, #3
 800879c:	61fb      	str	r3, [r7, #28]
 800879e:	e014      	b.n	80087ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d00b      	beq.n	80087c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d007      	beq.n	80087c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d003      	beq.n	80087c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087bc:	2b07      	cmp	r3, #7
 80087be:	d102      	bne.n	80087c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80087c0:	2302      	movs	r3, #2
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	e001      	b.n	80087ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80087c6:	2301      	movs	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	01db      	lsls	r3, r3, #7
 80087d4:	4413      	add	r3, r2
 80087d6:	3384      	adds	r3, #132	@ 0x84
 80087d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	4611      	mov	r1, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	01d2      	lsls	r2, r2, #7
 80087e4:	440a      	add	r2, r1
 80087e6:	3284      	adds	r2, #132	@ 0x84
 80087e8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80087ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	fb02 f303 	mul.w	r3, r2, r3
 80087f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6859      	ldr	r1, [r3, #4]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1acb      	subs	r3, r1, r3
 8008804:	69f9      	ldr	r1, [r7, #28]
 8008806:	fb01 f303 	mul.w	r3, r1, r3
 800880a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800880c:	68f9      	ldr	r1, [r7, #12]
 800880e:	6809      	ldr	r1, [r1, #0]
 8008810:	4608      	mov	r0, r1
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	01c9      	lsls	r1, r1, #7
 8008816:	4401      	add	r1, r0
 8008818:	3184      	adds	r1, #132	@ 0x84
 800881a:	4313      	orrs	r3, r2
 800881c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	01db      	lsls	r3, r3, #7
 8008828:	4413      	add	r3, r2
 800882a:	3384      	adds	r3, #132	@ 0x84
 800882c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4619      	mov	r1, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	01db      	lsls	r3, r3, #7
 8008838:	440b      	add	r3, r1
 800883a:	3384      	adds	r3, #132	@ 0x84
 800883c:	4619      	mov	r1, r3
 800883e:	4b14      	ldr	r3, [pc, #80]	@ (8008890 <LTDC_SetConfig+0x330>)
 8008840:	4013      	ands	r3, r2
 8008842:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	01db      	lsls	r3, r3, #7
 800884e:	4413      	add	r3, r2
 8008850:	3384      	adds	r3, #132	@ 0x84
 8008852:	461a      	mov	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	01db      	lsls	r3, r3, #7
 8008864:	4413      	add	r3, r2
 8008866:	3384      	adds	r3, #132	@ 0x84
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	6812      	ldr	r2, [r2, #0]
 800886e:	4611      	mov	r1, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	01d2      	lsls	r2, r2, #7
 8008874:	440a      	add	r2, r1
 8008876:	3284      	adds	r2, #132	@ 0x84
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6013      	str	r3, [r2, #0]
}
 800887e:	bf00      	nop
 8008880:	3724      	adds	r7, #36	@ 0x24
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	fffff8f8 	.word	0xfffff8f8
 8008890:	fffff800 	.word	0xfffff800

08008894 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800889e:	4b23      	ldr	r3, [pc, #140]	@ (800892c <HAL_PWREx_EnableOverDrive+0x98>)
 80088a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a2:	4a22      	ldr	r2, [pc, #136]	@ (800892c <HAL_PWREx_EnableOverDrive+0x98>)
 80088a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80088aa:	4b20      	ldr	r3, [pc, #128]	@ (800892c <HAL_PWREx_EnableOverDrive+0x98>)
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80088b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088c2:	f7fd fb91 	bl	8005fe8 <HAL_GetTick>
 80088c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80088c8:	e009      	b.n	80088de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80088ca:	f7fd fb8d 	bl	8005fe8 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088d8:	d901      	bls.n	80088de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e022      	b.n	8008924 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80088de:	4b14      	ldr	r3, [pc, #80]	@ (8008930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ea:	d1ee      	bne.n	80088ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80088ec:	4b10      	ldr	r3, [pc, #64]	@ (8008930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a0f      	ldr	r2, [pc, #60]	@ (8008930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088f8:	f7fd fb76 	bl	8005fe8 <HAL_GetTick>
 80088fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80088fe:	e009      	b.n	8008914 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008900:	f7fd fb72 	bl	8005fe8 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800890e:	d901      	bls.n	8008914 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e007      	b.n	8008924 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008914:	4b06      	ldr	r3, [pc, #24]	@ (8008930 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800891c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008920:	d1ee      	bne.n	8008900 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	40023800 	.word	0x40023800
 8008930:	40007000 	.word	0x40007000

08008934 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af02      	add	r7, sp, #8
 800893a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800893c:	f7fd fb54 	bl	8005fe8 <HAL_GetTick>
 8008940:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e067      	b.n	8008a1c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7f8 fcb9 	bl	80012d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008966:	f241 3188 	movw	r1, #5000	@ 0x1388
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f85e 	bl	8008a2c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	3b01      	subs	r3, #1
 8008980:	021a      	lsls	r2, r3, #8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	2120      	movs	r1, #32
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f856 	bl	8008a48 <QSPI_WaitFlagStateUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d135      	bne.n	8008a12 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008a24 <HAL_QSPI_Init+0xf0>)
 80089ae:	4013      	ands	r3, r2
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6852      	ldr	r2, [r2, #4]
 80089b4:	0611      	lsls	r1, r2, #24
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68d2      	ldr	r2, [r2, #12]
 80089ba:	4311      	orrs	r1, r2
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	69d2      	ldr	r2, [r2, #28]
 80089c0:	4311      	orrs	r1, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	6a12      	ldr	r2, [r2, #32]
 80089c6:	4311      	orrs	r1, r2
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6812      	ldr	r2, [r2, #0]
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	4b14      	ldr	r3, [pc, #80]	@ (8008a28 <HAL_QSPI_Init+0xf4>)
 80089d8:	4013      	ands	r3, r2
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6912      	ldr	r2, [r2, #16]
 80089de:	0411      	lsls	r1, r2, #16
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	6952      	ldr	r2, [r2, #20]
 80089e4:	4311      	orrs	r1, r2
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6992      	ldr	r2, [r2, #24]
 80089ea:	4311      	orrs	r1, r2
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6812      	ldr	r2, [r2, #0]
 80089f0:	430b      	orrs	r3, r1
 80089f2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	00ffff2f 	.word	0x00ffff2f
 8008a28:	ffe0f8fe 	.word	0xffe0f8fe

08008a2c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	4613      	mov	r3, r2
 8008a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a58:	e01a      	b.n	8008a90 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d016      	beq.n	8008a90 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a62:	f7fd fac1 	bl	8005fe8 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d302      	bcc.n	8008a78 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10b      	bne.n	8008a90 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2204      	movs	r2, #4
 8008a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a84:	f043 0201 	orr.w	r2, r3, #1
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e00e      	b.n	8008aae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689a      	ldr	r2, [r3, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bf14      	ite	ne
 8008a9e:	2301      	movne	r3, #1
 8008aa0:	2300      	moveq	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d1d6      	bne.n	8008a5a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e291      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 8087 	beq.w	8008bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008adc:	4b96      	ldr	r3, [pc, #600]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f003 030c 	and.w	r3, r3, #12
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d00c      	beq.n	8008b02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ae8:	4b93      	ldr	r3, [pc, #588]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 030c 	and.w	r3, r3, #12
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d112      	bne.n	8008b1a <HAL_RCC_OscConfig+0x62>
 8008af4:	4b90      	ldr	r3, [pc, #576]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008afc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b00:	d10b      	bne.n	8008b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b02:	4b8d      	ldr	r3, [pc, #564]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d06c      	beq.n	8008be8 <HAL_RCC_OscConfig+0x130>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d168      	bne.n	8008be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e26b      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b22:	d106      	bne.n	8008b32 <HAL_RCC_OscConfig+0x7a>
 8008b24:	4b84      	ldr	r3, [pc, #528]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a83      	ldr	r2, [pc, #524]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	e02e      	b.n	8008b90 <HAL_RCC_OscConfig+0xd8>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x9c>
 8008b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	4b7c      	ldr	r3, [pc, #496]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a7b      	ldr	r2, [pc, #492]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	e01d      	b.n	8008b90 <HAL_RCC_OscConfig+0xd8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b5c:	d10c      	bne.n	8008b78 <HAL_RCC_OscConfig+0xc0>
 8008b5e:	4b76      	ldr	r3, [pc, #472]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a75      	ldr	r2, [pc, #468]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	4b73      	ldr	r3, [pc, #460]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a72      	ldr	r2, [pc, #456]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e00b      	b.n	8008b90 <HAL_RCC_OscConfig+0xd8>
 8008b78:	4b6f      	ldr	r3, [pc, #444]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	4b6c      	ldr	r3, [pc, #432]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a6b      	ldr	r2, [pc, #428]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d013      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b98:	f7fd fa26 	bl	8005fe8 <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ba0:	f7fd fa22 	bl	8005fe8 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b64      	cmp	r3, #100	@ 0x64
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e21f      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bb2:	4b61      	ldr	r3, [pc, #388]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0xe8>
 8008bbe:	e014      	b.n	8008bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fd fa12 	bl	8005fe8 <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc8:	f7fd fa0e 	bl	8005fe8 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b64      	cmp	r3, #100	@ 0x64
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e20b      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bda:	4b57      	ldr	r3, [pc, #348]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f0      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x110>
 8008be6:	e000      	b.n	8008bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d069      	beq.n	8008cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bf6:	4b50      	ldr	r3, [pc, #320]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 030c 	and.w	r3, r3, #12
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c02:	4b4d      	ldr	r3, [pc, #308]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f003 030c 	and.w	r3, r3, #12
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d11c      	bne.n	8008c48 <HAL_RCC_OscConfig+0x190>
 8008c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d116      	bne.n	8008c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c1a:	4b47      	ldr	r3, [pc, #284]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <HAL_RCC_OscConfig+0x17a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d001      	beq.n	8008c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e1df      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c32:	4b41      	ldr	r3, [pc, #260]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	493d      	ldr	r1, [pc, #244]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c46:	e040      	b.n	8008cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d023      	beq.n	8008c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c50:	4b39      	ldr	r3, [pc, #228]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a38      	ldr	r2, [pc, #224]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c5c:	f7fd f9c4 	bl	8005fe8 <HAL_GetTick>
 8008c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c64:	f7fd f9c0 	bl	8005fe8 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e1bd      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c76:	4b30      	ldr	r3, [pc, #192]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0f0      	beq.n	8008c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c82:	4b2d      	ldr	r3, [pc, #180]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	4929      	ldr	r1, [pc, #164]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	600b      	str	r3, [r1, #0]
 8008c96:	e018      	b.n	8008cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c98:	4b27      	ldr	r3, [pc, #156]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a26      	ldr	r2, [pc, #152]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca4:	f7fd f9a0 	bl	8005fe8 <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cac:	f7fd f99c 	bl	8005fe8 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e199      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f0      	bne.n	8008cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d038      	beq.n	8008d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d019      	beq.n	8008d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cde:	4b16      	ldr	r3, [pc, #88]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ce2:	4a15      	ldr	r2, [pc, #84]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008ce4:	f043 0301 	orr.w	r3, r3, #1
 8008ce8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cea:	f7fd f97d 	bl	8005fe8 <HAL_GetTick>
 8008cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cf0:	e008      	b.n	8008d04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cf2:	f7fd f979 	bl	8005fe8 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e176      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d04:	4b0c      	ldr	r3, [pc, #48]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x23a>
 8008d10:	e01a      	b.n	8008d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d12:	4b09      	ldr	r3, [pc, #36]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d16:	4a08      	ldr	r2, [pc, #32]	@ (8008d38 <HAL_RCC_OscConfig+0x280>)
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d1e:	f7fd f963 	bl	8005fe8 <HAL_GetTick>
 8008d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d24:	e00a      	b.n	8008d3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d26:	f7fd f95f 	bl	8005fe8 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d903      	bls.n	8008d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e15c      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
 8008d38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d3c:	4b91      	ldr	r3, [pc, #580]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1ee      	bne.n	8008d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0304 	and.w	r3, r3, #4
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 80a4 	beq.w	8008e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d56:	4b8b      	ldr	r3, [pc, #556]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10d      	bne.n	8008d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d62:	4b88      	ldr	r3, [pc, #544]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d66:	4a87      	ldr	r2, [pc, #540]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d6e:	4b85      	ldr	r3, [pc, #532]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d76:	60bb      	str	r3, [r7, #8]
 8008d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d7e:	4b82      	ldr	r3, [pc, #520]	@ (8008f88 <HAL_RCC_OscConfig+0x4d0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d118      	bne.n	8008dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8008f88 <HAL_RCC_OscConfig+0x4d0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8008f88 <HAL_RCC_OscConfig+0x4d0>)
 8008d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d96:	f7fd f927 	bl	8005fe8 <HAL_GetTick>
 8008d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d9c:	e008      	b.n	8008db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d9e:	f7fd f923 	bl	8005fe8 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b64      	cmp	r3, #100	@ 0x64
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e120      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008db0:	4b75      	ldr	r3, [pc, #468]	@ (8008f88 <HAL_RCC_OscConfig+0x4d0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f0      	beq.n	8008d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d106      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x31a>
 8008dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dd0:	e02d      	b.n	8008e2e <HAL_RCC_OscConfig+0x376>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10c      	bne.n	8008df4 <HAL_RCC_OscConfig+0x33c>
 8008dda:	4b6a      	ldr	r3, [pc, #424]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dde:	4a69      	ldr	r2, [pc, #420]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008de6:	4b67      	ldr	r3, [pc, #412]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dea:	4a66      	ldr	r2, [pc, #408]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008dec:	f023 0304 	bic.w	r3, r3, #4
 8008df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008df2:	e01c      	b.n	8008e2e <HAL_RCC_OscConfig+0x376>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b05      	cmp	r3, #5
 8008dfa:	d10c      	bne.n	8008e16 <HAL_RCC_OscConfig+0x35e>
 8008dfc:	4b61      	ldr	r3, [pc, #388]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e00:	4a60      	ldr	r2, [pc, #384]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e02:	f043 0304 	orr.w	r3, r3, #4
 8008e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e08:	4b5e      	ldr	r3, [pc, #376]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e14:	e00b      	b.n	8008e2e <HAL_RCC_OscConfig+0x376>
 8008e16:	4b5b      	ldr	r3, [pc, #364]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e1c:	f023 0301 	bic.w	r3, r3, #1
 8008e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e22:	4b58      	ldr	r3, [pc, #352]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e26:	4a57      	ldr	r2, [pc, #348]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e28:	f023 0304 	bic.w	r3, r3, #4
 8008e2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d015      	beq.n	8008e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e36:	f7fd f8d7 	bl	8005fe8 <HAL_GetTick>
 8008e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e3c:	e00a      	b.n	8008e54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e3e:	f7fd f8d3 	bl	8005fe8 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e0ce      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e54:	4b4b      	ldr	r3, [pc, #300]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0ee      	beq.n	8008e3e <HAL_RCC_OscConfig+0x386>
 8008e60:	e014      	b.n	8008e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e62:	f7fd f8c1 	bl	8005fe8 <HAL_GetTick>
 8008e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e68:	e00a      	b.n	8008e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6a:	f7fd f8bd 	bl	8005fe8 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d901      	bls.n	8008e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e0b8      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e80:	4b40      	ldr	r3, [pc, #256]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1ee      	bne.n	8008e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d105      	bne.n	8008e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e92:	4b3c      	ldr	r3, [pc, #240]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e96:	4a3b      	ldr	r2, [pc, #236]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e9c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 80a4 	beq.w	8008ff0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ea8:	4b36      	ldr	r3, [pc, #216]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f003 030c 	and.w	r3, r3, #12
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d06b      	beq.n	8008f8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d149      	bne.n	8008f50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ebc:	4b31      	ldr	r3, [pc, #196]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a30      	ldr	r2, [pc, #192]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec8:	f7fd f88e 	bl	8005fe8 <HAL_GetTick>
 8008ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed0:	f7fd f88a 	bl	8005fe8 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e087      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ee2:	4b28      	ldr	r3, [pc, #160]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1f0      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69da      	ldr	r2, [r3, #28]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efc:	019b      	lsls	r3, r3, #6
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	3b01      	subs	r3, #1
 8008f08:	041b      	lsls	r3, r3, #16
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f10:	061b      	lsls	r3, r3, #24
 8008f12:	4313      	orrs	r3, r2
 8008f14:	4a1b      	ldr	r2, [pc, #108]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008f16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f1c:	4b19      	ldr	r3, [pc, #100]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a18      	ldr	r2, [pc, #96]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f28:	f7fd f85e 	bl	8005fe8 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f30:	f7fd f85a 	bl	8005fe8 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e057      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f42:	4b10      	ldr	r3, [pc, #64]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0f0      	beq.n	8008f30 <HAL_RCC_OscConfig+0x478>
 8008f4e:	e04f      	b.n	8008ff0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f50:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a0b      	ldr	r2, [pc, #44]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5c:	f7fd f844 	bl	8005fe8 <HAL_GetTick>
 8008f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f62:	e008      	b.n	8008f76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f64:	f7fd f840 	bl	8005fe8 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d901      	bls.n	8008f76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e03d      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f76:	4b03      	ldr	r3, [pc, #12]	@ (8008f84 <HAL_RCC_OscConfig+0x4cc>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f0      	bne.n	8008f64 <HAL_RCC_OscConfig+0x4ac>
 8008f82:	e035      	b.n	8008ff0 <HAL_RCC_OscConfig+0x538>
 8008f84:	40023800 	.word	0x40023800
 8008f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ffc <HAL_RCC_OscConfig+0x544>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d028      	beq.n	8008fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d121      	bne.n	8008fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d11a      	bne.n	8008fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d111      	bne.n	8008fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d107      	bne.n	8008fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d001      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e000      	b.n	8008ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40023800 	.word	0x40023800

08009000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e0d0      	b.n	80091ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009018:	4b6a      	ldr	r3, [pc, #424]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d910      	bls.n	8009048 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009026:	4b67      	ldr	r3, [pc, #412]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f023 020f 	bic.w	r2, r3, #15
 800902e:	4965      	ldr	r1, [pc, #404]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	4313      	orrs	r3, r2
 8009034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009036:	4b63      	ldr	r3, [pc, #396]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	429a      	cmp	r2, r3
 8009042:	d001      	beq.n	8009048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e0b8      	b.n	80091ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d020      	beq.n	8009096 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009060:	4b59      	ldr	r3, [pc, #356]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	4a58      	ldr	r2, [pc, #352]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800906a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009078:	4b53      	ldr	r3, [pc, #332]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	4a52      	ldr	r2, [pc, #328]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 800907e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009082:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009084:	4b50      	ldr	r3, [pc, #320]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	494d      	ldr	r1, [pc, #308]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009092:	4313      	orrs	r3, r2
 8009094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d040      	beq.n	8009124 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d107      	bne.n	80090ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090aa:	4b47      	ldr	r3, [pc, #284]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d115      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e07f      	b.n	80091ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d107      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090c2:	4b41      	ldr	r3, [pc, #260]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e073      	b.n	80091ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d2:	4b3d      	ldr	r3, [pc, #244]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e06b      	b.n	80091ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090e2:	4b39      	ldr	r3, [pc, #228]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f023 0203 	bic.w	r2, r3, #3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4936      	ldr	r1, [pc, #216]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090f4:	f7fc ff78 	bl	8005fe8 <HAL_GetTick>
 80090f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090fa:	e00a      	b.n	8009112 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090fc:	f7fc ff74 	bl	8005fe8 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800910a:	4293      	cmp	r3, r2
 800910c:	d901      	bls.n	8009112 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e053      	b.n	80091ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009112:	4b2d      	ldr	r3, [pc, #180]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 020c 	and.w	r2, r3, #12
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	429a      	cmp	r2, r3
 8009122:	d1eb      	bne.n	80090fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009124:	4b27      	ldr	r3, [pc, #156]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d210      	bcs.n	8009154 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009132:	4b24      	ldr	r3, [pc, #144]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f023 020f 	bic.w	r2, r3, #15
 800913a:	4922      	ldr	r1, [pc, #136]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009142:	4b20      	ldr	r3, [pc, #128]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d001      	beq.n	8009154 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e032      	b.n	80091ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d008      	beq.n	8009172 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009160:	4b19      	ldr	r3, [pc, #100]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	4916      	ldr	r1, [pc, #88]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 800916e:	4313      	orrs	r3, r2
 8009170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0308 	and.w	r3, r3, #8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d009      	beq.n	8009192 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800917e:	4b12      	ldr	r3, [pc, #72]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	490e      	ldr	r1, [pc, #56]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 800918e:	4313      	orrs	r3, r2
 8009190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009192:	f000 f821 	bl	80091d8 <HAL_RCC_GetSysClockFreq>
 8009196:	4602      	mov	r2, r0
 8009198:	4b0b      	ldr	r3, [pc, #44]	@ (80091c8 <HAL_RCC_ClockConfig+0x1c8>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	091b      	lsrs	r3, r3, #4
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	490a      	ldr	r1, [pc, #40]	@ (80091cc <HAL_RCC_ClockConfig+0x1cc>)
 80091a4:	5ccb      	ldrb	r3, [r1, r3]
 80091a6:	fa22 f303 	lsr.w	r3, r2, r3
 80091aa:	4a09      	ldr	r2, [pc, #36]	@ (80091d0 <HAL_RCC_ClockConfig+0x1d0>)
 80091ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80091ae:	4b09      	ldr	r3, [pc, #36]	@ (80091d4 <HAL_RCC_ClockConfig+0x1d4>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fc fed4 	bl	8005f60 <HAL_InitTick>

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40023c00 	.word	0x40023c00
 80091c8:	40023800 	.word	0x40023800
 80091cc:	0800c9b8 	.word	0x0800c9b8
 80091d0:	20000000 	.word	0x20000000
 80091d4:	2000019c 	.word	0x2000019c

080091d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091dc:	b090      	sub	sp, #64	@ 0x40
 80091de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e4:	2300      	movs	r3, #0
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e8:	2300      	movs	r3, #0
 80091ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091f0:	4b59      	ldr	r3, [pc, #356]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x180>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 030c 	and.w	r3, r3, #12
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d00d      	beq.n	8009218 <HAL_RCC_GetSysClockFreq+0x40>
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	f200 80a1 	bhi.w	8009344 <HAL_RCC_GetSysClockFreq+0x16c>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <HAL_RCC_GetSysClockFreq+0x34>
 8009206:	2b04      	cmp	r3, #4
 8009208:	d003      	beq.n	8009212 <HAL_RCC_GetSysClockFreq+0x3a>
 800920a:	e09b      	b.n	8009344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800920c:	4b53      	ldr	r3, [pc, #332]	@ (800935c <HAL_RCC_GetSysClockFreq+0x184>)
 800920e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009210:	e09b      	b.n	800934a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009212:	4b53      	ldr	r3, [pc, #332]	@ (8009360 <HAL_RCC_GetSysClockFreq+0x188>)
 8009214:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009216:	e098      	b.n	800934a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009218:	4b4f      	ldr	r3, [pc, #316]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x180>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009222:	4b4d      	ldr	r3, [pc, #308]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x180>)
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d028      	beq.n	8009280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800922e:	4b4a      	ldr	r3, [pc, #296]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x180>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	099b      	lsrs	r3, r3, #6
 8009234:	2200      	movs	r2, #0
 8009236:	623b      	str	r3, [r7, #32]
 8009238:	627a      	str	r2, [r7, #36]	@ 0x24
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009240:	2100      	movs	r1, #0
 8009242:	4b47      	ldr	r3, [pc, #284]	@ (8009360 <HAL_RCC_GetSysClockFreq+0x188>)
 8009244:	fb03 f201 	mul.w	r2, r3, r1
 8009248:	2300      	movs	r3, #0
 800924a:	fb00 f303 	mul.w	r3, r0, r3
 800924e:	4413      	add	r3, r2
 8009250:	4a43      	ldr	r2, [pc, #268]	@ (8009360 <HAL_RCC_GetSysClockFreq+0x188>)
 8009252:	fba0 1202 	umull	r1, r2, r0, r2
 8009256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009258:	460a      	mov	r2, r1
 800925a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800925c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925e:	4413      	add	r3, r2
 8009260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009264:	2200      	movs	r2, #0
 8009266:	61bb      	str	r3, [r7, #24]
 8009268:	61fa      	str	r2, [r7, #28]
 800926a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800926e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009272:	f7f6 ffc9 	bl	8000208 <__aeabi_uldivmod>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4613      	mov	r3, r2
 800927c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800927e:	e053      	b.n	8009328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009280:	4b35      	ldr	r3, [pc, #212]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x180>)
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	099b      	lsrs	r3, r3, #6
 8009286:	2200      	movs	r2, #0
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	617a      	str	r2, [r7, #20]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009292:	f04f 0b00 	mov.w	fp, #0
 8009296:	4652      	mov	r2, sl
 8009298:	465b      	mov	r3, fp
 800929a:	f04f 0000 	mov.w	r0, #0
 800929e:	f04f 0100 	mov.w	r1, #0
 80092a2:	0159      	lsls	r1, r3, #5
 80092a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092a8:	0150      	lsls	r0, r2, #5
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	ebb2 080a 	subs.w	r8, r2, sl
 80092b2:	eb63 090b 	sbc.w	r9, r3, fp
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	f04f 0300 	mov.w	r3, #0
 80092be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80092ca:	ebb2 0408 	subs.w	r4, r2, r8
 80092ce:	eb63 0509 	sbc.w	r5, r3, r9
 80092d2:	f04f 0200 	mov.w	r2, #0
 80092d6:	f04f 0300 	mov.w	r3, #0
 80092da:	00eb      	lsls	r3, r5, #3
 80092dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092e0:	00e2      	lsls	r2, r4, #3
 80092e2:	4614      	mov	r4, r2
 80092e4:	461d      	mov	r5, r3
 80092e6:	eb14 030a 	adds.w	r3, r4, sl
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	eb45 030b 	adc.w	r3, r5, fp
 80092f0:	607b      	str	r3, [r7, #4]
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092fe:	4629      	mov	r1, r5
 8009300:	028b      	lsls	r3, r1, #10
 8009302:	4621      	mov	r1, r4
 8009304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009308:	4621      	mov	r1, r4
 800930a:	028a      	lsls	r2, r1, #10
 800930c:	4610      	mov	r0, r2
 800930e:	4619      	mov	r1, r3
 8009310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009312:	2200      	movs	r2, #0
 8009314:	60bb      	str	r3, [r7, #8]
 8009316:	60fa      	str	r2, [r7, #12]
 8009318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800931c:	f7f6 ff74 	bl	8000208 <__aeabi_uldivmod>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4613      	mov	r3, r2
 8009326:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009328:	4b0b      	ldr	r3, [pc, #44]	@ (8009358 <HAL_RCC_GetSysClockFreq+0x180>)
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	3301      	adds	r3, #1
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009338:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009342:	e002      	b.n	800934a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009344:	4b05      	ldr	r3, [pc, #20]	@ (800935c <HAL_RCC_GetSysClockFreq+0x184>)
 8009346:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800934a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800934c:	4618      	mov	r0, r3
 800934e:	3740      	adds	r7, #64	@ 0x40
 8009350:	46bd      	mov	sp, r7
 8009352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009356:	bf00      	nop
 8009358:	40023800 	.word	0x40023800
 800935c:	00f42400 	.word	0x00f42400
 8009360:	017d7840 	.word	0x017d7840

08009364 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009368:	4b03      	ldr	r3, [pc, #12]	@ (8009378 <HAL_RCC_GetHCLKFreq+0x14>)
 800936a:	681b      	ldr	r3, [r3, #0]
}
 800936c:	4618      	mov	r0, r3
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000000 	.word	0x20000000

0800937c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009380:	f7ff fff0 	bl	8009364 <HAL_RCC_GetHCLKFreq>
 8009384:	4602      	mov	r2, r0
 8009386:	4b05      	ldr	r3, [pc, #20]	@ (800939c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	0a9b      	lsrs	r3, r3, #10
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	4903      	ldr	r1, [pc, #12]	@ (80093a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009392:	5ccb      	ldrb	r3, [r1, r3]
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009398:	4618      	mov	r0, r3
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40023800 	.word	0x40023800
 80093a0:	0800c9c8 	.word	0x0800c9c8

080093a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093a8:	f7ff ffdc 	bl	8009364 <HAL_RCC_GetHCLKFreq>
 80093ac:	4602      	mov	r2, r0
 80093ae:	4b05      	ldr	r3, [pc, #20]	@ (80093c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	0b5b      	lsrs	r3, r3, #13
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	4903      	ldr	r1, [pc, #12]	@ (80093c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093ba:	5ccb      	ldrb	r3, [r1, r3]
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40023800 	.word	0x40023800
 80093c8:	0800c9c8 	.word	0x0800c9c8

080093cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d012      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80093f4:	4b69      	ldr	r3, [pc, #420]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	4a68      	ldr	r2, [pc, #416]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80093fe:	6093      	str	r3, [r2, #8]
 8009400:	4b66      	ldr	r3, [pc, #408]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009408:	4964      	ldr	r1, [pc, #400]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800940a:	4313      	orrs	r3, r2
 800940c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009416:	2301      	movs	r3, #1
 8009418:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d017      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009426:	4b5d      	ldr	r3, [pc, #372]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800942c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009434:	4959      	ldr	r1, [pc, #356]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009436:	4313      	orrs	r3, r2
 8009438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009444:	d101      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009446:	2301      	movs	r3, #1
 8009448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009452:	2301      	movs	r3, #1
 8009454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d017      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009462:	4b4e      	ldr	r3, [pc, #312]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009468:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	494a      	ldr	r1, [pc, #296]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009472:	4313      	orrs	r3, r2
 8009474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009480:	d101      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009482:	2301      	movs	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800948e:	2301      	movs	r3, #1
 8009490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800949e:	2301      	movs	r3, #1
 80094a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 808b 	beq.w	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094b0:	4b3a      	ldr	r3, [pc, #232]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b4:	4a39      	ldr	r2, [pc, #228]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80094bc:	4b37      	ldr	r3, [pc, #220]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094c4:	60bb      	str	r3, [r7, #8]
 80094c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80094c8:	4b35      	ldr	r3, [pc, #212]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a34      	ldr	r2, [pc, #208]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d4:	f7fc fd88 	bl	8005fe8 <HAL_GetTick>
 80094d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80094da:	e008      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094dc:	f7fc fd84 	bl	8005fe8 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b64      	cmp	r3, #100	@ 0x64
 80094e8:	d901      	bls.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e357      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80094ee:	4b2c      	ldr	r3, [pc, #176]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0f0      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094fa:	4b28      	ldr	r3, [pc, #160]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009502:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d035      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	429a      	cmp	r2, r3
 8009516:	d02e      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009518:	4b20      	ldr	r3, [pc, #128]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800951a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800951c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009520:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009522:	4b1e      	ldr	r3, [pc, #120]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009526:	4a1d      	ldr	r2, [pc, #116]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800952c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800952e:	4b1b      	ldr	r3, [pc, #108]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009532:	4a1a      	ldr	r2, [pc, #104]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009538:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800953a:	4a18      	ldr	r2, [pc, #96]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009540:	4b16      	ldr	r3, [pc, #88]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	2b01      	cmp	r3, #1
 800954a:	d114      	bne.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800954c:	f7fc fd4c 	bl	8005fe8 <HAL_GetTick>
 8009550:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009552:	e00a      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009554:	f7fc fd48 	bl	8005fe8 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009562:	4293      	cmp	r3, r2
 8009564:	d901      	bls.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e319      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800956a:	4b0c      	ldr	r3, [pc, #48]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800956c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0ee      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800957e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009582:	d111      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009584:	4b05      	ldr	r3, [pc, #20]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009590:	4b04      	ldr	r3, [pc, #16]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009592:	400b      	ands	r3, r1
 8009594:	4901      	ldr	r1, [pc, #4]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009596:	4313      	orrs	r3, r2
 8009598:	608b      	str	r3, [r1, #8]
 800959a:	e00b      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800959c:	40023800 	.word	0x40023800
 80095a0:	40007000 	.word	0x40007000
 80095a4:	0ffffcff 	.word	0x0ffffcff
 80095a8:	4baa      	ldr	r3, [pc, #680]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	4aa9      	ldr	r2, [pc, #676]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80095b2:	6093      	str	r3, [r2, #8]
 80095b4:	4ba7      	ldr	r3, [pc, #668]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c0:	49a4      	ldr	r1, [pc, #656]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0310 	and.w	r3, r3, #16
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d010      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095d2:	4ba0      	ldr	r3, [pc, #640]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095d8:	4a9e      	ldr	r2, [pc, #632]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80095e2:	4b9c      	ldr	r3, [pc, #624]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ec:	4999      	ldr	r1, [pc, #612]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00a      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009600:	4b94      	ldr	r3, [pc, #592]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009606:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800960e:	4991      	ldr	r1, [pc, #580]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009610:	4313      	orrs	r3, r2
 8009612:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009622:	4b8c      	ldr	r3, [pc, #560]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009630:	4988      	ldr	r1, [pc, #544]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00a      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009644:	4b83      	ldr	r3, [pc, #524]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800964a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009652:	4980      	ldr	r1, [pc, #512]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009654:	4313      	orrs	r3, r2
 8009656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009666:	4b7b      	ldr	r3, [pc, #492]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009674:	4977      	ldr	r1, [pc, #476]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009676:	4313      	orrs	r3, r2
 8009678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00a      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009688:	4b72      	ldr	r3, [pc, #456]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800968a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800968e:	f023 0203 	bic.w	r2, r3, #3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009696:	496f      	ldr	r1, [pc, #444]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009698:	4313      	orrs	r3, r2
 800969a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096aa:	4b6a      	ldr	r3, [pc, #424]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096b0:	f023 020c 	bic.w	r2, r3, #12
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096b8:	4966      	ldr	r1, [pc, #408]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80096cc:	4b61      	ldr	r3, [pc, #388]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096da:	495e      	ldr	r1, [pc, #376]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80096ee:	4b59      	ldr	r3, [pc, #356]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fc:	4955      	ldr	r1, [pc, #340]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00a      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009710:	4b50      	ldr	r3, [pc, #320]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009716:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971e:	494d      	ldr	r1, [pc, #308]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009720:	4313      	orrs	r3, r2
 8009722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009732:	4b48      	ldr	r3, [pc, #288]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009738:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009740:	4944      	ldr	r1, [pc, #272]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009754:	4b3f      	ldr	r3, [pc, #252]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800975a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009762:	493c      	ldr	r1, [pc, #240]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009764:	4313      	orrs	r3, r2
 8009766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009776:	4b37      	ldr	r3, [pc, #220]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800977c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009784:	4933      	ldr	r1, [pc, #204]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009786:	4313      	orrs	r3, r2
 8009788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00a      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009798:	4b2e      	ldr	r3, [pc, #184]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800979a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097a6:	492b      	ldr	r1, [pc, #172]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d011      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80097ba:	4b26      	ldr	r3, [pc, #152]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097c8:	4922      	ldr	r1, [pc, #136]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097d8:	d101      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0308 	and.w	r3, r3, #8
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80097ea:	2301      	movs	r3, #1
 80097ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097fa:	4b16      	ldr	r3, [pc, #88]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009800:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009808:	4912      	ldr	r1, [pc, #72]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800980a:	4313      	orrs	r3, r2
 800980c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800981c:	4b0d      	ldr	r3, [pc, #52]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009822:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800982c:	4909      	ldr	r1, [pc, #36]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800982e:	4313      	orrs	r3, r2
 8009830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d006      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80d9 	beq.w	80099fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009848:	4b02      	ldr	r3, [pc, #8]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a01      	ldr	r2, [pc, #4]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800984e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009852:	e001      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009854:	40023800 	.word	0x40023800
 8009858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800985a:	f7fc fbc5 	bl	8005fe8 <HAL_GetTick>
 800985e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009860:	e008      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009862:	f7fc fbc1 	bl	8005fe8 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b64      	cmp	r3, #100	@ 0x64
 800986e:	d901      	bls.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e194      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009874:	4b6c      	ldr	r3, [pc, #432]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1f0      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d021      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009890:	2b00      	cmp	r3, #0
 8009892:	d11d      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009894:	4b64      	ldr	r3, [pc, #400]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800989a:	0c1b      	lsrs	r3, r3, #16
 800989c:	f003 0303 	and.w	r3, r3, #3
 80098a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80098a2:	4b61      	ldr	r3, [pc, #388]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098a8:	0e1b      	lsrs	r3, r3, #24
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	019a      	lsls	r2, r3, #6
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	041b      	lsls	r3, r3, #16
 80098ba:	431a      	orrs	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	061b      	lsls	r3, r3, #24
 80098c0:	431a      	orrs	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	071b      	lsls	r3, r3, #28
 80098c8:	4957      	ldr	r1, [pc, #348]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d004      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098e4:	d00a      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d02e      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098fa:	d129      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80098fc:	4b4a      	ldr	r3, [pc, #296]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009902:	0c1b      	lsrs	r3, r3, #16
 8009904:	f003 0303 	and.w	r3, r3, #3
 8009908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800990a:	4b47      	ldr	r3, [pc, #284]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800990c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009910:	0f1b      	lsrs	r3, r3, #28
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	019a      	lsls	r2, r3, #6
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	041b      	lsls	r3, r3, #16
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	061b      	lsls	r3, r3, #24
 800992a:	431a      	orrs	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	071b      	lsls	r3, r3, #28
 8009930:	493d      	ldr	r1, [pc, #244]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009932:	4313      	orrs	r3, r2
 8009934:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009938:	4b3b      	ldr	r3, [pc, #236]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800993a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800993e:	f023 021f 	bic.w	r2, r3, #31
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009946:	3b01      	subs	r3, #1
 8009948:	4937      	ldr	r1, [pc, #220]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800994a:	4313      	orrs	r3, r2
 800994c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01d      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800995c:	4b32      	ldr	r3, [pc, #200]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800995e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009962:	0e1b      	lsrs	r3, r3, #24
 8009964:	f003 030f 	and.w	r3, r3, #15
 8009968:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800996a:	4b2f      	ldr	r3, [pc, #188]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800996c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009970:	0f1b      	lsrs	r3, r3, #28
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	019a      	lsls	r2, r3, #6
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	431a      	orrs	r2, r3
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	061b      	lsls	r3, r3, #24
 800998a:	431a      	orrs	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	071b      	lsls	r3, r3, #28
 8009990:	4925      	ldr	r1, [pc, #148]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009992:	4313      	orrs	r3, r2
 8009994:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d011      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	019a      	lsls	r2, r3, #6
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	041b      	lsls	r3, r3, #16
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	061b      	lsls	r3, r3, #24
 80099b8:	431a      	orrs	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	071b      	lsls	r3, r3, #28
 80099c0:	4919      	ldr	r1, [pc, #100]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80099c8:	4b17      	ldr	r3, [pc, #92]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a16      	ldr	r2, [pc, #88]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099d4:	f7fc fb08 	bl	8005fe8 <HAL_GetTick>
 80099d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099da:	e008      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80099dc:	f7fc fb04 	bl	8005fe8 <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	2b64      	cmp	r3, #100	@ 0x64
 80099e8:	d901      	bls.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e0d7      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0f0      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	f040 80cd 	bne.w	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a02:	4b09      	ldr	r3, [pc, #36]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a08      	ldr	r2, [pc, #32]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a0e:	f7fc faeb 	bl	8005fe8 <HAL_GetTick>
 8009a12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a14:	e00a      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a16:	f7fc fae7 	bl	8005fe8 <HAL_GetTick>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	2b64      	cmp	r3, #100	@ 0x64
 8009a22:	d903      	bls.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e0ba      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009a28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a38:	d0ed      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d009      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d02e      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d12a      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009a62:	4b51      	ldr	r3, [pc, #324]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a68:	0c1b      	lsrs	r3, r3, #16
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009a70:	4b4d      	ldr	r3, [pc, #308]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a76:	0f1b      	lsrs	r3, r3, #28
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	019a      	lsls	r2, r3, #6
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	041b      	lsls	r3, r3, #16
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	061b      	lsls	r3, r3, #24
 8009a90:	431a      	orrs	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	071b      	lsls	r3, r3, #28
 8009a96:	4944      	ldr	r1, [pc, #272]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009a9e:	4b42      	ldr	r3, [pc, #264]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aa4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aac:	3b01      	subs	r3, #1
 8009aae:	021b      	lsls	r3, r3, #8
 8009ab0:	493d      	ldr	r1, [pc, #244]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d022      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009acc:	d11d      	bne.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ace:	4b36      	ldr	r3, [pc, #216]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad4:	0e1b      	lsrs	r3, r3, #24
 8009ad6:	f003 030f 	and.w	r3, r3, #15
 8009ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009adc:	4b32      	ldr	r3, [pc, #200]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ae2:	0f1b      	lsrs	r3, r3, #28
 8009ae4:	f003 0307 	and.w	r3, r3, #7
 8009ae8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	019a      	lsls	r2, r3, #6
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	041b      	lsls	r3, r3, #16
 8009af6:	431a      	orrs	r2, r3
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	061b      	lsls	r3, r3, #24
 8009afc:	431a      	orrs	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	071b      	lsls	r3, r3, #28
 8009b02:	4929      	ldr	r1, [pc, #164]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d028      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b16:	4b24      	ldr	r3, [pc, #144]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1c:	0e1b      	lsrs	r3, r3, #24
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b24:	4b20      	ldr	r3, [pc, #128]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b2a:	0c1b      	lsrs	r3, r3, #16
 8009b2c:	f003 0303 	and.w	r3, r3, #3
 8009b30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	019a      	lsls	r2, r3, #6
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	061b      	lsls	r3, r3, #24
 8009b42:	431a      	orrs	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	071b      	lsls	r3, r3, #28
 8009b4a:	4917      	ldr	r1, [pc, #92]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009b52:	4b15      	ldr	r3, [pc, #84]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b60:	4911      	ldr	r1, [pc, #68]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009b68:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b74:	f7fc fa38 	bl	8005fe8 <HAL_GetTick>
 8009b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b7c:	f7fc fa34 	bl	8005fe8 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b64      	cmp	r3, #100	@ 0x64
 8009b88:	d901      	bls.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e007      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b9a:	d1ef      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40023800 	.word	0x40023800

08009bac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e025      	b.n	8009c0c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7f6 fe65 	bl	80008a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4619      	mov	r1, r3
 8009bec:	4610      	mov	r0, r2
 8009bee:	f002 fda5 	bl	800c73c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6818      	ldr	r0, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	f002 fdf9 	bl	800c7f4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c26:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d101      	bne.n	8009c32 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e021      	b.n	8009c76 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d002      	beq.n	8009c3e <HAL_SDRAM_SendCommand+0x2a>
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d118      	bne.n	8009c70 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2202      	movs	r2, #2
 8009c42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f002 fe3a 	bl	800c8c8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d104      	bne.n	8009c66 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2205      	movs	r2, #5
 8009c60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c64:	e006      	b.n	8009c74 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c6e:	e001      	b.n	8009c74 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d101      	bne.n	8009c98 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009c94:	2302      	movs	r3, #2
 8009c96:	e016      	b.n	8009cc6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d10f      	bne.n	8009cc4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f002 fe2c 	bl	800c910 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e000      	b.n	8009cc6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e0c1      	b.n	8009e66 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d108      	bne.n	8009cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cf2:	d009      	beq.n	8009d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	61da      	str	r2, [r3, #28]
 8009cfa:	e005      	b.n	8009d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d12a      	bne.n	8009d70 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a52      	ldr	r2, [pc, #328]	@ (8009e70 <HAL_SPI_Init+0x1a0>)
 8009d26:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a52      	ldr	r2, [pc, #328]	@ (8009e74 <HAL_SPI_Init+0x1a4>)
 8009d2c:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a51      	ldr	r2, [pc, #324]	@ (8009e78 <HAL_SPI_Init+0x1a8>)
 8009d32:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a51      	ldr	r2, [pc, #324]	@ (8009e7c <HAL_SPI_Init+0x1ac>)
 8009d38:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a50      	ldr	r2, [pc, #320]	@ (8009e80 <HAL_SPI_Init+0x1b0>)
 8009d3e:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a50      	ldr	r2, [pc, #320]	@ (8009e84 <HAL_SPI_Init+0x1b4>)
 8009d44:	679a      	str	r2, [r3, #120]	@ 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a4f      	ldr	r2, [pc, #316]	@ (8009e88 <HAL_SPI_Init+0x1b8>)
 8009d4a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a4f      	ldr	r2, [pc, #316]	@ (8009e8c <HAL_SPI_Init+0x1bc>)
 8009d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    if (hspi->MspInitCallback == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a4b      	ldr	r2, [pc, #300]	@ (8009e90 <HAL_SPI_Init+0x1c0>)
 8009d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d90:	d902      	bls.n	8009d98 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	e002      	b.n	8009d9e <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009da6:	d007      	beq.n	8009db8 <HAL_SPI_Init+0xe8>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009db0:	d002      	beq.n	8009db8 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009df0:	431a      	orrs	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dfa:	ea42 0103 	orr.w	r1, r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	0c1b      	lsrs	r3, r3, #16
 8009e14:	f003 0204 	and.w	r2, r3, #4
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	431a      	orrs	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e26:	f003 0308 	and.w	r3, r3, #8
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009e34:	ea42 0103 	orr.w	r1, r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	69da      	ldr	r2, [r3, #28]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	0800a2d9 	.word	0x0800a2d9
 8009e74:	0800a2ed 	.word	0x0800a2ed
 8009e78:	0800a301 	.word	0x0800a301
 8009e7c:	0800a315 	.word	0x0800a315
 8009e80:	0800a329 	.word	0x0800a329
 8009e84:	0800a33d 	.word	0x0800a33d
 8009e88:	0800a351 	.word	0x0800a351
 8009e8c:	0800a365 	.word	0x0800a365
 8009e90:	08001475 	.word	0x08001475

08009e94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	@ 0x28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <HAL_SPI_TransmitReceive+0x26>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e20a      	b.n	800a2d0 <HAL_SPI_TransmitReceive+0x43c>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ec2:	f7fc f891 	bl	8005fe8 <HAL_GetTick>
 8009ec6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ece:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009ed6:	887b      	ldrh	r3, [r7, #2]
 8009ed8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009eda:	887b      	ldrh	r3, [r7, #2]
 8009edc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ede:	7efb      	ldrb	r3, [r7, #27]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d00e      	beq.n	8009f02 <HAL_SPI_TransmitReceive+0x6e>
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009eea:	d106      	bne.n	8009efa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <HAL_SPI_TransmitReceive+0x66>
 8009ef4:	7efb      	ldrb	r3, [r7, #27]
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d003      	beq.n	8009f02 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009efa:	2302      	movs	r3, #2
 8009efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009f00:	e1e0      	b.n	800a2c4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d005      	beq.n	8009f14 <HAL_SPI_TransmitReceive+0x80>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <HAL_SPI_TransmitReceive+0x80>
 8009f0e:	887b      	ldrh	r3, [r7, #2]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009f1a:	e1d3      	b.n	800a2c4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d003      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2205      	movs	r2, #5
 8009f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	887a      	ldrh	r2, [r7, #2]
 8009f40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	887a      	ldrh	r2, [r7, #2]
 8009f48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	887a      	ldrh	r2, [r7, #2]
 8009f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	887a      	ldrh	r2, [r7, #2]
 8009f5c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f72:	d802      	bhi.n	8009f7a <HAL_SPI_TransmitReceive+0xe6>
 8009f74:	8a3b      	ldrh	r3, [r7, #16]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d908      	bls.n	8009f8c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	e007      	b.n	8009f9c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa6:	2b40      	cmp	r3, #64	@ 0x40
 8009fa8:	d007      	beq.n	8009fba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009fc2:	f240 8081 	bls.w	800a0c8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <HAL_SPI_TransmitReceive+0x140>
 8009fce:	8a7b      	ldrh	r3, [r7, #18]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d16d      	bne.n	800a0b0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd8:	881a      	ldrh	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe4:	1c9a      	adds	r2, r3, #2
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ff8:	e05a      	b.n	800a0b0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 0302 	and.w	r3, r3, #2
 800a004:	2b02      	cmp	r3, #2
 800a006:	d11b      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x1ac>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d016      	beq.n	800a040 <HAL_SPI_TransmitReceive+0x1ac>
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	2b01      	cmp	r3, #1
 800a016:	d113      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a01c:	881a      	ldrh	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a028:	1c9a      	adds	r2, r3, #2
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a032:	b29b      	uxth	r3, r3
 800a034:	3b01      	subs	r3, #1
 800a036:	b29a      	uxth	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d11c      	bne.n	800a088 <HAL_SPI_TransmitReceive+0x1f4>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a054:	b29b      	uxth	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d016      	beq.n	800a088 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a064:	b292      	uxth	r2, r2
 800a066:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a06c:	1c9a      	adds	r2, r3, #2
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a078:	b29b      	uxth	r3, r3
 800a07a:	3b01      	subs	r3, #1
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a084:	2301      	movs	r3, #1
 800a086:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a088:	f7fb ffae 	bl	8005fe8 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a094:	429a      	cmp	r2, r3
 800a096:	d80b      	bhi.n	800a0b0 <HAL_SPI_TransmitReceive+0x21c>
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09e:	d007      	beq.n	800a0b0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a0ae:	e109      	b.n	800a2c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d19f      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0x166>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d199      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0x166>
 800a0c6:	e0e3      	b.n	800a290 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d003      	beq.n	800a0d8 <HAL_SPI_TransmitReceive+0x244>
 800a0d0:	8a7b      	ldrh	r3, [r7, #18]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	f040 80cf 	bne.w	800a276 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d912      	bls.n	800a108 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e6:	881a      	ldrh	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f2:	1c9a      	adds	r2, r3, #2
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	3b02      	subs	r3, #2
 800a100:	b29a      	uxth	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a106:	e0b6      	b.n	800a276 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	330c      	adds	r3, #12
 800a112:	7812      	ldrb	r2, [r2, #0]
 800a114:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a124:	b29b      	uxth	r3, r3
 800a126:	3b01      	subs	r3, #1
 800a128:	b29a      	uxth	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a12e:	e0a2      	b.n	800a276 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d134      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x314>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a142:	b29b      	uxth	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d02f      	beq.n	800a1a8 <HAL_SPI_TransmitReceive+0x314>
 800a148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d12c      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a152:	b29b      	uxth	r3, r3
 800a154:	2b01      	cmp	r3, #1
 800a156:	d912      	bls.n	800a17e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15c:	881a      	ldrh	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a168:	1c9a      	adds	r2, r3, #2
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a172:	b29b      	uxth	r3, r3
 800a174:	3b02      	subs	r3, #2
 800a176:	b29a      	uxth	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a17c:	e012      	b.n	800a1a4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	330c      	adds	r3, #12
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	3b01      	subs	r3, #1
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d148      	bne.n	800a248 <HAL_SPI_TransmitReceive+0x3b4>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d042      	beq.n	800a248 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d923      	bls.n	800a216 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68da      	ldr	r2, [r3, #12]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d8:	b292      	uxth	r2, r2
 800a1da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e0:	1c9a      	adds	r2, r3, #2
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	3b02      	subs	r3, #2
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	2b01      	cmp	r3, #1
 800a202:	d81f      	bhi.n	800a244 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a212:	605a      	str	r2, [r3, #4]
 800a214:	e016      	b.n	800a244 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f103 020c 	add.w	r2, r3, #12
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a222:	7812      	ldrb	r2, [r2, #0]
 800a224:	b2d2      	uxtb	r2, r2
 800a226:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a238:	b29b      	uxth	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a244:	2301      	movs	r3, #1
 800a246:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a248:	f7fb fece 	bl	8005fe8 <HAL_GetTick>
 800a24c:	4602      	mov	r2, r0
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a254:	429a      	cmp	r2, r3
 800a256:	d803      	bhi.n	800a260 <HAL_SPI_TransmitReceive+0x3cc>
 800a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25e:	d102      	bne.n	800a266 <HAL_SPI_TransmitReceive+0x3d2>
 800a260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a262:	2b00      	cmp	r3, #0
 800a264:	d107      	bne.n	800a276 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a274:	e026      	b.n	800a2c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f47f af57 	bne.w	800a130 <HAL_SPI_TransmitReceive+0x29c>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f47f af50 	bne.w	800a130 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a290:	69fa      	ldr	r2, [r7, #28]
 800a292:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 f98d 	bl	800a5b4 <SPI_EndRxTxTransaction>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2ba:	e003      	b.n	800a2c4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a2cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3728      	adds	r7, #40	@ 0x28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	4613      	mov	r3, r2
 800a386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a388:	f7fb fe2e 	bl	8005fe8 <HAL_GetTick>
 800a38c:	4602      	mov	r2, r0
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	1a9b      	subs	r3, r3, r2
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4413      	add	r3, r2
 800a396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a398:	f7fb fe26 	bl	8005fe8 <HAL_GetTick>
 800a39c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a39e:	4b39      	ldr	r3, [pc, #228]	@ (800a484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	015b      	lsls	r3, r3, #5
 800a3a4:	0d1b      	lsrs	r3, r3, #20
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3ae:	e054      	b.n	800a45a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b6:	d050      	beq.n	800a45a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3b8:	f7fb fe16 	bl	8005fe8 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d902      	bls.n	800a3ce <SPI_WaitFlagStateUntilTimeout+0x56>
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d13d      	bne.n	800a44a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a3dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3e6:	d111      	bne.n	800a40c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3f0:	d004      	beq.n	800a3fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3fa:	d107      	bne.n	800a40c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a40a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a414:	d10f      	bne.n	800a436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e017      	b.n	800a47a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d101      	bne.n	800a454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	3b01      	subs	r3, #1
 800a458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4013      	ands	r3, r2
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	429a      	cmp	r2, r3
 800a468:	bf0c      	ite	eq
 800a46a:	2301      	moveq	r3, #1
 800a46c:	2300      	movne	r3, #0
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	461a      	mov	r2, r3
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	429a      	cmp	r2, r3
 800a476:	d19b      	bne.n	800a3b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3720      	adds	r7, #32
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20000000 	.word	0x20000000

0800a488 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	@ 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a49a:	f7fb fda5 	bl	8005fe8 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a2:	1a9b      	subs	r3, r3, r2
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a4aa:	f7fb fd9d 	bl	8005fe8 <HAL_GetTick>
 800a4ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	330c      	adds	r3, #12
 800a4b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a4b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a5b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	00da      	lsls	r2, r3, #3
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	0d1b      	lsrs	r3, r3, #20
 800a4c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ca:	fb02 f303 	mul.w	r3, r2, r3
 800a4ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a4d0:	e060      	b.n	800a594 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a4d8:	d107      	bne.n	800a4ea <SPI_WaitFifoStateUntilTimeout+0x62>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f0:	d050      	beq.n	800a594 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4f2:	f7fb fd79 	bl	8005fe8 <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d902      	bls.n	800a508 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	2b00      	cmp	r3, #0
 800a506:	d13d      	bne.n	800a584 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a520:	d111      	bne.n	800a546 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a52a:	d004      	beq.n	800a536 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a534:	d107      	bne.n	800a546 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a544:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a54e:	d10f      	bne.n	800a570 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a55e:	601a      	str	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a56e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e010      	b.n	800a5a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	3b01      	subs	r3, #1
 800a592:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689a      	ldr	r2, [r3, #8]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4013      	ands	r3, r2
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d196      	bne.n	800a4d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3728      	adds	r7, #40	@ 0x28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000000 	.word	0x20000000

0800a5b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b088      	sub	sp, #32
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7ff ff5b 	bl	800a488 <SPI_WaitFifoStateUntilTimeout>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d007      	beq.n	800a5e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5dc:	f043 0220 	orr.w	r2, r3, #32
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e046      	b.n	800a676 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a5e8:	4b25      	ldr	r3, [pc, #148]	@ (800a680 <SPI_EndRxTxTransaction+0xcc>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a25      	ldr	r2, [pc, #148]	@ (800a684 <SPI_EndRxTxTransaction+0xd0>)
 800a5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f2:	0d5b      	lsrs	r3, r3, #21
 800a5f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a5f8:	fb02 f303 	mul.w	r3, r2, r3
 800a5fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a606:	d112      	bne.n	800a62e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2200      	movs	r2, #0
 800a610:	2180      	movs	r1, #128	@ 0x80
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff feb0 	bl	800a378 <SPI_WaitFlagStateUntilTimeout>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d016      	beq.n	800a64c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a622:	f043 0220 	orr.w	r2, r3, #32
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e023      	b.n	800a676 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	3b01      	subs	r3, #1
 800a638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a644:	2b80      	cmp	r3, #128	@ 0x80
 800a646:	d0f2      	beq.n	800a62e <SPI_EndRxTxTransaction+0x7a>
 800a648:	e000      	b.n	800a64c <SPI_EndRxTxTransaction+0x98>
        break;
 800a64a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2200      	movs	r2, #0
 800a654:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7ff ff15 	bl	800a488 <SPI_WaitFifoStateUntilTimeout>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a668:	f043 0220 	orr.w	r2, r3, #32
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e000      	b.n	800a676 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20000000 	.word	0x20000000
 800a684:	165e9f81 	.word	0x165e9f81

0800a688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e054      	b.n	800a744 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d111      	bne.n	800a6ca <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 fa08 	bl	800bac4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a23      	ldr	r2, [pc, #140]	@ (800a74c <HAL_TIM_Base_Init+0xc4>)
 800a6c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f000 fe27 	bl	800b330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	08001741 	.word	0x08001741

0800a750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e054      	b.n	800a80c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d111      	bne.n	800a792 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 f9a4 	bl	800bac4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a780:	2b00      	cmp	r3, #0
 800a782:	d102      	bne.n	800a78a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a23      	ldr	r2, [pc, #140]	@ (800a814 <HAL_TIM_PWM_Init+0xc4>)
 800a788:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2202      	movs	r2, #2
 800a796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	f000 fdc3 	bl	800b330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	0800a819 	.word	0x0800a819

0800a818 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d109      	bne.n	800a854 <HAL_TIM_PWM_Start_IT+0x28>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b01      	cmp	r3, #1
 800a84a:	bf14      	ite	ne
 800a84c:	2301      	movne	r3, #1
 800a84e:	2300      	moveq	r3, #0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	e03c      	b.n	800a8ce <HAL_TIM_PWM_Start_IT+0xa2>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b04      	cmp	r3, #4
 800a858:	d109      	bne.n	800a86e <HAL_TIM_PWM_Start_IT+0x42>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b01      	cmp	r3, #1
 800a864:	bf14      	ite	ne
 800a866:	2301      	movne	r3, #1
 800a868:	2300      	moveq	r3, #0
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	e02f      	b.n	800a8ce <HAL_TIM_PWM_Start_IT+0xa2>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b08      	cmp	r3, #8
 800a872:	d109      	bne.n	800a888 <HAL_TIM_PWM_Start_IT+0x5c>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	bf14      	ite	ne
 800a880:	2301      	movne	r3, #1
 800a882:	2300      	moveq	r3, #0
 800a884:	b2db      	uxtb	r3, r3
 800a886:	e022      	b.n	800a8ce <HAL_TIM_PWM_Start_IT+0xa2>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b0c      	cmp	r3, #12
 800a88c:	d109      	bne.n	800a8a2 <HAL_TIM_PWM_Start_IT+0x76>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b01      	cmp	r3, #1
 800a898:	bf14      	ite	ne
 800a89a:	2301      	movne	r3, #1
 800a89c:	2300      	moveq	r3, #0
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	e015      	b.n	800a8ce <HAL_TIM_PWM_Start_IT+0xa2>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b10      	cmp	r3, #16
 800a8a6:	d109      	bne.n	800a8bc <HAL_TIM_PWM_Start_IT+0x90>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	bf14      	ite	ne
 800a8b4:	2301      	movne	r3, #1
 800a8b6:	2300      	moveq	r3, #0
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	e008      	b.n	800a8ce <HAL_TIM_PWM_Start_IT+0xa2>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	bf14      	ite	ne
 800a8c8:	2301      	movne	r3, #1
 800a8ca:	2300      	moveq	r3, #0
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e0dd      	b.n	800aa92 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <HAL_TIM_PWM_Start_IT+0xba>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8e4:	e023      	b.n	800a92e <HAL_TIM_PWM_Start_IT+0x102>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d104      	bne.n	800a8f6 <HAL_TIM_PWM_Start_IT+0xca>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8f4:	e01b      	b.n	800a92e <HAL_TIM_PWM_Start_IT+0x102>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b08      	cmp	r3, #8
 800a8fa:	d104      	bne.n	800a906 <HAL_TIM_PWM_Start_IT+0xda>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a904:	e013      	b.n	800a92e <HAL_TIM_PWM_Start_IT+0x102>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b0c      	cmp	r3, #12
 800a90a:	d104      	bne.n	800a916 <HAL_TIM_PWM_Start_IT+0xea>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a914:	e00b      	b.n	800a92e <HAL_TIM_PWM_Start_IT+0x102>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b10      	cmp	r3, #16
 800a91a:	d104      	bne.n	800a926 <HAL_TIM_PWM_Start_IT+0xfa>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a924:	e003      	b.n	800a92e <HAL_TIM_PWM_Start_IT+0x102>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2202      	movs	r2, #2
 800a92a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b0c      	cmp	r3, #12
 800a932:	d841      	bhi.n	800a9b8 <HAL_TIM_PWM_Start_IT+0x18c>
 800a934:	a201      	add	r2, pc, #4	@ (adr r2, 800a93c <HAL_TIM_PWM_Start_IT+0x110>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a971 	.word	0x0800a971
 800a940:	0800a9b9 	.word	0x0800a9b9
 800a944:	0800a9b9 	.word	0x0800a9b9
 800a948:	0800a9b9 	.word	0x0800a9b9
 800a94c:	0800a983 	.word	0x0800a983
 800a950:	0800a9b9 	.word	0x0800a9b9
 800a954:	0800a9b9 	.word	0x0800a9b9
 800a958:	0800a9b9 	.word	0x0800a9b9
 800a95c:	0800a995 	.word	0x0800a995
 800a960:	0800a9b9 	.word	0x0800a9b9
 800a964:	0800a9b9 	.word	0x0800a9b9
 800a968:	0800a9b9 	.word	0x0800a9b9
 800a96c:	0800a9a7 	.word	0x0800a9a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68da      	ldr	r2, [r3, #12]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f042 0202 	orr.w	r2, r2, #2
 800a97e:	60da      	str	r2, [r3, #12]
      break;
 800a980:	e01d      	b.n	800a9be <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68da      	ldr	r2, [r3, #12]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0204 	orr.w	r2, r2, #4
 800a990:	60da      	str	r2, [r3, #12]
      break;
 800a992:	e014      	b.n	800a9be <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0208 	orr.w	r2, r2, #8
 800a9a2:	60da      	str	r2, [r3, #12]
      break;
 800a9a4:	e00b      	b.n	800a9be <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f042 0210 	orr.w	r2, r2, #16
 800a9b4:	60da      	str	r2, [r3, #12]
      break;
 800a9b6:	e002      	b.n	800a9be <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a9bc:	bf00      	nop
  }

  if (status == HAL_OK)
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d165      	bne.n	800aa90 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 f853 	bl	800ba78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a31      	ldr	r2, [pc, #196]	@ (800aa9c <HAL_TIM_PWM_Start_IT+0x270>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d004      	beq.n	800a9e6 <HAL_TIM_PWM_Start_IT+0x1ba>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a2f      	ldr	r2, [pc, #188]	@ (800aaa0 <HAL_TIM_PWM_Start_IT+0x274>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d101      	bne.n	800a9ea <HAL_TIM_PWM_Start_IT+0x1be>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e000      	b.n	800a9ec <HAL_TIM_PWM_Start_IT+0x1c0>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d007      	beq.n	800aa00 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a9fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a25      	ldr	r2, [pc, #148]	@ (800aa9c <HAL_TIM_PWM_Start_IT+0x270>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d022      	beq.n	800aa50 <HAL_TIM_PWM_Start_IT+0x224>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa12:	d01d      	beq.n	800aa50 <HAL_TIM_PWM_Start_IT+0x224>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a22      	ldr	r2, [pc, #136]	@ (800aaa4 <HAL_TIM_PWM_Start_IT+0x278>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d018      	beq.n	800aa50 <HAL_TIM_PWM_Start_IT+0x224>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a21      	ldr	r2, [pc, #132]	@ (800aaa8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d013      	beq.n	800aa50 <HAL_TIM_PWM_Start_IT+0x224>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a1f      	ldr	r2, [pc, #124]	@ (800aaac <HAL_TIM_PWM_Start_IT+0x280>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d00e      	beq.n	800aa50 <HAL_TIM_PWM_Start_IT+0x224>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a1a      	ldr	r2, [pc, #104]	@ (800aaa0 <HAL_TIM_PWM_Start_IT+0x274>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d009      	beq.n	800aa50 <HAL_TIM_PWM_Start_IT+0x224>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1b      	ldr	r2, [pc, #108]	@ (800aab0 <HAL_TIM_PWM_Start_IT+0x284>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d004      	beq.n	800aa50 <HAL_TIM_PWM_Start_IT+0x224>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a1a      	ldr	r2, [pc, #104]	@ (800aab4 <HAL_TIM_PWM_Start_IT+0x288>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d115      	bne.n	800aa7c <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689a      	ldr	r2, [r3, #8]
 800aa56:	4b18      	ldr	r3, [pc, #96]	@ (800aab8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800aa58:	4013      	ands	r3, r2
 800aa5a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b06      	cmp	r3, #6
 800aa60:	d015      	beq.n	800aa8e <HAL_TIM_PWM_Start_IT+0x262>
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa68:	d011      	beq.n	800aa8e <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f042 0201 	orr.w	r2, r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa7a:	e008      	b.n	800aa8e <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f042 0201 	orr.w	r2, r2, #1
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	e000      	b.n	800aa90 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa8e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	40010000 	.word	0x40010000
 800aaa0:	40010400 	.word	0x40010400
 800aaa4:	40000400 	.word	0x40000400
 800aaa8:	40000800 	.word	0x40000800
 800aaac:	40000c00 	.word	0x40000c00
 800aab0:	40014000 	.word	0x40014000
 800aab4:	40001800 	.word	0x40001800
 800aab8:	00010007 	.word	0x00010007

0800aabc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b0c      	cmp	r3, #12
 800aace:	d841      	bhi.n	800ab54 <HAL_TIM_PWM_Stop_IT+0x98>
 800aad0:	a201      	add	r2, pc, #4	@ (adr r2, 800aad8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800aad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad6:	bf00      	nop
 800aad8:	0800ab0d 	.word	0x0800ab0d
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab55 	.word	0x0800ab55
 800aae4:	0800ab55 	.word	0x0800ab55
 800aae8:	0800ab1f 	.word	0x0800ab1f
 800aaec:	0800ab55 	.word	0x0800ab55
 800aaf0:	0800ab55 	.word	0x0800ab55
 800aaf4:	0800ab55 	.word	0x0800ab55
 800aaf8:	0800ab31 	.word	0x0800ab31
 800aafc:	0800ab55 	.word	0x0800ab55
 800ab00:	0800ab55 	.word	0x0800ab55
 800ab04:	0800ab55 	.word	0x0800ab55
 800ab08:	0800ab43 	.word	0x0800ab43
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0202 	bic.w	r2, r2, #2
 800ab1a:	60da      	str	r2, [r3, #12]
      break;
 800ab1c:	e01d      	b.n	800ab5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68da      	ldr	r2, [r3, #12]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f022 0204 	bic.w	r2, r2, #4
 800ab2c:	60da      	str	r2, [r3, #12]
      break;
 800ab2e:	e014      	b.n	800ab5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f022 0208 	bic.w	r2, r2, #8
 800ab3e:	60da      	str	r2, [r3, #12]
      break;
 800ab40:	e00b      	b.n	800ab5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68da      	ldr	r2, [r3, #12]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0210 	bic.w	r2, r2, #16
 800ab50:	60da      	str	r2, [r3, #12]
      break;
 800ab52:	e002      	b.n	800ab5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	bf00      	nop
  }

  if (status == HAL_OK)
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d171      	bne.n	800ac44 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2200      	movs	r2, #0
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 ff85 	bl	800ba78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a37      	ldr	r2, [pc, #220]	@ (800ac50 <HAL_TIM_PWM_Stop_IT+0x194>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d004      	beq.n	800ab82 <HAL_TIM_PWM_Stop_IT+0xc6>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a35      	ldr	r2, [pc, #212]	@ (800ac54 <HAL_TIM_PWM_Stop_IT+0x198>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d101      	bne.n	800ab86 <HAL_TIM_PWM_Stop_IT+0xca>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <HAL_TIM_PWM_Stop_IT+0xcc>
 800ab86:	2300      	movs	r3, #0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d017      	beq.n	800abbc <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6a1a      	ldr	r2, [r3, #32]
 800ab92:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10f      	bne.n	800abbc <HAL_TIM_PWM_Stop_IT+0x100>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6a1a      	ldr	r2, [r3, #32]
 800aba2:	f240 4344 	movw	r3, #1092	@ 0x444
 800aba6:	4013      	ands	r3, r2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d107      	bne.n	800abbc <HAL_TIM_PWM_Stop_IT+0x100>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800abba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6a1a      	ldr	r2, [r3, #32]
 800abc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800abc6:	4013      	ands	r3, r2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10f      	bne.n	800abec <HAL_TIM_PWM_Stop_IT+0x130>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6a1a      	ldr	r2, [r3, #32]
 800abd2:	f240 4344 	movw	r3, #1092	@ 0x444
 800abd6:	4013      	ands	r3, r2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d107      	bne.n	800abec <HAL_TIM_PWM_Stop_IT+0x130>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0201 	bic.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d104      	bne.n	800abfc <HAL_TIM_PWM_Stop_IT+0x140>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abfa:	e023      	b.n	800ac44 <HAL_TIM_PWM_Stop_IT+0x188>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d104      	bne.n	800ac0c <HAL_TIM_PWM_Stop_IT+0x150>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac0a:	e01b      	b.n	800ac44 <HAL_TIM_PWM_Stop_IT+0x188>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b08      	cmp	r3, #8
 800ac10:	d104      	bne.n	800ac1c <HAL_TIM_PWM_Stop_IT+0x160>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac1a:	e013      	b.n	800ac44 <HAL_TIM_PWM_Stop_IT+0x188>
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	2b0c      	cmp	r3, #12
 800ac20:	d104      	bne.n	800ac2c <HAL_TIM_PWM_Stop_IT+0x170>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac2a:	e00b      	b.n	800ac44 <HAL_TIM_PWM_Stop_IT+0x188>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b10      	cmp	r3, #16
 800ac30:	d104      	bne.n	800ac3c <HAL_TIM_PWM_Stop_IT+0x180>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac3a:	e003      	b.n	800ac44 <HAL_TIM_PWM_Stop_IT+0x188>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40010000 	.word	0x40010000
 800ac54:	40010400 	.word	0x40010400

0800ac58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f003 0302 	and.w	r3, r3, #2
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d026      	beq.n	800acc8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d021      	beq.n	800acc8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f06f 0202 	mvn.w	r2, #2
 800ac8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d005      	beq.n	800acae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	4798      	blx	r3
 800acac:	e009      	b.n	800acc2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d026      	beq.n	800ad20 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d021      	beq.n	800ad20 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f06f 0204 	mvn.w	r2, #4
 800ace4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2202      	movs	r2, #2
 800acea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d005      	beq.n	800ad06 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	4798      	blx	r3
 800ad04:	e009      	b.n	800ad1a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d026      	beq.n	800ad78 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d021      	beq.n	800ad78 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f06f 0208 	mvn.w	r2, #8
 800ad3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2204      	movs	r2, #4
 800ad42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d005      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
 800ad5c:	e009      	b.n	800ad72 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f003 0310 	and.w	r3, r3, #16
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d026      	beq.n	800add0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f003 0310 	and.w	r3, r3, #16
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d021      	beq.n	800add0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0210 	mvn.w	r2, #16
 800ad94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2208      	movs	r2, #8
 800ad9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	4798      	blx	r3
 800adb4:	e009      	b.n	800adca <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00e      	beq.n	800adf8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d009      	beq.n	800adf8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f06f 0201 	mvn.w	r2, #1
 800adec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d104      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00e      	beq.n	800ae2a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d009      	beq.n	800ae2a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ae1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00e      	beq.n	800ae52 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00e      	beq.n	800ae7a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d009      	beq.n	800ae7a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f003 0320 	and.w	r3, r3, #32
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00e      	beq.n	800aea2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d009      	beq.n	800aea2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f06f 0220 	mvn.w	r2, #32
 800ae96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e0ff      	b.n	800b0ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b14      	cmp	r3, #20
 800aed6:	f200 80f0 	bhi.w	800b0ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aeda:	a201      	add	r2, pc, #4	@ (adr r2, 800aee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af35 	.word	0x0800af35
 800aee4:	0800b0bb 	.word	0x0800b0bb
 800aee8:	0800b0bb 	.word	0x0800b0bb
 800aeec:	0800b0bb 	.word	0x0800b0bb
 800aef0:	0800af75 	.word	0x0800af75
 800aef4:	0800b0bb 	.word	0x0800b0bb
 800aef8:	0800b0bb 	.word	0x0800b0bb
 800aefc:	0800b0bb 	.word	0x0800b0bb
 800af00:	0800afb7 	.word	0x0800afb7
 800af04:	0800b0bb 	.word	0x0800b0bb
 800af08:	0800b0bb 	.word	0x0800b0bb
 800af0c:	0800b0bb 	.word	0x0800b0bb
 800af10:	0800aff7 	.word	0x0800aff7
 800af14:	0800b0bb 	.word	0x0800b0bb
 800af18:	0800b0bb 	.word	0x0800b0bb
 800af1c:	0800b0bb 	.word	0x0800b0bb
 800af20:	0800b039 	.word	0x0800b039
 800af24:	0800b0bb 	.word	0x0800b0bb
 800af28:	0800b0bb 	.word	0x0800b0bb
 800af2c:	0800b0bb 	.word	0x0800b0bb
 800af30:	0800b079 	.word	0x0800b079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 faa4 	bl	800b488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0208 	orr.w	r2, r2, #8
 800af4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	699a      	ldr	r2, [r3, #24]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0204 	bic.w	r2, r2, #4
 800af5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6999      	ldr	r1, [r3, #24]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	691a      	ldr	r2, [r3, #16]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	619a      	str	r2, [r3, #24]
      break;
 800af72:	e0a5      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 faf6 	bl	800b56c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6999      	ldr	r1, [r3, #24]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	021a      	lsls	r2, r3, #8
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	619a      	str	r2, [r3, #24]
      break;
 800afb4:	e084      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fb4d 	bl	800b65c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0208 	orr.w	r2, r2, #8
 800afd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69da      	ldr	r2, [r3, #28]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f022 0204 	bic.w	r2, r2, #4
 800afe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69d9      	ldr	r1, [r3, #28]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	61da      	str	r2, [r3, #28]
      break;
 800aff4:	e064      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fba3 	bl	800b748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69d9      	ldr	r1, [r3, #28]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	021a      	lsls	r2, r3, #8
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	61da      	str	r2, [r3, #28]
      break;
 800b036:	e043      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fbda 	bl	800b7f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0208 	orr.w	r2, r2, #8
 800b052:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0204 	bic.w	r2, r2, #4
 800b062:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b076:	e023      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 fc0c 	bl	800b89c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b092:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	021a      	lsls	r2, r3, #8
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b0b8:	e002      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b0be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop

0800b0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d101      	bne.n	800b0f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e0b4      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x186>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	4b56      	ldr	r3, [pc, #344]	@ (800b264 <HAL_TIM_ConfigClockSource+0x190>)
 800b10c:	4013      	ands	r3, r2
 800b10e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b116:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b128:	d03e      	beq.n	800b1a8 <HAL_TIM_ConfigClockSource+0xd4>
 800b12a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b12e:	f200 8087 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b136:	f000 8086 	beq.w	800b246 <HAL_TIM_ConfigClockSource+0x172>
 800b13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b13e:	d87f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b140:	2b70      	cmp	r3, #112	@ 0x70
 800b142:	d01a      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0xa6>
 800b144:	2b70      	cmp	r3, #112	@ 0x70
 800b146:	d87b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b148:	2b60      	cmp	r3, #96	@ 0x60
 800b14a:	d050      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x11a>
 800b14c:	2b60      	cmp	r3, #96	@ 0x60
 800b14e:	d877      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b150:	2b50      	cmp	r3, #80	@ 0x50
 800b152:	d03c      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0xfa>
 800b154:	2b50      	cmp	r3, #80	@ 0x50
 800b156:	d873      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b158:	2b40      	cmp	r3, #64	@ 0x40
 800b15a:	d058      	beq.n	800b20e <HAL_TIM_ConfigClockSource+0x13a>
 800b15c:	2b40      	cmp	r3, #64	@ 0x40
 800b15e:	d86f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b160:	2b30      	cmp	r3, #48	@ 0x30
 800b162:	d064      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b164:	2b30      	cmp	r3, #48	@ 0x30
 800b166:	d86b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d060      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b16c:	2b20      	cmp	r3, #32
 800b16e:	d867      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d05c      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b174:	2b10      	cmp	r3, #16
 800b176:	d05a      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b178:	e062      	b.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b18a:	f000 fc55 	bl	800ba38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b19c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
      break;
 800b1a6:	e04f      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1b8:	f000 fc3e 	bl	800ba38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1ca:	609a      	str	r2, [r3, #8]
      break;
 800b1cc:	e03c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f000 fbb2 	bl	800b944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2150      	movs	r1, #80	@ 0x50
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 fc0b 	bl	800ba02 <TIM_ITRx_SetConfig>
      break;
 800b1ec:	e02c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f000 fbd1 	bl	800b9a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2160      	movs	r1, #96	@ 0x60
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fbfb 	bl	800ba02 <TIM_ITRx_SetConfig>
      break;
 800b20c:	e01c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b21a:	461a      	mov	r2, r3
 800b21c:	f000 fb92 	bl	800b944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2140      	movs	r1, #64	@ 0x40
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fbeb 	bl	800ba02 <TIM_ITRx_SetConfig>
      break;
 800b22c:	e00c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f000 fbe2 	bl	800ba02 <TIM_ITRx_SetConfig>
      break;
 800b23e:	e003      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
      break;
 800b244:	e000      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	fffeff88 	.word	0xfffeff88

0800b268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a46      	ldr	r2, [pc, #280]	@ (800b45c <TIM_Base_SetConfig+0x12c>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d013      	beq.n	800b370 <TIM_Base_SetConfig+0x40>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b34e:	d00f      	beq.n	800b370 <TIM_Base_SetConfig+0x40>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a43      	ldr	r2, [pc, #268]	@ (800b460 <TIM_Base_SetConfig+0x130>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d00b      	beq.n	800b370 <TIM_Base_SetConfig+0x40>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a42      	ldr	r2, [pc, #264]	@ (800b464 <TIM_Base_SetConfig+0x134>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d007      	beq.n	800b370 <TIM_Base_SetConfig+0x40>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a41      	ldr	r2, [pc, #260]	@ (800b468 <TIM_Base_SetConfig+0x138>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d003      	beq.n	800b370 <TIM_Base_SetConfig+0x40>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a40      	ldr	r2, [pc, #256]	@ (800b46c <TIM_Base_SetConfig+0x13c>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d108      	bne.n	800b382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	4313      	orrs	r3, r2
 800b380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a35      	ldr	r2, [pc, #212]	@ (800b45c <TIM_Base_SetConfig+0x12c>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d02b      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b390:	d027      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a32      	ldr	r2, [pc, #200]	@ (800b460 <TIM_Base_SetConfig+0x130>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d023      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a31      	ldr	r2, [pc, #196]	@ (800b464 <TIM_Base_SetConfig+0x134>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d01f      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a30      	ldr	r2, [pc, #192]	@ (800b468 <TIM_Base_SetConfig+0x138>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d01b      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a2f      	ldr	r2, [pc, #188]	@ (800b46c <TIM_Base_SetConfig+0x13c>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d017      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a2e      	ldr	r2, [pc, #184]	@ (800b470 <TIM_Base_SetConfig+0x140>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d013      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a2d      	ldr	r2, [pc, #180]	@ (800b474 <TIM_Base_SetConfig+0x144>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d00f      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a2c      	ldr	r2, [pc, #176]	@ (800b478 <TIM_Base_SetConfig+0x148>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d00b      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a2b      	ldr	r2, [pc, #172]	@ (800b47c <TIM_Base_SetConfig+0x14c>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d007      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a2a      	ldr	r2, [pc, #168]	@ (800b480 <TIM_Base_SetConfig+0x150>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d003      	beq.n	800b3e2 <TIM_Base_SetConfig+0xb2>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a29      	ldr	r2, [pc, #164]	@ (800b484 <TIM_Base_SetConfig+0x154>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d108      	bne.n	800b3f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	689a      	ldr	r2, [r3, #8]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a10      	ldr	r2, [pc, #64]	@ (800b45c <TIM_Base_SetConfig+0x12c>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d003      	beq.n	800b428 <TIM_Base_SetConfig+0xf8>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a12      	ldr	r2, [pc, #72]	@ (800b46c <TIM_Base_SetConfig+0x13c>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d103      	bne.n	800b430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	691a      	ldr	r2, [r3, #16]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d105      	bne.n	800b44e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	f023 0201 	bic.w	r2, r3, #1
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	611a      	str	r2, [r3, #16]
  }
}
 800b44e:	bf00      	nop
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	40010000 	.word	0x40010000
 800b460:	40000400 	.word	0x40000400
 800b464:	40000800 	.word	0x40000800
 800b468:	40000c00 	.word	0x40000c00
 800b46c:	40010400 	.word	0x40010400
 800b470:	40014000 	.word	0x40014000
 800b474:	40014400 	.word	0x40014400
 800b478:	40014800 	.word	0x40014800
 800b47c:	40001800 	.word	0x40001800
 800b480:	40001c00 	.word	0x40001c00
 800b484:	40002000 	.word	0x40002000

0800b488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b488:	b480      	push	{r7}
 800b48a:	b087      	sub	sp, #28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	f023 0201 	bic.w	r2, r3, #1
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4b2b      	ldr	r3, [pc, #172]	@ (800b560 <TIM_OC1_SetConfig+0xd8>)
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f023 0302 	bic.w	r3, r3, #2
 800b4d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a21      	ldr	r2, [pc, #132]	@ (800b564 <TIM_OC1_SetConfig+0xdc>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d003      	beq.n	800b4ec <TIM_OC1_SetConfig+0x64>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a20      	ldr	r2, [pc, #128]	@ (800b568 <TIM_OC1_SetConfig+0xe0>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d10c      	bne.n	800b506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	f023 0308 	bic.w	r3, r3, #8
 800b4f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f023 0304 	bic.w	r3, r3, #4
 800b504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a16      	ldr	r2, [pc, #88]	@ (800b564 <TIM_OC1_SetConfig+0xdc>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d003      	beq.n	800b516 <TIM_OC1_SetConfig+0x8e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a15      	ldr	r2, [pc, #84]	@ (800b568 <TIM_OC1_SetConfig+0xe0>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d111      	bne.n	800b53a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b51c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	4313      	orrs	r3, r2
 800b538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	621a      	str	r2, [r3, #32]
}
 800b554:	bf00      	nop
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	fffeff8f 	.word	0xfffeff8f
 800b564:	40010000 	.word	0x40010000
 800b568:	40010400 	.word	0x40010400

0800b56c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a1b      	ldr	r3, [r3, #32]
 800b580:	f023 0210 	bic.w	r2, r3, #16
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4b2e      	ldr	r3, [pc, #184]	@ (800b650 <TIM_OC2_SetConfig+0xe4>)
 800b598:	4013      	ands	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	021b      	lsls	r3, r3, #8
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f023 0320 	bic.w	r3, r3, #32
 800b5b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a23      	ldr	r2, [pc, #140]	@ (800b654 <TIM_OC2_SetConfig+0xe8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d003      	beq.n	800b5d4 <TIM_OC2_SetConfig+0x68>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a22      	ldr	r2, [pc, #136]	@ (800b658 <TIM_OC2_SetConfig+0xec>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d10d      	bne.n	800b5f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	011b      	lsls	r3, r3, #4
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a18      	ldr	r2, [pc, #96]	@ (800b654 <TIM_OC2_SetConfig+0xe8>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d003      	beq.n	800b600 <TIM_OC2_SetConfig+0x94>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a17      	ldr	r2, [pc, #92]	@ (800b658 <TIM_OC2_SetConfig+0xec>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d113      	bne.n	800b628 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b60e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	4313      	orrs	r3, r2
 800b61a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	4313      	orrs	r3, r2
 800b626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685a      	ldr	r2, [r3, #4]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	621a      	str	r2, [r3, #32]
}
 800b642:	bf00      	nop
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	feff8fff 	.word	0xfeff8fff
 800b654:	40010000 	.word	0x40010000
 800b658:	40010400 	.word	0x40010400

0800b65c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	4b2d      	ldr	r3, [pc, #180]	@ (800b73c <TIM_OC3_SetConfig+0xe0>)
 800b688:	4013      	ands	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 0303 	bic.w	r3, r3, #3
 800b692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b6a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	021b      	lsls	r3, r3, #8
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a22      	ldr	r2, [pc, #136]	@ (800b740 <TIM_OC3_SetConfig+0xe4>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d003      	beq.n	800b6c2 <TIM_OC3_SetConfig+0x66>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a21      	ldr	r2, [pc, #132]	@ (800b744 <TIM_OC3_SetConfig+0xe8>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d10d      	bne.n	800b6de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a17      	ldr	r2, [pc, #92]	@ (800b740 <TIM_OC3_SetConfig+0xe4>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d003      	beq.n	800b6ee <TIM_OC3_SetConfig+0x92>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a16      	ldr	r2, [pc, #88]	@ (800b744 <TIM_OC3_SetConfig+0xe8>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d113      	bne.n	800b716 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	011b      	lsls	r3, r3, #4
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	4313      	orrs	r3, r2
 800b708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	011b      	lsls	r3, r3, #4
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	4313      	orrs	r3, r2
 800b714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	621a      	str	r2, [r3, #32]
}
 800b730:	bf00      	nop
 800b732:	371c      	adds	r7, #28
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	fffeff8f 	.word	0xfffeff8f
 800b740:	40010000 	.word	0x40010000
 800b744:	40010400 	.word	0x40010400

0800b748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	4b1e      	ldr	r3, [pc, #120]	@ (800b7ec <TIM_OC4_SetConfig+0xa4>)
 800b774:	4013      	ands	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	4313      	orrs	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	031b      	lsls	r3, r3, #12
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a13      	ldr	r2, [pc, #76]	@ (800b7f0 <TIM_OC4_SetConfig+0xa8>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_OC4_SetConfig+0x68>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a12      	ldr	r2, [pc, #72]	@ (800b7f4 <TIM_OC4_SetConfig+0xac>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d109      	bne.n	800b7c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b7b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	019b      	lsls	r3, r3, #6
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	621a      	str	r2, [r3, #32]
}
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	feff8fff 	.word	0xfeff8fff
 800b7f0:	40010000 	.word	0x40010000
 800b7f4:	40010400 	.word	0x40010400

0800b7f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a1b      	ldr	r3, [r3, #32]
 800b80c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	4b1b      	ldr	r3, [pc, #108]	@ (800b890 <TIM_OC5_SetConfig+0x98>)
 800b824:	4013      	ands	r3, r2
 800b826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	041b      	lsls	r3, r3, #16
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4313      	orrs	r3, r2
 800b844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a12      	ldr	r2, [pc, #72]	@ (800b894 <TIM_OC5_SetConfig+0x9c>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d003      	beq.n	800b856 <TIM_OC5_SetConfig+0x5e>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a11      	ldr	r2, [pc, #68]	@ (800b898 <TIM_OC5_SetConfig+0xa0>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d109      	bne.n	800b86a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b85c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	4313      	orrs	r3, r2
 800b868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	685a      	ldr	r2, [r3, #4]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	621a      	str	r2, [r3, #32]
}
 800b884:	bf00      	nop
 800b886:	371c      	adds	r7, #28
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	fffeff8f 	.word	0xfffeff8f
 800b894:	40010000 	.word	0x40010000
 800b898:	40010400 	.word	0x40010400

0800b89c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b938 <TIM_OC6_SetConfig+0x9c>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	021b      	lsls	r3, r3, #8
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b8de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	051b      	lsls	r3, r3, #20
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a13      	ldr	r2, [pc, #76]	@ (800b93c <TIM_OC6_SetConfig+0xa0>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d003      	beq.n	800b8fc <TIM_OC6_SetConfig+0x60>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a12      	ldr	r2, [pc, #72]	@ (800b940 <TIM_OC6_SetConfig+0xa4>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d109      	bne.n	800b910 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b902:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	029b      	lsls	r3, r3, #10
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	621a      	str	r2, [r3, #32]
}
 800b92a:	bf00      	nop
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	feff8fff 	.word	0xfeff8fff
 800b93c:	40010000 	.word	0x40010000
 800b940:	40010400 	.word	0x40010400

0800b944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b944:	b480      	push	{r7}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	f023 0201 	bic.w	r2, r3, #1
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b96e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	4313      	orrs	r3, r2
 800b978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f023 030a 	bic.w	r3, r3, #10
 800b980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	4313      	orrs	r3, r2
 800b988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	621a      	str	r2, [r3, #32]
}
 800b996:	bf00      	nop
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b087      	sub	sp, #28
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	60f8      	str	r0, [r7, #12]
 800b9aa:	60b9      	str	r1, [r7, #8]
 800b9ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	f023 0210 	bic.w	r2, r3, #16
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b9cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	031b      	lsls	r3, r3, #12
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b9de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	621a      	str	r2, [r3, #32]
}
 800b9f6:	bf00      	nop
 800b9f8:	371c      	adds	r7, #28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b085      	sub	sp, #20
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	f043 0307 	orr.w	r3, r3, #7
 800ba24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	609a      	str	r2, [r3, #8]
}
 800ba2c:	bf00      	nop
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	021a      	lsls	r2, r3, #8
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	609a      	str	r2, [r3, #8]
}
 800ba6c:	bf00      	nop
 800ba6e:	371c      	adds	r7, #28
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f003 031f 	and.w	r3, r3, #31
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6a1a      	ldr	r2, [r3, #32]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	43db      	mvns	r3, r3
 800ba9a:	401a      	ands	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6a1a      	ldr	r2, [r3, #32]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f003 031f 	and.w	r3, r3, #31
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	fa01 f303 	lsl.w	r3, r1, r3
 800bab0:	431a      	orrs	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	621a      	str	r2, [r3, #32]
}
 800bab6:	bf00      	nop
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
	...

0800bac4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a1e      	ldr	r2, [pc, #120]	@ (800bb48 <TIM_ResetCallback+0x84>)
 800bad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a1d      	ldr	r2, [pc, #116]	@ (800bb4c <TIM_ResetCallback+0x88>)
 800bad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a1c      	ldr	r2, [pc, #112]	@ (800bb50 <TIM_ResetCallback+0x8c>)
 800bae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a1b      	ldr	r2, [pc, #108]	@ (800bb54 <TIM_ResetCallback+0x90>)
 800bae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a1a      	ldr	r2, [pc, #104]	@ (800bb58 <TIM_ResetCallback+0x94>)
 800baf0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a19      	ldr	r2, [pc, #100]	@ (800bb5c <TIM_ResetCallback+0x98>)
 800baf8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a18      	ldr	r2, [pc, #96]	@ (800bb60 <TIM_ResetCallback+0x9c>)
 800bb00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a17      	ldr	r2, [pc, #92]	@ (800bb64 <TIM_ResetCallback+0xa0>)
 800bb08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a16      	ldr	r2, [pc, #88]	@ (800bb68 <TIM_ResetCallback+0xa4>)
 800bb10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a15      	ldr	r2, [pc, #84]	@ (800bb6c <TIM_ResetCallback+0xa8>)
 800bb18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a14      	ldr	r2, [pc, #80]	@ (800bb70 <TIM_ResetCallback+0xac>)
 800bb20:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a13      	ldr	r2, [pc, #76]	@ (800bb74 <TIM_ResetCallback+0xb0>)
 800bb28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a12      	ldr	r2, [pc, #72]	@ (800bb78 <TIM_ResetCallback+0xb4>)
 800bb30:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a11      	ldr	r2, [pc, #68]	@ (800bb7c <TIM_ResetCallback+0xb8>)
 800bb38:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	0800b269 	.word	0x0800b269
 800bb4c:	0800b27d 	.word	0x0800b27d
 800bb50:	0800b2f5 	.word	0x0800b2f5
 800bb54:	0800b309 	.word	0x0800b309
 800bb58:	0800b2a5 	.word	0x0800b2a5
 800bb5c:	0800b2b9 	.word	0x0800b2b9
 800bb60:	0800b291 	.word	0x0800b291
 800bb64:	0800b2cd 	.word	0x0800b2cd
 800bb68:	0800b2e1 	.word	0x0800b2e1
 800bb6c:	0800b31d 	.word	0x0800b31d
 800bb70:	0800bc9d 	.word	0x0800bc9d
 800bb74:	0800bcb1 	.word	0x0800bcb1
 800bb78:	0800bcc5 	.word	0x0800bcc5
 800bb7c:	0800bcd9 	.word	0x0800bcd9

0800bb80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d101      	bne.n	800bb98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb94:	2302      	movs	r3, #2
 800bb96:	e06d      	b.n	800bc74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a30      	ldr	r2, [pc, #192]	@ (800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d004      	beq.n	800bbcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a2f      	ldr	r2, [pc, #188]	@ (800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d108      	bne.n	800bbde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bbd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a20      	ldr	r2, [pc, #128]	@ (800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d022      	beq.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc0a:	d01d      	beq.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a1d      	ldr	r2, [pc, #116]	@ (800bc88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d018      	beq.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a1c      	ldr	r2, [pc, #112]	@ (800bc8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d013      	beq.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a1a      	ldr	r2, [pc, #104]	@ (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d00e      	beq.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a15      	ldr	r2, [pc, #84]	@ (800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d009      	beq.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a16      	ldr	r2, [pc, #88]	@ (800bc94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d004      	beq.n	800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a15      	ldr	r2, [pc, #84]	@ (800bc98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d10c      	bne.n	800bc62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	40010000 	.word	0x40010000
 800bc84:	40010400 	.word	0x40010400
 800bc88:	40000400 	.word	0x40000400
 800bc8c:	40000800 	.word	0x40000800
 800bc90:	40000c00 	.word	0x40000c00
 800bc94:	40014000 	.word	0x40014000
 800bc98:	40001800 	.word	0x40001800

0800bc9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e04e      	b.n	800bd9c <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d114      	bne.n	800bd30 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f8a6 	bl	800be60 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d103      	bne.n	800bd26 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a20      	ldr	r2, [pc, #128]	@ (800bda4 <HAL_UART_Init+0xb8>)
 800bd22:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2224      	movs	r2, #36	@ 0x24
 800bd34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f022 0201 	bic.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fb2a 	bl	800c3a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f8c3 	bl	800bee0 <UART_SetConfig>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d101      	bne.n	800bd64 <HAL_UART_Init+0x78>
  {
    return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e01b      	b.n	800bd9c <HAL_UART_Init+0xb0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bd72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	689a      	ldr	r2, [r3, #8]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bd82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0201 	orr.w	r2, r2, #1
 800bd92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fba9 	bl	800c4ec <UART_CheckIdleState>
 800bd9a:	4603      	mov	r3, r0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	08001855 	.word	0x08001855

0800bda8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a14      	ldr	r2, [pc, #80]	@ (800bebc <UART_InitCallbacksToDefault+0x5c>)
 800be6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a13      	ldr	r2, [pc, #76]	@ (800bec0 <UART_InitCallbacksToDefault+0x60>)
 800be74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a12      	ldr	r2, [pc, #72]	@ (800bec4 <UART_InitCallbacksToDefault+0x64>)
 800be7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a11      	ldr	r2, [pc, #68]	@ (800bec8 <UART_InitCallbacksToDefault+0x68>)
 800be84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a10      	ldr	r2, [pc, #64]	@ (800becc <UART_InitCallbacksToDefault+0x6c>)
 800be8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a0f      	ldr	r2, [pc, #60]	@ (800bed0 <UART_InitCallbacksToDefault+0x70>)
 800be94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a0e      	ldr	r2, [pc, #56]	@ (800bed4 <UART_InitCallbacksToDefault+0x74>)
 800be9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a0d      	ldr	r2, [pc, #52]	@ (800bed8 <UART_InitCallbacksToDefault+0x78>)
 800bea4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a0c      	ldr	r2, [pc, #48]	@ (800bedc <UART_InitCallbacksToDefault+0x7c>)
 800beac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	0800bdbd 	.word	0x0800bdbd
 800bec0:	0800bda9 	.word	0x0800bda9
 800bec4:	0800bde5 	.word	0x0800bde5
 800bec8:	0800bdd1 	.word	0x0800bdd1
 800becc:	0800bdf9 	.word	0x0800bdf9
 800bed0:	0800be0d 	.word	0x0800be0d
 800bed4:	0800be21 	.word	0x0800be21
 800bed8:	0800be35 	.word	0x0800be35
 800bedc:	0800be49 	.word	0x0800be49

0800bee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b088      	sub	sp, #32
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	431a      	orrs	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	431a      	orrs	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	69db      	ldr	r3, [r3, #28]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	4ba6      	ldr	r3, [pc, #664]	@ (800c1a4 <UART_SetConfig+0x2c4>)
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	6812      	ldr	r2, [r2, #0]
 800bf12:	6979      	ldr	r1, [r7, #20]
 800bf14:	430b      	orrs	r3, r1
 800bf16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68da      	ldr	r2, [r3, #12]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a1b      	ldr	r3, [r3, #32]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a94      	ldr	r2, [pc, #592]	@ (800c1a8 <UART_SetConfig+0x2c8>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d120      	bne.n	800bf9e <UART_SetConfig+0xbe>
 800bf5c:	4b93      	ldr	r3, [pc, #588]	@ (800c1ac <UART_SetConfig+0x2cc>)
 800bf5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf62:	f003 0303 	and.w	r3, r3, #3
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d816      	bhi.n	800bf98 <UART_SetConfig+0xb8>
 800bf6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf70 <UART_SetConfig+0x90>)
 800bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf70:	0800bf81 	.word	0x0800bf81
 800bf74:	0800bf8d 	.word	0x0800bf8d
 800bf78:	0800bf87 	.word	0x0800bf87
 800bf7c:	0800bf93 	.word	0x0800bf93
 800bf80:	2301      	movs	r3, #1
 800bf82:	77fb      	strb	r3, [r7, #31]
 800bf84:	e150      	b.n	800c228 <UART_SetConfig+0x348>
 800bf86:	2302      	movs	r3, #2
 800bf88:	77fb      	strb	r3, [r7, #31]
 800bf8a:	e14d      	b.n	800c228 <UART_SetConfig+0x348>
 800bf8c:	2304      	movs	r3, #4
 800bf8e:	77fb      	strb	r3, [r7, #31]
 800bf90:	e14a      	b.n	800c228 <UART_SetConfig+0x348>
 800bf92:	2308      	movs	r3, #8
 800bf94:	77fb      	strb	r3, [r7, #31]
 800bf96:	e147      	b.n	800c228 <UART_SetConfig+0x348>
 800bf98:	2310      	movs	r3, #16
 800bf9a:	77fb      	strb	r3, [r7, #31]
 800bf9c:	e144      	b.n	800c228 <UART_SetConfig+0x348>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a83      	ldr	r2, [pc, #524]	@ (800c1b0 <UART_SetConfig+0x2d0>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d132      	bne.n	800c00e <UART_SetConfig+0x12e>
 800bfa8:	4b80      	ldr	r3, [pc, #512]	@ (800c1ac <UART_SetConfig+0x2cc>)
 800bfaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfae:	f003 030c 	and.w	r3, r3, #12
 800bfb2:	2b0c      	cmp	r3, #12
 800bfb4:	d828      	bhi.n	800c008 <UART_SetConfig+0x128>
 800bfb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfbc <UART_SetConfig+0xdc>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800bff1 	.word	0x0800bff1
 800bfc0:	0800c009 	.word	0x0800c009
 800bfc4:	0800c009 	.word	0x0800c009
 800bfc8:	0800c009 	.word	0x0800c009
 800bfcc:	0800bffd 	.word	0x0800bffd
 800bfd0:	0800c009 	.word	0x0800c009
 800bfd4:	0800c009 	.word	0x0800c009
 800bfd8:	0800c009 	.word	0x0800c009
 800bfdc:	0800bff7 	.word	0x0800bff7
 800bfe0:	0800c009 	.word	0x0800c009
 800bfe4:	0800c009 	.word	0x0800c009
 800bfe8:	0800c009 	.word	0x0800c009
 800bfec:	0800c003 	.word	0x0800c003
 800bff0:	2300      	movs	r3, #0
 800bff2:	77fb      	strb	r3, [r7, #31]
 800bff4:	e118      	b.n	800c228 <UART_SetConfig+0x348>
 800bff6:	2302      	movs	r3, #2
 800bff8:	77fb      	strb	r3, [r7, #31]
 800bffa:	e115      	b.n	800c228 <UART_SetConfig+0x348>
 800bffc:	2304      	movs	r3, #4
 800bffe:	77fb      	strb	r3, [r7, #31]
 800c000:	e112      	b.n	800c228 <UART_SetConfig+0x348>
 800c002:	2308      	movs	r3, #8
 800c004:	77fb      	strb	r3, [r7, #31]
 800c006:	e10f      	b.n	800c228 <UART_SetConfig+0x348>
 800c008:	2310      	movs	r3, #16
 800c00a:	77fb      	strb	r3, [r7, #31]
 800c00c:	e10c      	b.n	800c228 <UART_SetConfig+0x348>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a68      	ldr	r2, [pc, #416]	@ (800c1b4 <UART_SetConfig+0x2d4>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d120      	bne.n	800c05a <UART_SetConfig+0x17a>
 800c018:	4b64      	ldr	r3, [pc, #400]	@ (800c1ac <UART_SetConfig+0x2cc>)
 800c01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c01e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c022:	2b30      	cmp	r3, #48	@ 0x30
 800c024:	d013      	beq.n	800c04e <UART_SetConfig+0x16e>
 800c026:	2b30      	cmp	r3, #48	@ 0x30
 800c028:	d814      	bhi.n	800c054 <UART_SetConfig+0x174>
 800c02a:	2b20      	cmp	r3, #32
 800c02c:	d009      	beq.n	800c042 <UART_SetConfig+0x162>
 800c02e:	2b20      	cmp	r3, #32
 800c030:	d810      	bhi.n	800c054 <UART_SetConfig+0x174>
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <UART_SetConfig+0x15c>
 800c036:	2b10      	cmp	r3, #16
 800c038:	d006      	beq.n	800c048 <UART_SetConfig+0x168>
 800c03a:	e00b      	b.n	800c054 <UART_SetConfig+0x174>
 800c03c:	2300      	movs	r3, #0
 800c03e:	77fb      	strb	r3, [r7, #31]
 800c040:	e0f2      	b.n	800c228 <UART_SetConfig+0x348>
 800c042:	2302      	movs	r3, #2
 800c044:	77fb      	strb	r3, [r7, #31]
 800c046:	e0ef      	b.n	800c228 <UART_SetConfig+0x348>
 800c048:	2304      	movs	r3, #4
 800c04a:	77fb      	strb	r3, [r7, #31]
 800c04c:	e0ec      	b.n	800c228 <UART_SetConfig+0x348>
 800c04e:	2308      	movs	r3, #8
 800c050:	77fb      	strb	r3, [r7, #31]
 800c052:	e0e9      	b.n	800c228 <UART_SetConfig+0x348>
 800c054:	2310      	movs	r3, #16
 800c056:	77fb      	strb	r3, [r7, #31]
 800c058:	e0e6      	b.n	800c228 <UART_SetConfig+0x348>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a56      	ldr	r2, [pc, #344]	@ (800c1b8 <UART_SetConfig+0x2d8>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d120      	bne.n	800c0a6 <UART_SetConfig+0x1c6>
 800c064:	4b51      	ldr	r3, [pc, #324]	@ (800c1ac <UART_SetConfig+0x2cc>)
 800c066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c06a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c06e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c070:	d013      	beq.n	800c09a <UART_SetConfig+0x1ba>
 800c072:	2bc0      	cmp	r3, #192	@ 0xc0
 800c074:	d814      	bhi.n	800c0a0 <UART_SetConfig+0x1c0>
 800c076:	2b80      	cmp	r3, #128	@ 0x80
 800c078:	d009      	beq.n	800c08e <UART_SetConfig+0x1ae>
 800c07a:	2b80      	cmp	r3, #128	@ 0x80
 800c07c:	d810      	bhi.n	800c0a0 <UART_SetConfig+0x1c0>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <UART_SetConfig+0x1a8>
 800c082:	2b40      	cmp	r3, #64	@ 0x40
 800c084:	d006      	beq.n	800c094 <UART_SetConfig+0x1b4>
 800c086:	e00b      	b.n	800c0a0 <UART_SetConfig+0x1c0>
 800c088:	2300      	movs	r3, #0
 800c08a:	77fb      	strb	r3, [r7, #31]
 800c08c:	e0cc      	b.n	800c228 <UART_SetConfig+0x348>
 800c08e:	2302      	movs	r3, #2
 800c090:	77fb      	strb	r3, [r7, #31]
 800c092:	e0c9      	b.n	800c228 <UART_SetConfig+0x348>
 800c094:	2304      	movs	r3, #4
 800c096:	77fb      	strb	r3, [r7, #31]
 800c098:	e0c6      	b.n	800c228 <UART_SetConfig+0x348>
 800c09a:	2308      	movs	r3, #8
 800c09c:	77fb      	strb	r3, [r7, #31]
 800c09e:	e0c3      	b.n	800c228 <UART_SetConfig+0x348>
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	e0c0      	b.n	800c228 <UART_SetConfig+0x348>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a44      	ldr	r2, [pc, #272]	@ (800c1bc <UART_SetConfig+0x2dc>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d125      	bne.n	800c0fc <UART_SetConfig+0x21c>
 800c0b0:	4b3e      	ldr	r3, [pc, #248]	@ (800c1ac <UART_SetConfig+0x2cc>)
 800c0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c0be:	d017      	beq.n	800c0f0 <UART_SetConfig+0x210>
 800c0c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c0c4:	d817      	bhi.n	800c0f6 <UART_SetConfig+0x216>
 800c0c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0ca:	d00b      	beq.n	800c0e4 <UART_SetConfig+0x204>
 800c0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0d0:	d811      	bhi.n	800c0f6 <UART_SetConfig+0x216>
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <UART_SetConfig+0x1fe>
 800c0d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0da:	d006      	beq.n	800c0ea <UART_SetConfig+0x20a>
 800c0dc:	e00b      	b.n	800c0f6 <UART_SetConfig+0x216>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	77fb      	strb	r3, [r7, #31]
 800c0e2:	e0a1      	b.n	800c228 <UART_SetConfig+0x348>
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	77fb      	strb	r3, [r7, #31]
 800c0e8:	e09e      	b.n	800c228 <UART_SetConfig+0x348>
 800c0ea:	2304      	movs	r3, #4
 800c0ec:	77fb      	strb	r3, [r7, #31]
 800c0ee:	e09b      	b.n	800c228 <UART_SetConfig+0x348>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	77fb      	strb	r3, [r7, #31]
 800c0f4:	e098      	b.n	800c228 <UART_SetConfig+0x348>
 800c0f6:	2310      	movs	r3, #16
 800c0f8:	77fb      	strb	r3, [r7, #31]
 800c0fa:	e095      	b.n	800c228 <UART_SetConfig+0x348>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a2f      	ldr	r2, [pc, #188]	@ (800c1c0 <UART_SetConfig+0x2e0>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d125      	bne.n	800c152 <UART_SetConfig+0x272>
 800c106:	4b29      	ldr	r3, [pc, #164]	@ (800c1ac <UART_SetConfig+0x2cc>)
 800c108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c10c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c110:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c114:	d017      	beq.n	800c146 <UART_SetConfig+0x266>
 800c116:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c11a:	d817      	bhi.n	800c14c <UART_SetConfig+0x26c>
 800c11c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c120:	d00b      	beq.n	800c13a <UART_SetConfig+0x25a>
 800c122:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c126:	d811      	bhi.n	800c14c <UART_SetConfig+0x26c>
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <UART_SetConfig+0x254>
 800c12c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c130:	d006      	beq.n	800c140 <UART_SetConfig+0x260>
 800c132:	e00b      	b.n	800c14c <UART_SetConfig+0x26c>
 800c134:	2301      	movs	r3, #1
 800c136:	77fb      	strb	r3, [r7, #31]
 800c138:	e076      	b.n	800c228 <UART_SetConfig+0x348>
 800c13a:	2302      	movs	r3, #2
 800c13c:	77fb      	strb	r3, [r7, #31]
 800c13e:	e073      	b.n	800c228 <UART_SetConfig+0x348>
 800c140:	2304      	movs	r3, #4
 800c142:	77fb      	strb	r3, [r7, #31]
 800c144:	e070      	b.n	800c228 <UART_SetConfig+0x348>
 800c146:	2308      	movs	r3, #8
 800c148:	77fb      	strb	r3, [r7, #31]
 800c14a:	e06d      	b.n	800c228 <UART_SetConfig+0x348>
 800c14c:	2310      	movs	r3, #16
 800c14e:	77fb      	strb	r3, [r7, #31]
 800c150:	e06a      	b.n	800c228 <UART_SetConfig+0x348>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a1b      	ldr	r2, [pc, #108]	@ (800c1c4 <UART_SetConfig+0x2e4>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d138      	bne.n	800c1ce <UART_SetConfig+0x2ee>
 800c15c:	4b13      	ldr	r3, [pc, #76]	@ (800c1ac <UART_SetConfig+0x2cc>)
 800c15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c162:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c166:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c16a:	d017      	beq.n	800c19c <UART_SetConfig+0x2bc>
 800c16c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c170:	d82a      	bhi.n	800c1c8 <UART_SetConfig+0x2e8>
 800c172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c176:	d00b      	beq.n	800c190 <UART_SetConfig+0x2b0>
 800c178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c17c:	d824      	bhi.n	800c1c8 <UART_SetConfig+0x2e8>
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <UART_SetConfig+0x2aa>
 800c182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c186:	d006      	beq.n	800c196 <UART_SetConfig+0x2b6>
 800c188:	e01e      	b.n	800c1c8 <UART_SetConfig+0x2e8>
 800c18a:	2300      	movs	r3, #0
 800c18c:	77fb      	strb	r3, [r7, #31]
 800c18e:	e04b      	b.n	800c228 <UART_SetConfig+0x348>
 800c190:	2302      	movs	r3, #2
 800c192:	77fb      	strb	r3, [r7, #31]
 800c194:	e048      	b.n	800c228 <UART_SetConfig+0x348>
 800c196:	2304      	movs	r3, #4
 800c198:	77fb      	strb	r3, [r7, #31]
 800c19a:	e045      	b.n	800c228 <UART_SetConfig+0x348>
 800c19c:	2308      	movs	r3, #8
 800c19e:	77fb      	strb	r3, [r7, #31]
 800c1a0:	e042      	b.n	800c228 <UART_SetConfig+0x348>
 800c1a2:	bf00      	nop
 800c1a4:	efff69f3 	.word	0xefff69f3
 800c1a8:	40011000 	.word	0x40011000
 800c1ac:	40023800 	.word	0x40023800
 800c1b0:	40004400 	.word	0x40004400
 800c1b4:	40004800 	.word	0x40004800
 800c1b8:	40004c00 	.word	0x40004c00
 800c1bc:	40005000 	.word	0x40005000
 800c1c0:	40011400 	.word	0x40011400
 800c1c4:	40007800 	.word	0x40007800
 800c1c8:	2310      	movs	r3, #16
 800c1ca:	77fb      	strb	r3, [r7, #31]
 800c1cc:	e02c      	b.n	800c228 <UART_SetConfig+0x348>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a72      	ldr	r2, [pc, #456]	@ (800c39c <UART_SetConfig+0x4bc>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d125      	bne.n	800c224 <UART_SetConfig+0x344>
 800c1d8:	4b71      	ldr	r3, [pc, #452]	@ (800c3a0 <UART_SetConfig+0x4c0>)
 800c1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c1e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c1e6:	d017      	beq.n	800c218 <UART_SetConfig+0x338>
 800c1e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c1ec:	d817      	bhi.n	800c21e <UART_SetConfig+0x33e>
 800c1ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1f2:	d00b      	beq.n	800c20c <UART_SetConfig+0x32c>
 800c1f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1f8:	d811      	bhi.n	800c21e <UART_SetConfig+0x33e>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <UART_SetConfig+0x326>
 800c1fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c202:	d006      	beq.n	800c212 <UART_SetConfig+0x332>
 800c204:	e00b      	b.n	800c21e <UART_SetConfig+0x33e>
 800c206:	2300      	movs	r3, #0
 800c208:	77fb      	strb	r3, [r7, #31]
 800c20a:	e00d      	b.n	800c228 <UART_SetConfig+0x348>
 800c20c:	2302      	movs	r3, #2
 800c20e:	77fb      	strb	r3, [r7, #31]
 800c210:	e00a      	b.n	800c228 <UART_SetConfig+0x348>
 800c212:	2304      	movs	r3, #4
 800c214:	77fb      	strb	r3, [r7, #31]
 800c216:	e007      	b.n	800c228 <UART_SetConfig+0x348>
 800c218:	2308      	movs	r3, #8
 800c21a:	77fb      	strb	r3, [r7, #31]
 800c21c:	e004      	b.n	800c228 <UART_SetConfig+0x348>
 800c21e:	2310      	movs	r3, #16
 800c220:	77fb      	strb	r3, [r7, #31]
 800c222:	e001      	b.n	800c228 <UART_SetConfig+0x348>
 800c224:	2310      	movs	r3, #16
 800c226:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c230:	d15b      	bne.n	800c2ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c232:	7ffb      	ldrb	r3, [r7, #31]
 800c234:	2b08      	cmp	r3, #8
 800c236:	d828      	bhi.n	800c28a <UART_SetConfig+0x3aa>
 800c238:	a201      	add	r2, pc, #4	@ (adr r2, 800c240 <UART_SetConfig+0x360>)
 800c23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23e:	bf00      	nop
 800c240:	0800c265 	.word	0x0800c265
 800c244:	0800c26d 	.word	0x0800c26d
 800c248:	0800c275 	.word	0x0800c275
 800c24c:	0800c28b 	.word	0x0800c28b
 800c250:	0800c27b 	.word	0x0800c27b
 800c254:	0800c28b 	.word	0x0800c28b
 800c258:	0800c28b 	.word	0x0800c28b
 800c25c:	0800c28b 	.word	0x0800c28b
 800c260:	0800c283 	.word	0x0800c283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c264:	f7fd f88a 	bl	800937c <HAL_RCC_GetPCLK1Freq>
 800c268:	61b8      	str	r0, [r7, #24]
        break;
 800c26a:	e013      	b.n	800c294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c26c:	f7fd f89a 	bl	80093a4 <HAL_RCC_GetPCLK2Freq>
 800c270:	61b8      	str	r0, [r7, #24]
        break;
 800c272:	e00f      	b.n	800c294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c274:	4b4b      	ldr	r3, [pc, #300]	@ (800c3a4 <UART_SetConfig+0x4c4>)
 800c276:	61bb      	str	r3, [r7, #24]
        break;
 800c278:	e00c      	b.n	800c294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c27a:	f7fc ffad 	bl	80091d8 <HAL_RCC_GetSysClockFreq>
 800c27e:	61b8      	str	r0, [r7, #24]
        break;
 800c280:	e008      	b.n	800c294 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c286:	61bb      	str	r3, [r7, #24]
        break;
 800c288:	e004      	b.n	800c294 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c28a:	2300      	movs	r3, #0
 800c28c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	77bb      	strb	r3, [r7, #30]
        break;
 800c292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d074      	beq.n	800c384 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	005a      	lsls	r2, r3, #1
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	085b      	lsrs	r3, r3, #1
 800c2a4:	441a      	add	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b0f      	cmp	r3, #15
 800c2b4:	d916      	bls.n	800c2e4 <UART_SetConfig+0x404>
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2bc:	d212      	bcs.n	800c2e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	f023 030f 	bic.w	r3, r3, #15
 800c2c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	085b      	lsrs	r3, r3, #1
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	f003 0307 	and.w	r3, r3, #7
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	89fb      	ldrh	r3, [r7, #14]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	89fa      	ldrh	r2, [r7, #14]
 800c2e0:	60da      	str	r2, [r3, #12]
 800c2e2:	e04f      	b.n	800c384 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	77bb      	strb	r3, [r7, #30]
 800c2e8:	e04c      	b.n	800c384 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2ea:	7ffb      	ldrb	r3, [r7, #31]
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d828      	bhi.n	800c342 <UART_SetConfig+0x462>
 800c2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f8 <UART_SetConfig+0x418>)
 800c2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f6:	bf00      	nop
 800c2f8:	0800c31d 	.word	0x0800c31d
 800c2fc:	0800c325 	.word	0x0800c325
 800c300:	0800c32d 	.word	0x0800c32d
 800c304:	0800c343 	.word	0x0800c343
 800c308:	0800c333 	.word	0x0800c333
 800c30c:	0800c343 	.word	0x0800c343
 800c310:	0800c343 	.word	0x0800c343
 800c314:	0800c343 	.word	0x0800c343
 800c318:	0800c33b 	.word	0x0800c33b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c31c:	f7fd f82e 	bl	800937c <HAL_RCC_GetPCLK1Freq>
 800c320:	61b8      	str	r0, [r7, #24]
        break;
 800c322:	e013      	b.n	800c34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c324:	f7fd f83e 	bl	80093a4 <HAL_RCC_GetPCLK2Freq>
 800c328:	61b8      	str	r0, [r7, #24]
        break;
 800c32a:	e00f      	b.n	800c34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c32c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a4 <UART_SetConfig+0x4c4>)
 800c32e:	61bb      	str	r3, [r7, #24]
        break;
 800c330:	e00c      	b.n	800c34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c332:	f7fc ff51 	bl	80091d8 <HAL_RCC_GetSysClockFreq>
 800c336:	61b8      	str	r0, [r7, #24]
        break;
 800c338:	e008      	b.n	800c34c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c33e:	61bb      	str	r3, [r7, #24]
        break;
 800c340:	e004      	b.n	800c34c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c342:	2300      	movs	r3, #0
 800c344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	77bb      	strb	r3, [r7, #30]
        break;
 800c34a:	bf00      	nop
    }

    if (pclk != 0U)
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d018      	beq.n	800c384 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	085a      	lsrs	r2, r3, #1
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	441a      	add	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	fbb2 f3f3 	udiv	r3, r2, r3
 800c364:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	2b0f      	cmp	r3, #15
 800c36a:	d909      	bls.n	800c380 <UART_SetConfig+0x4a0>
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c372:	d205      	bcs.n	800c380 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	60da      	str	r2, [r3, #12]
 800c37e:	e001      	b.n	800c384 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c390:	7fbb      	ldrb	r3, [r7, #30]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3720      	adds	r7, #32
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	40007c00 	.word	0x40007c00
 800c3a0:	40023800 	.word	0x40023800
 800c3a4:	00f42400 	.word	0x00f42400

0800c3a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b4:	f003 0308 	and.w	r3, r3, #8
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00a      	beq.n	800c3d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00a      	beq.n	800c3f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00a      	beq.n	800c416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41a:	f003 0304 	and.w	r3, r3, #4
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00a      	beq.n	800c438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	430a      	orrs	r2, r1
 800c436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43c:	f003 0310 	and.w	r3, r3, #16
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00a      	beq.n	800c45a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	430a      	orrs	r2, r1
 800c458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45e:	f003 0320 	and.w	r3, r3, #32
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00a      	beq.n	800c47c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	430a      	orrs	r2, r1
 800c47a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c484:	2b00      	cmp	r3, #0
 800c486:	d01a      	beq.n	800c4be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	430a      	orrs	r2, r1
 800c49c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4a6:	d10a      	bne.n	800c4be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00a      	beq.n	800c4e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	430a      	orrs	r2, r1
 800c4de:	605a      	str	r2, [r3, #4]
  }
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08c      	sub	sp, #48	@ 0x30
 800c4f0:	af02      	add	r7, sp, #8
 800c4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4fc:	f7f9 fd74 	bl	8005fe8 <HAL_GetTick>
 800c500:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0308 	and.w	r3, r3, #8
 800c50c:	2b08      	cmp	r3, #8
 800c50e:	d12e      	bne.n	800c56e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c518:	2200      	movs	r2, #0
 800c51a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f83b 	bl	800c59a <UART_WaitOnFlagUntilTimeout>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d021      	beq.n	800c56e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	e853 3f00 	ldrex	r3, [r3]
 800c536:	60fb      	str	r3, [r7, #12]
   return(result);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c53e:	623b      	str	r3, [r7, #32]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	61fb      	str	r3, [r7, #28]
 800c54a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54c:	69b9      	ldr	r1, [r7, #24]
 800c54e:	69fa      	ldr	r2, [r7, #28]
 800c550:	e841 2300 	strex	r3, r2, [r1]
 800c554:	617b      	str	r3, [r7, #20]
   return(result);
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1e6      	bne.n	800c52a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2220      	movs	r2, #32
 800c560:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e011      	b.n	800c592 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2220      	movs	r2, #32
 800c572:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2220      	movs	r2, #32
 800c578:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3728      	adds	r7, #40	@ 0x28
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b084      	sub	sp, #16
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	603b      	str	r3, [r7, #0]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5aa:	e04f      	b.n	800c64c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d04b      	beq.n	800c64c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5b4:	f7f9 fd18 	bl	8005fe8 <HAL_GetTick>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	69ba      	ldr	r2, [r7, #24]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d302      	bcc.n	800c5ca <UART_WaitOnFlagUntilTimeout+0x30>
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e04e      	b.n	800c66c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d037      	beq.n	800c64c <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	2b80      	cmp	r3, #128	@ 0x80
 800c5e0:	d034      	beq.n	800c64c <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b40      	cmp	r3, #64	@ 0x40
 800c5e6:	d031      	beq.n	800c64c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	69db      	ldr	r3, [r3, #28]
 800c5ee:	f003 0308 	and.w	r3, r3, #8
 800c5f2:	2b08      	cmp	r3, #8
 800c5f4:	d110      	bne.n	800c618 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2208      	movs	r2, #8
 800c5fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 f838 	bl	800c674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2208      	movs	r2, #8
 800c608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e029      	b.n	800c66c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	69db      	ldr	r3, [r3, #28]
 800c61e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c626:	d111      	bne.n	800c64c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c630:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f000 f81e 	bl	800c674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2220      	movs	r2, #32
 800c63c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c648:	2303      	movs	r3, #3
 800c64a:	e00f      	b.n	800c66c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	69da      	ldr	r2, [r3, #28]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	4013      	ands	r3, r2
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	429a      	cmp	r2, r3
 800c65a:	bf0c      	ite	eq
 800c65c:	2301      	moveq	r3, #1
 800c65e:	2300      	movne	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	461a      	mov	r2, r3
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	429a      	cmp	r2, r3
 800c668:	d0a0      	beq.n	800c5ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c674:	b480      	push	{r7}
 800c676:	b095      	sub	sp, #84	@ 0x54
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c684:	e853 3f00 	ldrex	r3, [r3]
 800c688:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	461a      	mov	r2, r3
 800c698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c69a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c69c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c6a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1e6      	bne.n	800c67c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	e853 3f00 	ldrex	r3, [r3]
 800c6bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	f023 0301 	bic.w	r3, r3, #1
 800c6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e5      	bne.n	800c6ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d118      	bne.n	800c71c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	e853 3f00 	ldrex	r3, [r3]
 800c6f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f023 0310 	bic.w	r3, r3, #16
 800c6fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c708:	61bb      	str	r3, [r7, #24]
 800c70a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70c:	6979      	ldr	r1, [r7, #20]
 800c70e:	69ba      	ldr	r2, [r7, #24]
 800c710:	e841 2300 	strex	r3, r2, [r1]
 800c714:	613b      	str	r3, [r7, #16]
   return(result);
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1e6      	bne.n	800c6ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2220      	movs	r2, #32
 800c720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c730:	bf00      	nop
 800c732:	3754      	adds	r7, #84	@ 0x54
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d121      	bne.n	800c792 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	4b27      	ldr	r3, [pc, #156]	@ (800c7f0 <FMC_SDRAM_Init+0xb4>)
 800c754:	4013      	ands	r3, r2
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	6851      	ldr	r1, [r2, #4]
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	6892      	ldr	r2, [r2, #8]
 800c75e:	4311      	orrs	r1, r2
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	68d2      	ldr	r2, [r2, #12]
 800c764:	4311      	orrs	r1, r2
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	6912      	ldr	r2, [r2, #16]
 800c76a:	4311      	orrs	r1, r2
 800c76c:	683a      	ldr	r2, [r7, #0]
 800c76e:	6952      	ldr	r2, [r2, #20]
 800c770:	4311      	orrs	r1, r2
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	6992      	ldr	r2, [r2, #24]
 800c776:	4311      	orrs	r1, r2
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	69d2      	ldr	r2, [r2, #28]
 800c77c:	4311      	orrs	r1, r2
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	6a12      	ldr	r2, [r2, #32]
 800c782:	4311      	orrs	r1, r2
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c788:	430a      	orrs	r2, r1
 800c78a:	431a      	orrs	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	e026      	b.n	800c7e0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	69d9      	ldr	r1, [r3, #28]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	4319      	orrs	r1, r3
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a8:	430b      	orrs	r3, r1
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c7f0 <FMC_SDRAM_Init+0xb4>)
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	6851      	ldr	r1, [r2, #4]
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	6892      	ldr	r2, [r2, #8]
 800c7c0:	4311      	orrs	r1, r2
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	68d2      	ldr	r2, [r2, #12]
 800c7c6:	4311      	orrs	r1, r2
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	6912      	ldr	r2, [r2, #16]
 800c7cc:	4311      	orrs	r1, r2
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	6952      	ldr	r2, [r2, #20]
 800c7d2:	4311      	orrs	r1, r2
 800c7d4:	683a      	ldr	r2, [r7, #0]
 800c7d6:	6992      	ldr	r2, [r2, #24]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	ffff8000 	.word	0xffff8000

0800c7f4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d128      	bne.n	800c858 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	1e59      	subs	r1, r3, #1
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	3b01      	subs	r3, #1
 800c81a:	011b      	lsls	r3, r3, #4
 800c81c:	4319      	orrs	r1, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	3b01      	subs	r3, #1
 800c824:	021b      	lsls	r3, r3, #8
 800c826:	4319      	orrs	r1, r3
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	031b      	lsls	r3, r3, #12
 800c830:	4319      	orrs	r1, r3
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	3b01      	subs	r3, #1
 800c838:	041b      	lsls	r3, r3, #16
 800c83a:	4319      	orrs	r1, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	3b01      	subs	r3, #1
 800c842:	051b      	lsls	r3, r3, #20
 800c844:	4319      	orrs	r1, r3
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	061b      	lsls	r3, r3, #24
 800c84e:	430b      	orrs	r3, r1
 800c850:	431a      	orrs	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	609a      	str	r2, [r3, #8]
 800c856:	e02d      	b.n	800c8b4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	4b19      	ldr	r3, [pc, #100]	@ (800c8c4 <FMC_SDRAM_Timing_Init+0xd0>)
 800c85e:	4013      	ands	r3, r2
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	68d2      	ldr	r2, [r2, #12]
 800c864:	3a01      	subs	r2, #1
 800c866:	0311      	lsls	r1, r2, #12
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	6952      	ldr	r2, [r2, #20]
 800c86c:	3a01      	subs	r2, #1
 800c86e:	0512      	lsls	r2, r2, #20
 800c870:	430a      	orrs	r2, r1
 800c872:	431a      	orrs	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	1e59      	subs	r1, r3, #1
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	011b      	lsls	r3, r3, #4
 800c88e:	4319      	orrs	r1, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	3b01      	subs	r3, #1
 800c896:	021b      	lsls	r3, r3, #8
 800c898:	4319      	orrs	r1, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	041b      	lsls	r3, r3, #16
 800c8a2:	4319      	orrs	r1, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	061b      	lsls	r3, r3, #24
 800c8ac:	430b      	orrs	r3, r1
 800c8ae:	431a      	orrs	r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	ff0f0fff 	.word	0xff0f0fff

0800c8c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	691a      	ldr	r2, [r3, #16]
 800c8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c90c <FMC_SDRAM_SendCommand+0x44>)
 800c8da:	4013      	ands	r3, r2
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	6811      	ldr	r1, [r2, #0]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	6852      	ldr	r2, [r2, #4]
 800c8e4:	4311      	orrs	r1, r2
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	6892      	ldr	r2, [r2, #8]
 800c8ea:	3a01      	subs	r2, #1
 800c8ec:	0152      	lsls	r2, r2, #5
 800c8ee:	4311      	orrs	r1, r2
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	68d2      	ldr	r2, [r2, #12]
 800c8f4:	0252      	lsls	r2, r2, #9
 800c8f6:	430a      	orrs	r2, r1
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	ffc00000 	.word	0xffc00000

0800c910 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	695a      	ldr	r2, [r3, #20]
 800c91e:	4b07      	ldr	r3, [pc, #28]	@ (800c93c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c920:	4013      	ands	r3, r2
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	0052      	lsls	r2, r2, #1
 800c926:	431a      	orrs	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	ffffc001 	.word	0xffffc001

0800c940 <memset>:
 800c940:	4402      	add	r2, r0
 800c942:	4603      	mov	r3, r0
 800c944:	4293      	cmp	r3, r2
 800c946:	d100      	bne.n	800c94a <memset+0xa>
 800c948:	4770      	bx	lr
 800c94a:	f803 1b01 	strb.w	r1, [r3], #1
 800c94e:	e7f9      	b.n	800c944 <memset+0x4>

0800c950 <__libc_init_array>:
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	4d0d      	ldr	r5, [pc, #52]	@ (800c988 <__libc_init_array+0x38>)
 800c954:	4c0d      	ldr	r4, [pc, #52]	@ (800c98c <__libc_init_array+0x3c>)
 800c956:	1b64      	subs	r4, r4, r5
 800c958:	10a4      	asrs	r4, r4, #2
 800c95a:	2600      	movs	r6, #0
 800c95c:	42a6      	cmp	r6, r4
 800c95e:	d109      	bne.n	800c974 <__libc_init_array+0x24>
 800c960:	4d0b      	ldr	r5, [pc, #44]	@ (800c990 <__libc_init_array+0x40>)
 800c962:	4c0c      	ldr	r4, [pc, #48]	@ (800c994 <__libc_init_array+0x44>)
 800c964:	f000 f818 	bl	800c998 <_init>
 800c968:	1b64      	subs	r4, r4, r5
 800c96a:	10a4      	asrs	r4, r4, #2
 800c96c:	2600      	movs	r6, #0
 800c96e:	42a6      	cmp	r6, r4
 800c970:	d105      	bne.n	800c97e <__libc_init_array+0x2e>
 800c972:	bd70      	pop	{r4, r5, r6, pc}
 800c974:	f855 3b04 	ldr.w	r3, [r5], #4
 800c978:	4798      	blx	r3
 800c97a:	3601      	adds	r6, #1
 800c97c:	e7ee      	b.n	800c95c <__libc_init_array+0xc>
 800c97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c982:	4798      	blx	r3
 800c984:	3601      	adds	r6, #1
 800c986:	e7f2      	b.n	800c96e <__libc_init_array+0x1e>
 800c988:	0800e498 	.word	0x0800e498
 800c98c:	0800e498 	.word	0x0800e498
 800c990:	0800e498 	.word	0x0800e498
 800c994:	0800e49c 	.word	0x0800e49c

0800c998 <_init>:
 800c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99a:	bf00      	nop
 800c99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99e:	bc08      	pop	{r3}
 800c9a0:	469e      	mov	lr, r3
 800c9a2:	4770      	bx	lr

0800c9a4 <_fini>:
 800c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a6:	bf00      	nop
 800c9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9aa:	bc08      	pop	{r3}
 800c9ac:	469e      	mov	lr, r3
 800c9ae:	4770      	bx	lr
