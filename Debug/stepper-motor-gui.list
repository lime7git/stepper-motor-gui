
stepper-motor-gui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007964  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007b2c  08007b2c  00008b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b44  08007b44  00009170  2**0
                  CONTENTS
  4 .ARM          00000008  08007b44  08007b44  00008b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b4c  08007b4c  00009170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b4c  08007b4c  00008b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08007b54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000170  08007cc4  00009170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08007cc4  000094f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018035  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec5  00000000  00000000  000211d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  000240a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d6  00000000  00000000  00025650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a40  00000000  00000000  00026726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001798e  00000000  00000000  0004d166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6781  00000000  00000000  00064af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b6c  00000000  00000000  0015b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00160e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000170 	.word	0x20000170
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007b14 	.word	0x08007b14

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000174 	.word	0x20000174
 8000204:	08007b14 	.word	0x08007b14

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	@ 0x30
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b44      	ldr	r3, [pc, #272]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a43      	ldr	r2, [pc, #268]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b41      	ldr	r3, [pc, #260]	@ (8000620 <MX_GPIO_Init+0x128>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	61bb      	str	r3, [r7, #24]
 8000524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000526:	4b3e      	ldr	r3, [pc, #248]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a3d      	ldr	r2, [pc, #244]	@ (8000620 <MX_GPIO_Init+0x128>)
 800052c:	f043 0308 	orr.w	r3, r3, #8
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b3b      	ldr	r3, [pc, #236]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800053e:	4b38      	ldr	r3, [pc, #224]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a37      	ldr	r2, [pc, #220]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b35      	ldr	r3, [pc, #212]	@ (8000620 <MX_GPIO_Init+0x128>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000556:	4b32      	ldr	r3, [pc, #200]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a31      	ldr	r2, [pc, #196]	@ (8000620 <MX_GPIO_Init+0x128>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b2f      	ldr	r3, [pc, #188]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800056e:	4b2c      	ldr	r3, [pc, #176]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a2b      	ldr	r2, [pc, #172]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b29      	ldr	r3, [pc, #164]	@ (8000620 <MX_GPIO_Init+0x128>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a25      	ldr	r2, [pc, #148]	@ (8000620 <MX_GPIO_Init+0x128>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <MX_GPIO_Init+0x128>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2104      	movs	r1, #4
 80005a2:	4820      	ldr	r0, [pc, #128]	@ (8000624 <MX_GPIO_Init+0x12c>)
 80005a4:	f003 fc32 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ae:	481e      	ldr	r0, [pc, #120]	@ (8000628 <MX_GPIO_Init+0x130>)
 80005b0:	f003 fc2c 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b4:	2304      	movs	r3, #4
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4619      	mov	r1, r3
 80005ca:	4816      	ldr	r0, [pc, #88]	@ (8000624 <MX_GPIO_Init+0x12c>)
 80005cc:	f003 fa5a 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	480f      	ldr	r0, [pc, #60]	@ (8000628 <MX_GPIO_Init+0x130>)
 80005ea:	f003 fa4b 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80005ee:	23c0      	movs	r3, #192	@ 0xc0
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005f2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	480a      	ldr	r0, [pc, #40]	@ (800062c <MX_GPIO_Init+0x134>)
 8000604:	f003 fa3e 	bl	8003a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	2017      	movs	r0, #23
 800060e:	f003 f98a 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000612:	2017      	movs	r0, #23
 8000614:	f003 f9a3 	bl	800395e <HAL_NVIC_EnableIRQ>

}
 8000618:	bf00      	nop
 800061a:	3730      	adds	r7, #48	@ 0x30
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40022000 	.word	0x40022000
 8000628:	40020000 	.word	0x40020000
 800062c:	40021800 	.word	0x40021800

08000630 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000634:	f3bf 8f4f 	dsb	sy
}
 8000638:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063a:	f3bf 8f6f 	isb	sy
}
 800063e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <SCB_EnableICache+0x48>)
 8000642:	2200      	movs	r2, #0
 8000644:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000648:	f3bf 8f4f 	dsb	sy
}
 800064c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy
}
 8000652:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <SCB_EnableICache+0x48>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <SCB_EnableICache+0x48>)
 800065a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SCB_EnableDCache+0x84>)
 8000684:	2200      	movs	r2, #0
 8000686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <SCB_EnableDCache+0x84>)
 8000692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000696:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	0b5b      	lsrs	r3, r3, #13
 800069c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006a0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006aa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	015a      	lsls	r2, r3, #5
 80006b0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006b4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006ba:	4911      	ldr	r1, [pc, #68]	@ (8000700 <SCB_EnableDCache+0x84>)
 80006bc:	4313      	orrs	r3, r2
 80006be:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1e5a      	subs	r2, r3, #1
 80006c6:	60ba      	str	r2, [r7, #8]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1ef      	bne.n	80006ac <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	60fa      	str	r2, [r7, #12]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1e5      	bne.n	80006a2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <SCB_EnableDCache+0x84>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <SCB_EnableDCache+0x84>)
 80006e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e8:	f3bf 8f4f 	dsb	sy
}
 80006ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ee:	f3bf 8f6f 	isb	sy
}
 80006f2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000708:	f000 f8de 	bl	80008c8 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800070c:	f7ff ff90 	bl	8000630 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000710:	f7ff ffb4 	bl	800067c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f002 ffaa 	bl	800366c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f848 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff feec 	bl	80004f8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000720:	f000 f904 	bl	800092c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000724:	f000 fa1c 	bl	8000b60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000728:	f000 faea 	bl	8000d00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_Delay(2000);
 800072c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000730:	f002 fffa 	bl	8003728 <HAL_Delay>

	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 1);
 8000734:	2101      	movs	r1, #1
 8000736:	2001      	movs	r0, #1
 8000738:	f002 ff0a 	bl	8003550 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 800073c:	2100      	movs	r1, #0
 800073e:	2001      	movs	r0, #1
 8000740:	f002 fe38 	bl	80033b4 <BSP_MotorControl_Init>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000744:	4815      	ldr	r0, [pc, #84]	@ (800079c <main+0x98>)
 8000746:	f002 fddb 	bl	8003300 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachBusyInterrupt(MyBusyInterruptHandler);
 800074a:	4815      	ldr	r0, [pc, #84]	@ (80007a0 <main+0x9c>)
 800074c:	f002 fdf6 	bl	800333c <BSP_MotorControl_AttachBusyInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8000750:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <main+0xa0>)
 8000752:	f002 fdb7 	bl	80032c4 <BSP_MotorControl_AttachErrorHandler>

	BSP_MotorControl_Move(0, FORWARD, 1600);
 8000756:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800075a:	2101      	movs	r1, #1
 800075c:	2000      	movs	r0, #0
 800075e:	f002 fe49 	bl	80033f4 <BSP_MotorControl_Move>

	/* Wait for the motor of device 0 ends moving */
	BSP_MotorControl_WaitWhileActive(0);
 8000762:	2000      	movs	r0, #0
 8000764:	f002 fe6a 	bl	800343c <BSP_MotorControl_WaitWhileActive>

	/* Wait for 2 seconds */
	HAL_Delay(2500);
 8000768:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800076c:	f002 ffdc 	bl	8003728 <HAL_Delay>

	BSP_MotorControl_Move(0, BACKWARD, 1600);
 8000770:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000774:	2100      	movs	r1, #0
 8000776:	2000      	movs	r0, #0
 8000778:	f002 fe3c 	bl	80033f4 <BSP_MotorControl_Move>

	/* Wait for the motor of device 0 ends moving */
	BSP_MotorControl_WaitWhileActive(0);
 800077c:	2000      	movs	r0, #0
 800077e:	f002 fe5d 	bl	800343c <BSP_MotorControl_WaitWhileActive>

	BSP_MotorControl_CmdSoftHiZ(0);
 8000782:	2000      	movs	r0, #0
 8000784:	f002 fec2 	bl	800350c <BSP_MotorControl_CmdSoftHiZ>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000788:	2102      	movs	r1, #2
 800078a:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <main+0xa4>)
 800078c:	f003 fb57 	bl	8003e3e <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000790:	20fa      	movs	r0, #250	@ 0xfa
 8000792:	f002 ffc9 	bl	8003728 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000796:	bf00      	nop
 8000798:	e7f6      	b.n	8000788 <main+0x84>
 800079a:	bf00      	nop
 800079c:	08000889 	.word	0x08000889
 80007a0:	080008bd 	.word	0x080008bd
 80007a4:	08000921 	.word	0x08000921
 80007a8:	40022000 	.word	0x40022000

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	@ 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 f97e 	bl	8007abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <SystemClock_Config+0xd4>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000880 <SystemClock_Config+0xd4>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	@ 0x40
 80007dc:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <SystemClock_Config+0xd4>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <SystemClock_Config+0xd8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a25      	ldr	r2, [pc, #148]	@ (8000884 <SystemClock_Config+0xd8>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <SystemClock_Config+0xd8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000804:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000814:	2319      	movs	r3, #25
 8000816:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000818:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800081c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fb96 	bl	8003f5c <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000836:	f000 f873 	bl	8000920 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800083a:	f003 fb3f 	bl	8003ebc <HAL_PWREx_EnableOverDrive>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000844:	f000 f86c 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000854:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2107      	movs	r1, #7
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fe1c 	bl	80044a4 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000872:	f000 f855 	bl	8000920 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	@ 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f002 fdf4 	bl	800347c <BSP_MotorControl_CmdGetStatus>
 8000894:	4603      	mov	r3, r0
 8000896:	80fb      	strh	r3, [r7, #6]
  }
  else
  {
    // FORWARD
  }
  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_STOPPED )
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <MyFlagInterruptHandler+0x2c>
  {
       // MOTOR STOPPED
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_ACCELERATION )
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80008a8:	2b20      	cmp	r3, #32
 80008aa:	d003      	beq.n	80008b4 <MyFlagInterruptHandler+0x2c>
  {
           // MOTOR ACCELERATION
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_DECELERATION )
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80008b2:	2b40      	cmp	r3, #64	@ 0x40
  if ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0)
  {
    //overcurrent detection
  }

}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MyBusyInterruptHandler>:
  * @brief  This function is the User handler for the busy interrupt
  * @param  None
  * @retval None
  */
void MyBusyInterruptHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

   if (BSP_MotorControl_CheckBusyHw())
 80008c0:	f002 fe02 	bl	80034c8 <BSP_MotorControl_CheckBusyHw>
   }
   else
   {
     /* To be customized (for example Switch off a LED) */
   }
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008da:	f003 f85b 	bl	8003994 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008de:	2301      	movs	r3, #1
 80008e0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ea:	231f      	movs	r3, #31
 80008ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008ee:	2387      	movs	r3, #135	@ 0x87
 80008f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008f6:	2300      	movs	r3, #0
 80008f8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f879 	bl	8003a04 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000912:	2004      	movs	r0, #4
 8000914:	f003 f856 	bl	80039c4 <HAL_MPU_Enable>

}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_SPI2_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000946:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800094a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_SPI2_Init+0x74>)
 800094e:	2202      	movs	r2, #2
 8000950:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_SPI2_Init+0x74>)
 800095a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800095e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000962:	2220      	movs	r2, #32
 8000964:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_SPI2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_SPI2_Init+0x74>)
 800097a:	2207      	movs	r2, #7
 800097c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_SPI2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_SPI2_Init+0x74>)
 800098c:	f004 fb60 	bl	8005050 <HAL_SPI_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000996:	f7ff ffc3 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000018c 	.word	0x2000018c
 80009a4:	40003800 	.word	0x40003800

080009a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a25      	ldr	r2, [pc, #148]	@ (8000a5c <HAL_SPI_MspInit+0xb4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d144      	bne.n	8000a54 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	4a24      	ldr	r2, [pc, #144]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_SPI_MspInit+0xb8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a12:	2302      	movs	r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a22:	2305      	movs	r3, #5
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <HAL_SPI_MspInit+0xbc>)
 8000a2e:	f003 f829 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a32:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a44:	2305      	movs	r3, #5
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <HAL_SPI_MspInit+0xc0>)
 8000a50:	f003 f818 	bl	8003a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	@ 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40003800 	.word	0x40003800
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40022000 	.word	0x40022000
 8000a68:	40020400 	.word	0x40020400

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f002 fded 	bl	80036e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b16:	2040      	movs	r0, #64	@ 0x40
 8000b18:	f003 f9ac 	bl	8003e74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b1c:	2080      	movs	r0, #128	@ 0x80
 8000b1e:	f003 f9a9 	bl	8003e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <TIM2_IRQHandler+0x10>)
 8000b2e:	f005 fa53 	bl	8005fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000218 	.word	0x20000218

08000b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	@ 0x38
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000b94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb8:	4823      	ldr	r0, [pc, #140]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000bba:	f004 ff25 	bl	8005a08 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bc4:	f7ff feac 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000bd6:	f005 fc3d 	bl	8006454 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000be0:	f7ff fe9e 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000be6:	f004 ff73 	bl	8005ad0 <HAL_TIM_PWM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bf0:	f7ff fe96 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4811      	ldr	r0, [pc, #68]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000c04:	f006 f97c 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c0e:	f7ff fe87 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c12:	2360      	movs	r3, #96	@ 0x60
 8000c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000c2a:	f005 faff 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c34:	f7ff fe74 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <MX_TIM2_Init+0xe8>)
 8000c3a:	f000 f82b 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	@ 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000218 	.word	0x20000218

08000c4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c5c:	d113      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_TIM_Base_MspInit+0x44>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <HAL_TIM_Base_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_TIM_Base_MspInit+0x44>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	201c      	movs	r0, #28
 8000c7c:	f002 fe53 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c80:	201c      	movs	r0, #28
 8000c82:	f002 fe6c 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb4:	d11c      	bne.n	8000cf0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_TIM_MspPostInit+0x64>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <HAL_TIM_MspPostInit+0x64>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_TIM_MspPostInit+0x64>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <HAL_TIM_MspPostInit+0x68>)
 8000cec:	f002 feca 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <MX_USART2_UART_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d44:	f006 f992 	bl	800706c <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f7ff fde7 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200002d4 	.word	0x200002d4
 8000d5c:	40004400 	.word	0x40004400

08000d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0aa      	sub	sp, #168	@ 0xa8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2284      	movs	r2, #132	@ 0x84
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f006 fe9b 	bl	8007abc <memset>
  if(uartHandle->Instance==USART2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <HAL_UART_MspInit+0xb0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d13a      	bne.n	8000e06 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fd67 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f7ff fdba 	bl	8000920 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8000ddc:	2360      	movs	r3, #96	@ 0x60
 8000dde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df4:	2307      	movs	r3, #7
 8000df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <HAL_UART_MspInit+0xb8>)
 8000e02:	f002 fe3f 	bl	8003a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	37a8      	adds	r7, #168	@ 0xa8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40004400 	.word	0x40004400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e20:	f7ff fe8c 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f006 fe3f 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fc59 	bl	8000704 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000e60:	08007b54 	.word	0x08007b54
  ldr r2, =_sbss
 8000e64:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000e68:	200004f8 	.word	0x200004f8

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <Powerstep01_AttachErrorHandler+0x1c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000390 	.word	0x20000390

08000e90 <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000e98:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <Powerstep01_AttachFlagInterrupt+0x1c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000038c 	.word	0x2000038c

08000eb0 <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <Powerstep01_AttachBusyInterrupt+0x1c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000388 	.word	0x20000388

08000ed0 <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <Powerstep01_ReadId+0x14>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200003a2 	.word	0x200003a2

08000ee8 <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <Powerstep01_Init+0x84>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fff4 	bl	8002ee4 <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 8000efc:	f002 f91e 	bl	800313c <Powerstep01_Board_SpiInit>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 8000f06:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8000f0a:	f001 f90b 	bl	8002124 <Powerstep01_ErrorHandler>
  } 
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 8000f0e:	f002 f887 	bl	8003020 <Powerstep01_Board_StepClockInit>
  
  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <Powerstep01_Init+0x84>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 f8ef 	bl	80030fc <Powerstep01_Board_ReleaseReset>
  
  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f001 ffc2 	bl	8002ea8 <Powerstep01_Board_Delay>

  if (pInit == 0)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d106      	bne.n	8000f38 <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h 
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <Powerstep01_Init+0x84>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 f9e7 	bl	8002304 <Powerstep01_SetRegisterToPredefinedValues>
 8000f36:	e006      	b.n	8000f46 <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <Powerstep01_Init+0x84>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fb31 	bl	80025a8 <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <Powerstep01_Init+0x84>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fa00 	bl	8001352 <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 8000f52:	f000 fb8f 	bl	8001674 <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <Powerstep01_Init+0x84>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <Powerstep01_Init+0x84>)
 8000f60:	801a      	strh	r2, [r3, #0]
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200003a2 	.word	0x200003a2

08000f70 <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 8000f74:	f002 f956 	bl	8003224 <Powerstep01_Board_BUSY_PIN_GetState>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 8000f82:	2300      	movs	r3, #0
  }
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 8000f8c:	f002 f956 	bl	800323c <Powerstep01_Board_FLAG_PIN_GetState>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 8000f9a:	2300      	movs	r3, #0
  }
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 8000fb0:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <Powerstep01_CmdGetParam+0x1b0>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f080 80c4 	bcs.w	8001146 <Powerstep01_CmdGetParam+0x1a6>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000fc2:	4b63      	ldr	r3, [pc, #396]	@ (8001150 <Powerstep01_CmdGetParam+0x1b0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8000fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001154 <Powerstep01_CmdGetParam+0x1b4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8000fe2:	f001 ff75 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	e030      	b.n	8001052 <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8000ff0:	4a59      	ldr	r2, [pc, #356]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8000ffa:	4a57      	ldr	r2, [pc, #348]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4413      	add	r3, r2
 8001000:	3301      	adds	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001006:	4a54      	ldr	r2, [pc, #336]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4413      	add	r3, r2
 800100c:	3302      	adds	r3, #2
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8001012:	4a51      	ldr	r2, [pc, #324]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4413      	add	r3, r2
 8001018:	3303      	adds	r3, #3
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 800101e:	4a4f      	ldr	r2, [pc, #316]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4413      	add	r3, r2
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 8001028:	4a4c      	ldr	r2, [pc, #304]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4413      	add	r3, r2
 800102e:	3301      	adds	r3, #1
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 8001034:	4a49      	ldr	r2, [pc, #292]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4413      	add	r3, r2
 800103a:	3302      	adds	r3, #2
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;    
 8001040:	4a46      	ldr	r2, [pc, #280]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4413      	add	r3, r2
 8001046:	3303      	adds	r3, #3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	3301      	adds	r3, #1
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b3f      	ldr	r3, [pc, #252]	@ (8001150 <Powerstep01_CmdGetParam+0x1b0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4293      	cmp	r3, r2
 800105e:	d3c7      	bcc.n	8000ff0 <Powerstep01_CmdGetParam+0x50>
      }
      switch (param)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b1b      	cmp	r3, #27
 8001064:	bf8c      	ite	hi
 8001066:	2301      	movhi	r3, #1
 8001068:	2300      	movls	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d12c      	bne.n	80010ca <Powerstep01_CmdGetParam+0x12a>
 8001070:	2201      	movs	r2, #1
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	409a      	lsls	r2, r3
 8001076:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <Powerstep01_CmdGetParam+0x1c0>)
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	bf14      	ite	ne
 800107e:	2301      	movne	r3, #1
 8001080:	2300      	moveq	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d113      	bne.n	80010b0 <Powerstep01_CmdGetParam+0x110>
 8001088:	f002 031a 	and.w	r3, r2, #26
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d017      	beq.n	80010ca <Powerstep01_CmdGetParam+0x12a>
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	7b7b      	ldrb	r3, [r7, #13]
 80010a0:	f042 0220 	orr.w	r2, r2, #32
 80010a4:	b2d1      	uxtb	r1, r2
 80010a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 80010a8:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 80010aa:	2303      	movs	r3, #3
 80010ac:	73fb      	strb	r3, [r7, #15]
          break;
 80010ae:	e018      	b.n	80010e2 <Powerstep01_CmdGetParam+0x142>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
 80010b6:	f042 0220 	orr.w	r2, r2, #32
 80010ba:	b2d1      	uxtb	r1, r2
 80010bc:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 80010be:	4413      	add	r3, r2
 80010c0:	460a      	mov	r2, r1
 80010c2:	705a      	strb	r2, [r3, #1]
          maxArgumentNbBytes = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	73fb      	strb	r3, [r7, #15]
          break;
 80010c8:	e00b      	b.n	80010e2 <Powerstep01_CmdGetParam+0x142>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	f042 0220 	orr.w	r2, r2, #32
 80010d4:	b2d1      	uxtb	r1, r2
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 80010d8:	4413      	add	r3, r2
 80010da:	460a      	mov	r2, r1
 80010dc:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80010e2:	f001 feec 	bl	8002ebe <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <Powerstep01_CmdGetParam+0x1b4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f47f af70 	bne.w	8000fd6 <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f1c3 0303 	rsb	r3, r3, #3
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	e00c      	b.n	800111a <Powerstep01_CmdGetParam+0x17a>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <Powerstep01_CmdGetParam+0x1b8>)
 8001104:	441a      	add	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4914      	ldr	r1, [pc, #80]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 800110a:	440b      	add	r3, r1
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f001 fc46 	bl	80029a0 <Powerstep01_WriteBytes>
         loop++)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	3301      	adds	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d9ef      	bls.n	8001100 <Powerstep01_CmdGetParam+0x160>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001120:	7b7b      	ldrb	r3, [r7, #13]
 8001122:	4a0e      	ldr	r2, [pc, #56]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 8001124:	4413      	add	r3, r2
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	041a      	lsls	r2, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	490b      	ldr	r1, [pc, #44]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 800112e:	440b      	add	r3, r1
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	021b      	lsls	r3, r3, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001134:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);    
 8001136:	7b7a      	ldrb	r2, [r7, #13]
 8001138:	4908      	ldr	r1, [pc, #32]	@ (800115c <Powerstep01_CmdGetParam+0x1bc>)
 800113a:	440a      	add	r2, r1
 800113c:	78d2      	ldrb	r2, [r2, #3]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8001142:	f001 fec5 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 8001146:	697b      	ldr	r3, [r7, #20]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000394 	.word	0x20000394
 8001154:	200003a0 	.word	0x200003a0
 8001158:	20000398 	.word	0x20000398
 800115c:	2000039c 	.word	0x2000039c
 8001160:	0d2021e4 	.word	0x0d2021e4

08001164 <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 8001172:	4b45      	ldr	r3, [pc, #276]	@ (8001288 <Powerstep01_CmdGetStatus+0x124>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	429a      	cmp	r2, r3
 800117c:	d27e      	bcs.n	800127c <Powerstep01_CmdGetStatus+0x118>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800117e:	4b42      	ldr	r3, [pc, #264]	@ (8001288 <Powerstep01_CmdGetStatus+0x124>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3b01      	subs	r3, #1
 800118c:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <Powerstep01_CmdGetStatus+0x128>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <Powerstep01_CmdGetStatus+0x42>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800119e:	f001 fe97 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	e030      	b.n	800120e <Powerstep01_CmdGetStatus+0xaa>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80011ac:	4a38      	ldr	r2, [pc, #224]	@ (8001290 <Powerstep01_CmdGetStatus+0x12c>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4413      	add	r3, r2
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80011b6:	4a36      	ldr	r2, [pc, #216]	@ (8001290 <Powerstep01_CmdGetStatus+0x12c>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4413      	add	r3, r2
 80011bc:	3301      	adds	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80011c2:	4a33      	ldr	r2, [pc, #204]	@ (8001290 <Powerstep01_CmdGetStatus+0x12c>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	3302      	adds	r3, #2
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80011ce:	4a30      	ldr	r2, [pc, #192]	@ (8001290 <Powerstep01_CmdGetStatus+0x12c>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4413      	add	r3, r2
 80011d4:	3303      	adds	r3, #3
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 80011da:	4a2e      	ldr	r2, [pc, #184]	@ (8001294 <Powerstep01_CmdGetStatus+0x130>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 80011e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001294 <Powerstep01_CmdGetStatus+0x130>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4413      	add	r3, r2
 80011ea:	3301      	adds	r3, #1
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 80011f0:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <Powerstep01_CmdGetStatus+0x130>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	3302      	adds	r3, #2
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;       
 80011fc:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <Powerstep01_CmdGetStatus+0x130>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4413      	add	r3, r2
 8001202:	3303      	adds	r3, #3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	3301      	adds	r3, #1
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <Powerstep01_CmdGetStatus+0x124>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4293      	cmp	r3, r2
 800121a:	d3c7      	bcc.n	80011ac <Powerstep01_CmdGetStatus+0x48>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <Powerstep01_CmdGetStatus+0x12c>)
 8001220:	21d0      	movs	r1, #208	@ 0xd0
 8001222:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001224:	f001 fe4b 	bl	8002ebe <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <Powerstep01_CmdGetStatus+0x128>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1ad      	bne.n	8001192 <Powerstep01_CmdGetStatus+0x2e>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	e00c      	b.n	8001256 <Powerstep01_CmdGetStatus+0xf2>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <Powerstep01_CmdGetStatus+0x12c>)
 8001240:	441a      	add	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4913      	ldr	r1, [pc, #76]	@ (8001294 <Powerstep01_CmdGetStatus+0x130>)
 8001246:	440b      	add	r3, r1
 8001248:	4619      	mov	r1, r3
 800124a:	4610      	mov	r0, r2
 800124c:	f001 fba8 	bl	80029a0 <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	3301      	adds	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d9ef      	bls.n	800123c <Powerstep01_CmdGetStatus+0xd8>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <Powerstep01_CmdGetStatus+0x130>)
 8001260:	4413      	add	r3, r2
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	490a      	ldr	r1, [pc, #40]	@ (8001294 <Powerstep01_CmdGetStatus+0x130>)
 800126c:	440b      	add	r3, r1
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 8001278:	f001 fe2a 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 800127c:	8afb      	ldrh	r3, [r7, #22]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000394 	.word	0x20000394
 800128c:	200003a0 	.word	0x200003a0
 8001290:	20000398 	.word	0x20000398
 8001294:	2000039c 	.word	0x2000039c

08001298 <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2200      	movs	r2, #0
 80012a6:	2170      	movs	r1, #112	@ 0x70
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 ff67 	bl	800217c <Powerstep01_SendCommand>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2200      	movs	r2, #0
 80012c4:	2178      	movs	r1, #120	@ 0x78
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 ff58 	bl	800217c <Powerstep01_SendCommand>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2160      	movs	r1, #96	@ 0x60
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 ff48 	bl	800217c <Powerstep01_SendCommand>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	603a      	str	r2, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	460b      	mov	r3, r1
 8001302:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800130a:	b2d9      	uxtb	r1, r3
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 ff33 	bl	800217c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	460b      	mov	r3, r1
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	4613      	mov	r3, r2
 8001330:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	4313      	orrs	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f063 037d 	orn	r3, r3, #125	@ 0x7d
 800133e:	b2d9      	uxtb	r1, r3
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 ff19 	bl	800217c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2200      	movs	r2, #0
 8001360:	21a8      	movs	r1, #168	@ 0xa8
 8001362:	4618      	mov	r0, r3
 8001364:	f000 ff0a 	bl	800217c <Powerstep01_SendCommand>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2200      	movs	r2, #0
 800137e:	21b8      	movs	r1, #184	@ 0xb8
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fefb 	bl	800217c <Powerstep01_SendCommand>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	603a      	str	r2, [r7, #0]
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	460b      	mov	r3, r1
 800139c:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a4:	b2d9      	uxtb	r1, r3
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fee6 	bl	800217c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fed7 	bl	800217c <Powerstep01_SendCommand>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	460b      	mov	r3, r1
 80013e2:	71bb      	strb	r3, [r7, #6]
 80013e4:	4613      	mov	r3, r2
 80013e6:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 80013e8:	79ba      	ldrb	r2, [r7, #6]
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f063 036d 	orn	r3, r3, #109	@ 0x6d
 80013f4:	b2d9      	uxtb	r1, r3
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2200      	movs	r2, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 febe 	bl	800217c <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2200      	movs	r2, #0
 8001416:	21c0      	movs	r1, #192	@ 0xc0
 8001418:	4618      	mov	r0, r3
 800141a:	f000 feaf 	bl	800217c <Powerstep01_SendCommand>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2200      	movs	r2, #0
 8001434:	21d8      	movs	r1, #216	@ 0xd8
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fea0 	bl	800217c <Powerstep01_SendCommand>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	603a      	str	r2, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	460b      	mov	r3, r1
 8001452:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800145a:	b2d9      	uxtb	r1, r3
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fe8b 	bl	800217c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 800147e:	4b5e      	ldr	r3, [pc, #376]	@ (80015f8 <Powerstep01_CmdSetParam+0x188>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	429a      	cmp	r2, r3
 8001488:	f080 80b2 	bcs.w	80015f0 <Powerstep01_CmdSetParam+0x180>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001490:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <Powerstep01_CmdSetParam+0x188>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3b01      	subs	r3, #1
 800149e:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80014a4:	4b55      	ldr	r3, [pc, #340]	@ (80015fc <Powerstep01_CmdSetParam+0x18c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80014aa:	7cbb      	ldrb	r3, [r7, #18]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80014b0:	f001 fd0e 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e019      	b.n	80014f2 <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80014be:	4a50      	ldr	r2, [pc, #320]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	4413      	add	r3, r2
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80014c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	4413      	add	r3, r2
 80014ce:	3301      	adds	r3, #1
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80014d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	4413      	add	r3, r2
 80014da:	3302      	adds	r3, #2
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80014e0:	4a47      	ldr	r2, [pc, #284]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	4413      	add	r3, r2
 80014e6:	3303      	adds	r3, #3
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <Powerstep01_CmdSetParam+0x188>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d3de      	bcc.n	80014be <Powerstep01_CmdSetParam+0x4e>
      }
      switch (param)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b1a      	cmp	r3, #26
 8001504:	bf8c      	ite	hi
 8001506:	2301      	movhi	r3, #1
 8001508:	2300      	movls	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d13e      	bne.n	800158e <Powerstep01_CmdSetParam+0x11e>
 8001510:	2201      	movs	r2, #1
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	409a      	lsls	r2, r3
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <Powerstep01_CmdSetParam+0x194>)
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d120      	bne.n	800156a <Powerstep01_CmdSetParam+0xfa>
 8001528:	f002 030a 	and.w	r3, r2, #10
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d029      	beq.n	800158e <Powerstep01_CmdSetParam+0x11e>
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800153a:	7c7b      	ldrb	r3, [r7, #17]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	4a2f      	ldr	r2, [pc, #188]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 8001542:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	0c1a      	lsrs	r2, r3, #16
 8001548:	7c7b      	ldrb	r3, [r7, #17]
 800154a:	b2d1      	uxtb	r1, r2
 800154c:	4a2c      	ldr	r2, [pc, #176]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 800154e:	4413      	add	r3, r2
 8001550:	460a      	mov	r2, r1
 8001552:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	0a1a      	lsrs	r2, r3, #8
 8001558:	7c7b      	ldrb	r3, [r7, #17]
 800155a:	b2d1      	uxtb	r1, r2
 800155c:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 800155e:	4413      	add	r3, r2
 8001560:	460a      	mov	r2, r1
 8001562:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 3;
 8001564:	2303      	movs	r3, #3
 8001566:	74fb      	strb	r3, [r7, #19]
          break;
 8001568:	e01a      	b.n	80015a0 <Powerstep01_CmdSetParam+0x130>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800156a:	7c7b      	ldrb	r3, [r7, #17]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	b2d1      	uxtb	r1, r2
 8001570:	4a23      	ldr	r2, [pc, #140]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 8001572:	4413      	add	r3, r2
 8001574:	460a      	mov	r2, r1
 8001576:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0a1a      	lsrs	r2, r3, #8
 800157c:	7c7b      	ldrb	r3, [r7, #17]
 800157e:	b2d1      	uxtb	r1, r2
 8001580:	4a1f      	ldr	r2, [pc, #124]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 8001582:	4413      	add	r3, r2
 8001584:	460a      	mov	r2, r1
 8001586:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 2;
 8001588:	2302      	movs	r3, #2
 800158a:	74fb      	strb	r3, [r7, #19]
          break;
 800158c:	e008      	b.n	80015a0 <Powerstep01_CmdSetParam+0x130>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800158e:	7c7b      	ldrb	r3, [r7, #17]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	4a1a      	ldr	r2, [pc, #104]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 8001596:	4413      	add	r3, r2
 8001598:	460a      	mov	r2, r1
 800159a:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80015a0:	7c7b      	ldrb	r3, [r7, #17]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	b2d1      	uxtb	r1, r2
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	70da      	strb	r2, [r3, #3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80015ae:	f001 fc86 	bl	8002ebe <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <Powerstep01_CmdSetParam+0x18c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f47f af71 	bne.w	80014a4 <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 80015c2:	7cfb      	ldrb	r3, [r7, #19]
 80015c4:	f1c3 0303 	rsb	r3, r3, #3
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e00c      	b.n	80015e6 <Powerstep01_CmdSetParam+0x176>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001600 <Powerstep01_CmdSetParam+0x190>)
 80015d0:	441a      	add	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	490c      	ldr	r1, [pc, #48]	@ (8001608 <Powerstep01_CmdSetParam+0x198>)
 80015d6:	440b      	add	r3, r1
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f001 f9e0 	bl	80029a0 <Powerstep01_WriteBytes>
         loop++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d9ef      	bls.n	80015cc <Powerstep01_CmdSetParam+0x15c>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80015ec:	f001 fc70 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000394 	.word	0x20000394
 80015fc:	200003a0 	.word	0x200003a0
 8001600:	20000398 	.word	0x20000398
 8001604:	052021e4 	.word	0x052021e4
 8001608:	2000039c 	.word	0x2000039c

0800160c <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2200      	movs	r2, #0
 800161a:	21a0      	movs	r1, #160	@ 0xa0
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fdad 	bl	800217c <Powerstep01_SendCommand>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2200      	movs	r2, #0
 8001638:	21b0      	movs	r1, #176	@ 0xb0
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd9e 	bl	800217c <Powerstep01_SendCommand>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 800165e:	b2d9      	uxtb	r1, r3
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2200      	movs	r2, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fd89 	bl	800217c <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	e028      	b.n	80016d2 <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8001684:	21d0      	movs	r1, #208	@ 0xd0
 8001686:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 800168c:	4413      	add	r3, r2
 800168e:	2200      	movs	r2, #0
 8001690:	705a      	strb	r2, [r3, #1]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	709a      	strb	r2, [r3, #2]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4a1c      	ldr	r2, [pc, #112]	@ (8001710 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 80016a0:	4413      	add	r3, r2
 80016a2:	2200      	movs	r2, #0
 80016a4:	70da      	strb	r2, [r3, #3]
     spiRxBursts[0][loop] = 0;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001714 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80016aa:	2100      	movs	r1, #0
 80016ac:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4a18      	ldr	r2, [pc, #96]	@ (8001714 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80016b2:	4413      	add	r3, r2
 80016b4:	2200      	movs	r2, #0
 80016b6:	705a      	strb	r2, [r3, #1]
     spiRxBursts[2][loop] = 0;
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4a16      	ldr	r2, [pc, #88]	@ (8001714 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80016bc:	4413      	add	r3, r2
 80016be:	2200      	movs	r2, #0
 80016c0:	709a      	strb	r2, [r3, #2]
     spiRxBursts[3][loop] = 0;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4a13      	ldr	r2, [pc, #76]	@ (8001714 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80016c6:	4413      	add	r3, r2
 80016c8:	2200      	movs	r2, #0
 80016ca:	70da      	strb	r2, [r3, #3]
  for (loop = 0; loop < numberOfDevices; loop++)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	3301      	adds	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3d0      	bcc.n	8001680 <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0; 
 80016de:	2300      	movs	r3, #0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	e00c      	b.n	80016fe <Powerstep01_FetchAndClearAllStatus+0x8a>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 80016e8:	441a      	add	r2, r3
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4909      	ldr	r1, [pc, #36]	@ (8001714 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 80016ee:	440b      	add	r3, r1
 80016f0:	4619      	mov	r1, r3
 80016f2:	4610      	mov	r0, r2
 80016f4:	f001 f954 	bl	80029a0 <Powerstep01_WriteBytes>
       loop++)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	3301      	adds	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d9ef      	bls.n	80016e4 <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000398 	.word	0x20000398
 8001714:	2000039c 	.word	0x2000039c
 8001718:	20000394 	.word	0x20000394

0800171c <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <Powerstep01_GetFetchedStatus+0x54>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	429a      	cmp	r2, r3
 8001734:	d215      	bcs.n	8001762 <Powerstep01_GetFetchedStatus+0x46>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <Powerstep01_GetFetchedStatus+0x54>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <Powerstep01_GetFetchedStatus+0x58>)
 800174a:	4413      	add	r3, r2
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	7b7b      	ldrb	r3, [r7, #13]
 8001754:	4907      	ldr	r1, [pc, #28]	@ (8001774 <Powerstep01_GetFetchedStatus+0x58>)
 8001756:	440b      	add	r3, r1
 8001758:	789b      	ldrb	r3, [r3, #2]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21b      	sxth	r3, r3
 8001760:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 8001762:	89fb      	ldrh	r3, [r7, #14]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	20000394 	.word	0x20000394
 8001774:	2000039c 	.word	0x2000039c

08001778 <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 800177c:	4b02      	ldr	r3, [pc, #8]	@ (8001788 <Powerstep01_GetMotorHandle+0x10>)
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	20000004 	.word	0x20000004

0800178c <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <Powerstep01_GetFwVersion+0x10>)
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	00010500 	.word	0x00010500

080017a0 <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2103      	movs	r1, #3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fbf6 	bl	8000fa0 <Powerstep01_CmdGetParam>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fc7e 	bl	80020b8 <Powerstep01_ConvertPosition>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <Powerstep01_GetNbDevices+0x14>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000394 	.word	0x20000394

080017e0 <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2116      	movs	r1, #22
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fbd5 	bl	8000fa0 <Powerstep01_CmdGetParam>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fbc7 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001812:	60f8      	str	r0, [r7, #12]
  float value;
  switch (param)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	2b14      	cmp	r3, #20
 800181a:	f200 8090 	bhi.w	800193e <Powerstep01_GetAnalogValue+0x15e>
 800181e:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <Powerstep01_GetAnalogValue+0x44>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001879 	.word	0x08001879
 8001828:	0800193f 	.word	0x0800193f
 800182c:	08001879 	.word	0x08001879
 8001830:	08001899 	.word	0x08001899
 8001834:	0800188d 	.word	0x0800188d
 8001838:	0800188d 	.word	0x0800188d
 800183c:	080018a5 	.word	0x080018a5
 8001840:	080018b1 	.word	0x080018b1
 8001844:	080018fd 	.word	0x080018fd
 8001848:	080018fd 	.word	0x080018fd
 800184c:	080018fd 	.word	0x080018fd
 8001850:	080018fd 	.word	0x080018fd
 8001854:	080018d9 	.word	0x080018d9
 8001858:	0800191b 	.word	0x0800191b
 800185c:	08001921 	.word	0x08001921
 8001860:	08001921 	.word	0x08001921
 8001864:	080018e5 	.word	0x080018e5
 8001868:	0800193f 	.word	0x0800193f
 800186c:	080018f1 	.word	0x080018f1
 8001870:	080018f1 	.word	0x080018f1
 8001874:	080018c5 	.word	0x080018c5
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 fc1d 	bl	80020b8 <Powerstep01_ConvertPosition>
 800187e:	ee07 0a90 	vmov	s15, r0
 8001882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001886:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 800188a:	e061      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f001 f8c9 	bl	8002a24 <Powerstep01_AccDec_RegVal_to_Steps_s2>
 8001892:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001896:	e05b      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f001 fa45 	bl	8002d28 <Powerstep01_Speed_RegVal_to_Steps_s>
 800189e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80018a2:	e055      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f001 f9f7 	bl	8002c98 <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 80018aa:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80018ae:	e04f      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b6:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f001 fa1f 	bl	8002cfc <Powerstep01_MinSpd_RegVal_to_Steps_s>
 80018be:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 80018c2:	e045      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ca:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f001 f90b 	bl	8002ae8 <Powerstep01_FSSpd_RegVal_to_Steps_s>
 80018d2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80018d6:	e03b      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f001 f93d 	bl	8002b58 <Powerstep01_IntSpd_RegVal_to_Steps_s>
 80018de:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80018e2:	e035      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f001 f96f 	bl	8002bc8 <Powerstep01_KTherm_RegVal_to_Comp>
 80018ea:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80018ee:	e02f      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f001 fa53 	bl	8002d9c <Powerstep01_StallOcd_RegVal_to_Th>
 80018f6:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80018fa:	e029      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 80018fc:	7cfb      	ldrb	r3, [r7, #19]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <Powerstep01_GetAnalogValue+0x12e>
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f001 f998 	bl	8002c38 <Powerstep01_Kval_RegVal_to_Perc>
 8001908:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 800190c:	e020      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f001 fa80 	bl	8002e14 <Powerstep01_Tval_RegVal_to_RefVoltage>
 8001914:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001918:	e01a      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 800191a:	7cfb      	ldrb	r3, [r7, #19]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d016      	beq.n	800194e <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 8001920:	7cfb      	ldrb	r3, [r7, #19]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <Powerstep01_GetAnalogValue+0x152>
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f001 f8b0 	bl	8002a8c <Powerstep01_BEMFslope_RegVal_to_Perc>
 800192c:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 8001930:	e00e      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f001 faa3 	bl	8002e7e <Powerstep01_Tmin_RegVal_to_Time>
 8001938:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800193c:	e008      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001948:	edc7 7a05 	vstr	s15, [r7, #20]
 800194c:	e000      	b.n	8001950 <Powerstep01_GetAnalogValue+0x170>
        break;
 800194e:	bf00      	nop
  }
  return value;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	ee07 3a90 	vmov	s15, r3
}
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2101      	movs	r1, #1
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb16 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001974:	4603      	mov	r3, r0
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fb9e 	bl	80020b8 <Powerstep01_ConvertPosition>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fbe6 	bl	8001164 <Powerstep01_CmdGetStatus>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 80019a6:	2300      	movs	r3, #0
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	603a      	str	r2, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	460b      	mov	r3, r1
 80019be:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <Powerstep01_QueueCommands+0xd8>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d257      	bcs.n	8001a7c <Powerstep01_QueueCommands+0xcc>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <Powerstep01_QueueCommands+0xd8>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 80019e2:	2b8a      	cmp	r3, #138	@ 0x8a
 80019e4:	d01a      	beq.n	8001a1c <Powerstep01_QueueCommands+0x6c>
 80019e6:	2b8a      	cmp	r3, #138	@ 0x8a
 80019e8:	dc35      	bgt.n	8001a56 <Powerstep01_QueueCommands+0xa6>
 80019ea:	2b82      	cmp	r3, #130	@ 0x82
 80019ec:	d016      	beq.n	8001a1c <Powerstep01_QueueCommands+0x6c>
 80019ee:	2b82      	cmp	r3, #130	@ 0x82
 80019f0:	dc31      	bgt.n	8001a56 <Powerstep01_QueueCommands+0xa6>
 80019f2:	2b40      	cmp	r3, #64	@ 0x40
 80019f4:	d012      	beq.n	8001a1c <Powerstep01_QueueCommands+0x6c>
 80019f6:	2b40      	cmp	r3, #64	@ 0x40
 80019f8:	db2d      	blt.n	8001a56 <Powerstep01_QueueCommands+0xa6>
 80019fa:	2b68      	cmp	r3, #104	@ 0x68
 80019fc:	dc2b      	bgt.n	8001a56 <Powerstep01_QueueCommands+0xa6>
 80019fe:	2b50      	cmp	r3, #80	@ 0x50
 8001a00:	db29      	blt.n	8001a56 <Powerstep01_QueueCommands+0xa6>
 8001a02:	3b50      	subs	r3, #80	@ 0x50
 8001a04:	4a21      	ldr	r2, [pc, #132]	@ (8001a8c <Powerstep01_QueueCommands+0xdc>)
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01c      	beq.n	8001a56 <Powerstep01_QueueCommands+0xa6>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	491c      	ldr	r1, [pc, #112]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a20:	79ba      	ldrb	r2, [r7, #6]
 8001a22:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	141a      	asrs	r2, r3, #16
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	b2d1      	uxtb	r1, r2
 8001a2c:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	460a      	mov	r2, r1
 8001a32:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	121a      	asrs	r2, r3, #8
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	b2d1      	uxtb	r1, r2
 8001a3c:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	460a      	mov	r2, r1
 8001a42:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	b2d1      	uxtb	r1, r2
 8001a4a:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	460a      	mov	r2, r1
 8001a50:	70da      	strb	r2, [r3, #3]
       break;
 8001a52:	bf00      	nop
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[3][spiIndex] = command;
    }
  }
}
 8001a54:	e012      	b.n	8001a7c <Powerstep01_QueueCommands+0xcc>
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a62:	4413      	add	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a6c:	4413      	add	r3, r2
 8001a6e:	2200      	movs	r2, #0
 8001a70:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = command;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <Powerstep01_QueueCommands+0xe0>)
 8001a76:	4413      	add	r3, r2
 8001a78:	79ba      	ldrb	r2, [r7, #6]
 8001a7a:	70da      	strb	r2, [r3, #3]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000394 	.word	0x20000394
 8001a8c:	01010001 	.word	0x01010001
 8001a90:	20000398 	.word	0x20000398

08001a94 <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	211b      	movs	r1, #27
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fa7c 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29b      	uxth	r3, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fb1b 	bl	80030fc <Powerstep01_Board_ReleaseReset>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fb1e 	bl	800311c <Powerstep01_Board_Reset>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	2b07      	cmp	r3, #7
 8001afc:	d82a      	bhi.n	8001b54 <Powerstep01_SelectStepMode+0x6c>
 8001afe:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <Powerstep01_SelectStepMode+0x1c>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b25 	.word	0x08001b25
 8001b08:	08001b2b 	.word	0x08001b2b
 8001b0c:	08001b31 	.word	0x08001b31
 8001b10:	08001b37 	.word	0x08001b37
 8001b14:	08001b3d 	.word	0x08001b3d
 8001b18:	08001b43 	.word	0x08001b43
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001b4f 	.word	0x08001b4f
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
      break;
 8001b28:	e016      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
      break;    
 8001b2e:	e013      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 8001b30:	2302      	movs	r3, #2
 8001b32:	73fb      	strb	r3, [r7, #15]
      break;        
 8001b34:	e010      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8001b36:	2303      	movs	r3, #3
 8001b38:	73fb      	strb	r3, [r7, #15]
      break;
 8001b3a:	e00d      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	73fb      	strb	r3, [r7, #15]
      break;        
 8001b40:	e00a      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 8001b42:	2305      	movs	r3, #5
 8001b44:	73fb      	strb	r3, [r7, #15]
      break;
 8001b46:	e007      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 8001b48:	2306      	movs	r3, #6
 8001b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4c:	e004      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	73fb      	strb	r3, [r7, #15]
      break;
 8001b52:	e001      	b.n	8001b58 <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 8001b54:	2300      	movs	r3, #0
 8001b56:	e01c      	b.n	8001b92 <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fbf9 	bl	8001352 <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2116      	movs	r1, #22
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fa1b 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f023 0307 	bic.w	r3, r3, #7
 8001b72:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 8001b74:	7bba      	ldrb	r2, [r7, #14]
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2116      	movs	r1, #22
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fc74 	bl	8001470 <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fc4b 	bl	8001426 <Powerstep01_CmdResetPos>
  
  return TRUE;
 8001b90:	2301      	movs	r3, #1
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop

08001b9c <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0; 
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	e00c      	b.n	8001bc2 <Powerstep01_SendQueuedCommands+0x26>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <Powerstep01_SendQueuedCommands+0x38>)
 8001bac:	441a      	add	r2, r3
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4909      	ldr	r1, [pc, #36]	@ (8001bd8 <Powerstep01_SendQueuedCommands+0x3c>)
 8001bb2:	440b      	add	r3, r1
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 fef2 	bl	80029a0 <Powerstep01_WriteBytes>
       loop++)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d9ef      	bls.n	8001ba8 <Powerstep01_SendQueuedCommands+0xc>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000398 	.word	0x20000398
 8001bd8:	2000039c 	.word	0x2000039c

08001bdc <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f9d7 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001bf2:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fc36 	bl	8001470 <Powerstep01_CmdSetParam>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fc26 	bl	8001470 <Powerstep01_CmdSetParam>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d804      	bhi.n	8001c46 <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 8001c3c:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <Powerstep01_SetNbDevices+0x28>)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 8001c46:	2300      	movs	r3, #0
  }
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	20000394 	.word	0x20000394

08001c58 <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2116      	movs	r1, #22
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f995 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 8001c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d507      	bpl.n	8001ca6 <Powerstep01_SetAnalogValue+0x4e>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d004      	beq.n	8001ca6 <Powerstep01_SetAnalogValue+0x4e>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d001      	beq.n	8001ca6 <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	74fb      	strb	r3, [r7, #19]
  }
  switch (param)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	2b14      	cmp	r3, #20
 8001cac:	f200 8191 	bhi.w	8001fd2 <Powerstep01_SetAnalogValue+0x37a>
 8001cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <Powerstep01_SetAnalogValue+0x60>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001d73 	.word	0x08001d73
 8001cbc:	08001d0d 	.word	0x08001d0d
 8001cc0:	08001d73 	.word	0x08001d73
 8001cc4:	08001fd3 	.word	0x08001fd3
 8001cc8:	08001de7 	.word	0x08001de7
 8001ccc:	08001de7 	.word	0x08001de7
 8001cd0:	08001e0d 	.word	0x08001e0d
 8001cd4:	08001e33 	.word	0x08001e33
 8001cd8:	08001f27 	.word	0x08001f27
 8001cdc:	08001f27 	.word	0x08001f27
 8001ce0:	08001f27 	.word	0x08001f27
 8001ce4:	08001f27 	.word	0x08001f27
 8001ce8:	08001ea3 	.word	0x08001ea3
 8001cec:	08001f75 	.word	0x08001f75
 8001cf0:	08001f81 	.word	0x08001f81
 8001cf4:	08001f81 	.word	0x08001f81
 8001cf8:	08001ec9 	.word	0x08001ec9
 8001cfc:	08001fd3 	.word	0x08001fd3
 8001d00:	08001f01 	.word	0x08001f01
 8001d04:	08001f01 	.word	0x08001f01
 8001d08:	08001e6b 	.word	0x08001e6b
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 8001d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d10:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8001ff4 <Powerstep01_SetAnalogValue+0x39c>
 8001d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	dc1c      	bgt.n	8001d58 <Powerstep01_SetAnalogValue+0x100>
 8001d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	d018      	beq.n	8001d5e <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 8001d2c:	2116      	movs	r1, #22
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff f936 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001d34:	4603      	mov	r3, r0
 8001d36:	43db      	mvns	r3, r3
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d502      	bpl.n	8001d5e <Powerstep01_SetAnalogValue+0x106>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 8001d5c:	e13b      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 8001d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d66:	ee17 3a90 	vmov	r3, s15
 8001d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6e:	617b      	str	r3, [r7, #20]
      break;        
 8001d70:	e131      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 8001d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	d51c      	bpl.n	8001dba <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 8001d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d84:	eef1 7a67 	vneg.f32	s15, s15
 8001d88:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 8001d8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d9c:	d80a      	bhi.n	8001db4 <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8001d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da6:	ee17 3a90 	vmov	r3, s15
 8001daa:	425b      	negs	r3, r3
 8001dac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001db0:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 8001db2:	e110      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 8001db4:	2300      	movs	r3, #0
 8001db6:	74fb      	strb	r3, [r7, #19]
      break;
 8001db8:	e10d      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 8001dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc2:	ee17 3a90 	vmov	r3, s15
 8001dc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dca:	d209      	bcs.n	8001de0 <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8001dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd4:	ee17 3a90 	vmov	r3, s15
 8001dd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ddc:	617b      	str	r3, [r7, #20]
      break;
 8001dde:	e0fa      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8001de0:	2300      	movs	r3, #0
 8001de2:	74fb      	strb	r3, [r7, #19]
      break;
 8001de4:	e0f7      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 8001de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dea:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001ff8 <Powerstep01_SetAnalogValue+0x3a0>
 8001dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	dd02      	ble.n	8001dfe <Powerstep01_SetAnalogValue+0x1a6>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 8001dfc:	e0eb      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 8001dfe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e02:	f000 fdf3 	bl	80029ec <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8001e06:	4603      	mov	r3, r0
 8001e08:	617b      	str	r3, [r7, #20]
      break;
 8001e0a:	e0e4      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 8001e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e10:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001ffc <Powerstep01_SetAnalogValue+0x3a4>
 8001e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	dd02      	ble.n	8001e24 <Powerstep01_SetAnalogValue+0x1cc>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8001e22:	e0d8      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8001e24:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e28:	f000 ff1a 	bl	8002c60 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	617b      	str	r3, [r7, #20]
      break;
 8001e30:	e0d1      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8001e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e36:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8002000 <Powerstep01_SetAnalogValue+0x3a8>
 8001e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	dd02      	ble.n	8001e4a <Powerstep01_SetAnalogValue+0x1f2>
 8001e44:	2300      	movs	r3, #0
 8001e46:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 8001e48:	e0c5      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f8a6 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f403 5480 	and.w	r4, r3, #4096	@ 0x1000
 8001e5a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e5e:	f000 ff31 	bl	8002cc4 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4323      	orrs	r3, r4
 8001e66:	617b      	str	r3, [r7, #20]
      break;      
 8001e68:	e0b5      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 8001e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002004 <Powerstep01_SetAnalogValue+0x3ac>
 8001e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	dd02      	ble.n	8001e82 <Powerstep01_SetAnalogValue+0x22a>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 8001e80:	e0a9      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f88a 	bl	8000fa0 <Powerstep01_CmdGetParam>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 6480 	and.w	r4, r3, #1024	@ 0x400
 8001e92:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e96:	f000 fe0f 	bl	8002ab8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4323      	orrs	r3, r4
 8001e9e:	617b      	str	r3, [r7, #20]
      break;
 8001ea0:	e099      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 8001ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002008 <Powerstep01_SetAnalogValue+0x3b0>
 8001eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	dd02      	ble.n	8001eba <Powerstep01_SetAnalogValue+0x262>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 8001eb8:	e08d      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 8001eba:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ebe:	f000 fe2f 	bl	8002b20 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	617b      	str	r3, [r7, #20]
      break;
 8001ec6:	e086      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 8001ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d408      	bmi.n	8001eec <Powerstep01_SetAnalogValue+0x294>
 8001eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ede:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800200c <Powerstep01_SetAnalogValue+0x3b4>
 8001ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	dd02      	ble.n	8001ef2 <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 8001ef0:	e071      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 8001ef2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ef6:	f000 fe45 	bl	8002b84 <Powerstep01_KTherm_Comp_to_RegVal>
 8001efa:	4603      	mov	r3, r0
 8001efc:	617b      	str	r3, [r7, #20]
      break;
 8001efe:	e06a      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 8001f00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f04:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002010 <Powerstep01_SetAnalogValue+0x3b8>
 8001f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	dd02      	ble.n	8001f18 <Powerstep01_SetAnalogValue+0x2c0>
 8001f12:	2300      	movs	r3, #0
 8001f14:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 8001f16:	e05e      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8001f18:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f1c:	f000 ff1a 	bl	8002d54 <Powerstep01_StallOcd_Th_to_RegVal>
 8001f20:	4603      	mov	r3, r0
 8001f22:	617b      	str	r3, [r7, #20]
      break;
 8001f24:	e057      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 8001f26:	7cbb      	ldrb	r3, [r7, #18]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 8001f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f30:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002010 <Powerstep01_SetAnalogValue+0x3b8>
 8001f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	dd02      	ble.n	8001f44 <Powerstep01_SetAnalogValue+0x2ec>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 8001f42:	e048      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 8001f44:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f48:	f000 ff40 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	617b      	str	r3, [r7, #20]
      break;
 8001f50:	e041      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 8001f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	dd02      	ble.n	8001f66 <Powerstep01_SetAnalogValue+0x30e>
 8001f60:	2300      	movs	r3, #0
 8001f62:	74fb      	strb	r3, [r7, #19]
      break;
 8001f64:	e037      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 8001f66:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f6a:	f000 fe47 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	617b      	str	r3, [r7, #20]
      break;
 8001f72:	e030      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8001f74:	7cbb      	ldrb	r3, [r7, #18]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7e:	e02a      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 8001f80:	7cbb      	ldrb	r3, [r7, #18]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d112      	bne.n	8001fac <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 8001f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002014 <Powerstep01_SetAnalogValue+0x3bc>
 8001f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	dd02      	ble.n	8001f9e <Powerstep01_SetAnalogValue+0x346>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 8001f9c:	e01b      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 8001f9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fa2:	f000 ff4f 	bl	8002e44 <Powerstep01_Tmin_Time_to_RegVal>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	617b      	str	r3, [r7, #20]
      break;
 8001faa:	e014      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 8001fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002018 <Powerstep01_SetAnalogValue+0x3c0>
 8001fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	dd02      	ble.n	8001fc4 <Powerstep01_SetAnalogValue+0x36c>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e008      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 8001fc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fc8:	f000 fd42 	bl	8002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	617b      	str	r3, [r7, #20]
      break;
 8001fd0:	e001      	b.n	8001fd6 <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fa44 	bl	8001470 <Powerstep01_CmdSetParam>
  }
  return result;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	43ff8000 	.word	0x43ff8000
 8001ff8:	4768c600 	.word	0x4768c600
 8001ffc:	4673e800 	.word	0x4673e800
 8002000:	44741333 	.word	0x44741333
 8002004:	46742400 	.word	0x46742400
 8002008:	44742000 	.word	0x44742000
 800200c:	3fbc0000 	.word	0x3fbc0000
 8002010:	447a0000 	.word	0x447a0000
 8002014:	42800000 	.word	0x42800000
 8002018:	3ecccccd 	.word	0x3ecccccd

0800201c <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4618      	mov	r0, r3
 800202a:	f001 f837 	bl	800309c <Powerstep01_Board_StartStepClock>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 800203a:	f001 f855 	bl	80030e8 <Powerstep01_Board_StopStepClock>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 800204e:	e016      	b.n	800207e <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 8002050:	2300      	movs	r3, #0
 8002052:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8002054:	2300      	movs	r3, #0
 8002056:	71bb      	strb	r3, [r7, #6]
 8002058:	e00b      	b.n	8002072 <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fc92 	bl	8001986 <Powerstep01_IsDeviceBusy>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4313      	orrs	r3, r2
 800206a:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	3301      	adds	r3, #1
 8002070:	71bb      	strb	r3, [r7, #6]
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	79ba      	ldrb	r2, [r7, #6]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3ed      	bcc.n	800205a <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e5      	bne.n	8002050 <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000394 	.word	0x20000394

08002094 <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 800209e:	bf00      	nop
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc6f 	bl	8001986 <Powerstep01_IsDeviceBusy>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f8      	bne.n	80020a0 <Powerstep01_WaitWhileActive+0xc>
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3301      	adds	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80020dc:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	425b      	negs	r3, r3
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e001      	b.n	80020ea <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 80020fc:	4b07      	ldr	r3, [pc, #28]	@ (800211c <Powerstep01_BusyInterruptHandler+0x24>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <Powerstep01_BusyInterruptHandler+0x28>)
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <Powerstep01_BusyInterruptHandler+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <Powerstep01_BusyInterruptHandler+0x28>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
  }
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000388 	.word	0x20000388
 8002120:	200003a1 	.word	0x200003a1

08002124 <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <Powerstep01_ErrorHandler+0x28>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 8002136:	4b05      	ldr	r3, [pc, #20]	@ (800214c <Powerstep01_ErrorHandler+0x28>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	4610      	mov	r0, r2
 800213e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002140:	e000      	b.n	8002144 <Powerstep01_ErrorHandler+0x20>
    while(1)
 8002142:	e7fe      	b.n	8002142 <Powerstep01_ErrorHandler+0x1e>
}
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000390 	.word	0x20000390

08002150 <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <Powerstep01_FlagInterruptHandler+0x24>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <Powerstep01_FlagInterruptHandler+0x28>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <Powerstep01_FlagInterruptHandler+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <Powerstep01_FlagInterruptHandler+0x28>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
  }
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000038c 	.word	0x2000038c
 8002178:	200003a1 	.word	0x200003a1

0800217c <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	603a      	str	r2, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	460b      	mov	r3, r1
 800218a:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 800218c:	4b59      	ldr	r3, [pc, #356]	@ (80022f4 <Powerstep01_SendCommand+0x178>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	79fa      	ldrb	r2, [r7, #7]
 8002194:	429a      	cmp	r2, r3
 8002196:	f080 80a8 	bcs.w	80022ea <Powerstep01_SendCommand+0x16e>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800219e:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <Powerstep01_SendCommand+0x178>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 80021ae:	2300      	movs	r3, #0
 80021b0:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80021b2:	4b51      	ldr	r3, [pc, #324]	@ (80022f8 <Powerstep01_SendCommand+0x17c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80021b8:	7abb      	ldrb	r3, [r7, #10]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80021be:	f000 fe87 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e019      	b.n	8002200 <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80021cc:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4413      	add	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80021d6:	4a49      	ldr	r2, [pc, #292]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	3301      	adds	r3, #1
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80021e2:	4a46      	ldr	r2, [pc, #280]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	3302      	adds	r3, #2
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;   
 80021ee:	4a43      	ldr	r2, [pc, #268]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	3303      	adds	r3, #3
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3301      	adds	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	4b3c      	ldr	r3, [pc, #240]	@ (80022f4 <Powerstep01_SendCommand+0x178>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4293      	cmp	r3, r2
 800220c:	d3de      	bcc.n	80021cc <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8002214:	2b8a      	cmp	r3, #138	@ 0x8a
 8002216:	d016      	beq.n	8002246 <Powerstep01_SendCommand+0xca>
 8002218:	2b8a      	cmp	r3, #138	@ 0x8a
 800221a:	dc32      	bgt.n	8002282 <Powerstep01_SendCommand+0x106>
 800221c:	2b82      	cmp	r3, #130	@ 0x82
 800221e:	d012      	beq.n	8002246 <Powerstep01_SendCommand+0xca>
 8002220:	2b82      	cmp	r3, #130	@ 0x82
 8002222:	dc2e      	bgt.n	8002282 <Powerstep01_SendCommand+0x106>
 8002224:	2b68      	cmp	r3, #104	@ 0x68
 8002226:	d00a      	beq.n	800223e <Powerstep01_SendCommand+0xc2>
 8002228:	2b68      	cmp	r3, #104	@ 0x68
 800222a:	dc2a      	bgt.n	8002282 <Powerstep01_SendCommand+0x106>
 800222c:	2b60      	cmp	r3, #96	@ 0x60
 800222e:	d006      	beq.n	800223e <Powerstep01_SendCommand+0xc2>
 8002230:	2b60      	cmp	r3, #96	@ 0x60
 8002232:	dc26      	bgt.n	8002282 <Powerstep01_SendCommand+0x106>
 8002234:	2b40      	cmp	r3, #64	@ 0x40
 8002236:	d006      	beq.n	8002246 <Powerstep01_SendCommand+0xca>
 8002238:	2b50      	cmp	r3, #80	@ 0x50
 800223a:	d004      	beq.n	8002246 <Powerstep01_SendCommand+0xca>
 800223c:	e021      	b.n	8002282 <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002244:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 8002246:	7a7b      	ldrb	r3, [r7, #9]
 8002248:	492c      	ldr	r1, [pc, #176]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 800224a:	79ba      	ldrb	r2, [r7, #6]
 800224c:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	0c1a      	lsrs	r2, r3, #16
 8002252:	7a7b      	ldrb	r3, [r7, #9]
 8002254:	b2d1      	uxtb	r1, r2
 8002256:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 8002258:	4413      	add	r3, r2
 800225a:	460a      	mov	r2, r1
 800225c:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	0a1a      	lsrs	r2, r3, #8
 8002262:	7a7b      	ldrb	r3, [r7, #9]
 8002264:	b2d1      	uxtb	r1, r2
 8002266:	4a25      	ldr	r2, [pc, #148]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 8002268:	4413      	add	r3, r2
 800226a:	460a      	mov	r2, r1
 800226c:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 800226e:	7a7b      	ldrb	r3, [r7, #9]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	b2d1      	uxtb	r1, r2
 8002274:	4a21      	ldr	r2, [pc, #132]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 8002276:	4413      	add	r3, r2
 8002278:	460a      	mov	r2, r1
 800227a:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 3;
 800227c:	2303      	movs	r3, #3
 800227e:	72fb      	strb	r3, [r7, #11]
          break;
 8002280:	e012      	b.n	80022a8 <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8002282:	7a7b      	ldrb	r3, [r7, #9]
 8002284:	4a1d      	ldr	r2, [pc, #116]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 8002286:	2100      	movs	r1, #0
 8002288:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 800228a:	7a7b      	ldrb	r3, [r7, #9]
 800228c:	4a1b      	ldr	r2, [pc, #108]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 800228e:	4413      	add	r3, r2
 8002290:	2200      	movs	r2, #0
 8002292:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8002294:	7a7b      	ldrb	r3, [r7, #9]
 8002296:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 8002298:	4413      	add	r3, r2
 800229a:	2200      	movs	r2, #0
 800229c:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = param;
 800229e:	7a7b      	ldrb	r3, [r7, #9]
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 80022a2:	4413      	add	r3, r2
 80022a4:	79ba      	ldrb	r2, [r7, #6]
 80022a6:	70da      	strb	r2, [r3, #3]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80022a8:	f000 fe09 	bl	8002ebe <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <Powerstep01_SendCommand+0x17c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f47f af7b 	bne.w	80021b2 <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes; 
 80022bc:	7afb      	ldrb	r3, [r7, #11]
 80022be:	f1c3 0303 	rsb	r3, r3, #3
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e00c      	b.n	80022e0 <Powerstep01_SendCommand+0x164>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4a0c      	ldr	r2, [pc, #48]	@ (80022fc <Powerstep01_SendCommand+0x180>)
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	490c      	ldr	r1, [pc, #48]	@ (8002300 <Powerstep01_SendCommand+0x184>)
 80022d0:	440b      	add	r3, r1
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f000 fb63 	bl	80029a0 <Powerstep01_WriteBytes>
         loop++)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d9ef      	bls.n	80022c6 <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80022e6:	f000 fdf3 	bl	8002ed0 <Powerstep01_Board_EnableIrq>
  }
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000394 	.word	0x20000394
 80022f8:	200003a0 	.word	0x200003a0
 80022fc:	20000398 	.word	0x20000398
 8002300:	2000039c 	.word	0x2000039c

08002304 <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2200      	movs	r2, #0
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f8ab 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2200      	movs	r2, #0
 800231e:	2102      	movs	r1, #2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff f8a5 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2200      	movs	r2, #0
 800232a:	2103      	movs	r1, #3
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f89f 	bl	8001470 <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 8120 	bne.w	800257a <Powerstep01_SetRegisterToPredefinedValues+0x276>
  {
    case 0:
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 800233a:	2308      	movs	r3, #8
 800233c:	73fb      	strb	r3, [r7, #15]
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 800233e:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8002584 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 8002342:	f000 fb53 	bl	80029ec <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002346:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8002348:	461a      	mov	r2, r3
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2105      	movs	r1, #5
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f88e 	bl	8001470 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_ACC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002354:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8002584 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 8002358:	f000 fb48 	bl	80029ec <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800235c:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 800235e:	461a      	mov	r2, r3
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2106      	movs	r1, #6
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff f883 	bl	8001470 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_DEC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 800236a:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8002584 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 800236e:	f000 fc77 	bl	8002c60 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002372:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002374:	461a      	mov	r2, r3
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2107      	movs	r1, #7
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f878 	bl	8001470 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MAX_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
        POWERSTEP01_CONF_PARAM_LSPD_BIT_DEVICE_0|
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 8002380:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8002588 <Powerstep01_SetRegisterToPredefinedValues+0x284>
 8002384:	f000 fc9e 	bl	8002cc4 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8002388:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 800238a:	461a      	mov	r2, r3
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2108      	movs	r1, #8
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f86d 	bl	8001470 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MIN_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
        POWERSTEP01_CONF_PARAM_BOOST_MODE_DEVICE_0|
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8002396:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 800258c <Powerstep01_SetRegisterToPredefinedValues+0x288>
 800239a:	f000 fb8d 	bl	8002ab8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 800239e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 80023a0:	461a      	mov	r2, r3
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2115      	movs	r1, #21
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f862 	bl	8001470 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_FS_SPD_DEVICE_0)); 
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	2208      	movs	r2, #8
 80023b0:	2113      	movs	r1, #19
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f85c 	bl	8001470 <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_OCD_TH_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	220b      	movs	r2, #11
 80023bc:	2116      	movs	r1, #22
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f856 	bl	8001470 <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_SYNC_MODE_DEVICE_0 |
        (uint8_t)POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0|
        (uint8_t)POWERSTEP01_CONF_PARAM_STEP_MODE_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	22ef      	movs	r2, #239	@ 0xef
 80023c8:	2117      	movs	r1, #23
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f850 	bl	8001470 <Powerstep01_CmdSetParam>
        POWERSTEP01_CONF_PARAM_ALARM_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	22c3      	movs	r2, #195	@ 0xc3
 80023d4:	2118      	movs	r1, #24
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f84a 	bl	8001470 <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_IGATE_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TCC_DEVICE_0   | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TBOOST_DEVICE_0|
        (uint16_t)POWERSTEP01_CONF_PARAM_WD_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2240      	movs	r2, #64	@ 0x40
 80023e0:	2119      	movs	r1, #25
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f844 	bl	8001470 <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_TBLANK_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TDT_DEVICE_0);
      // Voltage mode
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d175      	bne.n	80024da <Powerstep01_SetRegisterToPredefinedValues+0x1d6>
      {
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80023ee:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8002590 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 80023f2:	f000 fb95 	bl	8002b20 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80023f6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80023f8:	461a      	mov	r2, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	210d      	movs	r1, #13
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f836 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_INT_SPD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
          Powerstep01_KTherm_Comp_to_RegVal(
 8002404:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002408:	f000 fbbc 	bl	8002b84 <Powerstep01_KTherm_Comp_to_RegVal>
 800240c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 800240e:	461a      	mov	r2, r3
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2111      	movs	r1, #17
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f82b 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_K_THERM_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
          Powerstep01_StallOcd_Th_to_RegVal(
 800241a:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8002594 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 800241e:	f000 fc99 	bl	8002d54 <Powerstep01_StallOcd_Th_to_RegVal>
 8002422:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002424:	461a      	mov	r2, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	2114      	movs	r1, #20
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f820 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_STALL_TH_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
          Powerstep01_Kval_Perc_to_RegVal(
 8002430:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002598 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002434:	f000 fbe2 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 8002438:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 800243a:	461a      	mov	r2, r3
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2109      	movs	r1, #9
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff f815 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_HOLD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
          Powerstep01_Kval_Perc_to_RegVal(
 8002446:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002598 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 800244a:	f000 fbd7 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 800244e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002450:	461a      	mov	r2, r3
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	210a      	movs	r1, #10
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f80a 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_RUN_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
          Powerstep01_Kval_Perc_to_RegVal(
 800245c:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8002598 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002460:	f000 fbcc 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 8002464:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	210b      	movs	r1, #11
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe ffff 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_ACC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
          Powerstep01_Kval_Perc_to_RegVal(
 8002472:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8002598 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002476:	f000 fbc1 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 800247a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 800247c:	461a      	mov	r2, r3
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	210c      	movs	r1, #12
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fff4 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002488:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800259c <Powerstep01_SetRegisterToPredefinedValues+0x298>
 800248c:	f000 fae0 	bl	8002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002490:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002492:	461a      	mov	r2, r3
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	210e      	movs	r1, #14
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe ffe9 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_ST_SLP_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800249e:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80025a0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80024a2:	f000 fad5 	bl	8002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80024a6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 80024a8:	461a      	mov	r2, r3
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	210f      	movs	r1, #15
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe ffde 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_ACC_DEVICE_0));  
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80024b4:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80025a0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80024b8:	f000 faca 	bl	8002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80024bc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 80024be:	461a      	mov	r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2110      	movs	r1, #16
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe ffd3 	bl	8001470 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f642 6208 	movw	r2, #11784	@ 0x2e08
 80024d0:	211a      	movs	r1, #26
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe ffcc 	bl	8001470 <Powerstep01_CmdSetParam>
          (uint16_t)POWERSTEP01_CONF_PARAM_UVLOVAL_DEVICE_0       | 
          (uint16_t)POWERSTEP01_CONF_PARAM_VCCVAL_DEVICE_0        | 
          (uint16_t)POWERSTEP01_CONF_PARAM_TSW_DEVICE_0           |
          (uint16_t)POWERSTEP01_CONF_PARAM_PRED_DEVICE_0);          
      }
      break;
 80024d8:	e04e      	b.n	8002578 <Powerstep01_SetRegisterToPredefinedValues+0x274>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80024da:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80025a4 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 80024de:	f000 fc75 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80024e2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 80024e4:	461a      	mov	r2, r3
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	2109      	movs	r1, #9
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe ffc0 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80024f0:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80025a4 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 80024f4:	f000 fc6a 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80024f8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80024fa:	461a      	mov	r2, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	210a      	movs	r1, #10
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe ffb5 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002506:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80025a4 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 800250a:	f000 fc5f 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 800250e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002510:	461a      	mov	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	210b      	movs	r1, #11
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe ffaa 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800251c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80025a4 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002520:	f000 fc54 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002524:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002526:	461a      	mov	r2, r3
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	210c      	movs	r1, #12
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe ff9f 	bl	8001470 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	2235      	movs	r2, #53	@ 0x35
 8002536:	210e      	movs	r1, #14
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe ff99 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800253e:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002542:	f000 fc7f 	bl	8002e44 <Powerstep01_Tmin_Time_to_RegVal>
 8002546:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002548:	461a      	mov	r2, r3
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	210f      	movs	r1, #15
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe ff8e 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002554:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 8002558:	f000 fc74 	bl	8002e44 <Powerstep01_Tmin_Time_to_RegVal>
 800255c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 800255e:	461a      	mov	r2, r3
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2110      	movs	r1, #16
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe ff83 	bl	8001470 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	f243 2208 	movw	r2, #12808	@ 0x3208
 8002570:	211a      	movs	r1, #26
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe ff7c 	bl	8001470 <Powerstep01_CmdSetParam>
      break;
 8002578:	bf00      	nop
      }
      break;
#endif
    default: ;
  }
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	44c80000 	.word	0x44c80000
 8002588:	00000000 	.word	0x00000000
 800258c:	451c4000 	.word	0x451c4000
 8002590:	42760c4a 	.word	0x42760c4a
 8002594:	4404d000 	.word	0x4404d000
 8002598:	418028f6 	.word	0x418028f6
 800259c:	3d1c432d 	.word	0x3d1c432d
 80025a0:	3d801f75 	.word	0x3d801f75
 80025a4:	43a40f5c 	.word	0x43a40f5c

080025a8 <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2200      	movs	r2, #0
 80025b8:	2101      	movs	r1, #1
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ff58 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2102      	movs	r1, #2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe ff52 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ff4c 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	edd3 7a01 	vldr	s15, [r3, #4]
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	f000 fa03 	bl	80029ec <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80025e6:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 80025e8:	461a      	mov	r2, r3
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	2105      	movs	r1, #5
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe ff3e 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80025fa:	eeb0 0a67 	vmov.f32	s0, s15
 80025fe:	f000 f9f5 	bl	80029ec <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002602:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002604:	461a      	mov	r2, r3
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2106      	movs	r1, #6
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe ff30 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	edd3 7a03 	vldr	s15, [r3, #12]
 8002616:	eeb0 0a67 	vmov.f32	s0, s15
 800261a:	f000 fb21 	bl	8002c60 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 800261e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002620:	461a      	mov	r2, r3
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2107      	movs	r1, #7
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe ff22 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	edd3 7a04 	vldr	s15, [r3, #16]
 8002636:	eeb0 0a67 	vmov.f32	s0, s15
 800263a:	f000 fb11 	bl	8002c60 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 800263e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002640:	4323      	orrs	r3, r4
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2108      	movs	r1, #8
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe ff10 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	edd3 7a06 	vldr	s15, [r3, #24]
 800265a:	eeb0 0a67 	vmov.f32	s0, s15
 800265e:	f000 fa2b 	bl	8002ab8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002662:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002664:	4323      	orrs	r3, r4
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2115      	movs	r1, #21
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fefe 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	edd3 7a08 	vldr	s15, [r3, #32]
 800267a:	eeb0 0a67 	vmov.f32	s0, s15
 800267e:	f000 fb69 	bl	8002d54 <Powerstep01_StallOcd_Th_to_RegVal>
 8002682:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002684:	461a      	mov	r2, r3
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2113      	movs	r1, #19
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fef0 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 800269a:	4313      	orrs	r3, r2
 800269c:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2116      	movs	r1, #22
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fede 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80026ba:	461a      	mov	r2, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	2117      	movs	r1, #23
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fed5 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 80026dc:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 80026e2:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80026e4:	461a      	mov	r2, r3
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2118      	movs	r1, #24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fec0 	bl	8001470 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2119      	movs	r1, #25
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe feb2 	bl	8001470 <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f040 80b6 	bne.w	8002882 <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800271c:	eeb0 0a67 	vmov.f32	s0, s15
 8002720:	f000 f9fe 	bl	8002b20 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002724:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8002726:	461a      	mov	r2, r3
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	210d      	movs	r1, #13
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fe9f 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002738:	eeb0 0a67 	vmov.f32	s0, s15
 800273c:	f000 fa22 	bl	8002b84 <Powerstep01_KTherm_Comp_to_RegVal>
 8002740:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002742:	461a      	mov	r2, r3
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2111      	movs	r1, #17
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fe91 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002754:	eeb0 0a67 	vmov.f32	s0, s15
 8002758:	f000 fafc 	bl	8002d54 <Powerstep01_StallOcd_Th_to_RegVal>
 800275c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 800275e:	461a      	mov	r2, r3
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2114      	movs	r1, #20
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fe83 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002770:	eeb0 0a67 	vmov.f32	s0, s15
 8002774:	f000 fa42 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 8002778:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 800277a:	461a      	mov	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2109      	movs	r1, #9
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fe75 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800278c:	eeb0 0a67 	vmov.f32	s0, s15
 8002790:	f000 fa34 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 8002794:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002796:	461a      	mov	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	210a      	movs	r1, #10
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fe67 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80027a8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ac:	f000 fa26 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 80027b0:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 80027b2:	461a      	mov	r2, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	210b      	movs	r1, #11
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fe59 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80027c4:	eeb0 0a67 	vmov.f32	s0, s15
 80027c8:	f000 fa18 	bl	8002bfc <Powerstep01_Kval_Perc_to_RegVal>
 80027cc:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 80027ce:	461a      	mov	r2, r3
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	210c      	movs	r1, #12
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fe4b 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80027e0:	eeb0 0a67 	vmov.f32	s0, s15
 80027e4:	f000 f934 	bl	8002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80027e8:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 80027ea:	461a      	mov	r2, r3
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	210e      	movs	r1, #14
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fe3d 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80027fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002800:	f000 f926 	bl	8002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002804:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	210f      	movs	r1, #15
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fe2f 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002818:	eeb0 0a67 	vmov.f32	s0, s15
 800281c:	f000 f918 	bl	8002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002820:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002822:	461a      	mov	r2, r3
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	2110      	movs	r1, #16
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fe21 	bl	8001470 <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
      (uint16_t)initPrm->vm.swMode | 
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 800283a:	4313      	orrs	r3, r2
 800283c:	b2da      	uxtb	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002844:	4313      	orrs	r3, r2
 8002846:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 800284e:	4313      	orrs	r3, r2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 800285a:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 8002862:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
      (uint16_t)initPrm->vm.vccVal| 
 800286a:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 8002872:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002874:	461a      	mov	r2, r3
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	211a      	movs	r1, #26
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fdf8 	bl	8001470 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 8002880:	e08a      	b.n	8002998 <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002888:	eeb0 0a67 	vmov.f32	s0, s15
 800288c:	f000 fa9e 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002890:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002892:	461a      	mov	r2, r3
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2109      	movs	r1, #9
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fde9 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80028a4:	eeb0 0a67 	vmov.f32	s0, s15
 80028a8:	f000 fa90 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028ac:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80028ae:	461a      	mov	r2, r3
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	210a      	movs	r1, #10
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fddb 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80028c0:	eeb0 0a67 	vmov.f32	s0, s15
 80028c4:	f000 fa82 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028c8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 80028ca:	461a      	mov	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	210b      	movs	r1, #11
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fdcd 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	f000 fa74 	bl	8002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028e4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 80028e6:	461a      	mov	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	210c      	movs	r1, #12
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fdbf 	bl	8001470 <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
          (uint8_t)initPrm->cm.fastStep);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80028fe:	4313      	orrs	r3, r2
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	210e      	movs	r1, #14
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fdb1 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002914:	eeb0 0a67 	vmov.f32	s0, s15
 8002918:	f000 fa94 	bl	8002e44 <Powerstep01_Tmin_Time_to_RegVal>
 800291c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 800291e:	461a      	mov	r2, r3
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	210f      	movs	r1, #15
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fda3 	bl	8001470 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002930:	eeb0 0a67 	vmov.f32	s0, s15
 8002934:	f000 fa86 	bl	8002e44 <Powerstep01_Tmin_Time_to_RegVal>
 8002938:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 800293a:	461a      	mov	r2, r3
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2110      	movs	r1, #16
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fd95 	bl	8001470 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
          (uint16_t)initPrm->cm.swMode| 
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 8002952:	4313      	orrs	r3, r2
 8002954:	b2da      	uxtb	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800295c:	4313      	orrs	r3, r2
 800295e:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
          (uint16_t)initPrm->cm.tqReg| 
 8002966:	4313      	orrs	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
          (uint16_t)initPrm->cm.ocSd| 
 8002972:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 800297a:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
          (uint16_t)initPrm->cm.vccVal|
 8002982:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
          (uint16_t)initPrm->cm.tsw|
 800298a:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	211a      	movs	r1, #26
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fd6c 	bl	8001470 <Powerstep01_CmdSetParam>
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}

080029a0 <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <Powerstep01_WriteBytes+0x40>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fbf9 	bl	80031ac <Powerstep01_Board_SpiWriteBytes>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 80029c0:	f24b 0001 	movw	r0, #45057	@ 0xb001
 80029c4:	f7ff fbae 	bl	8002124 <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <Powerstep01_WriteBytes+0x44>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <Powerstep01_WriteBytes+0x48>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
  }
}                     
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000394 	.word	0x20000394
 80029e4:	200003a1 	.word	0x200003a1
 80029e8:	200003a0 	.word	0x200003a0

080029ec <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 80029f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029fa:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002a20 <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 80029fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a02:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0e:	ee17 3a90 	vmov	r3, s15
 8002a12:	b29b      	uxth	r3, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	3d8cbccc 	.word	0x3d8cbccc

08002a24 <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002a4c <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	4168d4a5 	.word	0x4168d4a5

08002a50 <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 8002a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a5e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002a88 <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 8002a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a72:	edc7 7a00 	vstr	s15, [r7]
 8002a76:	783b      	ldrb	r3, [r7, #0]
 8002a78:	b2db      	uxtb	r3, r3
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	441f6000 	.word	0x441f6000

08002a8c <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ab4 <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 8002aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	3acd9a67 	.word	0x3acd9a67

08002ab8 <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 8002ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ac6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002ae4 <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 8002aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad2:	ee17 3a90 	vmov	r3, s15
 8002ad6:	b29b      	uxth	r3, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	3d8637bd 	.word	0x3d8637bd

08002ae8 <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002b18 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 8002afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b02:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002b1c <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 8002b06:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	3f7fbe77 	.word	0x3f7fbe77
 8002b1c:	41742400 	.word	0x41742400

08002b20 <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 8002b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b2e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002b54 <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b42:	ee17 3a90 	vmov	r3, s15
 8002b46:	b29b      	uxth	r3, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	418637bd 	.word	0x418637bd

08002b58 <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b80 <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 8002b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b72:	eeb0 0a67 	vmov.f32	s0, s15
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	3d7423d9 	.word	0x3d7423d9

08002b84 <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 8002b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b9a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002bc4 <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 8002b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bae:	edc7 7a00 	vstr	s15, [r7]
 8002bb2:	783b      	ldrb	r3, [r7, #0]
 8002bb4:	b2db      	uxtb	r3, r3
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	42000000 	.word	0x42000000

08002bc8 <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002bf8 <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002be6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002bea:	eeb0 0a67 	vmov.f32	s0, s15
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	3d000000 	.word	0x3d000000

08002bfc <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 8002c06:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c0a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002c34 <Powerstep01_Kval_Perc_to_RegVal+0x38>
 8002c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1e:	edc7 7a00 	vstr	s15, [r7]
 8002c22:	783b      	ldrb	r3, [r7, #0]
 8002c24:	b2db      	uxtb	r3, r3
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	4023d70a 	.word	0x4023d70a

08002c38 <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	eeb5 7a09 	vmov.f32	s14, #89	@ 0x3ec80000  0.3906250
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c52:	eeb0 0a67 	vmov.f32	s0, s15
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 8002c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c6e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002c94 <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 8002c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c82:	ee17 3a90 	vmov	r3, s15
 8002c86:	b29b      	uxth	r3, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	3d8637bd 	.word	0x3d8637bd

08002c98 <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002caa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002cc0 <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 8002cae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	41742400 	.word	0x41742400

08002cc4 <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 8002cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cd2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002cf8 <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 8002cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce6:	ee17 3a90 	vmov	r3, s15
 8002cea:	b29b      	uxth	r3, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	408637bd 	.word	0x408637bd

08002cfc <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002d24 <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 8002d12:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d16:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	3e742400 	.word	0x3e742400

08002d28 <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002d50 <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d42:	eeb0 0a67 	vmov.f32	s0, s15
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	3c742400 	.word	0x3c742400

08002d54 <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 8002d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d62:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002d94 <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 8002d66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d6a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002d98 <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 8002d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d7e:	edc7 7a00 	vstr	s15, [r7]
 8002d82:	783b      	ldrb	r3, [r7, #0]
 8002d84:	b2db      	uxtb	r3, r3
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	41fa0000 	.word	0x41fa0000
 8002d98:	3d03126f 	.word	0x3d03126f

08002d9c <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3301      	adds	r3, #1
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002dc8 <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 8002db4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	41fa0000 	.word	0x41fa0000

08002dcc <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 8002dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dda:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002e0c <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 8002dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002de2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002e10 <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002dee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df6:	edc7 7a00 	vstr	s15, [r7]
 8002dfa:	783b      	ldrb	r3, [r7, #0]
 8002dfc:	b2db      	uxtb	r3, r3
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40fa0000 	.word	0x40fa0000
 8002e10:	3e03126f 	.word	0x3e03126f

08002e14 <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002e40 <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 8002e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e30:	eeb0 0a67 	vmov.f32	s0, s15
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40fa0000 	.word	0x40fa0000

08002e44 <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 8002e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6a:	edc7 7a00 	vstr	s15, [r7]
 8002e6e:	783b      	ldrb	r3, [r7, #0]
 8002e70:	b2db      	uxtb	r3, r3
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e96:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fc39 	bl	8003728 <HAL_Delay>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec2:	b672      	cpsid	i
}
 8002ec4:	bf00      	nop
  __disable_irq();
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002ed4:	b662      	cpsie	i
}
 8002ed6:	bf00      	nop
  __enable_irq();
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	@ 0x30
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (deviceId==0)
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f040 8088 	bne.w	8003006 <Powerstep01_Board_GpioInit+0x122>
  {
    /* GPIO Ports Clock Enable */
    __GPIOA_CLK_ENABLE();
 8002ef6:	4b46      	ldr	r3, [pc, #280]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a45      	ldr	r2, [pc, #276]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b43      	ldr	r3, [pc, #268]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
    __GPIOB_CLK_ENABLE();
 8002f0e:	4b40      	ldr	r3, [pc, #256]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a3f      	ldr	r2, [pc, #252]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]
    __GPIOG_CLK_ENABLE();
 8002f26:	4b3a      	ldr	r3, [pc, #232]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	4a39      	ldr	r2, [pc, #228]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f32:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693b      	ldr	r3, [r7, #16]
    __GPIOI_CLK_ENABLE();
 8002f3e:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a33      	ldr	r2, [pc, #204]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <Powerstep01_Board_GpioInit+0x12c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
    
    /* Configure Powerstep01 - Busy pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_PIN;
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002f5a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f60:	2301      	movs	r3, #1
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002f64:	2301      	movs	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4829      	ldr	r0, [pc, #164]	@ (8003014 <Powerstep01_Board_GpioInit+0x130>)
 8002f70:	f000 fd88 	bl	8003a84 <HAL_GPIO_Init>
    
    /* Set Priority of Exti line Interrupt used for the busy interrupt*/ 
    HAL_NVIC_SetPriority(BUSY_EXTI_LINE_IRQn, 6, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2106      	movs	r1, #6
 8002f78:	2017      	movs	r0, #23
 8002f7a:	f000 fcd4 	bl	8003926 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line Interrupt used for the busy interrupt*/
    HAL_NVIC_EnableIRQ(BUSY_EXTI_LINE_IRQn);
 8002f7e:	2017      	movs	r0, #23
 8002f80:	f000 fced 	bl	800395e <HAL_NVIC_EnableIRQ>
    
    /* Configure Powerstep01 - Flag pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8002f84:	2340      	movs	r3, #64	@ 0x40
 8002f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002f92:	2301      	movs	r3, #1
 8002f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	481d      	ldr	r0, [pc, #116]	@ (8003014 <Powerstep01_Board_GpioInit+0x130>)
 8002f9e:	f000 fd71 	bl	8003a84 <HAL_GPIO_Init>
    
    /* Set Priority of Exti lineInterrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(FLAG_EXTI_LINE_IRQn, 5, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	2017      	movs	r0, #23
 8002fa8:	f000 fcbd 	bl	8003926 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line  Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(FLAG_EXTI_LINE_IRQn);    
 8002fac:	2017      	movs	r0, #23
 8002fae:	f000 fcd6 	bl	800395e <HAL_NVIC_EnableIRQ>
  
    /* Configure Powerstep01 - CS pin ----------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8002fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4813      	ldr	r0, [pc, #76]	@ (8003018 <Powerstep01_Board_GpioInit+0x134>)
 8002fcc:	f000 fd5a 	bl	8003a84 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fd6:	4810      	ldr	r0, [pc, #64]	@ (8003018 <Powerstep01_Board_GpioInit+0x134>)
 8002fd8:	f000 ff18 	bl	8003e0c <HAL_GPIO_WritePin>
    
    /* Configure Powerstep01 - STBY/RESET pin --------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN;
 8002fdc:	2304      	movs	r3, #4
 8002fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, &GPIO_InitStruct);
 8002fec:	f107 031c 	add.w	r3, r7, #28
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	480a      	ldr	r0, [pc, #40]	@ (800301c <Powerstep01_Board_GpioInit+0x138>)
 8002ff4:	f000 fd46 	bl	8003a84 <HAL_GPIO_Init>
    
    /* Reset Powerstep0*/
    Powerstep01_Board_Reset(deviceId);
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f88e 	bl	800311c <Powerstep01_Board_Reset>
    
    /* Let a delay after reset */
    Powerstep01_Board_Delay(1); 
 8003000:	2001      	movs	r0, #1
 8003002:	f7ff ff51 	bl	8002ea8 <Powerstep01_Board_Delay>
  }
}
 8003006:	bf00      	nop
 8003008:	3730      	adds	r7, #48	@ 0x30
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40021800 	.word	0x40021800
 8003018:	40020000 	.word	0x40020000
 800301c:	40022000 	.word	0x40022000

08003020 <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	@ 0x38
 8003024:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_ClockConfigTypeDef sClockSourceConfig;
  
  hTimStepClock.Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK;
 8003026:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 8003028:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800302c:	601a      	str	r2, [r3, #0]
  hTimStepClock.Init.Prescaler = TIMER_PRESCALER -1;
 800302e:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 8003030:	223f      	movs	r2, #63	@ 0x3f
 8003032:	605a      	str	r2, [r3, #4]
  hTimStepClock.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  hTimStepClock.Init.Period = 0;
 800303a:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
  hTimStepClock.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003040:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&hTimStepClock);
 8003046:	4814      	ldr	r0, [pc, #80]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 8003048:	f002 fd42 	bl	8005ad0 <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800304c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003050:	603b      	str	r3, [r7, #0]
  HAL_TIM_ConfigClockSource(&hTimStepClock, &sClockSourceConfig);
 8003052:	463b      	mov	r3, r7
 8003054:	4619      	mov	r1, r3
 8003056:	4810      	ldr	r0, [pc, #64]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 8003058:	f003 f9fc 	bl	8006454 <HAL_TIM_ConfigClockSource>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305c:	2360      	movs	r3, #96	@ 0x60
 800305e:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_TIM_PWM_ConfigChannel(&hTimStepClock, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 800306c:	f107 031c 	add.w	r3, r7, #28
 8003070:	2200      	movs	r2, #0
 8003072:	4619      	mov	r1, r3
 8003074:	4808      	ldr	r0, [pc, #32]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 8003076:	f003 f8d9 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);
 8003082:	f107 0310 	add.w	r3, r7, #16
 8003086:	4619      	mov	r1, r3
 8003088:	4803      	ldr	r0, [pc, #12]	@ (8003098 <Powerstep01_Board_StepClockInit+0x78>)
 800308a:	f003 ff39 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
}
 800308e:	bf00      	nop
 8003090:	3738      	adds	r7, #56	@ 0x38
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000430 	.word	0x20000430

0800309c <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80030a6:	f001 fae9 	bl	800467c <HAL_RCC_GetSysClockFreq>
 80030aa:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	019b      	lsls	r3, r3, #6
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimStepClock, period);
 80030bc:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <Powerstep01_Board_StartStepClock+0x48>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030c4:	4a07      	ldr	r2, [pc, #28]	@ (80030e4 <Powerstep01_Board_StartStepClock+0x48>)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <Powerstep01_Board_StartStepClock+0x48>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	0852      	lsrs	r2, r2, #1
 80030d2:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start_IT(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);  
 80030d4:	2100      	movs	r1, #0
 80030d6:	4803      	ldr	r0, [pc, #12]	@ (80030e4 <Powerstep01_Board_StartStepClock+0x48>)
 80030d8:	f002 fd68 	bl	8005bac <HAL_TIM_PWM_Start_IT>
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000430 	.word	0x20000430

080030e8 <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&hTimStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 80030ec:	2100      	movs	r1, #0
 80030ee:	4802      	ldr	r0, [pc, #8]	@ (80030f8 <Powerstep01_Board_StopStepClock+0x10>)
 80030f0:	f002 fea4 	bl	8005e3c <HAL_TIM_PWM_Stop_IT>
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000430 	.word	0x20000430

080030fc <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_SET);
 8003106:	2201      	movs	r2, #1
 8003108:	2104      	movs	r1, #4
 800310a:	4803      	ldr	r0, [pc, #12]	@ (8003118 <Powerstep01_Board_ReleaseReset+0x1c>)
 800310c:	f000 fe7e 	bl	8003e0c <HAL_GPIO_WritePin>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40022000 	.word	0x40022000

0800311c <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2104      	movs	r1, #4
 800312a:	4803      	ldr	r0, [pc, #12]	@ (8003138 <Powerstep01_Board_Reset+0x1c>)
 800312c:	f000 fe6e 	bl	8003e0c <HAL_GPIO_WritePin>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40022000 	.word	0x40022000

0800313c <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8003142:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003144:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <Powerstep01_Board_SpiInit+0x6c>)
 8003146:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003148:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 800314a:	2220      	movs	r2, #32
 800314c:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003154:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003156:	2201      	movs	r2, #1
 8003158:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800315a:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 800315c:	2202      	movs	r2, #2
 800315e:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003160:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003162:	2200      	movs	r2, #0
 8003164:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003166:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003168:	2207      	movs	r2, #7
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800316c:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 800316e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003172:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003176:	2200      	movs	r2, #0
 8003178:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800317a:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 800317c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003180:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003182:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003184:	2200      	movs	r2, #0
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 800318a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800318e:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8003190:	4804      	ldr	r0, [pc, #16]	@ (80031a4 <Powerstep01_Board_SpiInit+0x68>)
 8003192:	f001 ff5d 	bl	8005050 <HAL_SPI_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 800319a:	79fb      	ldrb	r3, [r7, #7]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200003a4 	.word	0x200003a4
 80031a8:	40003800 	.word	0x40003800

080031ac <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	4613      	mov	r3, r2
 80031b8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 80031ba:	2200      	movs	r2, #0
 80031bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031c0:	4816      	ldr	r0, [pc, #88]	@ (800321c <Powerstep01_Board_SpiWriteBytes+0x70>)
 80031c2:	f000 fe23 	bl	8003e0c <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e016      	b.n	80031fa <Powerstep01_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 80031cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2301      	movs	r3, #1
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	68f9      	ldr	r1, [r7, #12]
 80031d8:	4811      	ldr	r0, [pc, #68]	@ (8003220 <Powerstep01_Board_SpiWriteBytes+0x74>)
 80031da:	f002 f81b 	bl	8005214 <HAL_SPI_TransmitReceive>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <Powerstep01_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3301      	adds	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	3301      	adds	r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d3e4      	bcc.n	80031cc <Powerstep01_Board_SpiWriteBytes+0x20>
 8003202:	e000      	b.n	8003206 <Powerstep01_Board_SpiWriteBytes+0x5a>
      break;
 8003204:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003206:	2201      	movs	r2, #1
 8003208:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800320c:	4803      	ldr	r0, [pc, #12]	@ (800321c <Powerstep01_Board_SpiWriteBytes+0x70>)
 800320e:	f000 fdfd 	bl	8003e0c <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8003212:	7dfb      	ldrb	r3, [r7, #23]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40020000 	.word	0x40020000
 8003220:	200003a4 	.word	0x200003a4

08003224 <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	4803      	ldr	r0, [pc, #12]	@ (8003238 <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 800322c:	f000 fdd6 	bl	8003ddc <HAL_GPIO_ReadPin>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40021800 	.word	0x40021800

0800323c <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 8003240:	2140      	movs	r1, #64	@ 0x40
 8003242:	4803      	ldr	r0, [pc, #12]	@ (8003250 <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 8003244:	f000 fdca 	bl	8003ddc <HAL_GPIO_ReadPin>
 8003248:	4603      	mov	r3, r0
}
 800324a:	4618      	mov	r0, r3
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40021800 	.word	0x40021800

08003254 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
 8003258:	2300      	movs	r3, #0
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
 8003268:	2300      	movs	r3, #0
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
 8003278:	2300      	movs	r3, #0
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
 8003288:	2300      	movs	r3, #0
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
 8003298:	2300      	movs	r3, #0
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	2300      	movs	r3, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	2300      	movs	r3, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <BSP_MotorControl_AttachErrorHandler+0x38>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <BSP_MotorControl_AttachErrorHandler+0x26>
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <BSP_MotorControl_AttachErrorHandler+0x38>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <BSP_MotorControl_AttachErrorHandler+0x38>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
 80032e8:	e004      	b.n	80032f4 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80032ea:	f640 0002 	movw	r0, #2050	@ 0x802
 80032ee:	f000 f843 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200004ec 	.word	0x200004ec

08003300 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 800331a:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
 8003324:	e004      	b.n	8003330 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8003326:	f640 0003 	movw	r0, #2051	@ 0x803
 800332a:	f000 f825 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }  
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200004ec 	.word	0x200004ec

0800333c <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <BSP_MotorControl_AttachBusyInterrupt+0x26>
 800334c:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 8003356:	4b07      	ldr	r3, [pc, #28]	@ (8003374 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
 8003360:	e004      	b.n	800336c <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8003362:	f640 0004 	movw	r0, #2052	@ 0x804
 8003366:	f000 f807 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }  
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200004ec 	.word	0x200004ec

08003378 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003382:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <BSP_MotorControl_ErrorHandler+0x38>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <BSP_MotorControl_ErrorHandler+0x2e>
 800338a:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <BSP_MotorControl_ErrorHandler+0x38>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <BSP_MotorControl_ErrorHandler+0x38>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 80033a4:	e000      	b.n	80033a8 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 80033a6:	e7fe      	b.n	80033a6 <BSP_MotorControl_ErrorHandler+0x2e>
}
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200004ec 	.word	0x200004ec

080033b4 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 80033c0:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <BSP_MotorControl_Init+0x3c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <BSP_MotorControl_Init+0x2a>
 80033c8:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <BSP_MotorControl_Init+0x3c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 80033d2:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <BSP_MotorControl_Init+0x3c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	4798      	blx	r3
 80033dc:	e004      	b.n	80033e8 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 80033de:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80033e2:	f7ff ffc9 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }  
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	200004ec 	.word	0x200004ec

080033f4 <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	603a      	str	r2, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
 8003400:	460b      	mov	r3, r1
 8003402:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <BSP_MotorControl_Move+0x44>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <BSP_MotorControl_Move+0x32>
 800340c:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <BSP_MotorControl_Move+0x44>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <BSP_MotorControl_Move+0x44>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341c:	79b9      	ldrb	r1, [r7, #6]
 800341e:	79f8      	ldrb	r0, [r7, #7]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4798      	blx	r3
 8003424:	e004      	b.n	8003430 <BSP_MotorControl_Move+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 8003426:	f640 0013 	movw	r0, #2067	@ 0x813
 800342a:	f7ff ffa5 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }      
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	200004ec 	.word	0x200004ec

0800343c <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 8003446:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <BSP_MotorControl_WaitWhileActive+0x2a>
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003454:	2b00      	cmp	r3, #0
 8003456:	d006      	beq.n	8003466 <BSP_MotorControl_WaitWhileActive+0x2a>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 8003458:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <BSP_MotorControl_WaitWhileActive+0x3c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	4610      	mov	r0, r2
 8003462:	4798      	blx	r3
 8003464:	e004      	b.n	8003470 <BSP_MotorControl_WaitWhileActive+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 8003466:	f640 001e 	movw	r0, #2078	@ 0x81e
 800346a:	f7ff ff85 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }    
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200004ec 	.word	0x200004ec

0800347c <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800348a:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <BSP_MotorControl_CmdGetStatus+0x48>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00f      	beq.n	80034b2 <BSP_MotorControl_CmdGetStatus+0x36>
 8003492:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 800349e:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <BSP_MotorControl_CmdGetStatus+0x48>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a6:	79fa      	ldrb	r2, [r7, #7]
 80034a8:	4610      	mov	r0, r2
 80034aa:	4798      	blx	r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	81fb      	strh	r3, [r7, #14]
 80034b0:	e003      	b.n	80034ba <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80034b2:	f640 0022 	movw	r0, #2082	@ 0x822
 80034b6:	f7ff ff5f 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80034ba:	89fb      	ldrh	r3, [r7, #14]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200004ec 	.word	0x200004ec

080034c8 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 80034d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <BSP_MotorControl_CheckBusyHw+0x40>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <BSP_MotorControl_CheckBusyHw+0x2e>
 80034da:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <BSP_MotorControl_CheckBusyHw+0x40>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 80034e6:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <BSP_MotorControl_CheckBusyHw+0x40>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034ee:	4798      	blx	r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	e003      	b.n	80034fe <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 80034f6:	f640 002b 	movw	r0, #2091	@ 0x82b
 80034fa:	f7ff ff3d 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 80034fe:	79fb      	ldrb	r3, [r7, #7]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200004ec 	.word	0x200004ec

0800350c <BSP_MotorControl_CmdSoftHiZ>:
 * @brief Issues Soft HiZ command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdSoftHiZ(uint8_t deviceId)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdSoftHiZ != 0))
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <BSP_MotorControl_CmdSoftHiZ+0x40>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <BSP_MotorControl_CmdSoftHiZ+0x2e>
 800351e:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <BSP_MotorControl_CmdSoftHiZ+0x40>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <BSP_MotorControl_CmdSoftHiZ+0x2e>
  {
    motorDrvHandle->CmdSoftHiZ(deviceId);
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <BSP_MotorControl_CmdSoftHiZ+0x40>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003532:	79fa      	ldrb	r2, [r7, #7]
 8003534:	4610      	mov	r0, r2
 8003536:	4798      	blx	r3
 8003538:	e004      	b.n	8003544 <BSP_MotorControl_CmdSoftHiZ+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(51);
 800353a:	f640 0033 	movw	r0, #2099	@ 0x833
 800353e:	f7ff ff1b 	bl	8003378 <BSP_MotorControl_ErrorHandler>
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200004ec 	.word	0x200004ec

08003550 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	460a      	mov	r2, r1
 800355a:	80fb      	strh	r3, [r7, #6]
 800355c:	4613      	mov	r3, r2
 800355e:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8003560:	4a40      	ldr	r2, [pc, #256]	@ (8003664 <BSP_MotorControl_SetNbDevices+0x114>)
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	f641 124a 	movw	r2, #6474	@ 0x194a
 8003570:	4293      	cmp	r3, r2
 8003572:	d105      	bne.n	8003580 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003574:	f7ff fe6e 	bl	8003254 <L6474_GetMotorHandle>
 8003578:	4603      	mov	r3, r0
 800357a:	4a3b      	ldr	r2, [pc, #236]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e055      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d105      	bne.n	8003592 <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8003586:	f7fe f8f7 	bl	8001778 <Powerstep01_GetMotorHandle>
 800358a:	4603      	mov	r3, r0
 800358c:	4a36      	ldr	r2, [pc, #216]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	e04c      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	f641 023e 	movw	r2, #6206	@ 0x183e
 8003598:	4293      	cmp	r3, r2
 800359a:	d105      	bne.n	80035a8 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 800359c:	f7ff fe72 	bl	8003284 <L6206_GetMotorHandle>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4a31      	ldr	r2, [pc, #196]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e041      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	f5b3 5fc2 	cmp.w	r3, #6208	@ 0x1840
 80035ae:	d105      	bne.n	80035bc <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80035b0:	f7ff fe70 	bl	8003294 <L6208_GetMotorHandle>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e037      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	2bdc      	cmp	r3, #220	@ 0xdc
 80035c0:	d105      	bne.n	80035ce <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 80035c2:	f7ff fe6f 	bl	80032a4 <Stspin220_GetMotorHandle>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a27      	ldr	r2, [pc, #156]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e02e      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	f641 1246 	movw	r2, #6470	@ 0x1946
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <BSP_MotorControl_SetNbDevices+0x92>
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	f641 1248 	movw	r2, #6472	@ 0x1948
 80035de:	4293      	cmp	r3, r2
 80035e0:	d105      	bne.n	80035ee <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 80035e2:	f7ff fe3f 	bl	8003264 <l647x_GetMotorHandle>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e01e      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	f641 1250 	movw	r2, #6480	@ 0x1950
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <BSP_MotorControl_SetNbDevices+0xb2>
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	f641 1252 	movw	r2, #6482	@ 0x1952
 80035fe:	4293      	cmp	r3, r2
 8003600:	d105      	bne.n	800360e <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8003602:	f7ff fe37 	bl	8003274 <l648x_GetMotorHandle>
 8003606:	4603      	mov	r3, r0
 8003608:	4a17      	ldr	r2, [pc, #92]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e00e      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	2bf0      	cmp	r3, #240	@ 0xf0
 8003612:	d002      	beq.n	800361a <BSP_MotorControl_SetNbDevices+0xca>
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	2bfa      	cmp	r3, #250	@ 0xfa
 8003618:	d105      	bne.n	8003626 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 800361a:	f7ff fe4b 	bl	80032b4 <Stspin240_250_GetMotorHandle>
 800361e:	4603      	mov	r3, r0
 8003620:	4a11      	ldr	r2, [pc, #68]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	e002      	b.n	800362c <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 800362c:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003634:	4b0c      	ldr	r3, [pc, #48]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
  if ((motorDrvHandle != 0)&&
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003640:	797b      	ldrb	r3, [r7, #5]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <BSP_MotorControl_SetNbDevices+0x118>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800364e:	797a      	ldrb	r2, [r7, #5]
 8003650:	4610      	mov	r0, r2
 8003652:	4798      	blx	r3
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200004f0 	.word	0x200004f0
 8003668:	200004ec 	.word	0x200004ec

0800366c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003670:	2003      	movs	r0, #3
 8003672:	f000 f94d 	bl	8003910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003676:	200f      	movs	r0, #15
 8003678:	f000 f806 	bl	8003688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800367c:	f7fd f9f6 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_InitTick+0x54>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <HAL_InitTick+0x58>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800369e:	fbb3 f3f1 	udiv	r3, r3, r1
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f967 	bl	800397a <HAL_SYSTICK_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00e      	b.n	80036d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d80a      	bhi.n	80036d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036bc:	2200      	movs	r2, #0
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	f000 f92f 	bl	8003926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c8:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <HAL_InitTick+0x5c>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000000 	.word	0x20000000
 80036e0:	2000016c 	.word	0x2000016c
 80036e4:	20000168 	.word	0x20000168

080036e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_IncTick+0x20>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_IncTick+0x24>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	4a04      	ldr	r2, [pc, #16]	@ (800370c <HAL_IncTick+0x24>)
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	2000016c 	.word	0x2000016c
 800370c:	200004f4 	.word	0x200004f4

08003710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return uwTick;
 8003714:	4b03      	ldr	r3, [pc, #12]	@ (8003724 <HAL_GetTick+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200004f4 	.word	0x200004f4

08003728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7ff ffee 	bl	8003710 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d005      	beq.n	800374e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_Delay+0x44>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800374e:	bf00      	nop
 8003750:	f7ff ffde 	bl	8003710 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	429a      	cmp	r2, r3
 800375e:	d8f7      	bhi.n	8003750 <HAL_Delay+0x28>
  {
  }
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2000016c 	.word	0x2000016c

08003770 <__NVIC_SetPriorityGrouping>:
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x40>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00
 80037b4:	05fa0000 	.word	0x05fa0000

080037b8 <__NVIC_GetPriorityGrouping>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037bc:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <__NVIC_GetPriorityGrouping+0x18>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0307 	and.w	r3, r3, #7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_EnableIRQ>:
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	db0b      	blt.n	80037fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4907      	ldr	r1, [pc, #28]	@ (800380c <__NVIC_EnableIRQ+0x38>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2001      	movs	r0, #1
 80037f6:	fa00 f202 	lsl.w	r2, r0, r2
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000e100 	.word	0xe000e100

08003810 <__NVIC_SetPriority>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	6039      	str	r1, [r7, #0]
 800381a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db0a      	blt.n	800383a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	490c      	ldr	r1, [pc, #48]	@ (800385c <__NVIC_SetPriority+0x4c>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	440b      	add	r3, r1
 8003834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003838:	e00a      	b.n	8003850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4908      	ldr	r1, [pc, #32]	@ (8003860 <__NVIC_SetPriority+0x50>)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3b04      	subs	r3, #4
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	440b      	add	r3, r1
 800384e:	761a      	strb	r2, [r3, #24]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <NVIC_EncodePriority>:
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	@ 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f1c3 0307 	rsb	r3, r3, #7
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf28      	it	cs
 8003882:	2304      	movcs	r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3304      	adds	r3, #4
 800388a:	2b06      	cmp	r3, #6
 800388c:	d902      	bls.n	8003894 <NVIC_EncodePriority+0x30>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3b03      	subs	r3, #3
 8003892:	e000      	b.n	8003896 <NVIC_EncodePriority+0x32>
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	f04f 32ff 	mov.w	r2, #4294967295
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	4313      	orrs	r3, r2
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	@ 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038dc:	d301      	bcc.n	80038e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038de:	2301      	movs	r3, #1
 80038e0:	e00f      	b.n	8003902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e2:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <SysTick_Config+0x40>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ea:	210f      	movs	r1, #15
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f7ff ff8e 	bl	8003810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <SysTick_Config+0x40>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <SysTick_Config+0x40>)
 80038fc:	2207      	movs	r2, #7
 80038fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff29 	bl	8003770 <__NVIC_SetPriorityGrouping>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003938:	f7ff ff3e 	bl	80037b8 <__NVIC_GetPriorityGrouping>
 800393c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff ff8e 	bl	8003864 <NVIC_EncodePriority>
 8003948:	4602      	mov	r2, r0
 800394a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff5d 	bl	8003810 <__NVIC_SetPriority>
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff31 	bl	80037d4 <__NVIC_EnableIRQ>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffa2 	bl	80038cc <SysTick_Config>
 8003988:	4603      	mov	r3, r0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003998:	f3bf 8f5f 	dmb	sy
}
 800399c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <HAL_MPU_Disable+0x28>)
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	4a06      	ldr	r2, [pc, #24]	@ (80039bc <HAL_MPU_Disable+0x28>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_MPU_Disable+0x2c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	605a      	str	r2, [r3, #4]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000ed00 	.word	0xe000ed00
 80039c0:	e000ed90 	.word	0xe000ed90

080039c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80039cc:	4a0b      	ldr	r2, [pc, #44]	@ (80039fc <HAL_MPU_Enable+0x38>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a00 <HAL_MPU_Enable+0x3c>)
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <HAL_MPU_Enable+0x3c>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80039e2:	f3bf 8f4f 	dsb	sy
}
 80039e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039e8:	f3bf 8f6f 	isb	sy
}
 80039ec:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000ed90 	.word	0xe000ed90
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	785a      	ldrb	r2, [r3, #1]
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_MPU_ConfigRegion+0x7c>)
 8003a12:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003a14:	4b1a      	ldr	r3, [pc, #104]	@ (8003a80 <HAL_MPU_ConfigRegion+0x7c>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <HAL_MPU_ConfigRegion+0x7c>)
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003a20:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <HAL_MPU_ConfigRegion+0x7c>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7b1b      	ldrb	r3, [r3, #12]
 8003a2c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7adb      	ldrb	r3, [r3, #11]
 8003a32:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7a9b      	ldrb	r3, [r3, #10]
 8003a3a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7b5b      	ldrb	r3, [r3, #13]
 8003a42:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	7b9b      	ldrb	r3, [r3, #14]
 8003a4a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7bdb      	ldrb	r3, [r3, #15]
 8003a52:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7a5b      	ldrb	r3, [r3, #9]
 8003a5a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7a1b      	ldrb	r3, [r3, #8]
 8003a62:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a64:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	7812      	ldrb	r2, [r2, #0]
 8003a6a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a6c:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a6e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a70:	6113      	str	r3, [r2, #16]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000ed90 	.word	0xe000ed90

08003a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	@ 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e175      	b.n	8003d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f040 8164 	bne.w	8003d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d005      	beq.n	8003ada <HAL_GPIO_Init+0x56>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d130      	bne.n	8003b3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b10:	2201      	movs	r2, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 0201 	and.w	r2, r3, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d017      	beq.n	8003b78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d123      	bne.n	8003bcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	08da      	lsrs	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80be 	beq.w	8003d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	4b66      	ldr	r3, [pc, #408]	@ (8003da8 <HAL_GPIO_Init+0x324>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	4a65      	ldr	r2, [pc, #404]	@ (8003da8 <HAL_GPIO_Init+0x324>)
 8003c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c1a:	4b63      	ldr	r3, [pc, #396]	@ (8003da8 <HAL_GPIO_Init+0x324>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c26:	4a61      	ldr	r2, [pc, #388]	@ (8003dac <HAL_GPIO_Init+0x328>)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	@ (8003db0 <HAL_GPIO_Init+0x32c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d037      	beq.n	8003cc2 <HAL_GPIO_Init+0x23e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a57      	ldr	r2, [pc, #348]	@ (8003db4 <HAL_GPIO_Init+0x330>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_GPIO_Init+0x23a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a56      	ldr	r2, [pc, #344]	@ (8003db8 <HAL_GPIO_Init+0x334>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02b      	beq.n	8003cba <HAL_GPIO_Init+0x236>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a55      	ldr	r2, [pc, #340]	@ (8003dbc <HAL_GPIO_Init+0x338>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d025      	beq.n	8003cb6 <HAL_GPIO_Init+0x232>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a54      	ldr	r2, [pc, #336]	@ (8003dc0 <HAL_GPIO_Init+0x33c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_GPIO_Init+0x22e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a53      	ldr	r2, [pc, #332]	@ (8003dc4 <HAL_GPIO_Init+0x340>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d019      	beq.n	8003cae <HAL_GPIO_Init+0x22a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	@ (8003dc8 <HAL_GPIO_Init+0x344>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a51      	ldr	r2, [pc, #324]	@ (8003dcc <HAL_GPIO_Init+0x348>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00d      	beq.n	8003ca6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a50      	ldr	r2, [pc, #320]	@ (8003dd0 <HAL_GPIO_Init+0x34c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd4 <HAL_GPIO_Init+0x350>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_GPIO_Init+0x21a>
 8003c9a:	2309      	movs	r3, #9
 8003c9c:	e012      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	e010      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	e00e      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	e00c      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003caa:	2306      	movs	r3, #6
 8003cac:	e00a      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cae:	2305      	movs	r3, #5
 8003cb0:	e008      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e004      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f002 0203 	and.w	r2, r2, #3
 8003cca:	0092      	lsls	r2, r2, #2
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cd4:	4935      	ldr	r1, [pc, #212]	@ (8003dac <HAL_GPIO_Init+0x328>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d06:	4a34      	ldr	r2, [pc, #208]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d0c:	4b32      	ldr	r3, [pc, #200]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d30:	4a29      	ldr	r2, [pc, #164]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d36:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d84:	4a14      	ldr	r2, [pc, #80]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	f67f ae86 	bls.w	8003aa4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3724      	adds	r7, #36	@ 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40020000 	.word	0x40020000
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40021400 	.word	0x40021400
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	40021c00 	.word	0x40021c00
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40022400 	.word	0x40022400
 8003dd8:	40013c00 	.word	0x40013c00

08003ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	887b      	ldrh	r3, [r7, #2]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	e001      	b.n	8003dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	807b      	strh	r3, [r7, #2]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e1c:	787b      	ldrb	r3, [r7, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	041a      	lsls	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	619a      	str	r2, [r3, #24]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	041a      	lsls	r2, r3, #16
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43d9      	mvns	r1, r3
 8003e5c:	887b      	ldrh	r3, [r7, #2]
 8003e5e:	400b      	ands	r3, r1
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f806 	bl	8003ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40013c00 	.word	0x40013c00

08003ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	4b23      	ldr	r3, [pc, #140]	@ (8003f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	4a22      	ldr	r2, [pc, #136]	@ (8003f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ed2:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ede:	4b1e      	ldr	r3, [pc, #120]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eea:	f7ff fc11 	bl	8003710 <HAL_GetTick>
 8003eee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ef0:	e009      	b.n	8003f06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ef2:	f7ff fc0d 	bl	8003710 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f00:	d901      	bls.n	8003f06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e022      	b.n	8003f4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f06:	4b14      	ldr	r3, [pc, #80]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f12:	d1ee      	bne.n	8003ef2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f14:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0f      	ldr	r2, [pc, #60]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f20:	f7ff fbf6 	bl	8003710 <HAL_GetTick>
 8003f24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f26:	e009      	b.n	8003f3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f28:	f7ff fbf2 	bl	8003710 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f36:	d901      	bls.n	8003f3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e007      	b.n	8003f4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f48:	d1ee      	bne.n	8003f28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40007000 	.word	0x40007000

08003f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f64:	2300      	movs	r3, #0
 8003f66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e291      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8087 	beq.w	800408e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f80:	4b96      	ldr	r3, [pc, #600]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d00c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8c:	4b93      	ldr	r3, [pc, #588]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d112      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62>
 8003f98:	4b90      	ldr	r3, [pc, #576]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa4:	d10b      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d06c      	beq.n	800408c <HAL_RCC_OscConfig+0x130>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d168      	bne.n	800408c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e26b      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x7a>
 8003fc8:	4b84      	ldr	r3, [pc, #528]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a83      	ldr	r2, [pc, #524]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e02e      	b.n	8004034 <HAL_RCC_OscConfig+0xd8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x9c>
 8003fde:	4b7f      	ldr	r3, [pc, #508]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b7c      	ldr	r3, [pc, #496]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7b      	ldr	r2, [pc, #492]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8003ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e01d      	b.n	8004034 <HAL_RCC_OscConfig+0xd8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0xc0>
 8004002:	4b76      	ldr	r3, [pc, #472]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a75      	ldr	r2, [pc, #468]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b73      	ldr	r3, [pc, #460]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a72      	ldr	r2, [pc, #456]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0xd8>
 800401c:	4b6f      	ldr	r3, [pc, #444]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a6e      	ldr	r2, [pc, #440]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b6c      	ldr	r3, [pc, #432]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a6b      	ldr	r2, [pc, #428]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7ff fb68 	bl	8003710 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7ff fb64 	bl	8003710 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e21f      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b61      	ldr	r3, [pc, #388]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0xe8>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7ff fb54 	bl	8003710 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7ff fb50 	bl	8003710 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e20b      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	4b57      	ldr	r3, [pc, #348]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x110>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d069      	beq.n	800416e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800409a:	4b50      	ldr	r3, [pc, #320]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b4d      	ldr	r3, [pc, #308]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x190>
 80040b2:	4b4a      	ldr	r3, [pc, #296]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b47      	ldr	r3, [pc, #284]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x17a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1df      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b41      	ldr	r3, [pc, #260]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	493d      	ldr	r1, [pc, #244]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e040      	b.n	800416e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d023      	beq.n	800413c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b39      	ldr	r3, [pc, #228]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a38      	ldr	r2, [pc, #224]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7ff fb06 	bl	8003710 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004108:	f7ff fb02 	bl	8003710 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1bd      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411a:	4b30      	ldr	r3, [pc, #192]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b2d      	ldr	r3, [pc, #180]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4929      	ldr	r1, [pc, #164]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
 800413a:	e018      	b.n	800416e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413c:	4b27      	ldr	r3, [pc, #156]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a26      	ldr	r2, [pc, #152]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7ff fae2 	bl	8003710 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004150:	f7ff fade 	bl	8003710 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e199      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004162:	4b1e      	ldr	r3, [pc, #120]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d038      	beq.n	80041ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d019      	beq.n	80041b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004182:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004186:	4a15      	ldr	r2, [pc, #84]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7ff fabf 	bl	8003710 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004196:	f7ff fabb 	bl	8003710 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e176      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x23a>
 80041b4:	e01a      	b.n	80041ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b6:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80041b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ba:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <HAL_RCC_OscConfig+0x280>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7ff faa5 	bl	8003710 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ca:	f7ff faa1 	bl	8003710 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d903      	bls.n	80041e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e15c      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
 80041dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	4b91      	ldr	r3, [pc, #580]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80041e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ee      	bne.n	80041ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80a4 	beq.w	8004342 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b88      	ldr	r3, [pc, #544]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	4a87      	ldr	r2, [pc, #540]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004210:	6413      	str	r3, [r2, #64]	@ 0x40
 8004212:	4b85      	ldr	r3, [pc, #532]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004222:	4b82      	ldr	r3, [pc, #520]	@ (800442c <HAL_RCC_OscConfig+0x4d0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d118      	bne.n	8004260 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800422e:	4b7f      	ldr	r3, [pc, #508]	@ (800442c <HAL_RCC_OscConfig+0x4d0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a7e      	ldr	r2, [pc, #504]	@ (800442c <HAL_RCC_OscConfig+0x4d0>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	f7ff fa69 	bl	8003710 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004242:	f7ff fa65 	bl	8003710 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b64      	cmp	r3, #100	@ 0x64
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e120      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004254:	4b75      	ldr	r3, [pc, #468]	@ (800442c <HAL_RCC_OscConfig+0x4d0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x31a>
 8004268:	4b6f      	ldr	r3, [pc, #444]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426c:	4a6e      	ldr	r2, [pc, #440]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6713      	str	r3, [r2, #112]	@ 0x70
 8004274:	e02d      	b.n	80042d2 <HAL_RCC_OscConfig+0x376>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x33c>
 800427e:	4b6a      	ldr	r3, [pc, #424]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	4a69      	ldr	r2, [pc, #420]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	@ 0x70
 800428a:	4b67      	ldr	r3, [pc, #412]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428e:	4a66      	ldr	r2, [pc, #408]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6713      	str	r3, [r2, #112]	@ 0x70
 8004296:	e01c      	b.n	80042d2 <HAL_RCC_OscConfig+0x376>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x35e>
 80042a0:	4b61      	ldr	r3, [pc, #388]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a4:	4a60      	ldr	r2, [pc, #384]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0x376>
 80042ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a5a      	ldr	r2, [pc, #360]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	4b58      	ldr	r3, [pc, #352]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	4a57      	ldr	r2, [pc, #348]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7ff fa19 	bl	8003710 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7ff fa15 	bl	8003710 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0ce      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCC_OscConfig+0x386>
 8004304:	e014      	b.n	8004330 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7ff fa03 	bl	8003710 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7ff f9ff 	bl	8003710 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0b8      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004324:	4b40      	ldr	r3, [pc, #256]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ee      	bne.n	800430e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d105      	bne.n	8004342 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004336:	4b3c      	ldr	r3, [pc, #240]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	4a3b      	ldr	r2, [pc, #236]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 800433c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80a4 	beq.w	8004494 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800434c:	4b36      	ldr	r3, [pc, #216]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b08      	cmp	r3, #8
 8004356:	d06b      	beq.n	8004430 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d149      	bne.n	80043f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a30      	ldr	r2, [pc, #192]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7ff f9d0 	bl	8003710 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004374:	f7ff f9cc 	bl	8003710 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e087      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	4b28      	ldr	r3, [pc, #160]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	4313      	orrs	r3, r2
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80043ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c0:	4b19      	ldr	r3, [pc, #100]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a18      	ldr	r2, [pc, #96]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80043c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7ff f9a0 	bl	8003710 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7ff f99c 	bl	8003710 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e057      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x478>
 80043f2:	e04f      	b.n	8004494 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7ff f986 	bl	8003710 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7ff f982 	bl	8003710 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e03d      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCC_OscConfig+0x4cc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x4ac>
 8004426:	e035      	b.n	8004494 <HAL_RCC_OscConfig+0x538>
 8004428:	40023800 	.word	0x40023800
 800442c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004430:	4b1b      	ldr	r3, [pc, #108]	@ (80044a0 <HAL_RCC_OscConfig+0x544>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d028      	beq.n	8004490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d121      	bne.n	8004490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d11a      	bne.n	8004490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0d0      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d910      	bls.n	80044ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b67      	ldr	r3, [pc, #412]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 020f 	bic.w	r2, r3, #15
 80044d2:	4965      	ldr	r1, [pc, #404]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b63      	ldr	r3, [pc, #396]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b8      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004504:	4b59      	ldr	r3, [pc, #356]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a58      	ldr	r2, [pc, #352]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800450a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800450e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800451c:	4b53      	ldr	r3, [pc, #332]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a52      	ldr	r2, [pc, #328]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004526:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b50      	ldr	r3, [pc, #320]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	494d      	ldr	r1, [pc, #308]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d040      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b47      	ldr	r3, [pc, #284]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d115      	bne.n	8004586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b41      	ldr	r3, [pc, #260]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e073      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004576:	4b3d      	ldr	r3, [pc, #244]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06b      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b39      	ldr	r3, [pc, #228]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4936      	ldr	r1, [pc, #216]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7ff f8ba 	bl	8003710 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7ff f8b6 	bl	8003710 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e053      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b2d      	ldr	r3, [pc, #180]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b27      	ldr	r3, [pc, #156]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d210      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b24      	ldr	r3, [pc, #144]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 020f 	bic.w	r2, r3, #15
 80045de:	4922      	ldr	r1, [pc, #136]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b20      	ldr	r3, [pc, #128]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e032      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4916      	ldr	r1, [pc, #88]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004622:	4b12      	ldr	r3, [pc, #72]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	490e      	ldr	r1, [pc, #56]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004636:	f000 f821 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800463a:	4602      	mov	r2, r0
 800463c:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	490a      	ldr	r1, [pc, #40]	@ (8004670 <HAL_RCC_ClockConfig+0x1cc>)
 8004648:	5ccb      	ldrb	r3, [r1, r3]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a09      	ldr	r2, [pc, #36]	@ (8004674 <HAL_RCC_ClockConfig+0x1d0>)
 8004650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004652:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <HAL_RCC_ClockConfig+0x1d4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f816 	bl	8003688 <HAL_InitTick>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023c00 	.word	0x40023c00
 800466c:	40023800 	.word	0x40023800
 8004670:	08007b2c 	.word	0x08007b2c
 8004674:	20000000 	.word	0x20000000
 8004678:	20000168 	.word	0x20000168

0800467c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b090      	sub	sp, #64	@ 0x40
 8004682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	637b      	str	r3, [r7, #52]	@ 0x34
 8004688:	2300      	movs	r3, #0
 800468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800468c:	2300      	movs	r3, #0
 800468e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004694:	4b59      	ldr	r3, [pc, #356]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b08      	cmp	r3, #8
 800469e:	d00d      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x40>
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	f200 80a1 	bhi.w	80047e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x34>
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ae:	e09b      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b53      	ldr	r3, [pc, #332]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x184>)
 80046b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046b4:	e09b      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b6:	4b53      	ldr	r3, [pc, #332]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ba:	e098      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046bc:	4b4f      	ldr	r3, [pc, #316]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046c6:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d028      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d2:	4b4a      	ldr	r3, [pc, #296]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	2200      	movs	r2, #0
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046e4:	2100      	movs	r1, #0
 80046e6:	4b47      	ldr	r3, [pc, #284]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e8:	fb03 f201 	mul.w	r2, r3, r1
 80046ec:	2300      	movs	r3, #0
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	4a43      	ldr	r2, [pc, #268]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046f6:	fba0 1202 	umull	r1, r2, r0, r2
 80046fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046fc:	460a      	mov	r2, r1
 80046fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004702:	4413      	add	r3, r2
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004708:	2200      	movs	r2, #0
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	61fa      	str	r2, [r7, #28]
 800470e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004716:	f7fb fd77 	bl	8000208 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4613      	mov	r3, r2
 8004720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004722:	e053      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004724:	4b35      	ldr	r3, [pc, #212]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	099b      	lsrs	r3, r3, #6
 800472a:	2200      	movs	r2, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	617a      	str	r2, [r7, #20]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004736:	f04f 0b00 	mov.w	fp, #0
 800473a:	4652      	mov	r2, sl
 800473c:	465b      	mov	r3, fp
 800473e:	f04f 0000 	mov.w	r0, #0
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	0159      	lsls	r1, r3, #5
 8004748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474c:	0150      	lsls	r0, r2, #5
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	ebb2 080a 	subs.w	r8, r2, sl
 8004756:	eb63 090b 	sbc.w	r9, r3, fp
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800476a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800476e:	ebb2 0408 	subs.w	r4, r2, r8
 8004772:	eb63 0509 	sbc.w	r5, r3, r9
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	00eb      	lsls	r3, r5, #3
 8004780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004784:	00e2      	lsls	r2, r4, #3
 8004786:	4614      	mov	r4, r2
 8004788:	461d      	mov	r5, r3
 800478a:	eb14 030a 	adds.w	r3, r4, sl
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	eb45 030b 	adc.w	r3, r5, fp
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a2:	4629      	mov	r1, r5
 80047a4:	028b      	lsls	r3, r1, #10
 80047a6:	4621      	mov	r1, r4
 80047a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ac:	4621      	mov	r1, r4
 80047ae:	028a      	lsls	r2, r1, #10
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	2200      	movs	r2, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c0:	f7fb fd22 	bl	8000208 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80047dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047e6:	e002      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3740      	adds	r7, #64	@ 0x40
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	00f42400 	.word	0x00f42400
 8004804:	017d7840 	.word	0x017d7840

08004808 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	@ (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000000 	.word	0x20000000

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a9b      	lsrs	r3, r3, #10
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	@ (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	08007b3c 	.word	0x08007b3c

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800484c:	f7ff ffdc 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	@ (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	08007b3c 	.word	0x08007b3c

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004898:	4b69      	ldr	r3, [pc, #420]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a68      	ldr	r2, [pc, #416]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048a2:	6093      	str	r3, [r2, #8]
 80048a4:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ac:	4964      	ldr	r1, [pc, #400]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d017      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d8:	4959      	ldr	r1, [pc, #356]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e8:	d101      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048ea:	2301      	movs	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d017      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004906:	4b4e      	ldr	r3, [pc, #312]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800490c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	494a      	ldr	r1, [pc, #296]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004924:	d101      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004932:	2301      	movs	r3, #1
 8004934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 808b 	beq.w	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004954:	4b3a      	ldr	r3, [pc, #232]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	4a39      	ldr	r2, [pc, #228]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800495e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004960:	4b37      	ldr	r3, [pc, #220]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800496c:	4b35      	ldr	r3, [pc, #212]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a34      	ldr	r2, [pc, #208]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fe feca 	bl	8003710 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fe fec6 	bl	8003710 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	@ 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e357      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004992:	4b2c      	ldr	r3, [pc, #176]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800499e:	4b28      	ldr	r3, [pc, #160]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d035      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d02e      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049bc:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049de:	4a18      	ldr	r2, [pc, #96]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049e4:	4b16      	ldr	r3, [pc, #88]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d114      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe fe8e 	bl	8003710 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fe fe8a 	bl	8003710 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e319      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0ee      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a26:	d111      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a28:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a34:	4b04      	ldr	r3, [pc, #16]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a36:	400b      	ands	r3, r1
 8004a38:	4901      	ldr	r1, [pc, #4]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
 8004a3e:	e00b      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40007000 	.word	0x40007000
 8004a48:	0ffffcff 	.word	0x0ffffcff
 8004a4c:	4baa      	ldr	r3, [pc, #680]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4aa9      	ldr	r2, [pc, #676]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a52:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a56:	6093      	str	r3, [r2, #8]
 8004a58:	4ba7      	ldr	r3, [pc, #668]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a64:	49a4      	ldr	r1, [pc, #656]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a76:	4ba0      	ldr	r3, [pc, #640]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a7c:	4a9e      	ldr	r2, [pc, #632]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a86:	4b9c      	ldr	r3, [pc, #624]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	4999      	ldr	r1, [pc, #612]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aa4:	4b94      	ldr	r3, [pc, #592]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aaa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ab2:	4991      	ldr	r1, [pc, #580]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ac6:	4b8c      	ldr	r3, [pc, #560]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004acc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ad4:	4988      	ldr	r1, [pc, #544]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ae8:	4b83      	ldr	r3, [pc, #524]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af6:	4980      	ldr	r1, [pc, #512]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b18:	4977      	ldr	r1, [pc, #476]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b2c:	4b72      	ldr	r3, [pc, #456]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b32:	f023 0203 	bic.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	496f      	ldr	r1, [pc, #444]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b54:	f023 020c 	bic.w	r2, r3, #12
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5c:	4966      	ldr	r1, [pc, #408]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b70:	4b61      	ldr	r3, [pc, #388]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7e:	495e      	ldr	r1, [pc, #376]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b92:	4b59      	ldr	r3, [pc, #356]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b98:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba0:	4955      	ldr	r1, [pc, #340]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc2:	494d      	ldr	r1, [pc, #308]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bd6:	4b48      	ldr	r3, [pc, #288]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bdc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be4:	4944      	ldr	r1, [pc, #272]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c06:	493c      	ldr	r1, [pc, #240]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c1a:	4b37      	ldr	r3, [pc, #220]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c28:	4933      	ldr	r1, [pc, #204]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c4a:	492b      	ldr	r1, [pc, #172]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d011      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c5e:	4b26      	ldr	r3, [pc, #152]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c64:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c6c:	4922      	ldr	r1, [pc, #136]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c9e:	4b16      	ldr	r3, [pc, #88]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cac:	4912      	ldr	r1, [pc, #72]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cd0:	4909      	ldr	r1, [pc, #36]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d006      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80d9 	beq.w	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cec:	4b02      	ldr	r3, [pc, #8]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a01      	ldr	r2, [pc, #4]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cf6:	e001      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfe:	f7fe fd07 	bl	8003710 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d06:	f7fe fd03 	bl	8003710 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b64      	cmp	r3, #100	@ 0x64
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e194      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d18:	4b6c      	ldr	r3, [pc, #432]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d021      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11d      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d38:	4b64      	ldr	r3, [pc, #400]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d46:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4c:	0e1b      	lsrs	r3, r3, #24
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	019a      	lsls	r2, r3, #6
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	061b      	lsls	r3, r3, #24
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	071b      	lsls	r3, r3, #28
 8004d6c:	4957      	ldr	r1, [pc, #348]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d9e:	d129      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004da0:	4b4a      	ldr	r3, [pc, #296]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004db4:	0f1b      	lsrs	r3, r3, #28
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	019a      	lsls	r2, r3, #6
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	071b      	lsls	r3, r3, #28
 8004dd4:	493d      	ldr	r1, [pc, #244]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004de2:	f023 021f 	bic.w	r2, r3, #31
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01d      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e00:	4b32      	ldr	r3, [pc, #200]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e06:	0e1b      	lsrs	r3, r3, #24
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e14:	0f1b      	lsrs	r3, r3, #28
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	019a      	lsls	r2, r3, #6
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	041b      	lsls	r3, r3, #16
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	071b      	lsls	r3, r3, #28
 8004e34:	4925      	ldr	r1, [pc, #148]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	019a      	lsls	r2, r3, #6
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	071b      	lsls	r3, r3, #28
 8004e64:	4919      	ldr	r1, [pc, #100]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a16      	ldr	r2, [pc, #88]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e78:	f7fe fc4a 	bl	8003710 <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e80:	f7fe fc46 	bl	8003710 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	@ 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0d7      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	f040 80cd 	bne.w	8005040 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ea6:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a08      	ldr	r2, [pc, #32]	@ (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb2:	f7fe fc2d 	bl	8003710 <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eba:	f7fe fc29 	bl	8003710 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b64      	cmp	r3, #100	@ 0x64
 8004ec6:	d903      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0ba      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ecc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004edc:	d0ed      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d02e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d12a      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f06:	4b51      	ldr	r3, [pc, #324]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f14:	4b4d      	ldr	r3, [pc, #308]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1a:	0f1b      	lsrs	r3, r3, #28
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	019a      	lsls	r2, r3, #6
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	431a      	orrs	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	071b      	lsls	r3, r3, #28
 8004f3a:	4944      	ldr	r1, [pc, #272]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f42:	4b42      	ldr	r3, [pc, #264]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	3b01      	subs	r3, #1
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	493d      	ldr	r1, [pc, #244]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d022      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f70:	d11d      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f72:	4b36      	ldr	r3, [pc, #216]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	0e1b      	lsrs	r3, r3, #24
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f80:	4b32      	ldr	r3, [pc, #200]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	0f1b      	lsrs	r3, r3, #28
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	019a      	lsls	r2, r3, #6
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	041b      	lsls	r3, r3, #16
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	061b      	lsls	r3, r3, #24
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	071b      	lsls	r3, r3, #28
 8004fa6:	4929      	ldr	r1, [pc, #164]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d028      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fba:	4b24      	ldr	r3, [pc, #144]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fc8:	4b20      	ldr	r3, [pc, #128]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	019a      	lsls	r2, r3, #6
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	071b      	lsls	r3, r3, #28
 8004fee:	4917      	ldr	r1, [pc, #92]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ff6:	4b15      	ldr	r3, [pc, #84]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	4911      	ldr	r1, [pc, #68]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800500c:	4b0f      	ldr	r3, [pc, #60]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0e      	ldr	r2, [pc, #56]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005018:	f7fe fb7a 	bl	8003710 <HAL_GetTick>
 800501c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005020:	f7fe fb76 	bl	8003710 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e007      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800503e:	d1ef      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800

08005050 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0c1      	b.n	80051e6 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	d108      	bne.n	800507c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005072:	d009      	beq.n	8005088 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	61da      	str	r2, [r3, #28]
 800507a:	e005      	b.n	8005088 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d12a      	bne.n	80050f0 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a52      	ldr	r2, [pc, #328]	@ (80051f0 <HAL_SPI_Init+0x1a0>)
 80050a6:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a52      	ldr	r2, [pc, #328]	@ (80051f4 <HAL_SPI_Init+0x1a4>)
 80050ac:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a51      	ldr	r2, [pc, #324]	@ (80051f8 <HAL_SPI_Init+0x1a8>)
 80050b2:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a51      	ldr	r2, [pc, #324]	@ (80051fc <HAL_SPI_Init+0x1ac>)
 80050b8:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a50      	ldr	r2, [pc, #320]	@ (8005200 <HAL_SPI_Init+0x1b0>)
 80050be:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a50      	ldr	r2, [pc, #320]	@ (8005204 <HAL_SPI_Init+0x1b4>)
 80050c4:	679a      	str	r2, [r3, #120]	@ 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005208 <HAL_SPI_Init+0x1b8>)
 80050ca:	67da      	str	r2, [r3, #124]	@ 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a4f      	ldr	r2, [pc, #316]	@ (800520c <HAL_SPI_Init+0x1bc>)
 80050d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    if (hspi->MspInitCallback == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005210 <HAL_SPI_Init+0x1c0>)
 80050e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005110:	d902      	bls.n	8005118 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	e002      	b.n	800511e <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800511c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005126:	d007      	beq.n	8005138 <HAL_SPI_Init+0xe8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	ea42 0103 	orr.w	r1, r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f003 0204 	and.w	r2, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051b4:	ea42 0103 	orr.w	r1, r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	08005659 	.word	0x08005659
 80051f4:	0800566d 	.word	0x0800566d
 80051f8:	08005681 	.word	0x08005681
 80051fc:	08005695 	.word	0x08005695
 8005200:	080056a9 	.word	0x080056a9
 8005204:	080056bd 	.word	0x080056bd
 8005208:	080056d1 	.word	0x080056d1
 800520c:	080056e5 	.word	0x080056e5
 8005210:	080009a9 	.word	0x080009a9

08005214 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	@ 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005222:	2301      	movs	r3, #1
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_SPI_TransmitReceive+0x26>
 8005236:	2302      	movs	r3, #2
 8005238:	e20a      	b.n	8005650 <HAL_SPI_TransmitReceive+0x43c>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005242:	f7fe fa65 	bl	8003710 <HAL_GetTick>
 8005246:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800524e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800525e:	7efb      	ldrb	r3, [r7, #27]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d00e      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x6e>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800526a:	d106      	bne.n	800527a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <HAL_SPI_TransmitReceive+0x66>
 8005274:	7efb      	ldrb	r3, [r7, #27]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d003      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005280:	e1e0      	b.n	8005644 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x80>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x80>
 800528e:	887b      	ldrh	r3, [r7, #2]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800529a:	e1d3      	b.n	8005644 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d003      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2205      	movs	r2, #5
 80052ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052f2:	d802      	bhi.n	80052fa <HAL_SPI_TransmitReceive+0xe6>
 80052f4:	8a3b      	ldrh	r3, [r7, #16]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d908      	bls.n	800530c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	e007      	b.n	800531c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800531a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005326:	2b40      	cmp	r3, #64	@ 0x40
 8005328:	d007      	beq.n	800533a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005342:	f240 8081 	bls.w	8005448 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x140>
 800534e:	8a7b      	ldrh	r3, [r7, #18]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d16d      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005378:	e05a      	b.n	8005430 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d11b      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x1ac>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d016      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x1ac>
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	2b01      	cmp	r3, #1
 8005396:	d113      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d11c      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x1f4>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	b292      	uxth	r2, r2
 80053e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005408:	f7fe f982 	bl	8003710 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005414:	429a      	cmp	r2, r3
 8005416:	d80b      	bhi.n	8005430 <HAL_SPI_TransmitReceive+0x21c>
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d007      	beq.n	8005430 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800542e:	e109      	b.n	8005644 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d19f      	bne.n	800537a <HAL_SPI_TransmitReceive+0x166>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d199      	bne.n	800537a <HAL_SPI_TransmitReceive+0x166>
 8005446:	e0e3      	b.n	8005610 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x244>
 8005450:	8a7b      	ldrh	r3, [r7, #18]
 8005452:	2b01      	cmp	r3, #1
 8005454:	f040 80cf 	bne.w	80055f6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	d912      	bls.n	8005488 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	881a      	ldrh	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005472:	1c9a      	adds	r2, r3, #2
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b02      	subs	r3, #2
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005486:	e0b6      	b.n	80055f6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ae:	e0a2      	b.n	80055f6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d134      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x314>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02f      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x314>
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d12c      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d912      	bls.n	80054fe <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	1c9a      	adds	r2, r3, #2
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b02      	subs	r3, #2
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054fc:	e012      	b.n	8005524 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d148      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x3b4>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d042      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d923      	bls.n	8005596 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	b292      	uxth	r2, r2
 800555a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	1c9a      	adds	r2, r3, #2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b02      	subs	r3, #2
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d81f      	bhi.n	80055c4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e016      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f103 020c 	add.w	r2, r3, #12
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c4:	2301      	movs	r3, #1
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055c8:	f7fe f8a2 	bl	8003710 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d803      	bhi.n	80055e0 <HAL_SPI_TransmitReceive+0x3cc>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x3d2>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80055f4:	e026      	b.n	8005644 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f47f af57 	bne.w	80054b0 <HAL_SPI_TransmitReceive+0x29c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	f47f af50 	bne.w	80054b0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f98d 	bl	8005934 <SPI_EndRxTxTransaction>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563a:	e003      	b.n	8005644 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800564c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005650:	4618      	mov	r0, r3
 8005652:	3728      	adds	r7, #40	@ 0x28
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005708:	f7fe f802 	bl	8003710 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005718:	f7fd fffa 	bl	8003710 <HAL_GetTick>
 800571c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800571e:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	0d1b      	lsrs	r3, r3, #20
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572e:	e054      	b.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d050      	beq.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005738:	f7fd ffea 	bl	8003710 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	429a      	cmp	r2, r3
 8005746:	d902      	bls.n	800574e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d13d      	bne.n	80057ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800575c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005766:	d111      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005770:	d004      	beq.n	800577c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577a:	d107      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800578a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005794:	d10f      	bne.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e017      	b.n	80057fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d19b      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800581a:	f7fd ff79 	bl	8003710 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800582a:	f7fd ff71 	bl	8003710 <HAL_GetTick>
 800582e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005838:	4b3d      	ldr	r3, [pc, #244]	@ (8005930 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00da      	lsls	r2, r3, #3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	0d1b      	lsrs	r3, r3, #20
 8005848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005850:	e060      	b.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005858:	d107      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005868:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d050      	beq.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005872:	f7fd ff4d 	bl	8003710 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587e:	429a      	cmp	r2, r3
 8005880:	d902      	bls.n	8005888 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d13d      	bne.n	8005904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a0:	d111      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058aa:	d004      	beq.n	80058b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b4:	d107      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ce:	d10f      	bne.n	80058f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e010      	b.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3b01      	subs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d196      	bne.n	8005852 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	@ 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000000 	.word	0x20000000

08005934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff ff5b 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800595c:	f043 0220 	orr.w	r2, r3, #32
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e046      	b.n	80059f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005968:	4b25      	ldr	r3, [pc, #148]	@ (8005a00 <SPI_EndRxTxTransaction+0xcc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a25      	ldr	r2, [pc, #148]	@ (8005a04 <SPI_EndRxTxTransaction+0xd0>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0d5b      	lsrs	r3, r3, #21
 8005974:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005986:	d112      	bne.n	80059ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	2180      	movs	r1, #128	@ 0x80
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff feb0 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e023      	b.n	80059f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c4:	2b80      	cmp	r3, #128	@ 0x80
 80059c6:	d0f2      	beq.n	80059ae <SPI_EndRxTxTransaction+0x7a>
 80059c8:	e000      	b.n	80059cc <SPI_EndRxTxTransaction+0x98>
        break;
 80059ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff ff15 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e000      	b.n	80059f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000000 	.word	0x20000000
 8005a04:	165e9f81 	.word	0x165e9f81

08005a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e054      	b.n	8005ac4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d111      	bne.n	8005a4a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fa08 	bl	8006e44 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a23      	ldr	r2, [pc, #140]	@ (8005acc <HAL_TIM_Base_Init+0xc4>)
 8005a40:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f000 fe27 	bl	80066b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	08000c4d 	.word	0x08000c4d

08005ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e054      	b.n	8005b8c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d111      	bne.n	8005b12 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f001 f9a4 	bl	8006e44 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a23      	ldr	r2, [pc, #140]	@ (8005b94 <HAL_TIM_PWM_Init+0xc4>)
 8005b08:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f000 fdc3 	bl	80066b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	08005b99 	.word	0x08005b99

08005b98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_TIM_PWM_Start_IT+0x28>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e03c      	b.n	8005c4e <HAL_TIM_PWM_Start_IT+0xa2>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d109      	bne.n	8005bee <HAL_TIM_PWM_Start_IT+0x42>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	bf14      	ite	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	2300      	moveq	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	e02f      	b.n	8005c4e <HAL_TIM_PWM_Start_IT+0xa2>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d109      	bne.n	8005c08 <HAL_TIM_PWM_Start_IT+0x5c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	bf14      	ite	ne
 8005c00:	2301      	movne	r3, #1
 8005c02:	2300      	moveq	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e022      	b.n	8005c4e <HAL_TIM_PWM_Start_IT+0xa2>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d109      	bne.n	8005c22 <HAL_TIM_PWM_Start_IT+0x76>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e015      	b.n	8005c4e <HAL_TIM_PWM_Start_IT+0xa2>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d109      	bne.n	8005c3c <HAL_TIM_PWM_Start_IT+0x90>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e008      	b.n	8005c4e <HAL_TIM_PWM_Start_IT+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0dd      	b.n	8005e12 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start_IT+0xba>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c64:	e023      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0x102>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start_IT+0xca>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c74:	e01b      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0x102>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start_IT+0xda>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c84:	e013      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0x102>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start_IT+0xea>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c94:	e00b      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0x102>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start_IT+0xfa>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca4:	e003      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0x102>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b0c      	cmp	r3, #12
 8005cb2:	d841      	bhi.n	8005d38 <HAL_TIM_PWM_Start_IT+0x18c>
 8005cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cbc <HAL_TIM_PWM_Start_IT+0x110>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005d39 	.word	0x08005d39
 8005cc4:	08005d39 	.word	0x08005d39
 8005cc8:	08005d39 	.word	0x08005d39
 8005ccc:	08005d03 	.word	0x08005d03
 8005cd0:	08005d39 	.word	0x08005d39
 8005cd4:	08005d39 	.word	0x08005d39
 8005cd8:	08005d39 	.word	0x08005d39
 8005cdc:	08005d15 	.word	0x08005d15
 8005ce0:	08005d39 	.word	0x08005d39
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005d39 	.word	0x08005d39
 8005cec:	08005d27 	.word	0x08005d27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0202 	orr.w	r2, r2, #2
 8005cfe:	60da      	str	r2, [r3, #12]
      break;
 8005d00:	e01d      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0204 	orr.w	r2, r2, #4
 8005d10:	60da      	str	r2, [r3, #12]
      break;
 8005d12:	e014      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0208 	orr.w	r2, r2, #8
 8005d22:	60da      	str	r2, [r3, #12]
      break;
 8005d24:	e00b      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0210 	orr.w	r2, r2, #16
 8005d34:	60da      	str	r2, [r3, #12]
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d165      	bne.n	8005e10 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 f853 	bl	8006df8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a31      	ldr	r2, [pc, #196]	@ (8005e1c <HAL_TIM_PWM_Start_IT+0x270>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIM_PWM_Start_IT+0x1ba>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2f      	ldr	r2, [pc, #188]	@ (8005e20 <HAL_TIM_PWM_Start_IT+0x274>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_PWM_Start_IT+0x1be>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <HAL_TIM_PWM_Start_IT+0x1c0>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a25      	ldr	r2, [pc, #148]	@ (8005e1c <HAL_TIM_PWM_Start_IT+0x270>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d022      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x224>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d92:	d01d      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x224>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a22      	ldr	r2, [pc, #136]	@ (8005e24 <HAL_TIM_PWM_Start_IT+0x278>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x224>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a21      	ldr	r2, [pc, #132]	@ (8005e28 <HAL_TIM_PWM_Start_IT+0x27c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x224>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1f      	ldr	r2, [pc, #124]	@ (8005e2c <HAL_TIM_PWM_Start_IT+0x280>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x224>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e20 <HAL_TIM_PWM_Start_IT+0x274>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x224>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e30 <HAL_TIM_PWM_Start_IT+0x284>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x224>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1a      	ldr	r2, [pc, #104]	@ (8005e34 <HAL_TIM_PWM_Start_IT+0x288>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d115      	bne.n	8005dfc <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	4b18      	ldr	r3, [pc, #96]	@ (8005e38 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d015      	beq.n	8005e0e <HAL_TIM_PWM_Start_IT+0x262>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de8:	d011      	beq.n	8005e0e <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	e008      	b.n	8005e0e <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e000      	b.n	8005e10 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40001800 	.word	0x40001800
 8005e38:	00010007 	.word	0x00010007

08005e3c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d841      	bhi.n	8005ed4 <HAL_TIM_PWM_Stop_IT+0x98>
 8005e50:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e8d 	.word	0x08005e8d
 8005e5c:	08005ed5 	.word	0x08005ed5
 8005e60:	08005ed5 	.word	0x08005ed5
 8005e64:	08005ed5 	.word	0x08005ed5
 8005e68:	08005e9f 	.word	0x08005e9f
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08005ed5 	.word	0x08005ed5
 8005e78:	08005eb1 	.word	0x08005eb1
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005ed5 	.word	0x08005ed5
 8005e88:	08005ec3 	.word	0x08005ec3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0202 	bic.w	r2, r2, #2
 8005e9a:	60da      	str	r2, [r3, #12]
      break;
 8005e9c:	e01d      	b.n	8005eda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0204 	bic.w	r2, r2, #4
 8005eac:	60da      	str	r2, [r3, #12]
      break;
 8005eae:	e014      	b.n	8005eda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0208 	bic.w	r2, r2, #8
 8005ebe:	60da      	str	r2, [r3, #12]
      break;
 8005ec0:	e00b      	b.n	8005eda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0210 	bic.w	r2, r2, #16
 8005ed0:	60da      	str	r2, [r3, #12]
      break;
 8005ed2:	e002      	b.n	8005eda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d171      	bne.n	8005fc4 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 ff85 	bl	8006df8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a37      	ldr	r2, [pc, #220]	@ (8005fd0 <HAL_TIM_PWM_Stop_IT+0x194>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIM_PWM_Stop_IT+0xc6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a35      	ldr	r2, [pc, #212]	@ (8005fd4 <HAL_TIM_PWM_Stop_IT+0x198>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d101      	bne.n	8005f06 <HAL_TIM_PWM_Stop_IT+0xca>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d017      	beq.n	8005f3c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10f      	bne.n	8005f3c <HAL_TIM_PWM_Stop_IT+0x100>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a1a      	ldr	r2, [r3, #32]
 8005f22:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d107      	bne.n	8005f3c <HAL_TIM_PWM_Stop_IT+0x100>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10f      	bne.n	8005f6c <HAL_TIM_PWM_Stop_IT+0x130>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a1a      	ldr	r2, [r3, #32]
 8005f52:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d107      	bne.n	8005f6c <HAL_TIM_PWM_Stop_IT+0x130>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0201 	bic.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <HAL_TIM_PWM_Stop_IT+0x140>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f7a:	e023      	b.n	8005fc4 <HAL_TIM_PWM_Stop_IT+0x188>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d104      	bne.n	8005f8c <HAL_TIM_PWM_Stop_IT+0x150>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f8a:	e01b      	b.n	8005fc4 <HAL_TIM_PWM_Stop_IT+0x188>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d104      	bne.n	8005f9c <HAL_TIM_PWM_Stop_IT+0x160>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f9a:	e013      	b.n	8005fc4 <HAL_TIM_PWM_Stop_IT+0x188>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d104      	bne.n	8005fac <HAL_TIM_PWM_Stop_IT+0x170>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005faa:	e00b      	b.n	8005fc4 <HAL_TIM_PWM_Stop_IT+0x188>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d104      	bne.n	8005fbc <HAL_TIM_PWM_Stop_IT+0x180>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fba:	e003      	b.n	8005fc4 <HAL_TIM_PWM_Stop_IT+0x188>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d026      	beq.n	8006048 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d021      	beq.n	8006048 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0202 	mvn.w	r2, #2
 800600c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
 800602c:	e009      	b.n	8006042 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d026      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d021      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0204 	mvn.w	r2, #4
 8006064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
 8006084:	e009      	b.n	800609a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d026      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d021      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0208 	mvn.w	r2, #8
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	e009      	b.n	80060f2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d026      	beq.n	8006150 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	d021      	beq.n	8006150 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0210 	mvn.w	r2, #16
 8006114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2208      	movs	r2, #8
 800611a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
 8006134:	e009      	b.n	800614a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0201 	mvn.w	r2, #1
 800616c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00e      	beq.n	80061aa <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800619e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00e      	beq.n	80061fa <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f06f 0220 	mvn.w	r2, #32
 8006216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006246:	2302      	movs	r3, #2
 8006248:	e0ff      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b14      	cmp	r3, #20
 8006256:	f200 80f0 	bhi.w	800643a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800625a:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	080062b5 	.word	0x080062b5
 8006264:	0800643b 	.word	0x0800643b
 8006268:	0800643b 	.word	0x0800643b
 800626c:	0800643b 	.word	0x0800643b
 8006270:	080062f5 	.word	0x080062f5
 8006274:	0800643b 	.word	0x0800643b
 8006278:	0800643b 	.word	0x0800643b
 800627c:	0800643b 	.word	0x0800643b
 8006280:	08006337 	.word	0x08006337
 8006284:	0800643b 	.word	0x0800643b
 8006288:	0800643b 	.word	0x0800643b
 800628c:	0800643b 	.word	0x0800643b
 8006290:	08006377 	.word	0x08006377
 8006294:	0800643b 	.word	0x0800643b
 8006298:	0800643b 	.word	0x0800643b
 800629c:	0800643b 	.word	0x0800643b
 80062a0:	080063b9 	.word	0x080063b9
 80062a4:	0800643b 	.word	0x0800643b
 80062a8:	0800643b 	.word	0x0800643b
 80062ac:	0800643b 	.word	0x0800643b
 80062b0:	080063f9 	.word	0x080063f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 faa4 	bl	8006808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0208 	orr.w	r2, r2, #8
 80062ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0204 	bic.w	r2, r2, #4
 80062de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6999      	ldr	r1, [r3, #24]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	619a      	str	r2, [r3, #24]
      break;
 80062f2:	e0a5      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 faf6 	bl	80068ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800630e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800631e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6999      	ldr	r1, [r3, #24]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	021a      	lsls	r2, r3, #8
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	619a      	str	r2, [r3, #24]
      break;
 8006334:	e084      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fb4d 	bl	80069dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0208 	orr.w	r2, r2, #8
 8006350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0204 	bic.w	r2, r2, #4
 8006360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69d9      	ldr	r1, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	61da      	str	r2, [r3, #28]
      break;
 8006374:	e064      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fba3 	bl	8006ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69d9      	ldr	r1, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	021a      	lsls	r2, r3, #8
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	61da      	str	r2, [r3, #28]
      break;
 80063b6:	e043      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fbda 	bl	8006b78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063f6:	e023      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fc0c 	bl	8006c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006412:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006422:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006438:	e002      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
      break;
 800643e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop

08006454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_ConfigClockSource+0x1c>
 800646c:	2302      	movs	r3, #2
 800646e:	e0b4      	b.n	80065da <HAL_TIM_ConfigClockSource+0x186>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4b56      	ldr	r3, [pc, #344]	@ (80065e4 <HAL_TIM_ConfigClockSource+0x190>)
 800648c:	4013      	ands	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a8:	d03e      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0xd4>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ae:	f200 8087 	bhi.w	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b6:	f000 8086 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x172>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064be:	d87f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c0:	2b70      	cmp	r3, #112	@ 0x70
 80064c2:	d01a      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0xa6>
 80064c4:	2b70      	cmp	r3, #112	@ 0x70
 80064c6:	d87b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c8:	2b60      	cmp	r3, #96	@ 0x60
 80064ca:	d050      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x11a>
 80064cc:	2b60      	cmp	r3, #96	@ 0x60
 80064ce:	d877      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d0:	2b50      	cmp	r3, #80	@ 0x50
 80064d2:	d03c      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xfa>
 80064d4:	2b50      	cmp	r3, #80	@ 0x50
 80064d6:	d873      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d8:	2b40      	cmp	r3, #64	@ 0x40
 80064da:	d058      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x13a>
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d86f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e0:	2b30      	cmp	r3, #48	@ 0x30
 80064e2:	d064      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d86b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d060      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d867      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d05a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	e062      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800650a:	f000 fc55 	bl	8006db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800651c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	609a      	str	r2, [r3, #8]
      break;
 8006526:	e04f      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006538:	f000 fc3e 	bl	8006db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800654a:	609a      	str	r2, [r3, #8]
      break;
 800654c:	e03c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fbb2 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2150      	movs	r1, #80	@ 0x50
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fc0b 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 800656c:	e02c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800657a:	461a      	mov	r2, r3
 800657c:	f000 fbd1 	bl	8006d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2160      	movs	r1, #96	@ 0x60
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fbfb 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 800658c:	e01c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	461a      	mov	r2, r3
 800659c:	f000 fb92 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2140      	movs	r1, #64	@ 0x40
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fbeb 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e00c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 fbe2 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 80065be:	e003      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
      break;
 80065c4:	e000      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	fffeff88 	.word	0xfffeff88

080065e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a46      	ldr	r2, [pc, #280]	@ (80067dc <TIM_Base_SetConfig+0x12c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d013      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ce:	d00f      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a43      	ldr	r2, [pc, #268]	@ (80067e0 <TIM_Base_SetConfig+0x130>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a42      	ldr	r2, [pc, #264]	@ (80067e4 <TIM_Base_SetConfig+0x134>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a41      	ldr	r2, [pc, #260]	@ (80067e8 <TIM_Base_SetConfig+0x138>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a40      	ldr	r2, [pc, #256]	@ (80067ec <TIM_Base_SetConfig+0x13c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d108      	bne.n	8006702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a35      	ldr	r2, [pc, #212]	@ (80067dc <TIM_Base_SetConfig+0x12c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d02b      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006710:	d027      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a32      	ldr	r2, [pc, #200]	@ (80067e0 <TIM_Base_SetConfig+0x130>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d023      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a31      	ldr	r2, [pc, #196]	@ (80067e4 <TIM_Base_SetConfig+0x134>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01f      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a30      	ldr	r2, [pc, #192]	@ (80067e8 <TIM_Base_SetConfig+0x138>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01b      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a2f      	ldr	r2, [pc, #188]	@ (80067ec <TIM_Base_SetConfig+0x13c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d017      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2e      	ldr	r2, [pc, #184]	@ (80067f0 <TIM_Base_SetConfig+0x140>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2d      	ldr	r2, [pc, #180]	@ (80067f4 <TIM_Base_SetConfig+0x144>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00f      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2c      	ldr	r2, [pc, #176]	@ (80067f8 <TIM_Base_SetConfig+0x148>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00b      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2b      	ldr	r2, [pc, #172]	@ (80067fc <TIM_Base_SetConfig+0x14c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d007      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2a      	ldr	r2, [pc, #168]	@ (8006800 <TIM_Base_SetConfig+0x150>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a29      	ldr	r2, [pc, #164]	@ (8006804 <TIM_Base_SetConfig+0x154>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d108      	bne.n	8006774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a10      	ldr	r2, [pc, #64]	@ (80067dc <TIM_Base_SetConfig+0x12c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_Base_SetConfig+0xf8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a12      	ldr	r2, [pc, #72]	@ (80067ec <TIM_Base_SetConfig+0x13c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d103      	bne.n	80067b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d105      	bne.n	80067ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	611a      	str	r2, [r3, #16]
  }
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40010400 	.word	0x40010400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800
 80067fc:	40001800 	.word	0x40001800
 8006800:	40001c00 	.word	0x40001c00
 8006804:	40002000 	.word	0x40002000

08006808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f023 0201 	bic.w	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4b2b      	ldr	r3, [pc, #172]	@ (80068e0 <TIM_OC1_SetConfig+0xd8>)
 8006834:	4013      	ands	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f023 0302 	bic.w	r3, r3, #2
 8006850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a21      	ldr	r2, [pc, #132]	@ (80068e4 <TIM_OC1_SetConfig+0xdc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_OC1_SetConfig+0x64>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a20      	ldr	r2, [pc, #128]	@ (80068e8 <TIM_OC1_SetConfig+0xe0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d10c      	bne.n	8006886 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f023 0308 	bic.w	r3, r3, #8
 8006872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 0304 	bic.w	r3, r3, #4
 8006884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a16      	ldr	r2, [pc, #88]	@ (80068e4 <TIM_OC1_SetConfig+0xdc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC1_SetConfig+0x8e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a15      	ldr	r2, [pc, #84]	@ (80068e8 <TIM_OC1_SetConfig+0xe0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d111      	bne.n	80068ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800689c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	621a      	str	r2, [r3, #32]
}
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	fffeff8f 	.word	0xfffeff8f
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40010400 	.word	0x40010400

080068ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f023 0210 	bic.w	r2, r3, #16
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4b2e      	ldr	r3, [pc, #184]	@ (80069d0 <TIM_OC2_SetConfig+0xe4>)
 8006918:	4013      	ands	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0320 	bic.w	r3, r3, #32
 8006936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a23      	ldr	r2, [pc, #140]	@ (80069d4 <TIM_OC2_SetConfig+0xe8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d003      	beq.n	8006954 <TIM_OC2_SetConfig+0x68>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a22      	ldr	r2, [pc, #136]	@ (80069d8 <TIM_OC2_SetConfig+0xec>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d10d      	bne.n	8006970 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800695a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800696e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a18      	ldr	r2, [pc, #96]	@ (80069d4 <TIM_OC2_SetConfig+0xe8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_OC2_SetConfig+0x94>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a17      	ldr	r2, [pc, #92]	@ (80069d8 <TIM_OC2_SetConfig+0xec>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d113      	bne.n	80069a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800698e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	feff8fff 	.word	0xfeff8fff
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4b2d      	ldr	r3, [pc, #180]	@ (8006abc <TIM_OC3_SetConfig+0xe0>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a22      	ldr	r2, [pc, #136]	@ (8006ac0 <TIM_OC3_SetConfig+0xe4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC3_SetConfig+0x66>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a21      	ldr	r2, [pc, #132]	@ (8006ac4 <TIM_OC3_SetConfig+0xe8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d10d      	bne.n	8006a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a17      	ldr	r2, [pc, #92]	@ (8006ac0 <TIM_OC3_SetConfig+0xe4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_OC3_SetConfig+0x92>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a16      	ldr	r2, [pc, #88]	@ (8006ac4 <TIM_OC3_SetConfig+0xe8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d113      	bne.n	8006a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	fffeff8f 	.word	0xfffeff8f
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b6c <TIM_OC4_SetConfig+0xa4>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	031b      	lsls	r3, r3, #12
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a13      	ldr	r2, [pc, #76]	@ (8006b70 <TIM_OC4_SetConfig+0xa8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC4_SetConfig+0x68>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a12      	ldr	r2, [pc, #72]	@ (8006b74 <TIM_OC4_SetConfig+0xac>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d109      	bne.n	8006b44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	019b      	lsls	r3, r3, #6
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	feff8fff 	.word	0xfeff8fff
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40010400 	.word	0x40010400

08006b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c10 <TIM_OC5_SetConfig+0x98>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a12      	ldr	r2, [pc, #72]	@ (8006c14 <TIM_OC5_SetConfig+0x9c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x5e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a11      	ldr	r2, [pc, #68]	@ (8006c18 <TIM_OC5_SetConfig+0xa0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d109      	bne.n	8006bea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	621a      	str	r2, [r3, #32]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	fffeff8f 	.word	0xfffeff8f
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400

08006c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4b1c      	ldr	r3, [pc, #112]	@ (8006cb8 <TIM_OC6_SetConfig+0x9c>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	051b      	lsls	r3, r3, #20
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a13      	ldr	r2, [pc, #76]	@ (8006cbc <TIM_OC6_SetConfig+0xa0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC6_SetConfig+0x60>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a12      	ldr	r2, [pc, #72]	@ (8006cc0 <TIM_OC6_SetConfig+0xa4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d109      	bne.n	8006c90 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	feff8fff 	.word	0xfeff8fff
 8006cbc:	40010000 	.word	0x40010000
 8006cc0:	40010400 	.word	0x40010400

08006cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	f023 0201 	bic.w	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 030a 	bic.w	r3, r3, #10
 8006d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b087      	sub	sp, #28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f023 0210 	bic.w	r2, r3, #16
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	031b      	lsls	r3, r3, #12
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f043 0307 	orr.w	r3, r3, #7
 8006da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	609a      	str	r2, [r3, #8]
}
 8006dac:	bf00      	nop
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	021a      	lsls	r2, r3, #8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	609a      	str	r2, [r3, #8]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	401a      	ands	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	431a      	orrs	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec8 <TIM_ResetCallback+0x84>)
 8006e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1d      	ldr	r2, [pc, #116]	@ (8006ecc <TIM_ResetCallback+0x88>)
 8006e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed0 <TIM_ResetCallback+0x8c>)
 8006e60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed4 <TIM_ResetCallback+0x90>)
 8006e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ed8 <TIM_ResetCallback+0x94>)
 8006e70:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a19      	ldr	r2, [pc, #100]	@ (8006edc <TIM_ResetCallback+0x98>)
 8006e78:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a18      	ldr	r2, [pc, #96]	@ (8006ee0 <TIM_ResetCallback+0x9c>)
 8006e80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a17      	ldr	r2, [pc, #92]	@ (8006ee4 <TIM_ResetCallback+0xa0>)
 8006e88:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ee8 <TIM_ResetCallback+0xa4>)
 8006e90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a15      	ldr	r2, [pc, #84]	@ (8006eec <TIM_ResetCallback+0xa8>)
 8006e98:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a14      	ldr	r2, [pc, #80]	@ (8006ef0 <TIM_ResetCallback+0xac>)
 8006ea0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a13      	ldr	r2, [pc, #76]	@ (8006ef4 <TIM_ResetCallback+0xb0>)
 8006ea8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a12      	ldr	r2, [pc, #72]	@ (8006ef8 <TIM_ResetCallback+0xb4>)
 8006eb0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a11      	ldr	r2, [pc, #68]	@ (8006efc <TIM_ResetCallback+0xb8>)
 8006eb8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	080065e9 	.word	0x080065e9
 8006ecc:	080065fd 	.word	0x080065fd
 8006ed0:	08006675 	.word	0x08006675
 8006ed4:	08006689 	.word	0x08006689
 8006ed8:	08006625 	.word	0x08006625
 8006edc:	08006639 	.word	0x08006639
 8006ee0:	08006611 	.word	0x08006611
 8006ee4:	0800664d 	.word	0x0800664d
 8006ee8:	08006661 	.word	0x08006661
 8006eec:	0800669d 	.word	0x0800669d
 8006ef0:	0800701d 	.word	0x0800701d
 8006ef4:	08007031 	.word	0x08007031
 8006ef8:	08007045 	.word	0x08007045
 8006efc:	08007059 	.word	0x08007059

08006f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e06d      	b.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a30      	ldr	r2, [pc, #192]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2f      	ldr	r2, [pc, #188]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d108      	bne.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a20      	ldr	r2, [pc, #128]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d022      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8a:	d01d      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d018      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d013      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00e      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a15      	ldr	r2, [pc, #84]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a16      	ldr	r2, [pc, #88]	@ (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a15      	ldr	r2, [pc, #84]	@ (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d10c      	bne.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	40010000 	.word	0x40010000
 8007004:	40010400 	.word	0x40010400
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800

0800701c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e04e      	b.n	800711c <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d114      	bne.n	80070b0 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8a6 	bl	80071e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a20      	ldr	r2, [pc, #128]	@ (8007124 <HAL_UART_Init+0xb8>)
 80070a2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2224      	movs	r2, #36	@ 0x24
 80070b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0201 	bic.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fb2a 	bl	8007728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f8c3 	bl	8007260 <UART_SetConfig>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_UART_Init+0x78>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e01b      	b.n	800711c <HAL_UART_Init+0xb0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fba9 	bl	800786c <UART_CheckIdleState>
 800711a:	4603      	mov	r3, r0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	08000d61 	.word	0x08000d61

08007128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a14      	ldr	r2, [pc, #80]	@ (800723c <UART_InitCallbacksToDefault+0x5c>)
 80071ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a13      	ldr	r2, [pc, #76]	@ (8007240 <UART_InitCallbacksToDefault+0x60>)
 80071f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a12      	ldr	r2, [pc, #72]	@ (8007244 <UART_InitCallbacksToDefault+0x64>)
 80071fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a11      	ldr	r2, [pc, #68]	@ (8007248 <UART_InitCallbacksToDefault+0x68>)
 8007204:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a10      	ldr	r2, [pc, #64]	@ (800724c <UART_InitCallbacksToDefault+0x6c>)
 800720c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a0f      	ldr	r2, [pc, #60]	@ (8007250 <UART_InitCallbacksToDefault+0x70>)
 8007214:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a0e      	ldr	r2, [pc, #56]	@ (8007254 <UART_InitCallbacksToDefault+0x74>)
 800721c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a0d      	ldr	r2, [pc, #52]	@ (8007258 <UART_InitCallbacksToDefault+0x78>)
 8007224:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a0c      	ldr	r2, [pc, #48]	@ (800725c <UART_InitCallbacksToDefault+0x7c>)
 800722c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	0800713d 	.word	0x0800713d
 8007240:	08007129 	.word	0x08007129
 8007244:	08007165 	.word	0x08007165
 8007248:	08007151 	.word	0x08007151
 800724c:	08007179 	.word	0x08007179
 8007250:	0800718d 	.word	0x0800718d
 8007254:	080071a1 	.word	0x080071a1
 8007258:	080071b5 	.word	0x080071b5
 800725c:	080071c9 	.word	0x080071c9

08007260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4ba6      	ldr	r3, [pc, #664]	@ (8007524 <UART_SetConfig+0x2c4>)
 800728c:	4013      	ands	r3, r2
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	6979      	ldr	r1, [r7, #20]
 8007294:	430b      	orrs	r3, r1
 8007296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a94      	ldr	r2, [pc, #592]	@ (8007528 <UART_SetConfig+0x2c8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d120      	bne.n	800731e <UART_SetConfig+0xbe>
 80072dc:	4b93      	ldr	r3, [pc, #588]	@ (800752c <UART_SetConfig+0x2cc>)
 80072de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d816      	bhi.n	8007318 <UART_SetConfig+0xb8>
 80072ea:	a201      	add	r2, pc, #4	@ (adr r2, 80072f0 <UART_SetConfig+0x90>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007301 	.word	0x08007301
 80072f4:	0800730d 	.word	0x0800730d
 80072f8:	08007307 	.word	0x08007307
 80072fc:	08007313 	.word	0x08007313
 8007300:	2301      	movs	r3, #1
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e150      	b.n	80075a8 <UART_SetConfig+0x348>
 8007306:	2302      	movs	r3, #2
 8007308:	77fb      	strb	r3, [r7, #31]
 800730a:	e14d      	b.n	80075a8 <UART_SetConfig+0x348>
 800730c:	2304      	movs	r3, #4
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e14a      	b.n	80075a8 <UART_SetConfig+0x348>
 8007312:	2308      	movs	r3, #8
 8007314:	77fb      	strb	r3, [r7, #31]
 8007316:	e147      	b.n	80075a8 <UART_SetConfig+0x348>
 8007318:	2310      	movs	r3, #16
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e144      	b.n	80075a8 <UART_SetConfig+0x348>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a83      	ldr	r2, [pc, #524]	@ (8007530 <UART_SetConfig+0x2d0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d132      	bne.n	800738e <UART_SetConfig+0x12e>
 8007328:	4b80      	ldr	r3, [pc, #512]	@ (800752c <UART_SetConfig+0x2cc>)
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732e:	f003 030c 	and.w	r3, r3, #12
 8007332:	2b0c      	cmp	r3, #12
 8007334:	d828      	bhi.n	8007388 <UART_SetConfig+0x128>
 8007336:	a201      	add	r2, pc, #4	@ (adr r2, 800733c <UART_SetConfig+0xdc>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007371 	.word	0x08007371
 8007340:	08007389 	.word	0x08007389
 8007344:	08007389 	.word	0x08007389
 8007348:	08007389 	.word	0x08007389
 800734c:	0800737d 	.word	0x0800737d
 8007350:	08007389 	.word	0x08007389
 8007354:	08007389 	.word	0x08007389
 8007358:	08007389 	.word	0x08007389
 800735c:	08007377 	.word	0x08007377
 8007360:	08007389 	.word	0x08007389
 8007364:	08007389 	.word	0x08007389
 8007368:	08007389 	.word	0x08007389
 800736c:	08007383 	.word	0x08007383
 8007370:	2300      	movs	r3, #0
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e118      	b.n	80075a8 <UART_SetConfig+0x348>
 8007376:	2302      	movs	r3, #2
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e115      	b.n	80075a8 <UART_SetConfig+0x348>
 800737c:	2304      	movs	r3, #4
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e112      	b.n	80075a8 <UART_SetConfig+0x348>
 8007382:	2308      	movs	r3, #8
 8007384:	77fb      	strb	r3, [r7, #31]
 8007386:	e10f      	b.n	80075a8 <UART_SetConfig+0x348>
 8007388:	2310      	movs	r3, #16
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e10c      	b.n	80075a8 <UART_SetConfig+0x348>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a68      	ldr	r2, [pc, #416]	@ (8007534 <UART_SetConfig+0x2d4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d120      	bne.n	80073da <UART_SetConfig+0x17a>
 8007398:	4b64      	ldr	r3, [pc, #400]	@ (800752c <UART_SetConfig+0x2cc>)
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800739e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073a2:	2b30      	cmp	r3, #48	@ 0x30
 80073a4:	d013      	beq.n	80073ce <UART_SetConfig+0x16e>
 80073a6:	2b30      	cmp	r3, #48	@ 0x30
 80073a8:	d814      	bhi.n	80073d4 <UART_SetConfig+0x174>
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d009      	beq.n	80073c2 <UART_SetConfig+0x162>
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d810      	bhi.n	80073d4 <UART_SetConfig+0x174>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <UART_SetConfig+0x15c>
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d006      	beq.n	80073c8 <UART_SetConfig+0x168>
 80073ba:	e00b      	b.n	80073d4 <UART_SetConfig+0x174>
 80073bc:	2300      	movs	r3, #0
 80073be:	77fb      	strb	r3, [r7, #31]
 80073c0:	e0f2      	b.n	80075a8 <UART_SetConfig+0x348>
 80073c2:	2302      	movs	r3, #2
 80073c4:	77fb      	strb	r3, [r7, #31]
 80073c6:	e0ef      	b.n	80075a8 <UART_SetConfig+0x348>
 80073c8:	2304      	movs	r3, #4
 80073ca:	77fb      	strb	r3, [r7, #31]
 80073cc:	e0ec      	b.n	80075a8 <UART_SetConfig+0x348>
 80073ce:	2308      	movs	r3, #8
 80073d0:	77fb      	strb	r3, [r7, #31]
 80073d2:	e0e9      	b.n	80075a8 <UART_SetConfig+0x348>
 80073d4:	2310      	movs	r3, #16
 80073d6:	77fb      	strb	r3, [r7, #31]
 80073d8:	e0e6      	b.n	80075a8 <UART_SetConfig+0x348>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a56      	ldr	r2, [pc, #344]	@ (8007538 <UART_SetConfig+0x2d8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d120      	bne.n	8007426 <UART_SetConfig+0x1c6>
 80073e4:	4b51      	ldr	r3, [pc, #324]	@ (800752c <UART_SetConfig+0x2cc>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80073f0:	d013      	beq.n	800741a <UART_SetConfig+0x1ba>
 80073f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073f4:	d814      	bhi.n	8007420 <UART_SetConfig+0x1c0>
 80073f6:	2b80      	cmp	r3, #128	@ 0x80
 80073f8:	d009      	beq.n	800740e <UART_SetConfig+0x1ae>
 80073fa:	2b80      	cmp	r3, #128	@ 0x80
 80073fc:	d810      	bhi.n	8007420 <UART_SetConfig+0x1c0>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <UART_SetConfig+0x1a8>
 8007402:	2b40      	cmp	r3, #64	@ 0x40
 8007404:	d006      	beq.n	8007414 <UART_SetConfig+0x1b4>
 8007406:	e00b      	b.n	8007420 <UART_SetConfig+0x1c0>
 8007408:	2300      	movs	r3, #0
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e0cc      	b.n	80075a8 <UART_SetConfig+0x348>
 800740e:	2302      	movs	r3, #2
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e0c9      	b.n	80075a8 <UART_SetConfig+0x348>
 8007414:	2304      	movs	r3, #4
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e0c6      	b.n	80075a8 <UART_SetConfig+0x348>
 800741a:	2308      	movs	r3, #8
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e0c3      	b.n	80075a8 <UART_SetConfig+0x348>
 8007420:	2310      	movs	r3, #16
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e0c0      	b.n	80075a8 <UART_SetConfig+0x348>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a44      	ldr	r2, [pc, #272]	@ (800753c <UART_SetConfig+0x2dc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d125      	bne.n	800747c <UART_SetConfig+0x21c>
 8007430:	4b3e      	ldr	r3, [pc, #248]	@ (800752c <UART_SetConfig+0x2cc>)
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800743a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800743e:	d017      	beq.n	8007470 <UART_SetConfig+0x210>
 8007440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007444:	d817      	bhi.n	8007476 <UART_SetConfig+0x216>
 8007446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800744a:	d00b      	beq.n	8007464 <UART_SetConfig+0x204>
 800744c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007450:	d811      	bhi.n	8007476 <UART_SetConfig+0x216>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <UART_SetConfig+0x1fe>
 8007456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800745a:	d006      	beq.n	800746a <UART_SetConfig+0x20a>
 800745c:	e00b      	b.n	8007476 <UART_SetConfig+0x216>
 800745e:	2300      	movs	r3, #0
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e0a1      	b.n	80075a8 <UART_SetConfig+0x348>
 8007464:	2302      	movs	r3, #2
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e09e      	b.n	80075a8 <UART_SetConfig+0x348>
 800746a:	2304      	movs	r3, #4
 800746c:	77fb      	strb	r3, [r7, #31]
 800746e:	e09b      	b.n	80075a8 <UART_SetConfig+0x348>
 8007470:	2308      	movs	r3, #8
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e098      	b.n	80075a8 <UART_SetConfig+0x348>
 8007476:	2310      	movs	r3, #16
 8007478:	77fb      	strb	r3, [r7, #31]
 800747a:	e095      	b.n	80075a8 <UART_SetConfig+0x348>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a2f      	ldr	r2, [pc, #188]	@ (8007540 <UART_SetConfig+0x2e0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d125      	bne.n	80074d2 <UART_SetConfig+0x272>
 8007486:	4b29      	ldr	r3, [pc, #164]	@ (800752c <UART_SetConfig+0x2cc>)
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800748c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007490:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007494:	d017      	beq.n	80074c6 <UART_SetConfig+0x266>
 8007496:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800749a:	d817      	bhi.n	80074cc <UART_SetConfig+0x26c>
 800749c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074a0:	d00b      	beq.n	80074ba <UART_SetConfig+0x25a>
 80074a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074a6:	d811      	bhi.n	80074cc <UART_SetConfig+0x26c>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <UART_SetConfig+0x254>
 80074ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b0:	d006      	beq.n	80074c0 <UART_SetConfig+0x260>
 80074b2:	e00b      	b.n	80074cc <UART_SetConfig+0x26c>
 80074b4:	2301      	movs	r3, #1
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e076      	b.n	80075a8 <UART_SetConfig+0x348>
 80074ba:	2302      	movs	r3, #2
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e073      	b.n	80075a8 <UART_SetConfig+0x348>
 80074c0:	2304      	movs	r3, #4
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e070      	b.n	80075a8 <UART_SetConfig+0x348>
 80074c6:	2308      	movs	r3, #8
 80074c8:	77fb      	strb	r3, [r7, #31]
 80074ca:	e06d      	b.n	80075a8 <UART_SetConfig+0x348>
 80074cc:	2310      	movs	r3, #16
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e06a      	b.n	80075a8 <UART_SetConfig+0x348>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007544 <UART_SetConfig+0x2e4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d138      	bne.n	800754e <UART_SetConfig+0x2ee>
 80074dc:	4b13      	ldr	r3, [pc, #76]	@ (800752c <UART_SetConfig+0x2cc>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80074e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ea:	d017      	beq.n	800751c <UART_SetConfig+0x2bc>
 80074ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074f0:	d82a      	bhi.n	8007548 <UART_SetConfig+0x2e8>
 80074f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f6:	d00b      	beq.n	8007510 <UART_SetConfig+0x2b0>
 80074f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074fc:	d824      	bhi.n	8007548 <UART_SetConfig+0x2e8>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <UART_SetConfig+0x2aa>
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007506:	d006      	beq.n	8007516 <UART_SetConfig+0x2b6>
 8007508:	e01e      	b.n	8007548 <UART_SetConfig+0x2e8>
 800750a:	2300      	movs	r3, #0
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e04b      	b.n	80075a8 <UART_SetConfig+0x348>
 8007510:	2302      	movs	r3, #2
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e048      	b.n	80075a8 <UART_SetConfig+0x348>
 8007516:	2304      	movs	r3, #4
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e045      	b.n	80075a8 <UART_SetConfig+0x348>
 800751c:	2308      	movs	r3, #8
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e042      	b.n	80075a8 <UART_SetConfig+0x348>
 8007522:	bf00      	nop
 8007524:	efff69f3 	.word	0xefff69f3
 8007528:	40011000 	.word	0x40011000
 800752c:	40023800 	.word	0x40023800
 8007530:	40004400 	.word	0x40004400
 8007534:	40004800 	.word	0x40004800
 8007538:	40004c00 	.word	0x40004c00
 800753c:	40005000 	.word	0x40005000
 8007540:	40011400 	.word	0x40011400
 8007544:	40007800 	.word	0x40007800
 8007548:	2310      	movs	r3, #16
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e02c      	b.n	80075a8 <UART_SetConfig+0x348>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a72      	ldr	r2, [pc, #456]	@ (800771c <UART_SetConfig+0x4bc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d125      	bne.n	80075a4 <UART_SetConfig+0x344>
 8007558:	4b71      	ldr	r3, [pc, #452]	@ (8007720 <UART_SetConfig+0x4c0>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007562:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007566:	d017      	beq.n	8007598 <UART_SetConfig+0x338>
 8007568:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800756c:	d817      	bhi.n	800759e <UART_SetConfig+0x33e>
 800756e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007572:	d00b      	beq.n	800758c <UART_SetConfig+0x32c>
 8007574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007578:	d811      	bhi.n	800759e <UART_SetConfig+0x33e>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <UART_SetConfig+0x326>
 800757e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007582:	d006      	beq.n	8007592 <UART_SetConfig+0x332>
 8007584:	e00b      	b.n	800759e <UART_SetConfig+0x33e>
 8007586:	2300      	movs	r3, #0
 8007588:	77fb      	strb	r3, [r7, #31]
 800758a:	e00d      	b.n	80075a8 <UART_SetConfig+0x348>
 800758c:	2302      	movs	r3, #2
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e00a      	b.n	80075a8 <UART_SetConfig+0x348>
 8007592:	2304      	movs	r3, #4
 8007594:	77fb      	strb	r3, [r7, #31]
 8007596:	e007      	b.n	80075a8 <UART_SetConfig+0x348>
 8007598:	2308      	movs	r3, #8
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e004      	b.n	80075a8 <UART_SetConfig+0x348>
 800759e:	2310      	movs	r3, #16
 80075a0:	77fb      	strb	r3, [r7, #31]
 80075a2:	e001      	b.n	80075a8 <UART_SetConfig+0x348>
 80075a4:	2310      	movs	r3, #16
 80075a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075b0:	d15b      	bne.n	800766a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80075b2:	7ffb      	ldrb	r3, [r7, #31]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d828      	bhi.n	800760a <UART_SetConfig+0x3aa>
 80075b8:	a201      	add	r2, pc, #4	@ (adr r2, 80075c0 <UART_SetConfig+0x360>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075e5 	.word	0x080075e5
 80075c4:	080075ed 	.word	0x080075ed
 80075c8:	080075f5 	.word	0x080075f5
 80075cc:	0800760b 	.word	0x0800760b
 80075d0:	080075fb 	.word	0x080075fb
 80075d4:	0800760b 	.word	0x0800760b
 80075d8:	0800760b 	.word	0x0800760b
 80075dc:	0800760b 	.word	0x0800760b
 80075e0:	08007603 	.word	0x08007603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e4:	f7fd f91c 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80075e8:	61b8      	str	r0, [r7, #24]
        break;
 80075ea:	e013      	b.n	8007614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ec:	f7fd f92c 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 80075f0:	61b8      	str	r0, [r7, #24]
        break;
 80075f2:	e00f      	b.n	8007614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007724 <UART_SetConfig+0x4c4>)
 80075f6:	61bb      	str	r3, [r7, #24]
        break;
 80075f8:	e00c      	b.n	8007614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fa:	f7fd f83f 	bl	800467c <HAL_RCC_GetSysClockFreq>
 80075fe:	61b8      	str	r0, [r7, #24]
        break;
 8007600:	e008      	b.n	8007614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007606:	61bb      	str	r3, [r7, #24]
        break;
 8007608:	e004      	b.n	8007614 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	77bb      	strb	r3, [r7, #30]
        break;
 8007612:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d074      	beq.n	8007704 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	005a      	lsls	r2, r3, #1
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	441a      	add	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	fbb2 f3f3 	udiv	r3, r2, r3
 800762e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b0f      	cmp	r3, #15
 8007634:	d916      	bls.n	8007664 <UART_SetConfig+0x404>
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800763c:	d212      	bcs.n	8007664 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	b29b      	uxth	r3, r3
 8007642:	f023 030f 	bic.w	r3, r3, #15
 8007646:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	b29b      	uxth	r3, r3
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	b29a      	uxth	r2, r3
 8007654:	89fb      	ldrh	r3, [r7, #14]
 8007656:	4313      	orrs	r3, r2
 8007658:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	89fa      	ldrh	r2, [r7, #14]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	e04f      	b.n	8007704 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	77bb      	strb	r3, [r7, #30]
 8007668:	e04c      	b.n	8007704 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800766a:	7ffb      	ldrb	r3, [r7, #31]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d828      	bhi.n	80076c2 <UART_SetConfig+0x462>
 8007670:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0x418>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	0800769d 	.word	0x0800769d
 800767c:	080076a5 	.word	0x080076a5
 8007680:	080076ad 	.word	0x080076ad
 8007684:	080076c3 	.word	0x080076c3
 8007688:	080076b3 	.word	0x080076b3
 800768c:	080076c3 	.word	0x080076c3
 8007690:	080076c3 	.word	0x080076c3
 8007694:	080076c3 	.word	0x080076c3
 8007698:	080076bb 	.word	0x080076bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800769c:	f7fd f8c0 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80076a0:	61b8      	str	r0, [r7, #24]
        break;
 80076a2:	e013      	b.n	80076cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a4:	f7fd f8d0 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 80076a8:	61b8      	str	r0, [r7, #24]
        break;
 80076aa:	e00f      	b.n	80076cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007724 <UART_SetConfig+0x4c4>)
 80076ae:	61bb      	str	r3, [r7, #24]
        break;
 80076b0:	e00c      	b.n	80076cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076b2:	f7fc ffe3 	bl	800467c <HAL_RCC_GetSysClockFreq>
 80076b6:	61b8      	str	r0, [r7, #24]
        break;
 80076b8:	e008      	b.n	80076cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076be:	61bb      	str	r3, [r7, #24]
        break;
 80076c0:	e004      	b.n	80076cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	77bb      	strb	r3, [r7, #30]
        break;
 80076ca:	bf00      	nop
    }

    if (pclk != 0U)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d018      	beq.n	8007704 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	085a      	lsrs	r2, r3, #1
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	441a      	add	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b0f      	cmp	r3, #15
 80076ea:	d909      	bls.n	8007700 <UART_SetConfig+0x4a0>
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f2:	d205      	bcs.n	8007700 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60da      	str	r2, [r3, #12]
 80076fe:	e001      	b.n	8007704 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007710:	7fbb      	ldrb	r3, [r7, #30]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40007c00 	.word	0x40007c00
 8007720:	40023800 	.word	0x40023800
 8007724:	00f42400 	.word	0x00f42400

08007728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01a      	beq.n	800783e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007826:	d10a      	bne.n	800783e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08c      	sub	sp, #48	@ 0x30
 8007870:	af02      	add	r7, sp, #8
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800787c:	f7fb ff48 	bl	8003710 <HAL_GetTick>
 8007880:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b08      	cmp	r3, #8
 800788e:	d12e      	bne.n	80078ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	2200      	movs	r2, #0
 800789a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f83b 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d021      	beq.n	80078ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078be:	623b      	str	r3, [r7, #32]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	61fb      	str	r3, [r7, #28]
 80078ca:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	69b9      	ldr	r1, [r7, #24]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	617b      	str	r3, [r7, #20]
   return(result);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e011      	b.n	8007912 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3728      	adds	r7, #40	@ 0x28
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792a:	e04f      	b.n	80079cc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d04b      	beq.n	80079cc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007934:	f7fb feec 	bl	8003710 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	429a      	cmp	r2, r3
 8007942:	d302      	bcc.n	800794a <UART_WaitOnFlagUntilTimeout+0x30>
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e04e      	b.n	80079ec <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d037      	beq.n	80079cc <UART_WaitOnFlagUntilTimeout+0xb2>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b80      	cmp	r3, #128	@ 0x80
 8007960:	d034      	beq.n	80079cc <UART_WaitOnFlagUntilTimeout+0xb2>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	d031      	beq.n	80079cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b08      	cmp	r3, #8
 8007974:	d110      	bne.n	8007998 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2208      	movs	r2, #8
 800797c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f838 	bl	80079f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2208      	movs	r2, #8
 8007988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e029      	b.n	80079ec <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079a6:	d111      	bne.n	80079cc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f81e 	bl	80079f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e00f      	b.n	80079ec <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69da      	ldr	r2, [r3, #28]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4013      	ands	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	429a      	cmp	r2, r3
 80079da:	bf0c      	ite	eq
 80079dc:	2301      	moveq	r3, #1
 80079de:	2300      	movne	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d0a0      	beq.n	800792c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b095      	sub	sp, #84	@ 0x54
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e6      	bne.n	80079fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d118      	bne.n	8007a9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f023 0310 	bic.w	r3, r3, #16
 8007a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6979      	ldr	r1, [r7, #20]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	613b      	str	r3, [r7, #16]
   return(result);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e6      	bne.n	8007a6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ab0:	bf00      	nop
 8007ab2:	3754      	adds	r7, #84	@ 0x54
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <memset>:
 8007abc:	4402      	add	r2, r0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d100      	bne.n	8007ac6 <memset+0xa>
 8007ac4:	4770      	bx	lr
 8007ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aca:	e7f9      	b.n	8007ac0 <memset+0x4>

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4d0d      	ldr	r5, [pc, #52]	@ (8007b04 <__libc_init_array+0x38>)
 8007ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8007b08 <__libc_init_array+0x3c>)
 8007ad2:	1b64      	subs	r4, r4, r5
 8007ad4:	10a4      	asrs	r4, r4, #2
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	42a6      	cmp	r6, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	4d0b      	ldr	r5, [pc, #44]	@ (8007b0c <__libc_init_array+0x40>)
 8007ade:	4c0c      	ldr	r4, [pc, #48]	@ (8007b10 <__libc_init_array+0x44>)
 8007ae0:	f000 f818 	bl	8007b14 <_init>
 8007ae4:	1b64      	subs	r4, r4, r5
 8007ae6:	10a4      	asrs	r4, r4, #2
 8007ae8:	2600      	movs	r6, #0
 8007aea:	42a6      	cmp	r6, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af4:	4798      	blx	r3
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afe:	4798      	blx	r3
 8007b00:	3601      	adds	r6, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	08007b4c 	.word	0x08007b4c
 8007b08:	08007b4c 	.word	0x08007b4c
 8007b0c:	08007b4c 	.word	0x08007b4c
 8007b10:	08007b50 	.word	0x08007b50

08007b14 <_init>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr

08007b20 <_fini>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr
