
stepper-motor-gui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000966c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  08009834  08009834  0000a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b30c  0800b30c  0000d17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b30c  0800b30c  0000c30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b314  0800b314  0000d17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b314  0800b314  0000c314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b318  0800b318  0000c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800b31c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  2000017c  0800b498  0000d17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  0800b498  0000d880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024df7  00000000  00000000  0000d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c22  00000000  00000000  00031fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002068  00000000  00000000  00036bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001918  00000000  00000000  00038c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a60  00000000  00000000  0003a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267c2  00000000  00000000  00063fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001002df  00000000  00000000  0008a76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018aa49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088fc  00000000  00000000  0018aa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00193388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800981c 	.word	0x0800981c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	0800981c 	.word	0x0800981c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 80004fe:	4a16      	ldr	r2, [pc, #88]	@ (8000558 <MX_DMA2D_Init+0x60>)
 8000500:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000514:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 8000516:	2200      	movs	r2, #0
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 8000522:	2200      	movs	r2, #0
 8000524:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 8000528:	2200      	movs	r2, #0
 800052a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800052c:	4809      	ldr	r0, [pc, #36]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 800052e:	f004 faaf 	bl	8004a90 <HAL_DMA2D_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000538:	f000 fd98 	bl	800106c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800053c:	2101      	movs	r1, #1
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_DMA2D_Init+0x5c>)
 8000540:	f004 faf0 	bl	8004b24 <HAL_DMA2D_ConfigLayer>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800054a:	f000 fd8f 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000198 	.word	0x20000198
 8000558:	4002b000 	.word	0x4002b000

0800055c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <HAL_DMA2D_MspInit+0x38>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d10b      	bne.n	8000586 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800056e:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <HAL_DMA2D_MspInit+0x3c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a09      	ldr	r2, [pc, #36]	@ (8000598 <HAL_DMA2D_MspInit+0x3c>)
 8000574:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <HAL_DMA2D_MspInit+0x3c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	4002b000 	.word	0x4002b000
 8000598:	40023800 	.word	0x40023800

0800059c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_FMC_Init+0x98>)
 80005b6:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <MX_FMC_Init+0x9c>)
 80005b8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_FMC_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_FMC_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_FMC_Init+0x98>)
 80005c8:	2204      	movs	r2, #4
 80005ca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_FMC_Init+0x98>)
 80005ce:	2210      	movs	r2, #16
 80005d0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_FMC_Init+0x98>)
 80005d4:	2240      	movs	r2, #64	@ 0x40
 80005d6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_FMC_Init+0x98>)
 80005da:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80005de:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_FMC_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_FMC_Init+0x98>)
 80005e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005ec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_FMC_Init+0x98>)
 80005f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_FMC_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000608:	2307      	movs	r3, #7
 800060a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800060c:	2303      	movs	r3, #3
 800060e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_FMC_Init+0x98>)
 800061e:	f006 f9e3 	bl	80069e8 <HAL_SDRAM_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000628:	f000 fd20 	bl	800106c <Error_Handler>
//      HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
//
//      //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
//      FMC_Bank1->BTCR[0] = 0x000030D2;
  /* USER CODE END FMC_Init 2 */
}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200001d8 	.word	0x200001d8
 8000638:	a0000140 	.word	0xa0000140

0800063c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000650:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <HAL_FMC_MspInit+0x110>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d175      	bne.n	8000744 <HAL_FMC_MspInit+0x108>
    return;
  }
  FMC_Initialized = 1;
 8000658:	4b3c      	ldr	r3, [pc, #240]	@ (800074c <HAL_FMC_MspInit+0x110>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800065e:	4b3c      	ldr	r3, [pc, #240]	@ (8000750 <HAL_FMC_MspInit+0x114>)
 8000660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000662:	4a3b      	ldr	r2, [pc, #236]	@ (8000750 <HAL_FMC_MspInit+0x114>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6393      	str	r3, [r2, #56]	@ 0x38
 800066a:	4b39      	ldr	r3, [pc, #228]	@ (8000750 <HAL_FMC_MspInit+0x114>)
 800066c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000676:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800067a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000688:	230c      	movs	r3, #12
 800068a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4830      	ldr	r0, [pc, #192]	@ (8000754 <HAL_FMC_MspInit+0x118>)
 8000692:	f004 fad9 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000696:	f248 1333 	movw	r3, #33075	@ 0x8133
 800069a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006a8:	230c      	movs	r3, #12
 80006aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4829      	ldr	r0, [pc, #164]	@ (8000758 <HAL_FMC_MspInit+0x11c>)
 80006b2:	f004 fac9 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80006b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80006ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006c8:	230c      	movs	r3, #12
 80006ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4822      	ldr	r0, [pc, #136]	@ (800075c <HAL_FMC_MspInit+0x120>)
 80006d2:	f004 fab9 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006d6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80006da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006e8:	230c      	movs	r3, #12
 80006ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	481b      	ldr	r0, [pc, #108]	@ (8000760 <HAL_FMC_MspInit+0x124>)
 80006f2:	f004 faa9 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80006f6:	2328      	movs	r3, #40	@ 0x28
 80006f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000706:	230c      	movs	r3, #12
 8000708:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4815      	ldr	r0, [pc, #84]	@ (8000764 <HAL_FMC_MspInit+0x128>)
 8000710:	f004 fa9a 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000714:	2308      	movs	r3, #8
 8000716:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000724:	230c      	movs	r3, #12
 8000726:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	480e      	ldr	r0, [pc, #56]	@ (8000768 <HAL_FMC_MspInit+0x12c>)
 800072e:	f004 fa8b 	bl	8004c48 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2030      	movs	r0, #48	@ 0x30
 8000738:	f003 ffb5 	bl	80046a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 800073c:	2030      	movs	r0, #48	@ 0x30
 800073e:	f003 ffce 	bl	80046de <HAL_NVIC_EnableIRQ>
 8000742:	e000      	b.n	8000746 <HAL_FMC_MspInit+0x10a>
    return;
 8000744:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000020c 	.word	0x2000020c
 8000750:	40023800 	.word	0x40023800
 8000754:	40021000 	.word	0x40021000
 8000758:	40021800 	.word	0x40021800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40021400 	.word	0x40021400
 8000764:	40021c00 	.word	0x40021c00
 8000768:	40020800 	.word	0x40020800

0800076c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000774:	f7ff ff62 	bl	800063c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b090      	sub	sp, #64	@ 0x40
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	4b7a      	ldr	r3, [pc, #488]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a79      	ldr	r2, [pc, #484]	@ (8000980 <MX_GPIO_Init+0x200>)
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b77      	ldr	r3, [pc, #476]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0310 	and.w	r3, r3, #16
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b74      	ldr	r3, [pc, #464]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a73      	ldr	r2, [pc, #460]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b71      	ldr	r3, [pc, #452]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80007c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	4b6e      	ldr	r3, [pc, #440]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a6d      	ldr	r2, [pc, #436]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007de:	4b68      	ldr	r3, [pc, #416]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a67      	ldr	r2, [pc, #412]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b65      	ldr	r3, [pc, #404]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007f2:	61fb      	str	r3, [r7, #28]
 80007f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b62      	ldr	r3, [pc, #392]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a61      	ldr	r2, [pc, #388]	@ (8000980 <MX_GPIO_Init+0x200>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b5f      	ldr	r3, [pc, #380]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800080e:	4b5c      	ldr	r3, [pc, #368]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a5b      	ldr	r2, [pc, #364]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000814:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b59      	ldr	r3, [pc, #356]	@ (8000980 <MX_GPIO_Init+0x200>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000826:	4b56      	ldr	r3, [pc, #344]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a55      	ldr	r2, [pc, #340]	@ (8000980 <MX_GPIO_Init+0x200>)
 800082c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b53      	ldr	r3, [pc, #332]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a4f      	ldr	r2, [pc, #316]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b4d      	ldr	r3, [pc, #308]	@ (8000980 <MX_GPIO_Init+0x200>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a49      	ldr	r2, [pc, #292]	@ (8000980 <MX_GPIO_Init+0x200>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b44      	ldr	r3, [pc, #272]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a43      	ldr	r2, [pc, #268]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b41      	ldr	r3, [pc, #260]	@ (8000980 <MX_GPIO_Init+0x200>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b3e      	ldr	r3, [pc, #248]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <MX_GPIO_Init+0x200>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b3b      	ldr	r3, [pc, #236]	@ (8000980 <MX_GPIO_Init+0x200>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f241 0104 	movw	r1, #4100	@ 0x1004
 80008a4:	4837      	ldr	r0, [pc, #220]	@ (8000984 <MX_GPIO_Init+0x204>)
 80008a6:	f004 fb93 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <MX_GPIO_Init+0x208>)
 80008b0:	f004 fb8e 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ba:	4834      	ldr	r0, [pc, #208]	@ (800098c <MX_GPIO_Init+0x20c>)
 80008bc:	f004 fb88 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008c0:	2304      	movs	r3, #4
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008cc:	2301      	movs	r3, #1
 80008ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d4:	4619      	mov	r1, r3
 80008d6:	482b      	ldr	r0, [pc, #172]	@ (8000984 <MX_GPIO_Init+0x204>)
 80008d8:	f004 f9b6 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008dc:	2308      	movs	r3, #8
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	4825      	ldr	r0, [pc, #148]	@ (8000988 <MX_GPIO_Init+0x208>)
 80008f4:	f004 f9a8 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800090a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800090e:	4619      	mov	r1, r3
 8000910:	481c      	ldr	r0, [pc, #112]	@ (8000984 <MX_GPIO_Init+0x204>)
 8000912:	f004 f999 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000924:	2301      	movs	r3, #1
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800092c:	4619      	mov	r1, r3
 800092e:	4817      	ldr	r0, [pc, #92]	@ (800098c <MX_GPIO_Init+0x20c>)
 8000930:	f004 f98a 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000934:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000942:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000946:	4619      	mov	r1, r3
 8000948:	480e      	ldr	r0, [pc, #56]	@ (8000984 <MX_GPIO_Init+0x204>)
 800094a:	f004 f97d 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800094e:	23c0      	movs	r3, #192	@ 0xc0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000952:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000956:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	2301      	movs	r3, #1
 800095a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000960:	4619      	mov	r1, r3
 8000962:	480b      	ldr	r0, [pc, #44]	@ (8000990 <MX_GPIO_Init+0x210>)
 8000964:	f004 f970 	bl	8004c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2017      	movs	r0, #23
 800096e:	f003 fe9a 	bl	80046a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000972:	2017      	movs	r0, #23
 8000974:	f003 feb3 	bl	80046de <HAL_NVIC_EnableIRQ>

}
 8000978:	bf00      	nop
 800097a:	3740      	adds	r7, #64	@ 0x40
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40022000 	.word	0x40022000
 8000988:	40022800 	.word	0x40022800
 800098c:	40020000 	.word	0x40020000
 8000990:	40021800 	.word	0x40021800

08000994 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_I2C3_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <MX_I2C3_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <MX_I2C3_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009d0:	f004 fb56 	bl	8005080 <HAL_I2C_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 fb47 	bl	800106c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009e2:	f004 fbe9 	bl	80051b8 <HAL_I2CEx_ConfigAnalogFilter>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 fb3e 	bl	800106c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_I2C3_Init+0x74>)
 80009f4:	f004 fc2b 	bl	800524e <HAL_I2CEx_ConfigDigitalFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 fb35 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000210 	.word	0x20000210
 8000a0c:	40005c00 	.word	0x40005c00
 8000a10:	6000030d 	.word	0x6000030d

08000a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0aa      	sub	sp, #168	@ 0xa8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	2284      	movs	r2, #132	@ 0x84
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f008 fec5 	bl	80097c4 <memset>
  if(i2cHandle->Instance==I2C3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <HAL_I2C_MspInit+0xb4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d13c      	bne.n	8000abe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4618      	mov	r0, r3
 8000a54:	f005 fbd8 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a5e:	f000 fb05 	bl	800106c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <HAL_I2C_MspInit+0xb8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a19      	ldr	r2, [pc, #100]	@ (8000acc <HAL_I2C_MspInit+0xb8>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_I2C_MspInit+0xb8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a7a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a94:	2304      	movs	r3, #4
 8000a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <HAL_I2C_MspInit+0xbc>)
 8000aa2:	f004 f8d1 	bl	8004c48 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <HAL_I2C_MspInit+0xb8>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	@ (8000acc <HAL_I2C_MspInit+0xb8>)
 8000aac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_I2C_MspInit+0xb8>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000abe:	bf00      	nop
 8000ac0:	37a8      	adds	r7, #168	@ 0xa8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40005c00 	.word	0x40005c00
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021c00 	.word	0x40021c00

08000ad4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	@ 0x38
 8000ad8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	  /* USER CODE END LTDC_Init 0 */

	  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2234      	movs	r2, #52	@ 0x34
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 fe6f 	bl	80097c4 <memset>

	  /* USER CODE BEGIN LTDC_Init 1 */

	  /* USER CODE END LTDC_Init 1 */
	  hltdc.Instance = LTDC;
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8000bd4 <MX_LTDC_Init+0x100>)
 8000aea:	601a      	str	r2, [r3, #0]
	  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000aec:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
	  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000af2:	4b37      	ldr	r3, [pc, #220]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
	  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000af8:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
	  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000afe:	4b34      	ldr	r3, [pc, #208]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
	  hltdc.Init.HorizontalSync = 40;
 8000b04:	4b32      	ldr	r3, [pc, #200]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b06:	2228      	movs	r2, #40	@ 0x28
 8000b08:	615a      	str	r2, [r3, #20]
	  hltdc.Init.VerticalSync = 9;
 8000b0a:	4b31      	ldr	r3, [pc, #196]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b0c:	2209      	movs	r2, #9
 8000b0e:	619a      	str	r2, [r3, #24]
	  hltdc.Init.AccumulatedHBP = 53;
 8000b10:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b12:	2235      	movs	r2, #53	@ 0x35
 8000b14:	61da      	str	r2, [r3, #28]
	  hltdc.Init.AccumulatedVBP = 11;
 8000b16:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b18:	220b      	movs	r2, #11
 8000b1a:	621a      	str	r2, [r3, #32]
	  hltdc.Init.AccumulatedActiveW = 533;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b1e:	f240 2215 	movw	r2, #533	@ 0x215
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
	  hltdc.Init.AccumulatedActiveH = 283;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b26:	f240 121b 	movw	r2, #283	@ 0x11b
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
	  hltdc.Init.TotalWidth = 565;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b2e:	f240 2235 	movw	r2, #565	@ 0x235
 8000b32:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hltdc.Init.TotalHeigh = 285;
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b36:	f240 121d 	movw	r2, #285	@ 0x11d
 8000b3a:	631a      	str	r2, [r3, #48]	@ 0x30
	  hltdc.Init.Backcolor.Blue = 0;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  hltdc.Init.Backcolor.Green = 0;
 8000b44:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  hltdc.Init.Backcolor.Red = 0;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b54:	481e      	ldr	r0, [pc, #120]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000b56:	f004 fbc7 	bl	80052e8 <HAL_LTDC_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_LTDC_Init+0x90>
	  {
	    Error_Handler();
 8000b60:	f000 fa84 	bl	800106c <Error_Handler>
	  }
	  pLayerCfg.WindowX0 = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
	  pLayerCfg.WindowX1 = 480;
 8000b68:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b6c:	60bb      	str	r3, [r7, #8]
	  pLayerCfg.WindowY0 = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
	  pLayerCfg.WindowY1 = 272;
 8000b72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000b76:	613b      	str	r3, [r7, #16]
	  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
	  pLayerCfg.Alpha = 255;
 8000b7c:	23ff      	movs	r3, #255	@ 0xff
 8000b7e:	61bb      	str	r3, [r7, #24]
	  pLayerCfg.Alpha0 = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
	  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b88:	623b      	str	r3, [r7, #32]
	  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
	  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b8e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
	  pLayerCfg.ImageWidth = 480;
 8000b94:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  pLayerCfg.ImageHeight = 272;
 8000b9a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
	  pLayerCfg.Backcolor.Blue = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	  pLayerCfg.Backcolor.Green = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	  pLayerCfg.Backcolor.Red = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_LTDC_Init+0xfc>)
 8000bba:	f004 fc65 	bl	8005488 <HAL_LTDC_ConfigLayer>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_LTDC_Init+0xf4>
	  {
	    Error_Handler();
 8000bc4:	f000 fa52 	bl	800106c <Error_Handler>
	  }
	  /* USER CODE BEGIN LTDC_Init 2 */

	  /* USER CODE END LTDC_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000264 	.word	0x20000264
 8000bd4:	40016800 	.word	0x40016800

08000bd8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0ae      	sub	sp, #184	@ 0xb8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	2284      	movs	r2, #132	@ 0x84
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f008 fde3 	bl	80097c4 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a6a      	ldr	r2, [pc, #424]	@ (8000dac <HAL_LTDC_MspInit+0x1d4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	f040 80cc 	bne.w	8000da2 <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000c22:	2300      	movs	r3, #0
 8000c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f005 faec 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8000c36:	f000 fa19 	bl	800106c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c46:	4b5a      	ldr	r3, [pc, #360]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a56      	ldr	r2, [pc, #344]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b54      	ldr	r3, [pc, #336]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c6a:	4b51      	ldr	r3, [pc, #324]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a50      	ldr	r2, [pc, #320]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b4e      	ldr	r3, [pc, #312]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c82:	4b4b      	ldr	r3, [pc, #300]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a4a      	ldr	r2, [pc, #296]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b48      	ldr	r3, [pc, #288]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	4b45      	ldr	r3, [pc, #276]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a44      	ldr	r2, [pc, #272]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b42      	ldr	r3, [pc, #264]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8000db0 <HAL_LTDC_MspInit+0x1d8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ce2:	230e      	movs	r3, #14
 8000ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4831      	ldr	r0, [pc, #196]	@ (8000db4 <HAL_LTDC_MspInit+0x1dc>)
 8000cf0:	f003 ffaa 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000cf4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d0e:	230e      	movs	r3, #14
 8000d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <HAL_LTDC_MspInit+0x1e0>)
 8000d1c:	f003 ff94 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000d20:	23f7      	movs	r3, #247	@ 0xf7
 8000d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d38:	230e      	movs	r3, #14
 8000d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d42:	4619      	mov	r1, r3
 8000d44:	481d      	ldr	r0, [pc, #116]	@ (8000dbc <HAL_LTDC_MspInit+0x1e4>)
 8000d46:	f003 ff7f 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d64:	2309      	movs	r3, #9
 8000d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4813      	ldr	r0, [pc, #76]	@ (8000dc0 <HAL_LTDC_MspInit+0x1e8>)
 8000d72:	f003 ff69 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000d76:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d90:	230e      	movs	r3, #14
 8000d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4809      	ldr	r0, [pc, #36]	@ (8000dc4 <HAL_LTDC_MspInit+0x1ec>)
 8000d9e:	f003 ff53 	bl	8004c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	37b8      	adds	r7, #184	@ 0xb8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40016800 	.word	0x40016800
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40022400 	.word	0x40022400
 8000dbc:	40022800 	.word	0x40022800
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dcc:	f3bf 8f4f 	dsb	sy
}
 8000dd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd2:	f3bf 8f6f 	isb	sy
}
 8000dd6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <SCB_EnableICache+0x48>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000de0:	f3bf 8f4f 	dsb	sy
}
 8000de4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000de6:	f3bf 8f6f 	isb	sy
}
 8000dea:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <SCB_EnableICache+0x48>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <SCB_EnableICache+0x48>)
 8000df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
}
 8000dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dfe:	f3bf 8f6f 	isb	sy
}
 8000e02:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <SCB_EnableDCache+0x84>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e22:	f3bf 8f4f 	dsb	sy
}
 8000e26:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <SCB_EnableDCache+0x84>)
 8000e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e2e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0b5b      	lsrs	r3, r3, #13
 8000e34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e38:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e42:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	015a      	lsls	r2, r3, #5
 8000e48:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000e4c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e52:	4911      	ldr	r1, [pc, #68]	@ (8000e98 <SCB_EnableDCache+0x84>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1ef      	bne.n	8000e44 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	60fa      	str	r2, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1e5      	bne.n	8000e3a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6e:	f3bf 8f4f 	dsb	sy
}
 8000e72:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <SCB_EnableDCache+0x84>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <SCB_EnableDCache+0x84>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e80:	f3bf 8f4f 	dsb	sy
}
 8000e84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e86:	f3bf 8f6f 	isb	sy
}
 8000e8a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
  //MPU_Config();

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000ea2:	f7ff ff91 	bl	8000dc8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ea6:	f7ff ffb5 	bl	8000e14 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f003 fa9f 	bl	80043ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 f84f 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb2:	f7ff fc65 	bl	8000780 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000eb6:	f000 f8df 	bl	8001078 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000eba:	f000 fa01 	bl	80012c0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 facf 	bl	8001460 <MX_USART2_UART_Init>
  MX_DMA2D_Init();
 8000ec2:	f7ff fb19 	bl	80004f8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000ec6:	f7ff fe05 	bl	8000ad4 <MX_LTDC_Init>
  MX_FMC_Init();
 8000eca:	f7ff fb67 	bl	800059c <MX_FMC_Init>
  MX_I2C3_Init();
 8000ece:	f7ff fd61 	bl	8000994 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();
 8000ed2:	f002 fb99 	bl	8003608 <BSP_LCD_Init>

  	//HAL_Delay(2000);

	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 1);
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f003 f9f9 	bl	80042d0 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f003 f96b 	bl	80041bc <BSP_MotorControl_Init>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000ee6:	4816      	ldr	r0, [pc, #88]	@ (8000f40 <main+0xa4>)
 8000ee8:	f003 f90e 	bl	8004108 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachBusyInterrupt(MyBusyInterruptHandler);
 8000eec:	4815      	ldr	r0, [pc, #84]	@ (8000f44 <main+0xa8>)
 8000eee:	f003 f929 	bl	8004144 <BSP_MotorControl_AttachBusyInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8000ef2:	4815      	ldr	r0, [pc, #84]	@ (8000f48 <main+0xac>)
 8000ef4:	f003 f8ea 	bl	80040cc <BSP_MotorControl_AttachErrorHandler>
	//BSP_MotorControl_Move(0, BACKWARD, 1600);

	/* Wait for the motor of device 0 ends moving */
	//BSP_MotorControl_WaitWhileActive(0);

	BSP_MotorControl_CmdSoftHiZ(0);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f003 f9c7 	bl	800428c <BSP_MotorControl_CmdSoftHiZ>

	BSP_LCD_DisplayOn();
 8000efe:	f002 fc0d 	bl	800371c <BSP_LCD_DisplayOn>

	uint32_t *externalRAM = 0xC000000;
 8000f02:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 8000f06:	60bb      	str	r3, [r7, #8]
	const uint32_t size = 1000;
 8000f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0c:	607b      	str	r3, [r7, #4]

	//write external RAM
	for(int i = 0; i < size; i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	e008      	b.n	8000f26 <main+0x8a>
	{
	    externalRAM[i] = i;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d8f2      	bhi.n	8000f14 <main+0x78>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <main+0xb0>)
 8000f32:	f004 f866 	bl	8005002 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000f36:	20fa      	movs	r0, #250	@ 0xfa
 8000f38:	f003 fab6 	bl	80044a8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000f3c:	bf00      	nop
 8000f3e:	e7f6      	b.n	8000f2e <main+0x92>
 8000f40:	0800102d 	.word	0x0800102d
 8000f44:	08001061 	.word	0x08001061
 8000f48:	0800106d 	.word	0x0800106d
 8000f4c:	40022000 	.word	0x40022000

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	@ 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	@ 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f008 fc30 	bl	80097c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <SystemClock_Config+0xd4>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <SystemClock_Config+0xd4>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <SystemClock_Config+0xd4>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a25      	ldr	r2, [pc, #148]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fb8:	2319      	movs	r3, #25
 8000fba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000fbc:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000fc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fc90 	bl	80058f4 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fda:	f000 f847 	bl	800106c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fde:	f004 fc39 	bl	8005854 <HAL_PWREx_EnableOverDrive>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fe8:	f000 f840 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2107      	movs	r1, #7
 800100a:	4618      	mov	r0, r3
 800100c:	f004 ff16 	bl	8005e3c <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001016:	f000 f829 	bl	800106c <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	@ 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 8001032:	2000      	movs	r0, #0
 8001034:	f003 f8e2 	bl	80041fc <BSP_MotorControl_CmdGetStatus>
 8001038:	4603      	mov	r3, r0
 800103a:	80fb      	strh	r3, [r7, #6]
  }
  else
  {
    // FORWARD
  }
  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_STOPPED )
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001042:	2b00      	cmp	r3, #0
 8001044:	d008      	beq.n	8001058 <MyFlagInterruptHandler+0x2c>
  {
       // MOTOR STOPPED
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_ACCELERATION )
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800104c:	2b20      	cmp	r3, #32
 800104e:	d003      	beq.n	8001058 <MyFlagInterruptHandler+0x2c>
  {
           // MOTOR ACCELERATION
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_DECELERATION )
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001056:	2b40      	cmp	r3, #64	@ 0x40
  if ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0)
  {
    //overcurrent detection
  }

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <MyBusyInterruptHandler>:
  * @brief  This function is the User handler for the busy interrupt
  * @param  None
  * @retval None
  */
void MyBusyInterruptHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

   if (BSP_MotorControl_CheckBusyHw())
 8001064:	f003 f8f0 	bl	8004248 <BSP_MotorControl_CheckBusyHw>
   }
   else
   {
     /* To be customized (for example Switch off a LED) */
   }
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_SPI2_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <MX_SPI2_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_SPI2_Init+0x74>)
 8001084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_SPI2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_SPI2_Init+0x74>)
 8001092:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001096:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_SPI2_Init+0x74>)
 800109a:	2202      	movs	r2, #2
 800109c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010ae:	2220      	movs	r2, #32
 80010b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010c6:	2207      	movs	r2, #7
 80010c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_SPI2_Init+0x74>)
 80010d8:	f005 fd3c 	bl	8006b54 <HAL_SPI_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f7ff ffc3 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000030c 	.word	0x2000030c
 80010f0:	40003800 	.word	0x40003800

080010f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a25      	ldr	r2, [pc, #148]	@ (80011a8 <HAL_SPI_MspInit+0xb4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d144      	bne.n	80011a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	4a24      	ldr	r2, [pc, #144]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001120:	6413      	str	r3, [r2, #64]	@ 0x40
 8001122:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a1e      	ldr	r2, [pc, #120]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <HAL_SPI_MspInit+0xb8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116e:	2305      	movs	r3, #5
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <HAL_SPI_MspInit+0xbc>)
 800117a:	f003 fd65 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800117e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <HAL_SPI_MspInit+0xc0>)
 800119c:	f003 fd54 	bl	8004c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40003800 	.word	0x40003800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40020400 	.word	0x40020400

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_MspInit+0x44>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_MspInit+0x44>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_MspInit+0x44>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_MspInit+0x44>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_MspInit+0x44>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f003 f907 	bl	8004468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}

0800125e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001262:	2040      	movs	r0, #64	@ 0x40
 8001264:	f003 fee8 	bl	8005038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001268:	2080      	movs	r0, #128	@ 0x80
 800126a:	f003 fee5 	bl	8005038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <TIM2_IRQHandler+0x10>)
 800127a:	f006 fc2f 	bl	8007adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000398 	.word	0x20000398

08001288 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <FMC_IRQHandler+0x10>)
 800128e:	f005 fbdf 	bl	8006a50 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001d8 	.word	0x200001d8

0800129c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	@ 0x38
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	615a      	str	r2, [r3, #20]
 80012f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f2:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 80012f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012fa:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001306:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001318:	4823      	ldr	r0, [pc, #140]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 800131a:	f006 f8f7 	bl	800750c <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001324:	f7ff fea2 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001332:	4619      	mov	r1, r3
 8001334:	481c      	ldr	r0, [pc, #112]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 8001336:	f006 fe0f 	bl	8007f58 <HAL_TIM_ConfigClockSource>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001340:	f7ff fe94 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 8001346:	f006 f945 	bl	80075d4 <HAL_TIM_PWM_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001350:	f7ff fe8c 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 8001364:	f007 fb4e 	bl	8008a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800136e:	f7ff fe7d 	bl	800106c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001372:	2360      	movs	r3, #96	@ 0x60
 8001374:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 800138a:	f006 fcd1 	bl	8007d30 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001394:	f7ff fe6a 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001398:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <MX_TIM2_Init+0xe8>)
 800139a:	f000 f82b 	bl	80013f4 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3738      	adds	r7, #56	@ 0x38
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000398 	.word	0x20000398

080013ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013bc:	d113      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_TIM_Base_MspInit+0x44>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <HAL_TIM_Base_MspInit+0x44>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_TIM_Base_MspInit+0x44>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201c      	movs	r0, #28
 80013dc:	f003 f963 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e0:	201c      	movs	r0, #28
 80013e2:	f003 f97c 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001414:	d11c      	bne.n	8001450 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_TIM_MspPostInit+0x64>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <HAL_TIM_MspPostInit+0x64>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_TIM_MspPostInit+0x64>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800142e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001440:	2301      	movs	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4804      	ldr	r0, [pc, #16]	@ (800145c <HAL_TIM_MspPostInit+0x68>)
 800144c:	f003 fbfc 	bl	8004c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000

08001460 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 8001466:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <MX_USART2_UART_Init+0x5c>)
 8001468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_USART2_UART_Init+0x58>)
 80014a4:	f007 fb64 	bl	8008b70 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ae:	f7ff fddd 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000454 	.word	0x20000454
 80014bc:	40004400 	.word	0x40004400

080014c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0aa      	sub	sp, #168	@ 0xa8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2284      	movs	r2, #132	@ 0x84
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f008 f96f 	bl	80097c4 <memset>
  if(uartHandle->Instance==USART2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <HAL_UART_MspInit+0xb0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d13a      	bne.n	8001566 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fe83 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001508:	f7ff fdb0 	bl	800106c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150c:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <HAL_UART_MspInit+0xb4>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <HAL_UART_MspInit+0xb4>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001516:	6413      	str	r3, [r2, #64]	@ 0x40
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <HAL_UART_MspInit+0xb4>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <HAL_UART_MspInit+0xb4>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <HAL_UART_MspInit+0xb4>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_UART_MspInit+0xb4>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800153c:	2360      	movs	r3, #96	@ 0x60
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001554:	2307      	movs	r3, #7
 8001556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <HAL_UART_MspInit+0xb8>)
 8001562:	f003 fb71 	bl	8004c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	37a8      	adds	r7, #168	@ 0xa8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40004400 	.word	0x40004400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020c00 	.word	0x40020c00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001580:	f7ff fe8c 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f008 f913 	bl	80097d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff fc75 	bl	8000e9c <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80015c0:	0800b31c 	.word	0x0800b31c
  ldr r2, =_sbss
 80015c4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80015c8:	20000880 	.word	0x20000880

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <Powerstep01_AttachErrorHandler+0x1c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000510 	.word	0x20000510

080015f0 <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <Powerstep01_AttachFlagInterrupt+0x1c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000050c 	.word	0x2000050c

08001610 <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <Powerstep01_AttachBusyInterrupt+0x1c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000508 	.word	0x20000508

08001630 <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <Powerstep01_ReadId+0x14>)
 8001636:	881b      	ldrh	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000522 	.word	0x20000522

08001648 <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 8001650:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <Powerstep01_Init+0x84>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fb48 	bl	8003cec <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 800165c:	f002 fc72 	bl	8003f44 <Powerstep01_Board_SpiInit>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 8001666:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 800166a:	f001 f90b 	bl	8002884 <Powerstep01_ErrorHandler>
  } 
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 800166e:	f002 fbdb 	bl	8003e28 <Powerstep01_Board_StepClockInit>
  
  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <Powerstep01_Init+0x84>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fc43 	bl	8003f04 <Powerstep01_Board_ReleaseReset>
  
  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f002 fb16 	bl	8003cb0 <Powerstep01_Board_Delay>

  if (pInit == 0)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h 
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <Powerstep01_Init+0x84>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f001 f9e7 	bl	8002a64 <Powerstep01_SetRegisterToPredefinedValues>
 8001696:	e006      	b.n	80016a6 <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <Powerstep01_Init+0x84>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 fb31 	bl	8002d08 <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <Powerstep01_Init+0x84>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fa00 	bl	8001ab2 <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 80016b2:	f000 fb8f 	bl	8001dd4 <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <Powerstep01_Init+0x84>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <Powerstep01_Init+0x84>)
 80016c0:	801a      	strh	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000522 	.word	0x20000522

080016d0 <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 80016d4:	f002 fcaa 	bl	800402c <Powerstep01_Board_BUSY_PIN_GetState>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 80016e2:	2300      	movs	r3, #0
  }
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 80016ec:	f002 fcaa 	bl	8004044 <Powerstep01_Board_FLAG_PIN_GetState>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 80016fa:	2300      	movs	r3, #0
  }
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}

08001700 <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 8001710:	4b67      	ldr	r3, [pc, #412]	@ (80018b0 <Powerstep01_CmdGetParam+0x1b0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	429a      	cmp	r2, r3
 800171a:	f080 80c4 	bcs.w	80018a6 <Powerstep01_CmdGetParam+0x1a6>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001722:	4b63      	ldr	r3, [pc, #396]	@ (80018b0 <Powerstep01_CmdGetParam+0x1b0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 8001732:	2300      	movs	r3, #0
 8001734:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8001736:	4b5f      	ldr	r3, [pc, #380]	@ (80018b4 <Powerstep01_CmdGetParam+0x1b4>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8001742:	f002 fac9 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8001746:	2300      	movs	r3, #0
 8001748:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e030      	b.n	80017b2 <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8001750:	4a59      	ldr	r2, [pc, #356]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4413      	add	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 800175a:	4a57      	ldr	r2, [pc, #348]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4413      	add	r3, r2
 8001760:	3301      	adds	r3, #1
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001766:	4a54      	ldr	r2, [pc, #336]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4413      	add	r3, r2
 800176c:	3302      	adds	r3, #2
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8001772:	4a51      	ldr	r2, [pc, #324]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4413      	add	r3, r2
 8001778:	3303      	adds	r3, #3
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 800177e:	4a4f      	ldr	r2, [pc, #316]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 8001788:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4413      	add	r3, r2
 800178e:	3301      	adds	r3, #1
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 8001794:	4a49      	ldr	r2, [pc, #292]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4413      	add	r3, r2
 800179a:	3302      	adds	r3, #2
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;    
 80017a0:	4a46      	ldr	r2, [pc, #280]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4413      	add	r3, r2
 80017a6:	3303      	adds	r3, #3
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	3301      	adds	r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b3f      	ldr	r3, [pc, #252]	@ (80018b0 <Powerstep01_CmdGetParam+0x1b0>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4293      	cmp	r3, r2
 80017be:	d3c7      	bcc.n	8001750 <Powerstep01_CmdGetParam+0x50>
      }
      switch (param)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b1b      	cmp	r3, #27
 80017c4:	bf8c      	ite	hi
 80017c6:	2301      	movhi	r3, #1
 80017c8:	2300      	movls	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d12c      	bne.n	800182a <Powerstep01_CmdGetParam+0x12a>
 80017d0:	2201      	movs	r2, #1
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	409a      	lsls	r2, r3
 80017d6:	4b3a      	ldr	r3, [pc, #232]	@ (80018c0 <Powerstep01_CmdGetParam+0x1c0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d113      	bne.n	8001810 <Powerstep01_CmdGetParam+0x110>
 80017e8:	f002 031a 	and.w	r3, r2, #26
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d017      	beq.n	800182a <Powerstep01_CmdGetParam+0x12a>
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	f042 0220 	orr.w	r2, r2, #32
 8001804:	b2d1      	uxtb	r1, r2
 8001806:	4a2c      	ldr	r2, [pc, #176]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 8001808:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 800180a:	2303      	movs	r3, #3
 800180c:	73fb      	strb	r3, [r7, #15]
          break;
 800180e:	e018      	b.n	8001842 <Powerstep01_CmdGetParam+0x142>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	7b7b      	ldrb	r3, [r7, #13]
 8001816:	f042 0220 	orr.w	r2, r2, #32
 800181a:	b2d1      	uxtb	r1, r2
 800181c:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 800181e:	4413      	add	r3, r2
 8001820:	460a      	mov	r2, r1
 8001822:	705a      	strb	r2, [r3, #1]
          maxArgumentNbBytes = 2;
 8001824:	2302      	movs	r3, #2
 8001826:	73fb      	strb	r3, [r7, #15]
          break;
 8001828:	e00b      	b.n	8001842 <Powerstep01_CmdGetParam+0x142>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	7b7b      	ldrb	r3, [r7, #13]
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d1      	uxtb	r1, r2
 8001836:	4a20      	ldr	r2, [pc, #128]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001842:	f002 fa40 	bl	8003cc6 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8001846:	2301      	movs	r3, #1
 8001848:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 800184a:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <Powerstep01_CmdGetParam+0x1b4>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	f47f af70 	bne.w	8001736 <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	f1c3 0303 	rsb	r3, r3, #3
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	e00c      	b.n	800187a <Powerstep01_CmdGetParam+0x17a>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4a15      	ldr	r2, [pc, #84]	@ (80018b8 <Powerstep01_CmdGetParam+0x1b8>)
 8001864:	441a      	add	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4914      	ldr	r1, [pc, #80]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 800186a:	440b      	add	r3, r1
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f001 fc46 	bl	8003100 <Powerstep01_WriteBytes>
         loop++)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	3301      	adds	r3, #1
 8001878:	613b      	str	r3, [r7, #16]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d9ef      	bls.n	8001860 <Powerstep01_CmdGetParam+0x160>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 8001884:	4413      	add	r3, r2
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	041a      	lsls	r2, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	490b      	ldr	r1, [pc, #44]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 800188e:	440b      	add	r3, r1
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	021b      	lsls	r3, r3, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001894:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);    
 8001896:	7b7a      	ldrb	r2, [r7, #13]
 8001898:	4908      	ldr	r1, [pc, #32]	@ (80018bc <Powerstep01_CmdGetParam+0x1bc>)
 800189a:	440a      	add	r2, r1
 800189c:	78d2      	ldrb	r2, [r2, #3]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80018a2:	f002 fa19 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 80018a6:	697b      	ldr	r3, [r7, #20]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000514 	.word	0x20000514
 80018b4:	20000520 	.word	0x20000520
 80018b8:	20000518 	.word	0x20000518
 80018bc:	2000051c 	.word	0x2000051c
 80018c0:	0d2021e4 	.word	0x0d2021e4

080018c4 <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 80018d2:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <Powerstep01_CmdGetStatus+0x124>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	79fa      	ldrb	r2, [r7, #7]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d27e      	bcs.n	80019dc <Powerstep01_CmdGetStatus+0x118>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80018de:	4b42      	ldr	r3, [pc, #264]	@ (80019e8 <Powerstep01_CmdGetStatus+0x124>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	3b01      	subs	r3, #1
 80018ec:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 80018f2:	4b3e      	ldr	r3, [pc, #248]	@ (80019ec <Powerstep01_CmdGetStatus+0x128>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <Powerstep01_CmdGetStatus+0x42>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80018fe:	f002 f9eb 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	e030      	b.n	800196e <Powerstep01_CmdGetStatus+0xaa>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 800190c:	4a38      	ldr	r2, [pc, #224]	@ (80019f0 <Powerstep01_CmdGetStatus+0x12c>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4413      	add	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8001916:	4a36      	ldr	r2, [pc, #216]	@ (80019f0 <Powerstep01_CmdGetStatus+0x12c>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	3301      	adds	r3, #1
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001922:	4a33      	ldr	r2, [pc, #204]	@ (80019f0 <Powerstep01_CmdGetStatus+0x12c>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4413      	add	r3, r2
 8001928:	3302      	adds	r3, #2
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 800192e:	4a30      	ldr	r2, [pc, #192]	@ (80019f0 <Powerstep01_CmdGetStatus+0x12c>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4413      	add	r3, r2
 8001934:	3303      	adds	r3, #3
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 800193a:	4a2e      	ldr	r2, [pc, #184]	@ (80019f4 <Powerstep01_CmdGetStatus+0x130>)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 8001944:	4a2b      	ldr	r2, [pc, #172]	@ (80019f4 <Powerstep01_CmdGetStatus+0x130>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4413      	add	r3, r2
 800194a:	3301      	adds	r3, #1
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 8001950:	4a28      	ldr	r2, [pc, #160]	@ (80019f4 <Powerstep01_CmdGetStatus+0x130>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	3302      	adds	r3, #2
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;       
 800195c:	4a25      	ldr	r2, [pc, #148]	@ (80019f4 <Powerstep01_CmdGetStatus+0x130>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4413      	add	r3, r2
 8001962:	3303      	adds	r3, #3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	3301      	adds	r3, #1
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <Powerstep01_CmdGetStatus+0x124>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4293      	cmp	r3, r2
 800197a:	d3c7      	bcc.n	800190c <Powerstep01_CmdGetStatus+0x48>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <Powerstep01_CmdGetStatus+0x12c>)
 8001980:	21d0      	movs	r1, #208	@ 0xd0
 8001982:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001984:	f002 f99f 	bl	8003cc6 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <Powerstep01_CmdGetStatus+0x128>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ad      	bne.n	80018f2 <Powerstep01_CmdGetStatus+0x2e>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	e00c      	b.n	80019b6 <Powerstep01_CmdGetStatus+0xf2>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <Powerstep01_CmdGetStatus+0x12c>)
 80019a0:	441a      	add	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4913      	ldr	r1, [pc, #76]	@ (80019f4 <Powerstep01_CmdGetStatus+0x130>)
 80019a6:	440b      	add	r3, r1
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f001 fba8 	bl	8003100 <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	3301      	adds	r3, #1
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d9ef      	bls.n	800199c <Powerstep01_CmdGetStatus+0xd8>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 80019bc:	7bbb      	ldrb	r3, [r7, #14]
 80019be:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <Powerstep01_CmdGetStatus+0x130>)
 80019c0:	4413      	add	r3, r2
 80019c2:	785b      	ldrb	r3, [r3, #1]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
 80019ca:	490a      	ldr	r1, [pc, #40]	@ (80019f4 <Powerstep01_CmdGetStatus+0x130>)
 80019cc:	440b      	add	r3, r1
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 80019d8:	f002 f97e 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 80019dc:	8afb      	ldrh	r3, [r7, #22]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000514 	.word	0x20000514
 80019ec:	20000520 	.word	0x20000520
 80019f0:	20000518 	.word	0x20000518
 80019f4:	2000051c 	.word	0x2000051c

080019f8 <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2200      	movs	r2, #0
 8001a06:	2170      	movs	r1, #112	@ 0x70
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 ff67 	bl	80028dc <Powerstep01_SendCommand>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	2200      	movs	r2, #0
 8001a24:	2178      	movs	r1, #120	@ 0x78
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 ff58 	bl	80028dc <Powerstep01_SendCommand>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2160      	movs	r1, #96	@ 0x60
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 ff48 	bl	80028dc <Powerstep01_SendCommand>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	603a      	str	r2, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	460b      	mov	r3, r1
 8001a62:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001a6a:	b2d9      	uxtb	r1, r3
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 ff33 	bl	80028dc <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	71bb      	strb	r3, [r7, #6]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 8001a92:	79ba      	ldrb	r2, [r7, #6]
 8001a94:	797b      	ldrb	r3, [r7, #5]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f063 037d 	orn	r3, r3, #125	@ 0x7d
 8001a9e:	b2d9      	uxtb	r1, r3
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 ff19 	bl	80028dc <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	21a8      	movs	r1, #168	@ 0xa8
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 ff0a 	bl	80028dc <Powerstep01_SendCommand>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2200      	movs	r2, #0
 8001ade:	21b8      	movs	r1, #184	@ 0xb8
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fefb 	bl	80028dc <Powerstep01_SendCommand>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	603a      	str	r2, [r7, #0]
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	460b      	mov	r3, r1
 8001afc:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b04:	b2d9      	uxtb	r1, r3
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fee6 	bl	80028dc <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fed7 	bl	80028dc <Powerstep01_SendCommand>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	460b      	mov	r3, r1
 8001b42:	71bb      	strb	r3, [r7, #6]
 8001b44:	4613      	mov	r3, r2
 8001b46:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 8001b48:	79ba      	ldrb	r2, [r7, #6]
 8001b4a:	797b      	ldrb	r3, [r7, #5]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f063 036d 	orn	r3, r3, #109	@ 0x6d
 8001b54:	b2d9      	uxtb	r1, r3
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 febe 	bl	80028dc <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2200      	movs	r2, #0
 8001b76:	21c0      	movs	r1, #192	@ 0xc0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 feaf 	bl	80028dc <Powerstep01_SendCommand>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2200      	movs	r2, #0
 8001b94:	21d8      	movs	r1, #216	@ 0xd8
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fea0 	bl	80028dc <Powerstep01_SendCommand>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	603a      	str	r2, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001bba:	b2d9      	uxtb	r1, r3
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fe8b 	bl	80028dc <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 8001bde:	4b5e      	ldr	r3, [pc, #376]	@ (8001d58 <Powerstep01_CmdSetParam+0x188>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	f080 80b2 	bcs.w	8001d50 <Powerstep01_CmdSetParam+0x180>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001bf0:	4b59      	ldr	r3, [pc, #356]	@ (8001d58 <Powerstep01_CmdSetParam+0x188>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8001c04:	4b55      	ldr	r3, [pc, #340]	@ (8001d5c <Powerstep01_CmdSetParam+0x18c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8001c10:	f002 f862 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e019      	b.n	8001c52 <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8001c1e:	4a50      	ldr	r2, [pc, #320]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8001c28:	4a4d      	ldr	r2, [pc, #308]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001c34:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8001c40:	4a47      	ldr	r2, [pc, #284]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	4413      	add	r3, r2
 8001c46:	3303      	adds	r3, #3
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	4b41      	ldr	r3, [pc, #260]	@ (8001d58 <Powerstep01_CmdSetParam+0x188>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d3de      	bcc.n	8001c1e <Powerstep01_CmdSetParam+0x4e>
      }
      switch (param)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b1a      	cmp	r3, #26
 8001c64:	bf8c      	ite	hi
 8001c66:	2301      	movhi	r3, #1
 8001c68:	2300      	movls	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d13e      	bne.n	8001cee <Powerstep01_CmdSetParam+0x11e>
 8001c70:	2201      	movs	r2, #1
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	409a      	lsls	r2, r3
 8001c76:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <Powerstep01_CmdSetParam+0x194>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d120      	bne.n	8001cca <Powerstep01_CmdSetParam+0xfa>
 8001c88:	f002 030a 	and.w	r3, r2, #10
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d029      	beq.n	8001cee <Powerstep01_CmdSetParam+0x11e>
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8001c9a:	7c7b      	ldrb	r3, [r7, #17]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	b2d1      	uxtb	r1, r2
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001ca2:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0c1a      	lsrs	r2, r3, #16
 8001ca8:	7c7b      	ldrb	r3, [r7, #17]
 8001caa:	b2d1      	uxtb	r1, r2
 8001cac:	4a2c      	ldr	r2, [pc, #176]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	0a1a      	lsrs	r2, r3, #8
 8001cb8:	7c7b      	ldrb	r3, [r7, #17]
 8001cba:	b2d1      	uxtb	r1, r2
 8001cbc:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 3;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	74fb      	strb	r3, [r7, #19]
          break;
 8001cc8:	e01a      	b.n	8001d00 <Powerstep01_CmdSetParam+0x130>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8001cca:	7c7b      	ldrb	r3, [r7, #17]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	b2d1      	uxtb	r1, r2
 8001cd0:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001cd2:	4413      	add	r3, r2
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	0a1a      	lsrs	r2, r3, #8
 8001cdc:	7c7b      	ldrb	r3, [r7, #17]
 8001cde:	b2d1      	uxtb	r1, r2
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	74fb      	strb	r3, [r7, #19]
          break;
 8001cec:	e008      	b.n	8001d00 <Powerstep01_CmdSetParam+0x130>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8001cee:	7c7b      	ldrb	r3, [r7, #17]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	b2d1      	uxtb	r1, r2
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001cf6:	4413      	add	r3, r2
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001d00:	7c7b      	ldrb	r3, [r7, #17]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	b2d1      	uxtb	r1, r2
 8001d06:	4a16      	ldr	r2, [pc, #88]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001d08:	4413      	add	r3, r2
 8001d0a:	460a      	mov	r2, r1
 8001d0c:	70da      	strb	r2, [r3, #3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001d0e:	f001 ffda 	bl	8003cc6 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <Powerstep01_CmdSetParam+0x18c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f af71 	bne.w	8001c04 <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 8001d22:	7cfb      	ldrb	r3, [r7, #19]
 8001d24:	f1c3 0303 	rsb	r3, r3, #3
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e00c      	b.n	8001d46 <Powerstep01_CmdSetParam+0x176>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <Powerstep01_CmdSetParam+0x190>)
 8001d30:	441a      	add	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <Powerstep01_CmdSetParam+0x198>)
 8001d36:	440b      	add	r3, r1
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f001 f9e0 	bl	8003100 <Powerstep01_WriteBytes>
         loop++)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d9ef      	bls.n	8001d2c <Powerstep01_CmdSetParam+0x15c>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8001d4c:	f001 ffc4 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
  }
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000514 	.word	0x20000514
 8001d5c:	20000520 	.word	0x20000520
 8001d60:	20000518 	.word	0x20000518
 8001d64:	052021e4 	.word	0x052021e4
 8001d68:	2000051c 	.word	0x2000051c

08001d6c <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	21a0      	movs	r1, #160	@ 0xa0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fdad 	bl	80028dc <Powerstep01_SendCommand>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2200      	movs	r2, #0
 8001d98:	21b0      	movs	r1, #176	@ 0xb0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fd9e 	bl	80028dc <Powerstep01_SendCommand>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 8001dbe:	b2d9      	uxtb	r1, r3
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fd89 	bl	80028dc <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	e028      	b.n	8001e32 <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8001de4:	21d0      	movs	r1, #208	@ 0xd0
 8001de6:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4a21      	ldr	r2, [pc, #132]	@ (8001e70 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8001dec:	4413      	add	r3, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e70 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8001df6:	4413      	add	r3, r2
 8001df8:	2200      	movs	r2, #0
 8001dfa:	709a      	strb	r2, [r3, #2]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001e70 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8001e00:	4413      	add	r3, r2
 8001e02:	2200      	movs	r2, #0
 8001e04:	70da      	strb	r2, [r3, #3]
     spiRxBursts[0][loop] = 0;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	@ (8001e74 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4a18      	ldr	r2, [pc, #96]	@ (8001e74 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8001e12:	4413      	add	r3, r2
 8001e14:	2200      	movs	r2, #0
 8001e16:	705a      	strb	r2, [r3, #1]
     spiRxBursts[2][loop] = 0;
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	@ (8001e74 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	709a      	strb	r2, [r3, #2]
     spiRxBursts[3][loop] = 0;
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	4a13      	ldr	r2, [pc, #76]	@ (8001e74 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8001e26:	4413      	add	r3, r2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	70da      	strb	r2, [r3, #3]
  for (loop = 0; loop < numberOfDevices; loop++)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3d0      	bcc.n	8001de0 <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0; 
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	e00c      	b.n	8001e5e <Powerstep01_FetchAndClearAllStatus+0x8a>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8001e48:	441a      	add	r2, r3
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	4909      	ldr	r1, [pc, #36]	@ (8001e74 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8001e4e:	440b      	add	r3, r1
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f001 f954 	bl	8003100 <Powerstep01_WriteBytes>
       loop++)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d9ef      	bls.n	8001e44 <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000518 	.word	0x20000518
 8001e74:	2000051c 	.word	0x2000051c
 8001e78:	20000514 	.word	0x20000514

08001e7c <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <Powerstep01_GetFetchedStatus+0x54>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d215      	bcs.n	8001ec2 <Powerstep01_GetFetchedStatus+0x46>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <Powerstep01_GetFetchedStatus+0x54>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <Powerstep01_GetFetchedStatus+0x58>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	7b7b      	ldrb	r3, [r7, #13]
 8001eb4:	4907      	ldr	r1, [pc, #28]	@ (8001ed4 <Powerstep01_GetFetchedStatus+0x58>)
 8001eb6:	440b      	add	r3, r1
 8001eb8:	789b      	ldrb	r3, [r3, #2]
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20000514 	.word	0x20000514
 8001ed4:	2000051c 	.word	0x2000051c

08001ed8 <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 8001edc:	4b02      	ldr	r3, [pc, #8]	@ (8001ee8 <Powerstep01_GetMotorHandle+0x10>)
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 8001ef0:	4b02      	ldr	r3, [pc, #8]	@ (8001efc <Powerstep01_GetFwVersion+0x10>)
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	00010500 	.word	0x00010500

08001f00 <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fbf6 	bl	8001700 <Powerstep01_CmdGetParam>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fc7e 	bl	8002818 <Powerstep01_ConvertPosition>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <Powerstep01_GetNbDevices+0x14>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20000514 	.word	0x20000514

08001f40 <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2116      	movs	r1, #22
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fbd5 	bl	8001700 <Powerstep01_CmdGetParam>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fbc7 	bl	8001700 <Powerstep01_CmdGetParam>
 8001f72:	60f8      	str	r0, [r7, #12]
  float value;
  switch (param)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	2b14      	cmp	r3, #20
 8001f7a:	f200 8090 	bhi.w	800209e <Powerstep01_GetAnalogValue+0x15e>
 8001f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f84 <Powerstep01_GetAnalogValue+0x44>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fd9 	.word	0x08001fd9
 8001f88:	0800209f 	.word	0x0800209f
 8001f8c:	08001fd9 	.word	0x08001fd9
 8001f90:	08001ff9 	.word	0x08001ff9
 8001f94:	08001fed 	.word	0x08001fed
 8001f98:	08001fed 	.word	0x08001fed
 8001f9c:	08002005 	.word	0x08002005
 8001fa0:	08002011 	.word	0x08002011
 8001fa4:	0800205d 	.word	0x0800205d
 8001fa8:	0800205d 	.word	0x0800205d
 8001fac:	0800205d 	.word	0x0800205d
 8001fb0:	0800205d 	.word	0x0800205d
 8001fb4:	08002039 	.word	0x08002039
 8001fb8:	0800207b 	.word	0x0800207b
 8001fbc:	08002081 	.word	0x08002081
 8001fc0:	08002081 	.word	0x08002081
 8001fc4:	08002045 	.word	0x08002045
 8001fc8:	0800209f 	.word	0x0800209f
 8001fcc:	08002051 	.word	0x08002051
 8001fd0:	08002051 	.word	0x08002051
 8001fd4:	08002025 	.word	0x08002025
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fc1d 	bl	8002818 <Powerstep01_ConvertPosition>
 8001fde:	ee07 0a90 	vmov	s15, r0
 8001fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe6:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 8001fea:	e061      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f001 f8c9 	bl	8003184 <Powerstep01_AccDec_RegVal_to_Steps_s2>
 8001ff2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001ff6:	e05b      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f001 fa45 	bl	8003488 <Powerstep01_Speed_RegVal_to_Steps_s>
 8001ffe:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002002:	e055      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f001 f9f7 	bl	80033f8 <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 800200a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800200e:	e04f      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f001 fa1f 	bl	800345c <Powerstep01_MinSpd_RegVal_to_Steps_s>
 800201e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 8002022:	e045      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f001 f90b 	bl	8003248 <Powerstep01_FSSpd_RegVal_to_Steps_s>
 8002032:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002036:	e03b      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f001 f93d 	bl	80032b8 <Powerstep01_IntSpd_RegVal_to_Steps_s>
 800203e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002042:	e035      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f001 f96f 	bl	8003328 <Powerstep01_KTherm_RegVal_to_Comp>
 800204a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800204e:	e02f      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f001 fa53 	bl	80034fc <Powerstep01_StallOcd_RegVal_to_Th>
 8002056:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800205a:	e029      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <Powerstep01_GetAnalogValue+0x12e>
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f001 f998 	bl	8003398 <Powerstep01_Kval_RegVal_to_Perc>
 8002068:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 800206c:	e020      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f001 fa80 	bl	8003574 <Powerstep01_Tval_RegVal_to_RefVoltage>
 8002074:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002078:	e01a      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d016      	beq.n	80020ae <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <Powerstep01_GetAnalogValue+0x152>
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f001 f8b0 	bl	80031ec <Powerstep01_BEMFslope_RegVal_to_Perc>
 800208c:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 8002090:	e00e      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f001 faa3 	bl	80035de <Powerstep01_Tmin_RegVal_to_Time>
 8002098:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800209c:	e008      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a8:	edc7 7a05 	vstr	s15, [r7, #20]
 80020ac:	e000      	b.n	80020b0 <Powerstep01_GetAnalogValue+0x170>
        break;
 80020ae:	bf00      	nop
  }
  return value;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	ee07 3a90 	vmov	s15, r3
}
 80020b6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2101      	movs	r1, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fb16 	bl	8001700 <Powerstep01_CmdGetParam>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fb9e 	bl	8002818 <Powerstep01_ConvertPosition>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fbe6 	bl	80018c4 <Powerstep01_CmdGetStatus>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 8002106:	2300      	movs	r3, #0
  }
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	603a      	str	r2, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	460b      	mov	r3, r1
 800211e:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 8002120:	4b31      	ldr	r3, [pc, #196]	@ (80021e8 <Powerstep01_QueueCommands+0xd8>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	429a      	cmp	r2, r3
 800212a:	d257      	bcs.n	80021dc <Powerstep01_QueueCommands+0xcc>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800212c:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <Powerstep01_QueueCommands+0xd8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 800213c:	79bb      	ldrb	r3, [r7, #6]
 800213e:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8002142:	2b8a      	cmp	r3, #138	@ 0x8a
 8002144:	d01a      	beq.n	800217c <Powerstep01_QueueCommands+0x6c>
 8002146:	2b8a      	cmp	r3, #138	@ 0x8a
 8002148:	dc35      	bgt.n	80021b6 <Powerstep01_QueueCommands+0xa6>
 800214a:	2b82      	cmp	r3, #130	@ 0x82
 800214c:	d016      	beq.n	800217c <Powerstep01_QueueCommands+0x6c>
 800214e:	2b82      	cmp	r3, #130	@ 0x82
 8002150:	dc31      	bgt.n	80021b6 <Powerstep01_QueueCommands+0xa6>
 8002152:	2b40      	cmp	r3, #64	@ 0x40
 8002154:	d012      	beq.n	800217c <Powerstep01_QueueCommands+0x6c>
 8002156:	2b40      	cmp	r3, #64	@ 0x40
 8002158:	db2d      	blt.n	80021b6 <Powerstep01_QueueCommands+0xa6>
 800215a:	2b68      	cmp	r3, #104	@ 0x68
 800215c:	dc2b      	bgt.n	80021b6 <Powerstep01_QueueCommands+0xa6>
 800215e:	2b50      	cmp	r3, #80	@ 0x50
 8002160:	db29      	blt.n	80021b6 <Powerstep01_QueueCommands+0xa6>
 8002162:	3b50      	subs	r3, #80	@ 0x50
 8002164:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <Powerstep01_QueueCommands+0xdc>)
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01c      	beq.n	80021b6 <Powerstep01_QueueCommands+0xa6>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	491c      	ldr	r1, [pc, #112]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 8002180:	79ba      	ldrb	r2, [r7, #6]
 8002182:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	141a      	asrs	r2, r3, #16
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	b2d1      	uxtb	r1, r2
 800218c:	4a18      	ldr	r2, [pc, #96]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 800218e:	4413      	add	r3, r2
 8002190:	460a      	mov	r2, r1
 8002192:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	121a      	asrs	r2, r3, #8
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	b2d1      	uxtb	r1, r2
 800219c:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 800219e:	4413      	add	r3, r2
 80021a0:	460a      	mov	r2, r1
 80021a2:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	b2d1      	uxtb	r1, r2
 80021aa:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	70da      	strb	r2, [r3, #3]
       break;
 80021b2:	bf00      	nop
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[3][spiIndex] = command;
    }
  }
}
 80021b4:	e012      	b.n	80021dc <Powerstep01_QueueCommands+0xcc>
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 80021ba:	2100      	movs	r1, #0
 80021bc:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	4a0b      	ldr	r2, [pc, #44]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 80021c2:	4413      	add	r3, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	4a09      	ldr	r2, [pc, #36]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 80021cc:	4413      	add	r3, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = command;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4a06      	ldr	r2, [pc, #24]	@ (80021f0 <Powerstep01_QueueCommands+0xe0>)
 80021d6:	4413      	add	r3, r2
 80021d8:	79ba      	ldrb	r2, [r7, #6]
 80021da:	70da      	strb	r2, [r3, #3]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	20000514 	.word	0x20000514
 80021ec:	01010001 	.word	0x01010001
 80021f0:	20000518 	.word	0x20000518

080021f4 <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	211b      	movs	r1, #27
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fa7c 	bl	8001700 <Powerstep01_CmdGetParam>
 8002208:	4603      	mov	r3, r0
 800220a:	b29b      	uxth	r3, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fe6f 	bl	8003f04 <Powerstep01_Board_ReleaseReset>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4618      	mov	r0, r3
 800223c:	f001 fe72 	bl	8003f24 <Powerstep01_Board_Reset>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	2b07      	cmp	r3, #7
 800225c:	d82a      	bhi.n	80022b4 <Powerstep01_SelectStepMode+0x6c>
 800225e:	a201      	add	r2, pc, #4	@ (adr r2, 8002264 <Powerstep01_SelectStepMode+0x1c>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002285 	.word	0x08002285
 8002268:	0800228b 	.word	0x0800228b
 800226c:	08002291 	.word	0x08002291
 8002270:	08002297 	.word	0x08002297
 8002274:	0800229d 	.word	0x0800229d
 8002278:	080022a3 	.word	0x080022a3
 800227c:	080022a9 	.word	0x080022a9
 8002280:	080022af 	.word	0x080022af
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
      break;
 8002288:	e016      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      break;    
 800228e:	e013      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 8002290:	2302      	movs	r3, #2
 8002292:	73fb      	strb	r3, [r7, #15]
      break;        
 8002294:	e010      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8002296:	2303      	movs	r3, #3
 8002298:	73fb      	strb	r3, [r7, #15]
      break;
 800229a:	e00d      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 800229c:	2304      	movs	r3, #4
 800229e:	73fb      	strb	r3, [r7, #15]
      break;        
 80022a0:	e00a      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 80022a2:	2305      	movs	r3, #5
 80022a4:	73fb      	strb	r3, [r7, #15]
      break;
 80022a6:	e007      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 80022a8:	2306      	movs	r3, #6
 80022aa:	73fb      	strb	r3, [r7, #15]
      break;
 80022ac:	e004      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 80022ae:	2307      	movs	r3, #7
 80022b0:	73fb      	strb	r3, [r7, #15]
      break;
 80022b2:	e001      	b.n	80022b8 <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 80022b4:	2300      	movs	r3, #0
 80022b6:	e01c      	b.n	80022f2 <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fbf9 	bl	8001ab2 <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2116      	movs	r1, #22
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fa1b 	bl	8001700 <Powerstep01_CmdGetParam>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 80022d4:	7bba      	ldrb	r2, [r7, #14]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	4313      	orrs	r3, r2
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2116      	movs	r1, #22
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc74 	bl	8001bd0 <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fc4b 	bl	8001b86 <Powerstep01_CmdResetPos>
  
  return TRUE;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop

080022fc <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0; 
 8002302:	2300      	movs	r3, #0
 8002304:	71fb      	strb	r3, [r7, #7]
 8002306:	e00c      	b.n	8002322 <Powerstep01_SendQueuedCommands+0x26>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <Powerstep01_SendQueuedCommands+0x38>)
 800230c:	441a      	add	r2, r3
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4909      	ldr	r1, [pc, #36]	@ (8002338 <Powerstep01_SendQueuedCommands+0x3c>)
 8002312:	440b      	add	r3, r1
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 fef2 	bl	8003100 <Powerstep01_WriteBytes>
       loop++)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	3301      	adds	r3, #1
 8002320:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d9ef      	bls.n	8002308 <Powerstep01_SendQueuedCommands+0xc>
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000518 	.word	0x20000518
 8002338:	2000051c 	.word	0x2000051c

0800233c <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2101      	movs	r1, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f9d7 	bl	8001700 <Powerstep01_CmdGetParam>
 8002352:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	1ad2      	subs	r2, r2, r3
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fc36 	bl	8001bd0 <Powerstep01_CmdSetParam>
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2103      	movs	r1, #3
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fc26 	bl	8001bd0 <Powerstep01_CmdSetParam>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d804      	bhi.n	80023a6 <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 800239c:	4a05      	ldr	r2, [pc, #20]	@ (80023b4 <Powerstep01_SetNbDevices+0x28>)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	7013      	strb	r3, [r2, #0]
    return TRUE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 80023a6:	2300      	movs	r3, #0
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	20000514 	.word	0x20000514

080023b8 <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2116      	movs	r1, #22
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f995 	bl	8001700 <Powerstep01_CmdGetParam>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 80023e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d507      	bpl.n	8002406 <Powerstep01_SetAnalogValue+0x4e>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d004      	beq.n	8002406 <Powerstep01_SetAnalogValue+0x4e>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d001      	beq.n	8002406 <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 8002402:	2300      	movs	r3, #0
 8002404:	74fb      	strb	r3, [r7, #19]
  }
  switch (param)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	2b14      	cmp	r3, #20
 800240c:	f200 8191 	bhi.w	8002732 <Powerstep01_SetAnalogValue+0x37a>
 8002410:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <Powerstep01_SetAnalogValue+0x60>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	080024d3 	.word	0x080024d3
 800241c:	0800246d 	.word	0x0800246d
 8002420:	080024d3 	.word	0x080024d3
 8002424:	08002733 	.word	0x08002733
 8002428:	08002547 	.word	0x08002547
 800242c:	08002547 	.word	0x08002547
 8002430:	0800256d 	.word	0x0800256d
 8002434:	08002593 	.word	0x08002593
 8002438:	08002687 	.word	0x08002687
 800243c:	08002687 	.word	0x08002687
 8002440:	08002687 	.word	0x08002687
 8002444:	08002687 	.word	0x08002687
 8002448:	08002603 	.word	0x08002603
 800244c:	080026d5 	.word	0x080026d5
 8002450:	080026e1 	.word	0x080026e1
 8002454:	080026e1 	.word	0x080026e1
 8002458:	08002629 	.word	0x08002629
 800245c:	08002733 	.word	0x08002733
 8002460:	08002661 	.word	0x08002661
 8002464:	08002661 	.word	0x08002661
 8002468:	080025cb 	.word	0x080025cb
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 800246c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002470:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002754 <Powerstep01_SetAnalogValue+0x39c>
 8002474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247c:	dc1c      	bgt.n	80024b8 <Powerstep01_SetAnalogValue+0x100>
 800247e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002482:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	d018      	beq.n	80024be <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 800248c:	2116      	movs	r1, #22
 800248e:	2000      	movs	r0, #0
 8002490:	f7ff f936 	bl	8001700 <Powerstep01_CmdGetParam>
 8002494:	4603      	mov	r3, r0
 8002496:	43db      	mvns	r3, r3
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	2201      	movs	r2, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80024ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d502      	bpl.n	80024be <Powerstep01_SetAnalogValue+0x106>
 80024b8:	2300      	movs	r3, #0
 80024ba:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 80024bc:	e13b      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 80024be:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c6:	ee17 3a90 	vmov	r3, s15
 80024ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ce:	617b      	str	r3, [r7, #20]
      break;        
 80024d0:	e131      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 80024d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	d51c      	bpl.n	800251a <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 80024e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e4:	eef1 7a67 	vneg.f32	s15, s15
 80024e8:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 80024ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f4:	ee17 3a90 	vmov	r3, s15
 80024f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024fc:	d80a      	bhi.n	8002514 <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 80024fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002506:	ee17 3a90 	vmov	r3, s15
 800250a:	425b      	negs	r3, r3
 800250c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002510:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 8002512:	e110      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 8002514:	2300      	movs	r3, #0
 8002516:	74fb      	strb	r3, [r7, #19]
      break;
 8002518:	e10d      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 800251a:	edd7 7a01 	vldr	s15, [r7, #4]
 800251e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002522:	ee17 3a90 	vmov	r3, s15
 8002526:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800252a:	d209      	bcs.n	8002540 <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 800252c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002534:	ee17 3a90 	vmov	r3, s15
 8002538:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800253c:	617b      	str	r3, [r7, #20]
      break;
 800253e:	e0fa      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8002540:	2300      	movs	r3, #0
 8002542:	74fb      	strb	r3, [r7, #19]
      break;
 8002544:	e0f7      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 8002546:	edd7 7a01 	vldr	s15, [r7, #4]
 800254a:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002758 <Powerstep01_SetAnalogValue+0x3a0>
 800254e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	dd02      	ble.n	800255e <Powerstep01_SetAnalogValue+0x1a6>
 8002558:	2300      	movs	r3, #0
 800255a:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 800255c:	e0eb      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 800255e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002562:	f000 fdf3 	bl	800314c <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002566:	4603      	mov	r3, r0
 8002568:	617b      	str	r3, [r7, #20]
      break;
 800256a:	e0e4      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 800256c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002570:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800275c <Powerstep01_SetAnalogValue+0x3a4>
 8002574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	dd02      	ble.n	8002584 <Powerstep01_SetAnalogValue+0x1cc>
 800257e:	2300      	movs	r3, #0
 8002580:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8002582:	e0d8      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8002584:	ed97 0a01 	vldr	s0, [r7, #4]
 8002588:	f000 ff1a 	bl	80033c0 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 800258c:	4603      	mov	r3, r0
 800258e:	617b      	str	r3, [r7, #20]
      break;
 8002590:	e0d1      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8002592:	edd7 7a01 	vldr	s15, [r7, #4]
 8002596:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8002760 <Powerstep01_SetAnalogValue+0x3a8>
 800259a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	dd02      	ble.n	80025aa <Powerstep01_SetAnalogValue+0x1f2>
 80025a4:	2300      	movs	r3, #0
 80025a6:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 80025a8:	e0c5      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f8a6 	bl	8001700 <Powerstep01_CmdGetParam>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f403 5480 	and.w	r4, r3, #4096	@ 0x1000
 80025ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80025be:	f000 ff31 	bl	8003424 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4323      	orrs	r3, r4
 80025c6:	617b      	str	r3, [r7, #20]
      break;      
 80025c8:	e0b5      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 80025ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ce:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002764 <Powerstep01_SetAnalogValue+0x3ac>
 80025d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	dd02      	ble.n	80025e2 <Powerstep01_SetAnalogValue+0x22a>
 80025dc:	2300      	movs	r3, #0
 80025de:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 80025e0:	e0a9      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f88a 	bl	8001700 <Powerstep01_CmdGetParam>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 6480 	and.w	r4, r3, #1024	@ 0x400
 80025f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80025f6:	f000 fe0f 	bl	8003218 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4323      	orrs	r3, r4
 80025fe:	617b      	str	r3, [r7, #20]
      break;
 8002600:	e099      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 8002602:	edd7 7a01 	vldr	s15, [r7, #4]
 8002606:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002768 <Powerstep01_SetAnalogValue+0x3b0>
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	dd02      	ble.n	800261a <Powerstep01_SetAnalogValue+0x262>
 8002614:	2300      	movs	r3, #0
 8002616:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 8002618:	e08d      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 800261a:	ed97 0a01 	vldr	s0, [r7, #4]
 800261e:	f000 fe2f 	bl	8003280 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002622:	4603      	mov	r3, r0
 8002624:	617b      	str	r3, [r7, #20]
      break;
 8002626:	e086      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 8002628:	edd7 7a01 	vldr	s15, [r7, #4]
 800262c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002638:	d408      	bmi.n	800264c <Powerstep01_SetAnalogValue+0x294>
 800263a:	edd7 7a01 	vldr	s15, [r7, #4]
 800263e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800276c <Powerstep01_SetAnalogValue+0x3b4>
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	dd02      	ble.n	8002652 <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 8002650:	e071      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 8002652:	ed97 0a01 	vldr	s0, [r7, #4]
 8002656:	f000 fe45 	bl	80032e4 <Powerstep01_KTherm_Comp_to_RegVal>
 800265a:	4603      	mov	r3, r0
 800265c:	617b      	str	r3, [r7, #20]
      break;
 800265e:	e06a      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 8002660:	edd7 7a01 	vldr	s15, [r7, #4]
 8002664:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002770 <Powerstep01_SetAnalogValue+0x3b8>
 8002668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	dd02      	ble.n	8002678 <Powerstep01_SetAnalogValue+0x2c0>
 8002672:	2300      	movs	r3, #0
 8002674:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 8002676:	e05e      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8002678:	ed97 0a01 	vldr	s0, [r7, #4]
 800267c:	f000 ff1a 	bl	80034b4 <Powerstep01_StallOcd_Th_to_RegVal>
 8002680:	4603      	mov	r3, r0
 8002682:	617b      	str	r3, [r7, #20]
      break;
 8002684:	e057      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 8002686:	7cbb      	ldrb	r3, [r7, #18]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d112      	bne.n	80026b2 <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 800268c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002690:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002770 <Powerstep01_SetAnalogValue+0x3b8>
 8002694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	dd02      	ble.n	80026a4 <Powerstep01_SetAnalogValue+0x2ec>
 800269e:	2300      	movs	r3, #0
 80026a0:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 80026a2:	e048      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 80026a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80026a8:	f000 ff40 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 80026ac:	4603      	mov	r3, r0
 80026ae:	617b      	str	r3, [r7, #20]
      break;
 80026b0:	e041      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 80026b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	dd02      	ble.n	80026c6 <Powerstep01_SetAnalogValue+0x30e>
 80026c0:	2300      	movs	r3, #0
 80026c2:	74fb      	strb	r3, [r7, #19]
      break;
 80026c4:	e037      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 80026c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80026ca:	f000 fe47 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 80026ce:	4603      	mov	r3, r0
 80026d0:	617b      	str	r3, [r7, #20]
      break;
 80026d2:	e030      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 80026d4:	7cbb      	ldrb	r3, [r7, #18]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	74fb      	strb	r3, [r7, #19]
        break;
 80026de:	e02a      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 80026e0:	7cbb      	ldrb	r3, [r7, #18]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d112      	bne.n	800270c <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 80026e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ea:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002774 <Powerstep01_SetAnalogValue+0x3bc>
 80026ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f6:	dd02      	ble.n	80026fe <Powerstep01_SetAnalogValue+0x346>
 80026f8:	2300      	movs	r3, #0
 80026fa:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 80026fc:	e01b      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 80026fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002702:	f000 ff4f 	bl	80035a4 <Powerstep01_Tmin_Time_to_RegVal>
 8002706:	4603      	mov	r3, r0
 8002708:	617b      	str	r3, [r7, #20]
      break;
 800270a:	e014      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 800270c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002710:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002778 <Powerstep01_SetAnalogValue+0x3c0>
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd02      	ble.n	8002724 <Powerstep01_SetAnalogValue+0x36c>
 800271e:	2300      	movs	r3, #0
 8002720:	74fb      	strb	r3, [r7, #19]
      break;
 8002722:	e008      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 8002724:	ed97 0a01 	vldr	s0, [r7, #4]
 8002728:	f000 fd42 	bl	80031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800272c:	4603      	mov	r3, r0
 800272e:	617b      	str	r3, [r7, #20]
      break;
 8002730:	e001      	b.n	8002736 <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fa44 	bl	8001bd0 <Powerstep01_CmdSetParam>
  }
  return result;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
}
 800274a:	4618      	mov	r0, r3
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd90      	pop	{r4, r7, pc}
 8002752:	bf00      	nop
 8002754:	43ff8000 	.word	0x43ff8000
 8002758:	4768c600 	.word	0x4768c600
 800275c:	4673e800 	.word	0x4673e800
 8002760:	44741333 	.word	0x44741333
 8002764:	46742400 	.word	0x46742400
 8002768:	44742000 	.word	0x44742000
 800276c:	3fbc0000 	.word	0x3fbc0000
 8002770:	447a0000 	.word	0x447a0000
 8002774:	42800000 	.word	0x42800000
 8002778:	3ecccccd 	.word	0x3ecccccd

0800277c <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4618      	mov	r0, r3
 800278a:	f001 fb8b 	bl	8003ea4 <Powerstep01_Board_StartStepClock>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 800279a:	f001 fba9 	bl	8003ef0 <Powerstep01_Board_StopStepClock>
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 80027ae:	e016      	b.n	80027de <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	71bb      	strb	r3, [r7, #6]
 80027b8:	e00b      	b.n	80027d2 <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fc92 	bl	80020e6 <Powerstep01_IsDeviceBusy>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	3301      	adds	r3, #1
 80027d0:	71bb      	strb	r3, [r7, #6]
 80027d2:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	79ba      	ldrb	r2, [r7, #6]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3ed      	bcc.n	80027ba <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000514 	.word	0x20000514

080027f4 <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 80027fe:	bf00      	nop
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fc6f 	bl	80020e6 <Powerstep01_IsDeviceBusy>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f8      	bne.n	8002800 <Powerstep01_WaitWhileActive+0xc>
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00d      	beq.n	8002846 <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	43db      	mvns	r3, r3
 800282e:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3301      	adds	r3, #1
 8002834:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800283c:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	425b      	negs	r3, r3
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e001      	b.n	800284a <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <Powerstep01_BusyInterruptHandler+0x24>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <Powerstep01_BusyInterruptHandler+0x28>)
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 800286a:	4b04      	ldr	r3, [pc, #16]	@ (800287c <Powerstep01_BusyInterruptHandler+0x24>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002870:	4b03      	ldr	r3, [pc, #12]	@ (8002880 <Powerstep01_BusyInterruptHandler+0x28>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
  }
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000508 	.word	0x20000508
 8002880:	20000521 	.word	0x20000521

08002884 <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <Powerstep01_ErrorHandler+0x28>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <Powerstep01_ErrorHandler+0x28>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	88fa      	ldrh	r2, [r7, #6]
 800289c:	4610      	mov	r0, r2
 800289e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 80028a0:	e000      	b.n	80028a4 <Powerstep01_ErrorHandler+0x20>
    while(1)
 80028a2:	e7fe      	b.n	80028a2 <Powerstep01_ErrorHandler+0x1e>
}
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000510 	.word	0x20000510

080028b0 <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <Powerstep01_FlagInterruptHandler+0x24>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <Powerstep01_FlagInterruptHandler+0x28>)
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <Powerstep01_FlagInterruptHandler+0x24>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <Powerstep01_FlagInterruptHandler+0x28>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
  }
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000050c 	.word	0x2000050c
 80028d8:	20000521 	.word	0x20000521

080028dc <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	603a      	str	r2, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
 80028e8:	460b      	mov	r3, r1
 80028ea:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 80028ec:	4b59      	ldr	r3, [pc, #356]	@ (8002a54 <Powerstep01_SendCommand+0x178>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	79fa      	ldrb	r2, [r7, #7]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f080 80a8 	bcs.w	8002a4a <Powerstep01_SendCommand+0x16e>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80028fe:	4b55      	ldr	r3, [pc, #340]	@ (8002a54 <Powerstep01_SendCommand+0x178>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 800290e:	2300      	movs	r3, #0
 8002910:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8002912:	4b51      	ldr	r3, [pc, #324]	@ (8002a58 <Powerstep01_SendCommand+0x17c>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002918:	7abb      	ldrb	r3, [r7, #10]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800291e:	f001 f9db 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e019      	b.n	8002960 <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 800292c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002936:	4a49      	ldr	r2, [pc, #292]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	3301      	adds	r3, #1
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8002942:	4a46      	ldr	r2, [pc, #280]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	3302      	adds	r3, #2
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;   
 800294e:	4a43      	ldr	r2, [pc, #268]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	3303      	adds	r3, #3
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	4b3c      	ldr	r3, [pc, #240]	@ (8002a54 <Powerstep01_SendCommand+0x178>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4293      	cmp	r3, r2
 800296c:	d3de      	bcc.n	800292c <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 800296e:	79bb      	ldrb	r3, [r7, #6]
 8002970:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8002974:	2b8a      	cmp	r3, #138	@ 0x8a
 8002976:	d016      	beq.n	80029a6 <Powerstep01_SendCommand+0xca>
 8002978:	2b8a      	cmp	r3, #138	@ 0x8a
 800297a:	dc32      	bgt.n	80029e2 <Powerstep01_SendCommand+0x106>
 800297c:	2b82      	cmp	r3, #130	@ 0x82
 800297e:	d012      	beq.n	80029a6 <Powerstep01_SendCommand+0xca>
 8002980:	2b82      	cmp	r3, #130	@ 0x82
 8002982:	dc2e      	bgt.n	80029e2 <Powerstep01_SendCommand+0x106>
 8002984:	2b68      	cmp	r3, #104	@ 0x68
 8002986:	d00a      	beq.n	800299e <Powerstep01_SendCommand+0xc2>
 8002988:	2b68      	cmp	r3, #104	@ 0x68
 800298a:	dc2a      	bgt.n	80029e2 <Powerstep01_SendCommand+0x106>
 800298c:	2b60      	cmp	r3, #96	@ 0x60
 800298e:	d006      	beq.n	800299e <Powerstep01_SendCommand+0xc2>
 8002990:	2b60      	cmp	r3, #96	@ 0x60
 8002992:	dc26      	bgt.n	80029e2 <Powerstep01_SendCommand+0x106>
 8002994:	2b40      	cmp	r3, #64	@ 0x40
 8002996:	d006      	beq.n	80029a6 <Powerstep01_SendCommand+0xca>
 8002998:	2b50      	cmp	r3, #80	@ 0x50
 800299a:	d004      	beq.n	80029a6 <Powerstep01_SendCommand+0xca>
 800299c:	e021      	b.n	80029e2 <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80029a4:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 80029a6:	7a7b      	ldrb	r3, [r7, #9]
 80029a8:	492c      	ldr	r1, [pc, #176]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 80029aa:	79ba      	ldrb	r2, [r7, #6]
 80029ac:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	0c1a      	lsrs	r2, r3, #16
 80029b2:	7a7b      	ldrb	r3, [r7, #9]
 80029b4:	b2d1      	uxtb	r1, r2
 80029b6:	4a29      	ldr	r2, [pc, #164]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 80029b8:	4413      	add	r3, r2
 80029ba:	460a      	mov	r2, r1
 80029bc:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	0a1a      	lsrs	r2, r3, #8
 80029c2:	7a7b      	ldrb	r3, [r7, #9]
 80029c4:	b2d1      	uxtb	r1, r2
 80029c6:	4a25      	ldr	r2, [pc, #148]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 80029c8:	4413      	add	r3, r2
 80029ca:	460a      	mov	r2, r1
 80029cc:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80029ce:	7a7b      	ldrb	r3, [r7, #9]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d1      	uxtb	r1, r2
 80029d4:	4a21      	ldr	r2, [pc, #132]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 80029d6:	4413      	add	r3, r2
 80029d8:	460a      	mov	r2, r1
 80029da:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 3;
 80029dc:	2303      	movs	r3, #3
 80029de:	72fb      	strb	r3, [r7, #11]
          break;
 80029e0:	e012      	b.n	8002a08 <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 80029e2:	7a7b      	ldrb	r3, [r7, #9]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 80029e6:	2100      	movs	r1, #0
 80029e8:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 80029ea:	7a7b      	ldrb	r3, [r7, #9]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 80029ee:	4413      	add	r3, r2
 80029f0:	2200      	movs	r2, #0
 80029f2:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 80029f4:	7a7b      	ldrb	r3, [r7, #9]
 80029f6:	4a19      	ldr	r2, [pc, #100]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 80029f8:	4413      	add	r3, r2
 80029fa:	2200      	movs	r2, #0
 80029fc:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = param;
 80029fe:	7a7b      	ldrb	r3, [r7, #9]
 8002a00:	4a16      	ldr	r2, [pc, #88]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 8002a02:	4413      	add	r3, r2
 8002a04:	79ba      	ldrb	r2, [r7, #6]
 8002a06:	70da      	strb	r2, [r3, #3]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8002a08:	f001 f95d 	bl	8003cc6 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <Powerstep01_SendCommand+0x17c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f47f af7b 	bne.w	8002912 <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes; 
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	f1c3 0303 	rsb	r3, r3, #3
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e00c      	b.n	8002a40 <Powerstep01_SendCommand+0x164>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <Powerstep01_SendCommand+0x180>)
 8002a2a:	441a      	add	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	490c      	ldr	r1, [pc, #48]	@ (8002a60 <Powerstep01_SendCommand+0x184>)
 8002a30:	440b      	add	r3, r1
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f000 fb63 	bl	8003100 <Powerstep01_WriteBytes>
         loop++)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d9ef      	bls.n	8002a26 <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8002a46:	f001 f947 	bl	8003cd8 <Powerstep01_Board_EnableIrq>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000514 	.word	0x20000514
 8002a58:	20000520 	.word	0x20000520
 8002a5c:	20000518 	.word	0x20000518
 8002a60:	2000051c 	.word	0x2000051c

08002a64 <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f8ab 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f8a5 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f89f 	bl	8001bd0 <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 8120 	bne.w	8002cda <Powerstep01_SetRegisterToPredefinedValues+0x276>
  {
    case 0:
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	73fb      	strb	r3, [r7, #15]
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002a9e:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8002ce4 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 8002aa2:	f000 fb53 	bl	800314c <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002aa6:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2105      	movs	r1, #5
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f88e 	bl	8001bd0 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_ACC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002ab4:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8002ce4 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 8002ab8:	f000 fb48 	bl	800314c <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002abc:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002abe:	461a      	mov	r2, r3
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2106      	movs	r1, #6
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f883 	bl	8001bd0 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_DEC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8002aca:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8002ce4 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 8002ace:	f000 fc77 	bl	80033c0 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002ad2:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2107      	movs	r1, #7
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f878 	bl	8001bd0 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MAX_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
        POWERSTEP01_CONF_PARAM_LSPD_BIT_DEVICE_0|
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 8002ae0:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8002ce8 <Powerstep01_SetRegisterToPredefinedValues+0x284>
 8002ae4:	f000 fc9e 	bl	8003424 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8002ae8:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002aea:	461a      	mov	r2, r3
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2108      	movs	r1, #8
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f86d 	bl	8001bd0 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MIN_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
        POWERSTEP01_CONF_PARAM_BOOST_MODE_DEVICE_0|
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8002af6:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8002cec <Powerstep01_SetRegisterToPredefinedValues+0x288>
 8002afa:	f000 fb8d 	bl	8003218 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002afe:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002b00:	461a      	mov	r2, r3
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	2115      	movs	r1, #21
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f862 	bl	8001bd0 <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_FS_SPD_DEVICE_0)); 
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	2113      	movs	r1, #19
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f85c 	bl	8001bd0 <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_OCD_TH_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	220b      	movs	r2, #11
 8002b1c:	2116      	movs	r1, #22
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f856 	bl	8001bd0 <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_SYNC_MODE_DEVICE_0 |
        (uint8_t)POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0|
        (uint8_t)POWERSTEP01_CONF_PARAM_STEP_MODE_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	22ef      	movs	r2, #239	@ 0xef
 8002b28:	2117      	movs	r1, #23
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f850 	bl	8001bd0 <Powerstep01_CmdSetParam>
        POWERSTEP01_CONF_PARAM_ALARM_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	22c3      	movs	r2, #195	@ 0xc3
 8002b34:	2118      	movs	r1, #24
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f84a 	bl	8001bd0 <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_IGATE_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TCC_DEVICE_0   | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TBOOST_DEVICE_0|
        (uint16_t)POWERSTEP01_CONF_PARAM_WD_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2240      	movs	r2, #64	@ 0x40
 8002b40:	2119      	movs	r1, #25
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f844 	bl	8001bd0 <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_TBLANK_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TDT_DEVICE_0);
      // Voltage mode
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d175      	bne.n	8002c3a <Powerstep01_SetRegisterToPredefinedValues+0x1d6>
      {
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002b4e:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8002cf0 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 8002b52:	f000 fb95 	bl	8003280 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002b56:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8002b58:	461a      	mov	r2, r3
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	210d      	movs	r1, #13
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f836 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_INT_SPD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
          Powerstep01_KTherm_Comp_to_RegVal(
 8002b64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002b68:	f000 fbbc 	bl	80032e4 <Powerstep01_KTherm_Comp_to_RegVal>
 8002b6c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	2111      	movs	r1, #17
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f82b 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_K_THERM_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
          Powerstep01_StallOcd_Th_to_RegVal(
 8002b7a:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8002cf4 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 8002b7e:	f000 fc99 	bl	80034b4 <Powerstep01_StallOcd_Th_to_RegVal>
 8002b82:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002b84:	461a      	mov	r2, r3
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2114      	movs	r1, #20
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f820 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_STALL_TH_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
          Powerstep01_Kval_Perc_to_RegVal(
 8002b90:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002cf8 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002b94:	f000 fbe2 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002b98:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	2109      	movs	r1, #9
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f815 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_HOLD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
          Powerstep01_Kval_Perc_to_RegVal(
 8002ba6:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002cf8 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002baa:	f000 fbd7 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002bae:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	210a      	movs	r1, #10
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f80a 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_RUN_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
          Powerstep01_Kval_Perc_to_RegVal(
 8002bbc:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8002cf8 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002bc0:	f000 fbcc 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002bc4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	210b      	movs	r1, #11
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe ffff 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_ACC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
          Powerstep01_Kval_Perc_to_RegVal(
 8002bd2:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8002cf8 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002bd6:	f000 fbc1 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002bda:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	210c      	movs	r1, #12
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fff4 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002be8:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8002cfc <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8002bec:	f000 fae0 	bl	80031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002bf0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	210e      	movs	r1, #14
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ffe9 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_ST_SLP_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002bfe:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8002d00 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002c02:	f000 fad5 	bl	80031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002c06:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	210f      	movs	r1, #15
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe ffde 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_ACC_DEVICE_0));  
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002c14:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8002d00 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002c18:	f000 faca 	bl	80031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002c1c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	2110      	movs	r1, #16
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe ffd3 	bl	8001bd0 <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8002c30:	211a      	movs	r1, #26
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe ffcc 	bl	8001bd0 <Powerstep01_CmdSetParam>
          (uint16_t)POWERSTEP01_CONF_PARAM_UVLOVAL_DEVICE_0       | 
          (uint16_t)POWERSTEP01_CONF_PARAM_VCCVAL_DEVICE_0        | 
          (uint16_t)POWERSTEP01_CONF_PARAM_TSW_DEVICE_0           |
          (uint16_t)POWERSTEP01_CONF_PARAM_PRED_DEVICE_0);          
      }
      break;
 8002c38:	e04e      	b.n	8002cd8 <Powerstep01_SetRegisterToPredefinedValues+0x274>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002c3a:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8002d04 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002c3e:	f000 fc75 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002c42:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2109      	movs	r1, #9
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe ffc0 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002c50:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002d04 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002c54:	f000 fc6a 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002c58:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	210a      	movs	r1, #10
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe ffb5 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002c66:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002d04 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002c6a:	f000 fc5f 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002c6e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002c70:	461a      	mov	r2, r3
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	210b      	movs	r1, #11
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ffaa 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002c7c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8002d04 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002c80:	f000 fc54 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002c84:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002c86:	461a      	mov	r2, r3
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	210c      	movs	r1, #12
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe ff9f 	bl	8001bd0 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	2235      	movs	r2, #53	@ 0x35
 8002c96:	210e      	movs	r1, #14
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ff99 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002c9e:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002ca2:	f000 fc7f 	bl	80035a4 <Powerstep01_Tmin_Time_to_RegVal>
 8002ca6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002ca8:	461a      	mov	r2, r3
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	210f      	movs	r1, #15
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ff8e 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002cb4:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 8002cb8:	f000 fc74 	bl	80035a4 <Powerstep01_Tmin_Time_to_RegVal>
 8002cbc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe ff83 	bl	8001bd0 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f243 2208 	movw	r2, #12808	@ 0x3208
 8002cd0:	211a      	movs	r1, #26
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe ff7c 	bl	8001bd0 <Powerstep01_CmdSetParam>
      break;
 8002cd8:	bf00      	nop
      }
      break;
#endif
    default: ;
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	44c80000 	.word	0x44c80000
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	451c4000 	.word	0x451c4000
 8002cf0:	42760c4a 	.word	0x42760c4a
 8002cf4:	4404d000 	.word	0x4404d000
 8002cf8:	418028f6 	.word	0x418028f6
 8002cfc:	3d1c432d 	.word	0x3d1c432d
 8002d00:	3d801f75 	.word	0x3d801f75
 8002d04:	43a40f5c 	.word	0x43a40f5c

08002d08 <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe ff58 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe ff52 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2103      	movs	r1, #3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe ff4c 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d42:	f000 fa03 	bl	800314c <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002d46:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8002d48:	461a      	mov	r2, r3
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	2105      	movs	r1, #5
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff3e 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5e:	f000 f9f5 	bl	800314c <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002d62:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002d64:	461a      	mov	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2106      	movs	r1, #6
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe ff30 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d76:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7a:	f000 fb21 	bl	80033c0 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002d7e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002d80:	461a      	mov	r2, r3
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	2107      	movs	r1, #7
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe ff22 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d96:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9a:	f000 fb11 	bl	80033c0 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002d9e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002da0:	4323      	orrs	r3, r4
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2108      	movs	r1, #8
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe ff10 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dba:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbe:	f000 fa2b 	bl	8003218 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002dc2:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002dc4:	4323      	orrs	r3, r4
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2115      	movs	r1, #21
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fefe 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	f000 fb69 	bl	80034b4 <Powerstep01_StallOcd_Th_to_RegVal>
 8002de2:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002de4:	461a      	mov	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2113      	movs	r1, #19
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fef0 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2116      	movs	r1, #22
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fede 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	2117      	movs	r1, #23
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fed5 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 8002e3c:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 8002e42:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002e44:	461a      	mov	r2, r3
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2118      	movs	r1, #24
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fec0 	bl	8001bd0 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2119      	movs	r1, #25
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe feb2 	bl	8001bd0 <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 80b6 	bne.w	8002fe2 <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	f000 f9fe 	bl	8003280 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002e84:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	210d      	movs	r1, #13
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fe9f 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002e98:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9c:	f000 fa22 	bl	80032e4 <Powerstep01_KTherm_Comp_to_RegVal>
 8002ea0:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2111      	movs	r1, #17
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fe91 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	f000 fafc 	bl	80034b4 <Powerstep01_StallOcd_Th_to_RegVal>
 8002ebc:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2114      	movs	r1, #20
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fe83 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed4:	f000 fa42 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002ed8:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2109      	movs	r1, #9
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fe75 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	f000 fa34 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002ef4:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	210a      	movs	r1, #10
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe fe67 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002f08:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0c:	f000 fa26 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002f10:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002f12:	461a      	mov	r2, r3
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	210b      	movs	r1, #11
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fe59 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002f24:	eeb0 0a67 	vmov.f32	s0, s15
 8002f28:	f000 fa18 	bl	800335c <Powerstep01_Kval_Perc_to_RegVal>
 8002f2c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	210c      	movs	r1, #12
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fe4b 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002f40:	eeb0 0a67 	vmov.f32	s0, s15
 8002f44:	f000 f934 	bl	80031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002f48:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	210e      	movs	r1, #14
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fe3d 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f60:	f000 f926 	bl	80031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002f64:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fe2f 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002f78:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7c:	f000 f918 	bl	80031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002f80:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002f82:	461a      	mov	r2, r3
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2110      	movs	r1, #16
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fe21 	bl	8001bd0 <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
      (uint16_t)initPrm->vm.swMode | 
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 8002fba:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 8002fc2:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
      (uint16_t)initPrm->vm.vccVal| 
 8002fca:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 8002fd2:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	211a      	movs	r1, #26
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fdf8 	bl	8001bd0 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 8002fe0:	e08a      	b.n	80030f8 <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fec:	f000 fa9e 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ff0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2109      	movs	r1, #9
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fde9 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003004:	eeb0 0a67 	vmov.f32	s0, s15
 8003008:	f000 fa90 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 800300c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 800300e:	461a      	mov	r2, r3
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	210a      	movs	r1, #10
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fddb 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003020:	eeb0 0a67 	vmov.f32	s0, s15
 8003024:	f000 fa82 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003028:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 800302a:	461a      	mov	r2, r3
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	210b      	movs	r1, #11
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fdcd 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800303c:	eeb0 0a67 	vmov.f32	s0, s15
 8003040:	f000 fa74 	bl	800352c <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003044:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8003046:	461a      	mov	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	210c      	movs	r1, #12
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fdbf 	bl	8001bd0 <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
          (uint8_t)initPrm->cm.fastStep);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 800305e:	4313      	orrs	r3, r2
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	210e      	movs	r1, #14
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fdb1 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003074:	eeb0 0a67 	vmov.f32	s0, s15
 8003078:	f000 fa94 	bl	80035a4 <Powerstep01_Tmin_Time_to_RegVal>
 800307c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 800307e:	461a      	mov	r2, r3
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	210f      	movs	r1, #15
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fda3 	bl	8001bd0 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003090:	eeb0 0a67 	vmov.f32	s0, s15
 8003094:	f000 fa86 	bl	80035a4 <Powerstep01_Tmin_Time_to_RegVal>
 8003098:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 800309a:	461a      	mov	r2, r3
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	2110      	movs	r1, #16
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fd95 	bl	8001bd0 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
          (uint16_t)initPrm->cm.swMode| 
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80030bc:	4313      	orrs	r3, r2
 80030be:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
          (uint16_t)initPrm->cm.tqReg| 
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
          (uint16_t)initPrm->cm.ocSd| 
 80030d2:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 80030da:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
          (uint16_t)initPrm->cm.vccVal|
 80030e2:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
          (uint16_t)initPrm->cm.tsw|
 80030ea:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80030ec:	461a      	mov	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	211a      	movs	r1, #26
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fd6c 	bl	8001bd0 <Powerstep01_CmdSetParam>
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd90      	pop	{r4, r7, pc}

08003100 <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <Powerstep01_WriteBytes+0x40>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	6839      	ldr	r1, [r7, #0]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 ff4d 	bl	8003fb4 <Powerstep01_Board_SpiWriteBytes>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 8003120:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8003124:	f7ff fbae 	bl	8002884 <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <Powerstep01_WriteBytes+0x44>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <Powerstep01_WriteBytes+0x48>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
  }
}                     
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000514 	.word	0x20000514
 8003144:	20000521 	.word	0x20000521
 8003148:	20000520 	.word	0x20000520

0800314c <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 8003156:	edd7 7a01 	vldr	s15, [r7, #4]
 800315a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003180 <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 800315e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003162:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800316a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316e:	ee17 3a90 	vmov	r3, s15
 8003172:	b29b      	uxth	r3, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	3d8cbccc 	.word	0x3d8cbccc

08003184 <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80031ac <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 800319a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800319e:	eeb0 0a67 	vmov.f32	s0, s15
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	4168d4a5 	.word	0x4168d4a5

080031b0 <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 80031ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80031be:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80031e8 <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 80031c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80031ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d2:	edc7 7a00 	vstr	s15, [r7]
 80031d6:	783b      	ldrb	r3, [r7, #0]
 80031d8:	b2db      	uxtb	r3, r3
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	441f6000 	.word	0x441f6000

080031ec <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003214 <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 8003202:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	3acd9a67 	.word	0x3acd9a67

08003218 <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 8003222:	edd7 7a01 	vldr	s15, [r7, #4]
 8003226:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003244 <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 800322a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800322e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003232:	ee17 3a90 	vmov	r3, s15
 8003236:	b29b      	uxth	r3, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	3d8637bd 	.word	0x3d8637bd

08003248 <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003278 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 800325e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003262:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800327c <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 8003266:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800326a:	eeb0 0a67 	vmov.f32	s0, s15
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	3f7fbe77 	.word	0x3f7fbe77
 800327c:	41742400 	.word	0x41742400

08003280 <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 800328a:	edd7 7a01 	vldr	s15, [r7, #4]
 800328e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80032b4 <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 8003292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003296:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800329a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800329e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a2:	ee17 3a90 	vmov	r3, s15
 80032a6:	b29b      	uxth	r3, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	418637bd 	.word	0x418637bd

080032b8 <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80032e0 <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 80032ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80032d2:	eeb0 0a67 	vmov.f32	s0, s15
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	3d7423d9 	.word	0x3d7423d9

080032e4 <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 80032ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003324 <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 80032fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003302:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800330a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330e:	edc7 7a00 	vstr	s15, [r7]
 8003312:	783b      	ldrb	r3, [r7, #0]
 8003314:	b2db      	uxtb	r3, r3
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	42000000 	.word	0x42000000

08003328 <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003358 <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 800333e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003346:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800334a:	eeb0 0a67 	vmov.f32	s0, s15
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	3d000000 	.word	0x3d000000

0800335c <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 8003366:	edd7 7a01 	vldr	s15, [r7, #4]
 800336a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003394 <Powerstep01_Kval_Perc_to_RegVal+0x38>
 800336e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003372:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800337a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337e:	edc7 7a00 	vstr	s15, [r7]
 8003382:	783b      	ldrb	r3, [r7, #0]
 8003384:	b2db      	uxtb	r3, r3
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	4023d70a 	.word	0x4023d70a

08003398 <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eeb5 7a09 	vmov.f32	s14, #89	@ 0x3ec80000  0.3906250
 80033ae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80033b2:	eeb0 0a67 	vmov.f32	s0, s15
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 80033ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ce:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80033f4 <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 80033d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e2:	ee17 3a90 	vmov	r3, s15
 80033e6:	b29b      	uxth	r3, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	3d8637bd 	.word	0x3d8637bd

080033f8 <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003420 <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 800340e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	41742400 	.word	0x41742400

08003424 <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 800342e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003432:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003458 <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 8003436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800343a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800343e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003446:	ee17 3a90 	vmov	r3, s15
 800344a:	b29b      	uxth	r3, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	408637bd 	.word	0x408637bd

0800345c <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003484 <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 8003472:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003476:	eeb0 0a67 	vmov.f32	s0, s15
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	3e742400 	.word	0x3e742400

08003488 <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80034b0 <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 800349e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80034a2:	eeb0 0a67 	vmov.f32	s0, s15
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	3c742400 	.word	0x3c742400

080034b4 <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 80034be:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80034f4 <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 80034c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80034f8 <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 80034ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034de:	edc7 7a00 	vstr	s15, [r7]
 80034e2:	783b      	ldrb	r3, [r7, #0]
 80034e4:	b2db      	uxtb	r3, r3
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	41fa0000 	.word	0x41fa0000
 80034f8:	3d03126f 	.word	0x3d03126f

080034fc <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3301      	adds	r3, #1
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003510:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003528 <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 8003514:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003518:	eeb0 0a67 	vmov.f32	s0, s15
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	41fa0000 	.word	0x41fa0000

0800352c <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 8003536:	edd7 7a01 	vldr	s15, [r7, #4]
 800353a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800356c <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 800353e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003542:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003570 <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 8003546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800354e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003556:	edc7 7a00 	vstr	s15, [r7]
 800355a:	783b      	ldrb	r3, [r7, #0]
 800355c:	b2db      	uxtb	r3, r3
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40fa0000 	.word	0x40fa0000
 8003570:	3e03126f 	.word	0x3e03126f

08003574 <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3301      	adds	r3, #1
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003588:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80035a0 <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 800358c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003590:	eeb0 0a67 	vmov.f32	s0, s15
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40fa0000 	.word	0x40fa0000

080035a4 <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 80035ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80035b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80035b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80035c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ca:	edc7 7a00 	vstr	s15, [r7]
 80035ce:	783b      	ldrb	r3, [r7, #0]
 80035d0:	b2db      	uxtb	r3, r3
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3301      	adds	r3, #1
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80035f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80035fa:	eeb0 0a67 	vmov.f32	s0, s15
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800360c:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800360e:	2228      	movs	r2, #40	@ 0x28
 8003610:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003612:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003614:	2209      	movs	r2, #9
 8003616:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003618:	4b2e      	ldr	r3, [pc, #184]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800361a:	2235      	movs	r2, #53	@ 0x35
 800361c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800361e:	4b2d      	ldr	r3, [pc, #180]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003620:	220b      	movs	r2, #11
 8003622:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003626:	f240 121b 	movw	r2, #283	@ 0x11b
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800362c:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800362e:	f240 2215 	movw	r2, #533	@ 0x215
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003634:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003636:	f240 121d 	movw	r2, #285	@ 0x11d
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800363c:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800363e:	f240 2235 	movw	r2, #565	@ 0x235
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003644:	2100      	movs	r1, #0
 8003646:	4823      	ldr	r0, [pc, #140]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003648:	f000 f960 	bl	800390c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800364c:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800364e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003652:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003654:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003656:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800365a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800365c:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800367a:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003686:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 800368e:	4a12      	ldr	r2, [pc, #72]	@ (80036d8 <BSP_LCD_Init+0xd0>)
 8003690:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003692:	4810      	ldr	r0, [pc, #64]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 8003694:	f001 ff36 	bl	8005504 <HAL_LTDC_GetState>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800369e:	2100      	movs	r1, #0
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 80036a2:	f000 f859 	bl	8003758 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80036a6:	480b      	ldr	r0, [pc, #44]	@ (80036d4 <BSP_LCD_Init+0xcc>)
 80036a8:	f001 fe1e 	bl	80052e8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80036ac:	2201      	movs	r2, #1
 80036ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036b2:	480a      	ldr	r0, [pc, #40]	@ (80036dc <BSP_LCD_Init+0xd4>)
 80036b4:	f001 fc8c 	bl	8004fd0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	2108      	movs	r1, #8
 80036bc:	4808      	ldr	r0, [pc, #32]	@ (80036e0 <BSP_LCD_Init+0xd8>)
 80036be:	f001 fc87 	bl	8004fd0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80036c2:	f000 f93f 	bl	8003944 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036c6:	4807      	ldr	r0, [pc, #28]	@ (80036e4 <BSP_LCD_Init+0xdc>)
 80036c8:	f000 f80e 	bl	80036e8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000524 	.word	0x20000524
 80036d8:	40016800 	.word	0x40016800
 80036dc:	40022000 	.word	0x40022000
 80036e0:	40022800 	.word	0x40022800
 80036e4:	20000004 	.word	0x20000004

080036e8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80036f0:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <BSP_LCD_SetFont+0x2c>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4908      	ldr	r1, [pc, #32]	@ (8003718 <BSP_LCD_SetFont+0x30>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3308      	adds	r3, #8
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	200005cc 	.word	0x200005cc
 8003718:	200005d0 	.word	0x200005d0

0800371c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003720:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <BSP_LCD_DisplayOn+0x30>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <BSP_LCD_DisplayOn+0x30>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003730:	2201      	movs	r2, #1
 8003732:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003736:	4806      	ldr	r0, [pc, #24]	@ (8003750 <BSP_LCD_DisplayOn+0x34>)
 8003738:	f001 fc4a 	bl	8004fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800373c:	2201      	movs	r2, #1
 800373e:	2108      	movs	r1, #8
 8003740:	4804      	ldr	r0, [pc, #16]	@ (8003754 <BSP_LCD_DisplayOn+0x38>)
 8003742:	f001 fc45 	bl	8004fd0 <HAL_GPIO_WritePin>
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000524 	.word	0x20000524
 8003750:	40022000 	.word	0x40022000
 8003754:	40022800 	.word	0x40022800

08003758 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b090      	sub	sp, #64	@ 0x40
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003762:	4b64      	ldr	r3, [pc, #400]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	4a63      	ldr	r2, [pc, #396]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003768:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800376c:	6453      	str	r3, [r2, #68]	@ 0x44
 800376e:	4b61      	ldr	r3, [pc, #388]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800377a:	4b5e      	ldr	r3, [pc, #376]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4a5d      	ldr	r2, [pc, #372]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003780:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003784:	6313      	str	r3, [r2, #48]	@ 0x30
 8003786:	4b5b      	ldr	r3, [pc, #364]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003792:	4b58      	ldr	r3, [pc, #352]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	4a57      	ldr	r2, [pc, #348]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003798:	f043 0310 	orr.w	r3, r3, #16
 800379c:	6313      	str	r3, [r2, #48]	@ 0x30
 800379e:	4b55      	ldr	r3, [pc, #340]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037aa:	4b52      	ldr	r3, [pc, #328]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	4a51      	ldr	r2, [pc, #324]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b6:	4b4f      	ldr	r3, [pc, #316]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80037c2:	4b4c      	ldr	r3, [pc, #304]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	4a4b      	ldr	r2, [pc, #300]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ce:	4b49      	ldr	r3, [pc, #292]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80037da:	4b46      	ldr	r3, [pc, #280]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	4a45      	ldr	r2, [pc, #276]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037e6:	4b43      	ldr	r3, [pc, #268]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80037f2:	4b40      	ldr	r3, [pc, #256]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	4a3f      	ldr	r2, [pc, #252]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 80037f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fe:	4b3d      	ldr	r3, [pc, #244]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800380a:	4b3a      	ldr	r3, [pc, #232]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	4a39      	ldr	r2, [pc, #228]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003814:	6313      	str	r3, [r2, #48]	@ 0x30
 8003816:	4b37      	ldr	r3, [pc, #220]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003822:	4b34      	ldr	r3, [pc, #208]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	4a33      	ldr	r2, [pc, #204]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003828:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800382c:	6313      	str	r3, [r2, #48]	@ 0x30
 800382e:	4b31      	ldr	r3, [pc, #196]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800383a:	2310      	movs	r3, #16
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003846:	2302      	movs	r3, #2
 8003848:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800384a:	230e      	movs	r3, #14
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800384e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003852:	4619      	mov	r1, r3
 8003854:	4828      	ldr	r0, [pc, #160]	@ (80038f8 <BSP_LCD_MspInit+0x1a0>)
 8003856:	f001 f9f7 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800385a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003864:	2309      	movs	r3, #9
 8003866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800386c:	4619      	mov	r1, r3
 800386e:	4823      	ldr	r0, [pc, #140]	@ (80038fc <BSP_LCD_MspInit+0x1a4>)
 8003870:	f001 f9ea 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003874:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800387e:	230e      	movs	r3, #14
 8003880:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003886:	4619      	mov	r1, r3
 8003888:	481d      	ldr	r0, [pc, #116]	@ (8003900 <BSP_LCD_MspInit+0x1a8>)
 800388a:	f001 f9dd 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800388e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003898:	230e      	movs	r3, #14
 800389a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800389c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038a0:	4619      	mov	r1, r3
 80038a2:	4818      	ldr	r0, [pc, #96]	@ (8003904 <BSP_LCD_MspInit+0x1ac>)
 80038a4:	f001 f9d0 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80038a8:	23f7      	movs	r3, #247	@ 0xf7
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038ac:	2302      	movs	r3, #2
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80038b0:	230e      	movs	r3, #14
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80038b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038b8:	4619      	mov	r1, r3
 80038ba:	4813      	ldr	r0, [pc, #76]	@ (8003908 <BSP_LCD_MspInit+0x1b0>)
 80038bc:	f001 f9c4 	bl	8004c48 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80038c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80038c6:	2301      	movs	r3, #1
 80038c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80038ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	480b      	ldr	r0, [pc, #44]	@ (8003900 <BSP_LCD_MspInit+0x1a8>)
 80038d2:	f001 f9b9 	bl	8004c48 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80038d6:	2308      	movs	r3, #8
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80038da:	2301      	movs	r3, #1
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80038de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038e2:	4619      	mov	r1, r3
 80038e4:	4808      	ldr	r0, [pc, #32]	@ (8003908 <BSP_LCD_MspInit+0x1b0>)
 80038e6:	f001 f9af 	bl	8004c48 <HAL_GPIO_Init>
}
 80038ea:	bf00      	nop
 80038ec:	3740      	adds	r7, #64	@ 0x40
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40021800 	.word	0x40021800
 8003900:	40022000 	.word	0x40022000
 8003904:	40022400 	.word	0x40022400
 8003908:	40022800 	.word	0x40022800

0800390c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <BSP_LCD_ClockConfig+0x34>)
 8003918:	2208      	movs	r2, #8
 800391a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <BSP_LCD_ClockConfig+0x34>)
 800391e:	22c0      	movs	r2, #192	@ 0xc0
 8003920:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <BSP_LCD_ClockConfig+0x34>)
 8003924:	2205      	movs	r2, #5
 8003926:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <BSP_LCD_ClockConfig+0x34>)
 800392a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800392e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003930:	4803      	ldr	r0, [pc, #12]	@ (8003940 <BSP_LCD_ClockConfig+0x34>)
 8003932:	f002 fc69 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200005e8 	.word	0x200005e8

08003944 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003948:	4b29      	ldr	r3, [pc, #164]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 800394a:	4a2a      	ldr	r2, [pc, #168]	@ (80039f4 <BSP_SDRAM_Init+0xb0>)
 800394c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800394e:	4b2a      	ldr	r3, [pc, #168]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003954:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 8003956:	2207      	movs	r2, #7
 8003958:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800395a:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 800395c:	2204      	movs	r2, #4
 800395e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003960:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 8003962:	2207      	movs	r2, #7
 8003964:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003966:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 8003968:	2202      	movs	r2, #2
 800396a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800396c:	4b22      	ldr	r3, [pc, #136]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 800396e:	2202      	movs	r2, #2
 8003970:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003972:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 8003974:	2202      	movs	r2, #2
 8003976:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003978:	4b1d      	ldr	r3, [pc, #116]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 800397a:	2200      	movs	r2, #0
 800397c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800397e:	4b1c      	ldr	r3, [pc, #112]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003984:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 8003986:	2204      	movs	r2, #4
 8003988:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800398a:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 800398c:	2210      	movs	r2, #16
 800398e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003990:	4b17      	ldr	r3, [pc, #92]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 8003992:	2240      	movs	r2, #64	@ 0x40
 8003994:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003996:	4b16      	ldr	r3, [pc, #88]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 8003998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800399c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800399e:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80039a4:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 80039a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039aa:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80039ac:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 80039ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80039ba:	2100      	movs	r1, #0
 80039bc:	480c      	ldr	r0, [pc, #48]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 80039be:	f000 f87f 	bl	8003ac0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80039c2:	490d      	ldr	r1, [pc, #52]	@ (80039f8 <BSP_SDRAM_Init+0xb4>)
 80039c4:	480a      	ldr	r0, [pc, #40]	@ (80039f0 <BSP_SDRAM_Init+0xac>)
 80039c6:	f003 f80f 	bl	80069e8 <HAL_SDRAM_Init>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <BSP_SDRAM_Init+0xb8>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e002      	b.n	80039de <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <BSP_SDRAM_Init+0xb8>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80039de:	f240 6003 	movw	r0, #1539	@ 0x603
 80039e2:	f000 f80d 	bl	8003a00 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80039e6:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <BSP_SDRAM_Init+0xb8>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	2000066c 	.word	0x2000066c
 80039f4:	a0000140 	.word	0xa0000140
 80039f8:	200006a0 	.word	0x200006a0
 80039fc:	20000170 	.word	0x20000170

08003a00 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a12:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a14:	2210      	movs	r2, #16
 8003a16:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a18:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a1e:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a28:	4923      	ldr	r1, [pc, #140]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a2a:	4824      	ldr	r0, [pc, #144]	@ (8003abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a2c:	f003 f834 	bl	8006a98 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003a30:	2001      	movs	r0, #1
 8003a32:	f000 fd39 	bl	80044a8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a38:	2202      	movs	r2, #2
 8003a3a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a3e:	2210      	movs	r2, #16
 8003a40:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a42:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a52:	4919      	ldr	r1, [pc, #100]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a54:	4819      	ldr	r0, [pc, #100]	@ (8003abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a56:	f003 f81f 	bl	8006a98 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a5a:	4b17      	ldr	r3, [pc, #92]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a60:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a62:	2210      	movs	r2, #16
 8003a64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003a66:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a68:	2208      	movs	r2, #8
 8003a6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a76:	4910      	ldr	r1, [pc, #64]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a78:	4810      	ldr	r0, [pc, #64]	@ (8003abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a7a:	f003 f80d 	bl	8006a98 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003a7e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8003a82:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a86:	2204      	movs	r2, #4
 8003a88:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a90:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a07      	ldr	r2, [pc, #28]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a9a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa0:	4905      	ldr	r1, [pc, #20]	@ (8003ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aa2:	4806      	ldr	r0, [pc, #24]	@ (8003abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003aa4:	f002 fff8 	bl	8006a98 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4804      	ldr	r0, [pc, #16]	@ (8003abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003aac:	f003 f829 	bl	8006b02 <HAL_SDRAM_ProgramRefreshRate>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200006bc 	.word	0x200006bc
 8003abc:	2000066c 	.word	0x2000066c

08003ac0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b090      	sub	sp, #64	@ 0x40
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003aca:	4b70      	ldr	r3, [pc, #448]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ace:	4a6f      	ldr	r2, [pc, #444]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6393      	str	r3, [r2, #56]	@ 0x38
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	4a69      	ldr	r2, [pc, #420]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003ae8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aee:	4b67      	ldr	r3, [pc, #412]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afa:	4b64      	ldr	r3, [pc, #400]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	4a63      	ldr	r2, [pc, #396]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b06:	4b61      	ldr	r3, [pc, #388]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b12:	4b5e      	ldr	r3, [pc, #376]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	4a5d      	ldr	r2, [pc, #372]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b2a:	4b58      	ldr	r3, [pc, #352]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	4a57      	ldr	r2, [pc, #348]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b30:	f043 0310 	orr.w	r3, r3, #16
 8003b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b36:	4b55      	ldr	r3, [pc, #340]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b42:	4b52      	ldr	r3, [pc, #328]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	4a51      	ldr	r2, [pc, #324]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	4a4b      	ldr	r2, [pc, #300]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b66:	4b49      	ldr	r3, [pc, #292]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b72:	4b46      	ldr	r3, [pc, #280]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	4a45      	ldr	r2, [pc, #276]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7e:	4b43      	ldr	r3, [pc, #268]	@ (8003c8c <BSP_SDRAM_MspInit+0x1cc>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b92:	2302      	movs	r3, #2
 8003b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b96:	230c      	movs	r3, #12
 8003b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	483a      	ldr	r0, [pc, #232]	@ (8003c90 <BSP_SDRAM_MspInit+0x1d0>)
 8003ba6:	f001 f84f 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003baa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4837      	ldr	r0, [pc, #220]	@ (8003c94 <BSP_SDRAM_MspInit+0x1d4>)
 8003bb8:	f001 f846 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003bbc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4833      	ldr	r0, [pc, #204]	@ (8003c98 <BSP_SDRAM_MspInit+0x1d8>)
 8003bca:	f001 f83d 	bl	8004c48 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003bce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4830      	ldr	r0, [pc, #192]	@ (8003c9c <BSP_SDRAM_MspInit+0x1dc>)
 8003bdc:	f001 f834 	bl	8004c48 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003be0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003be6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bea:	4619      	mov	r1, r3
 8003bec:	482c      	ldr	r0, [pc, #176]	@ (8003ca0 <BSP_SDRAM_MspInit+0x1e0>)
 8003bee:	f001 f82b 	bl	8004c48 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003bf2:	2328      	movs	r3, #40	@ 0x28
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4829      	ldr	r0, [pc, #164]	@ (8003ca4 <BSP_SDRAM_MspInit+0x1e4>)
 8003bfe:	f001 f823 	bl	8004c48 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003c02:	4b29      	ldr	r3, [pc, #164]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003c08:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c0a:	2280      	movs	r2, #128	@ 0x80
 8003c0c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c14:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003c16:	4b24      	ldr	r3, [pc, #144]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c1c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c24:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c2c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003c34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c3a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c42:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c44:	2203      	movs	r2, #3
 8003c46:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c48:	4b17      	ldr	r3, [pc, #92]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003c54:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c56:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <BSP_SDRAM_MspInit+0x1ec>)
 8003c58:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c60:	4a11      	ldr	r2, [pc, #68]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003c66:	4810      	ldr	r0, [pc, #64]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c68:	f000 fe02 	bl	8004870 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003c6c:	480e      	ldr	r0, [pc, #56]	@ (8003ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8003c6e:	f000 fd51 	bl	8004714 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	210f      	movs	r1, #15
 8003c76:	2038      	movs	r0, #56	@ 0x38
 8003c78:	f000 fd15 	bl	80046a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c7c:	2038      	movs	r0, #56	@ 0x38
 8003c7e:	f000 fd2e 	bl	80046de <HAL_NVIC_EnableIRQ>
}
 8003c82:	bf00      	nop
 8003c84:	3740      	adds	r7, #64	@ 0x40
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020c00 	.word	0x40020c00
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40021400 	.word	0x40021400
 8003ca0:	40021800 	.word	0x40021800
 8003ca4:	40021c00 	.word	0x40021c00
 8003ca8:	200006cc 	.word	0x200006cc
 8003cac:	40026410 	.word	0x40026410

08003cb0 <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fbf5 	bl	80044a8 <HAL_Delay>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cca:	b672      	cpsid	i
}
 8003ccc:	bf00      	nop
  __disable_irq();
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003cdc:	b662      	cpsie	i
}
 8003cde:	bf00      	nop
  __enable_irq();
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08c      	sub	sp, #48	@ 0x30
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (deviceId==0)
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 8088 	bne.w	8003e0e <Powerstep01_Board_GpioInit+0x122>
  {
    /* GPIO Ports Clock Enable */
    __GPIOA_CLK_ENABLE();
 8003cfe:	4b46      	ldr	r3, [pc, #280]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	4a45      	ldr	r2, [pc, #276]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0a:	4b43      	ldr	r3, [pc, #268]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	69bb      	ldr	r3, [r7, #24]
    __GPIOB_CLK_ENABLE();
 8003d16:	4b40      	ldr	r3, [pc, #256]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d22:	4b3d      	ldr	r3, [pc, #244]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	697b      	ldr	r3, [r7, #20]
    __GPIOG_CLK_ENABLE();
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	4a39      	ldr	r2, [pc, #228]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d3a:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
    __GPIOI_CLK_ENABLE();
 8003d46:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	4a33      	ldr	r2, [pc, #204]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d52:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <Powerstep01_Board_GpioInit+0x12c>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
    
    /* Configure Powerstep01 - Busy pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_PIN;
 8003d5e:	2380      	movs	r3, #128	@ 0x80
 8003d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d62:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, &GPIO_InitStruct);
 8003d70:	f107 031c 	add.w	r3, r7, #28
 8003d74:	4619      	mov	r1, r3
 8003d76:	4829      	ldr	r0, [pc, #164]	@ (8003e1c <Powerstep01_Board_GpioInit+0x130>)
 8003d78:	f000 ff66 	bl	8004c48 <HAL_GPIO_Init>
    
    /* Set Priority of Exti line Interrupt used for the busy interrupt*/ 
    HAL_NVIC_SetPriority(BUSY_EXTI_LINE_IRQn, 6, 0);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2106      	movs	r1, #6
 8003d80:	2017      	movs	r0, #23
 8003d82:	f000 fc90 	bl	80046a6 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line Interrupt used for the busy interrupt*/
    HAL_NVIC_EnableIRQ(BUSY_EXTI_LINE_IRQn);
 8003d86:	2017      	movs	r0, #23
 8003d88:	f000 fca9 	bl	80046de <HAL_NVIC_EnableIRQ>
    
    /* Configure Powerstep01 - Flag pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003d8c:	2340      	movs	r3, #64	@ 0x40
 8003d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d96:	2301      	movs	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8003d9e:	f107 031c 	add.w	r3, r7, #28
 8003da2:	4619      	mov	r1, r3
 8003da4:	481d      	ldr	r0, [pc, #116]	@ (8003e1c <Powerstep01_Board_GpioInit+0x130>)
 8003da6:	f000 ff4f 	bl	8004c48 <HAL_GPIO_Init>
    
    /* Set Priority of Exti lineInterrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(FLAG_EXTI_LINE_IRQn, 5, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2105      	movs	r1, #5
 8003dae:	2017      	movs	r0, #23
 8003db0:	f000 fc79 	bl	80046a6 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line  Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(FLAG_EXTI_LINE_IRQn);    
 8003db4:	2017      	movs	r0, #23
 8003db6:	f000 fc92 	bl	80046de <HAL_NVIC_EnableIRQ>
  
    /* Configure Powerstep01 - CS pin ----------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003dba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4813      	ldr	r0, [pc, #76]	@ (8003e20 <Powerstep01_Board_GpioInit+0x134>)
 8003dd4:	f000 ff38 	bl	8004c48 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dde:	4810      	ldr	r0, [pc, #64]	@ (8003e20 <Powerstep01_Board_GpioInit+0x134>)
 8003de0:	f001 f8f6 	bl	8004fd0 <HAL_GPIO_WritePin>
    
    /* Configure Powerstep01 - STBY/RESET pin --------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN;
 8003de4:	2304      	movs	r3, #4
 8003de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003de8:	2301      	movs	r3, #1
 8003dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003df0:	2301      	movs	r3, #1
 8003df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, &GPIO_InitStruct);
 8003df4:	f107 031c 	add.w	r3, r7, #28
 8003df8:	4619      	mov	r1, r3
 8003dfa:	480a      	ldr	r0, [pc, #40]	@ (8003e24 <Powerstep01_Board_GpioInit+0x138>)
 8003dfc:	f000 ff24 	bl	8004c48 <HAL_GPIO_Init>
    
    /* Reset Powerstep0*/
    Powerstep01_Board_Reset(deviceId);
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f88e 	bl	8003f24 <Powerstep01_Board_Reset>
    
    /* Let a delay after reset */
    Powerstep01_Board_Delay(1); 
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7ff ff51 	bl	8003cb0 <Powerstep01_Board_Delay>
  }
}
 8003e0e:	bf00      	nop
 8003e10:	3730      	adds	r7, #48	@ 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40021800 	.word	0x40021800
 8003e20:	40020000 	.word	0x40020000
 8003e24:	40022000 	.word	0x40022000

08003e28 <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08e      	sub	sp, #56	@ 0x38
 8003e2c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_ClockConfigTypeDef sClockSourceConfig;
  
  hTimStepClock.Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK;
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e34:	601a      	str	r2, [r3, #0]
  hTimStepClock.Init.Prescaler = TIMER_PRESCALER -1;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e38:	223f      	movs	r2, #63	@ 0x3f
 8003e3a:	605a      	str	r2, [r3, #4]
  hTimStepClock.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
  hTimStepClock.Init.Period = 0;
 8003e42:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	60da      	str	r2, [r3, #12]
  hTimStepClock.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e48:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&hTimStepClock);
 8003e4e:	4814      	ldr	r0, [pc, #80]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e50:	f003 fbc0 	bl	80075d4 <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e58:	603b      	str	r3, [r7, #0]
  HAL_TIM_ConfigClockSource(&hTimStepClock, &sClockSourceConfig);
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4810      	ldr	r0, [pc, #64]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e60:	f004 f87a 	bl	8007f58 <HAL_TIM_ConfigClockSource>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e64:	2360      	movs	r3, #96	@ 0x60
 8003e66:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_TIM_PWM_ConfigChannel(&hTimStepClock, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 8003e74:	f107 031c 	add.w	r3, r7, #28
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4808      	ldr	r0, [pc, #32]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e7e:	f003 ff57 	bl	8007d30 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);
 8003e8a:	f107 0310 	add.w	r3, r7, #16
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4803      	ldr	r0, [pc, #12]	@ (8003ea0 <Powerstep01_Board_StepClockInit+0x78>)
 8003e92:	f004 fdb7 	bl	8008a04 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003e96:	bf00      	nop
 8003e98:	3738      	adds	r7, #56	@ 0x38
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200007b8 	.word	0x200007b8

08003ea4 <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003eae:	f002 f8b1 	bl	8006014 <HAL_RCC_GetSysClockFreq>
 8003eb2:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	019b      	lsls	r3, r3, #6
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimStepClock, period);
 8003ec4:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <Powerstep01_Board_StartStepClock+0x48>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ecc:	4a07      	ldr	r2, [pc, #28]	@ (8003eec <Powerstep01_Board_StartStepClock+0x48>)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <Powerstep01_Board_StartStepClock+0x48>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0852      	lsrs	r2, r2, #1
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start_IT(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);  
 8003edc:	2100      	movs	r1, #0
 8003ede:	4803      	ldr	r0, [pc, #12]	@ (8003eec <Powerstep01_Board_StartStepClock+0x48>)
 8003ee0:	f003 fbe6 	bl	80076b0 <HAL_TIM_PWM_Start_IT>
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	200007b8 	.word	0x200007b8

08003ef0 <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&hTimStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4802      	ldr	r0, [pc, #8]	@ (8003f00 <Powerstep01_Board_StopStepClock+0x10>)
 8003ef8:	f003 fd22 	bl	8007940 <HAL_TIM_PWM_Stop_IT>
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200007b8 	.word	0x200007b8

08003f04 <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_SET);
 8003f0e:	2201      	movs	r2, #1
 8003f10:	2104      	movs	r1, #4
 8003f12:	4803      	ldr	r0, [pc, #12]	@ (8003f20 <Powerstep01_Board_ReleaseReset+0x1c>)
 8003f14:	f001 f85c 	bl	8004fd0 <HAL_GPIO_WritePin>
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40022000 	.word	0x40022000

08003f24 <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_RESET);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2104      	movs	r1, #4
 8003f32:	4803      	ldr	r0, [pc, #12]	@ (8003f40 <Powerstep01_Board_Reset+0x1c>)
 8003f34:	f001 f84c 	bl	8004fd0 <HAL_GPIO_WritePin>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40022000 	.word	0x40022000

08003f44 <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8003f4a:	4b18      	ldr	r3, [pc, #96]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f4c:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <Powerstep01_Board_SpiInit+0x6c>)
 8003f4e:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003f50:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f52:	2220      	movs	r2, #32
 8003f54:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003f56:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003f5c:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003f62:	4b12      	ldr	r3, [pc, #72]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f64:	2202      	movs	r2, #2
 8003f66:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003f68:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003f74:	4b0d      	ldr	r3, [pc, #52]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003f7a:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003f82:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f88:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003f8a:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003f90:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f92:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f96:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8003f98:	4804      	ldr	r0, [pc, #16]	@ (8003fac <Powerstep01_Board_SpiInit+0x68>)
 8003f9a:	f002 fddb 	bl	8006b54 <HAL_SPI_Init>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	2000072c 	.word	0x2000072c
 8003fb0:	40003800 	.word	0x40003800

08003fb4 <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fc8:	4816      	ldr	r0, [pc, #88]	@ (8004024 <Powerstep01_Board_SpiWriteBytes+0x70>)
 8003fca:	f001 f801 	bl	8004fd0 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e016      	b.n	8004002 <Powerstep01_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8003fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2301      	movs	r3, #1
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	4811      	ldr	r0, [pc, #68]	@ (8004028 <Powerstep01_Board_SpiWriteBytes+0x74>)
 8003fe2:	f002 fe99 	bl	8006d18 <HAL_SPI_TransmitReceive>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <Powerstep01_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3301      	adds	r3, #1
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	d3e4      	bcc.n	8003fd4 <Powerstep01_Board_SpiWriteBytes+0x20>
 800400a:	e000      	b.n	800400e <Powerstep01_Board_SpiWriteBytes+0x5a>
      break;
 800400c:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 800400e:	2201      	movs	r2, #1
 8004010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004014:	4803      	ldr	r0, [pc, #12]	@ (8004024 <Powerstep01_Board_SpiWriteBytes+0x70>)
 8004016:	f000 ffdb 	bl	8004fd0 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 800401a:	7dfb      	ldrb	r3, [r7, #23]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40020000 	.word	0x40020000
 8004028:	2000072c 	.word	0x2000072c

0800402c <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	4803      	ldr	r0, [pc, #12]	@ (8004040 <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 8004034:	f000 ffb4 	bl	8004fa0 <HAL_GPIO_ReadPin>
 8004038:	4603      	mov	r3, r0
}
 800403a:	4618      	mov	r0, r3
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40021800 	.word	0x40021800

08004044 <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 8004048:	2140      	movs	r1, #64	@ 0x40
 800404a:	4803      	ldr	r0, [pc, #12]	@ (8004058 <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 800404c:	f000 ffa8 	bl	8004fa0 <HAL_GPIO_ReadPin>
 8004050:	4603      	mov	r3, r0
}
 8004052:	4618      	mov	r0, r3
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40021800 	.word	0x40021800

0800405c <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
 8004060:	2300      	movs	r3, #0
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
 8004070:	2300      	movs	r3, #0
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
 8004080:	2300      	movs	r3, #0
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
 8004090:	2300      	movs	r3, #0
 8004092:	4618      	mov	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
 80040a0:	2300      	movs	r3, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	2300      	movs	r3, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
 80040c0:	2300      	movs	r3, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <BSP_MotorControl_AttachErrorHandler+0x26>
 80040dc:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
 80040f0:	e004      	b.n	80040fc <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80040f2:	f640 0002 	movw	r0, #2050	@ 0x802
 80040f6:	f000 f843 	bl	8004180 <BSP_MotorControl_ErrorHandler>
  }
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000874 	.word	0x20000874

08004108 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8004118:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8004122:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
 800412c:	e004      	b.n	8004138 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 800412e:	f640 0003 	movw	r0, #2051	@ 0x803
 8004132:	f000 f825 	bl	8004180 <BSP_MotorControl_ErrorHandler>
  }  
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000874 	.word	0x20000874

08004144 <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <BSP_MotorControl_AttachBusyInterrupt+0x26>
 8004154:	4b09      	ldr	r3, [pc, #36]	@ (800417c <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 800415e:	4b07      	ldr	r3, [pc, #28]	@ (800417c <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
 8004168:	e004      	b.n	8004174 <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 800416a:	f640 0004 	movw	r0, #2052	@ 0x804
 800416e:	f000 f807 	bl	8004180 <BSP_MotorControl_ErrorHandler>
  }  
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000874 	.word	0x20000874

08004180 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 800418a:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <BSP_MotorControl_ErrorHandler+0x38>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <BSP_MotorControl_ErrorHandler+0x2e>
 8004192:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <BSP_MotorControl_ErrorHandler+0x38>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <BSP_MotorControl_ErrorHandler+0x38>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	4610      	mov	r0, r2
 80041aa:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 80041ac:	e000      	b.n	80041b0 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 80041ae:	e7fe      	b.n	80041ae <BSP_MotorControl_ErrorHandler+0x2e>
}
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000874 	.word	0x20000874

080041bc <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 80041c8:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <BSP_MotorControl_Init+0x3c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <BSP_MotorControl_Init+0x2a>
 80041d0:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <BSP_MotorControl_Init+0x3c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 80041da:	4b07      	ldr	r3, [pc, #28]	@ (80041f8 <BSP_MotorControl_Init+0x3c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6838      	ldr	r0, [r7, #0]
 80041e2:	4798      	blx	r3
 80041e4:	e004      	b.n	80041f0 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 80041e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80041ea:	f7ff ffc9 	bl	8004180 <BSP_MotorControl_ErrorHandler>
  }  
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000874 	.word	0x20000874

080041fc <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800420a:	4b0e      	ldr	r3, [pc, #56]	@ (8004244 <BSP_MotorControl_CmdGetStatus+0x48>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00f      	beq.n	8004232 <BSP_MotorControl_CmdGetStatus+0x36>
 8004212:	4b0c      	ldr	r3, [pc, #48]	@ (8004244 <BSP_MotorControl_CmdGetStatus+0x48>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <BSP_MotorControl_CmdGetStatus+0x48>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	79fa      	ldrb	r2, [r7, #7]
 8004228:	4610      	mov	r0, r2
 800422a:	4798      	blx	r3
 800422c:	4603      	mov	r3, r0
 800422e:	81fb      	strh	r3, [r7, #14]
 8004230:	e003      	b.n	800423a <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8004232:	f640 0022 	movw	r0, #2082	@ 0x822
 8004236:	f7ff ffa3 	bl	8004180 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 800423a:	89fb      	ldrh	r3, [r7, #14]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000874 	.word	0x20000874

08004248 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <BSP_MotorControl_CheckBusyHw+0x40>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <BSP_MotorControl_CheckBusyHw+0x2e>
 800425a:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <BSP_MotorControl_CheckBusyHw+0x40>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 8004266:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <BSP_MotorControl_CheckBusyHw+0x40>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800426e:	4798      	blx	r3
 8004270:	4603      	mov	r3, r0
 8004272:	71fb      	strb	r3, [r7, #7]
 8004274:	e003      	b.n	800427e <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 8004276:	f640 002b 	movw	r0, #2091	@ 0x82b
 800427a:	f7ff ff81 	bl	8004180 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 800427e:	79fb      	ldrb	r3, [r7, #7]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000874 	.word	0x20000874

0800428c <BSP_MotorControl_CmdSoftHiZ>:
 * @brief Issues Soft HiZ command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdSoftHiZ(uint8_t deviceId)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdSoftHiZ != 0))
 8004296:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <BSP_MotorControl_CmdSoftHiZ+0x40>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <BSP_MotorControl_CmdSoftHiZ+0x2e>
 800429e:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <BSP_MotorControl_CmdSoftHiZ+0x40>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <BSP_MotorControl_CmdSoftHiZ+0x2e>
  {
    motorDrvHandle->CmdSoftHiZ(deviceId);
 80042aa:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <BSP_MotorControl_CmdSoftHiZ+0x40>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80042b2:	79fa      	ldrb	r2, [r7, #7]
 80042b4:	4610      	mov	r0, r2
 80042b6:	4798      	blx	r3
 80042b8:	e004      	b.n	80042c4 <BSP_MotorControl_CmdSoftHiZ+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(51);
 80042ba:	f640 0033 	movw	r0, #2099	@ 0x833
 80042be:	f7ff ff5f 	bl	8004180 <BSP_MotorControl_ErrorHandler>
  }
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000874 	.word	0x20000874

080042d0 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	460a      	mov	r2, r1
 80042da:	80fb      	strh	r3, [r7, #6]
 80042dc:	4613      	mov	r3, r2
 80042de:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80042e0:	4a40      	ldr	r2, [pc, #256]	@ (80043e4 <BSP_MotorControl_SetNbDevices+0x114>)
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	f641 124a 	movw	r2, #6474	@ 0x194a
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d105      	bne.n	8004300 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80042f4:	f7ff feb2 	bl	800405c <L6474_GetMotorHandle>
 80042f8:	4603      	mov	r3, r0
 80042fa:	4a3b      	ldr	r2, [pc, #236]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e055      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d105      	bne.n	8004312 <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8004306:	f7fd fde7 	bl	8001ed8 <Powerstep01_GetMotorHandle>
 800430a:	4603      	mov	r3, r0
 800430c:	4a36      	ldr	r2, [pc, #216]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e04c      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	f641 023e 	movw	r2, #6206	@ 0x183e
 8004318:	4293      	cmp	r3, r2
 800431a:	d105      	bne.n	8004328 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 800431c:	f7ff feb6 	bl	800408c <L6206_GetMotorHandle>
 8004320:	4603      	mov	r3, r0
 8004322:	4a31      	ldr	r2, [pc, #196]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e041      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	f5b3 5fc2 	cmp.w	r3, #6208	@ 0x1840
 800432e:	d105      	bne.n	800433c <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8004330:	f7ff feb4 	bl	800409c <L6208_GetMotorHandle>
 8004334:	4603      	mov	r3, r0
 8004336:	4a2c      	ldr	r2, [pc, #176]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e037      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	2bdc      	cmp	r3, #220	@ 0xdc
 8004340:	d105      	bne.n	800434e <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8004342:	f7ff feb3 	bl	80040ac <Stspin220_GetMotorHandle>
 8004346:	4603      	mov	r3, r0
 8004348:	4a27      	ldr	r2, [pc, #156]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	e02e      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	f641 1246 	movw	r2, #6470	@ 0x1946
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <BSP_MotorControl_SetNbDevices+0x92>
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	f641 1248 	movw	r2, #6472	@ 0x1948
 800435e:	4293      	cmp	r3, r2
 8004360:	d105      	bne.n	800436e <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8004362:	f7ff fe83 	bl	800406c <l647x_GetMotorHandle>
 8004366:	4603      	mov	r3, r0
 8004368:	4a1f      	ldr	r2, [pc, #124]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e01e      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	f641 1250 	movw	r2, #6480	@ 0x1950
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <BSP_MotorControl_SetNbDevices+0xb2>
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	f641 1252 	movw	r2, #6482	@ 0x1952
 800437e:	4293      	cmp	r3, r2
 8004380:	d105      	bne.n	800438e <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8004382:	f7ff fe7b 	bl	800407c <l648x_GetMotorHandle>
 8004386:	4603      	mov	r3, r0
 8004388:	4a17      	ldr	r2, [pc, #92]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e00e      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2bf0      	cmp	r3, #240	@ 0xf0
 8004392:	d002      	beq.n	800439a <BSP_MotorControl_SetNbDevices+0xca>
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	2bfa      	cmp	r3, #250	@ 0xfa
 8004398:	d105      	bne.n	80043a6 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 800439a:	f7ff fe8f 	bl	80040bc <Stspin240_250_GetMotorHandle>
 800439e:	4603      	mov	r3, r0
 80043a0:	4a11      	ldr	r2, [pc, #68]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e002      	b.n	80043ac <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 80043a6:	4b10      	ldr	r3, [pc, #64]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 80043ac:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
  if ((motorDrvHandle != 0)&&
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 80043c0:	797b      	ldrb	r3, [r7, #5]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 80043c6:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <BSP_MotorControl_SetNbDevices+0x118>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80043ce:	797a      	ldrb	r2, [r7, #5]
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
 80043d4:	4603      	mov	r3, r0
 80043d6:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000878 	.word	0x20000878
 80043e8:	20000874 	.word	0x20000874

080043ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f0:	2003      	movs	r0, #3
 80043f2:	f000 f94d 	bl	8004690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043f6:	200f      	movs	r0, #15
 80043f8:	f000 f806 	bl	8004408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043fc:	f7fc fedc 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004410:	4b12      	ldr	r3, [pc, #72]	@ (800445c <HAL_InitTick+0x54>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <HAL_InitTick+0x58>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800441e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004422:	fbb2 f3f3 	udiv	r3, r2, r3
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f967 	bl	80046fa <HAL_SYSTICK_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e00e      	b.n	8004454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b0f      	cmp	r3, #15
 800443a:	d80a      	bhi.n	8004452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800443c:	2200      	movs	r2, #0
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	f000 f92f 	bl	80046a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004448:	4a06      	ldr	r2, [pc, #24]	@ (8004464 <HAL_InitTick+0x5c>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000000 	.word	0x20000000
 8004460:	20000178 	.word	0x20000178
 8004464:	20000174 	.word	0x20000174

08004468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800446c:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_IncTick+0x20>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b06      	ldr	r3, [pc, #24]	@ (800448c <HAL_IncTick+0x24>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4413      	add	r3, r2
 8004478:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_IncTick+0x24>)
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000178 	.word	0x20000178
 800448c:	2000087c 	.word	0x2000087c

08004490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return uwTick;
 8004494:	4b03      	ldr	r3, [pc, #12]	@ (80044a4 <HAL_GetTick+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	2000087c 	.word	0x2000087c

080044a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b0:	f7ff ffee 	bl	8004490 <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d005      	beq.n	80044ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044c2:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <HAL_Delay+0x44>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044ce:	bf00      	nop
 80044d0:	f7ff ffde 	bl	8004490 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d8f7      	bhi.n	80044d0 <HAL_Delay+0x28>
  {
  }
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000178 	.word	0x20000178

080044f0 <__NVIC_SetPriorityGrouping>:
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <__NVIC_SetPriorityGrouping+0x40>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 800451a:	4313      	orrs	r3, r2
 800451c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800451e:	4a04      	ldr	r2, [pc, #16]	@ (8004530 <__NVIC_SetPriorityGrouping+0x40>)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	60d3      	str	r3, [r2, #12]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000ed00 	.word	0xe000ed00
 8004534:	05fa0000 	.word	0x05fa0000

08004538 <__NVIC_GetPriorityGrouping>:
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <__NVIC_GetPriorityGrouping+0x18>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0307 	and.w	r3, r3, #7
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_EnableIRQ>:
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db0b      	blt.n	800457e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	4907      	ldr	r1, [pc, #28]	@ (800458c <__NVIC_EnableIRQ+0x38>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_SetPriority>:
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	@ (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	@ (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <NVIC_EncodePriority>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	@ 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf28      	it	cs
 8004602:	2304      	movcs	r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3304      	adds	r3, #4
 800460a:	2b06      	cmp	r3, #6
 800460c:	d902      	bls.n	8004614 <NVIC_EncodePriority+0x30>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3b03      	subs	r3, #3
 8004612:	e000      	b.n	8004616 <NVIC_EncodePriority+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	401a      	ands	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	f04f 31ff 	mov.w	r1, #4294967295
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43d9      	mvns	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	4313      	orrs	r3, r2
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	@ 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800465c:	d301      	bcc.n	8004662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004662:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <SysTick_Config+0x40>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466a:	210f      	movs	r1, #15
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	f7ff ff8e 	bl	8004590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <SysTick_Config+0x40>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467a:	4b04      	ldr	r3, [pc, #16]	@ (800468c <SysTick_Config+0x40>)
 800467c:	2207      	movs	r2, #7
 800467e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	e000e010 	.word	0xe000e010

08004690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff29 	bl	80044f0 <__NVIC_SetPriorityGrouping>
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046b8:	f7ff ff3e 	bl	8004538 <__NVIC_GetPriorityGrouping>
 80046bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7ff ff8e 	bl	80045e4 <NVIC_EncodePriority>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff5d 	bl	8004590 <__NVIC_SetPriority>
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff31 	bl	8004554 <__NVIC_EnableIRQ>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffa2 	bl	800464c <SysTick_Config>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7ff feb6 	bl	8004490 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e099      	b.n	8004864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004750:	e00f      	b.n	8004772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004752:	f7ff fe9d 	bl	8004490 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b05      	cmp	r3, #5
 800475e:	d908      	bls.n	8004772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e078      	b.n	8004864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e8      	bne.n	8004752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4b38      	ldr	r3, [pc, #224]	@ (800486c <HAL_DMA_Init+0x158>)
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d107      	bne.n	80047dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	4313      	orrs	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0307 	bic.w	r3, r3, #7
 80047f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	2b04      	cmp	r3, #4
 8004804:	d117      	bne.n	8004836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8bd 	bl	8004998 <DMA_CheckFifoParam>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2240      	movs	r2, #64	@ 0x40
 8004828:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004832:	2301      	movs	r3, #1
 8004834:	e016      	b.n	8004864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f874 	bl	800492c <DMA_CalcBaseAndBitshift>
 8004844:	4603      	mov	r3, r0
 8004846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484c:	223f      	movs	r2, #63	@ 0x3f
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	f010803f 	.word	0xf010803f

08004870 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e050      	b.n	8004924 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d101      	bne.n	8004892 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
 8004890:	e048      	b.n	8004924 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2221      	movs	r2, #33	@ 0x21
 80048d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f82a 	bl	800492c <DMA_CalcBaseAndBitshift>
 80048d8:	4603      	mov	r3, r0
 80048da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e0:	223f      	movs	r2, #63	@ 0x3f
 80048e2:	409a      	lsls	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	3b10      	subs	r3, #16
 800493c:	4a13      	ldr	r2, [pc, #76]	@ (800498c <DMA_CalcBaseAndBitshift+0x60>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004946:	4a12      	ldr	r2, [pc, #72]	@ (8004990 <DMA_CalcBaseAndBitshift+0x64>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d908      	bls.n	800496c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <DMA_CalcBaseAndBitshift+0x68>)
 8004962:	4013      	ands	r3, r2
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	659a      	str	r2, [r3, #88]	@ 0x58
 800496a:	e006      	b.n	800497a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	4b08      	ldr	r3, [pc, #32]	@ (8004994 <DMA_CalcBaseAndBitshift+0x68>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	aaaaaaab 	.word	0xaaaaaaab
 8004990:	0800b304 	.word	0x0800b304
 8004994:	fffffc00 	.word	0xfffffc00

08004998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11f      	bne.n	80049f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d856      	bhi.n	8004a66 <DMA_CheckFifoParam+0xce>
 80049b8:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <DMA_CheckFifoParam+0x28>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049e3 	.word	0x080049e3
 80049c8:	080049d1 	.word	0x080049d1
 80049cc:	08004a67 	.word	0x08004a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d046      	beq.n	8004a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e0:	e043      	b.n	8004a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049ea:	d140      	bne.n	8004a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f0:	e03d      	b.n	8004a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fa:	d121      	bne.n	8004a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d837      	bhi.n	8004a72 <DMA_CheckFifoParam+0xda>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <DMA_CheckFifoParam+0x70>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a19 	.word	0x08004a19
 8004a0c:	08004a1f 	.word	0x08004a1f
 8004a10:	08004a19 	.word	0x08004a19
 8004a14:	08004a31 	.word	0x08004a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1c:	e030      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d025      	beq.n	8004a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2e:	e022      	b.n	8004a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a38:	d11f      	bne.n	8004a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a3e:	e01c      	b.n	8004a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d903      	bls.n	8004a4e <DMA_CheckFifoParam+0xb6>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d003      	beq.n	8004a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a4c:	e018      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
      break;
 8004a52:	e015      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00e      	beq.n	8004a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e00b      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      break;
 8004a66:	bf00      	nop
 8004a68:	e00a      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e008      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e006      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      break;
 8004a72:	bf00      	nop
 8004a74:	e004      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      break;
 8004a76:	bf00      	nop
 8004a78:	e002      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <DMA_CheckFifoParam+0xe8>
      break;
 8004a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e039      	b.n	8004b16 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fb fd50 	bl	800055c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	f023 0107 	bic.w	r1, r3, #7
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_DMA2D_Init+0x90>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68d1      	ldr	r1, [r2, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	ffffc000 	.word	0xffffc000

08004b24 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_DMA2D_ConfigLayer+0x20>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e079      	b.n	8004c38 <HAL_DMA2D_ConfigLayer+0x114>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	3318      	adds	r3, #24
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004b6e:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <HAL_DMA2D_ConfigLayer+0x120>)
 8004b70:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b0a      	cmp	r3, #10
 8004b78:	d003      	beq.n	8004b82 <HAL_DMA2D_ConfigLayer+0x5e>
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b09      	cmp	r3, #9
 8004b80:	d107      	bne.n	8004b92 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e005      	b.n	8004b9e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d120      	bne.n	8004be6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	43db      	mvns	r3, r3
 8004bae:	ea02 0103 	and.w	r1, r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b0a      	cmp	r3, #10
 8004bcc:	d003      	beq.n	8004bd6 <HAL_DMA2D_ConfigLayer+0xb2>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b09      	cmp	r3, #9
 8004bd4:	d127      	bne.n	8004c26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004be2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004be4:	e01f      	b.n	8004c26 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	ea02 0103 	and.w	r1, r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b0a      	cmp	r3, #10
 8004c0e:	d003      	beq.n	8004c18 <HAL_DMA2D_ConfigLayer+0xf4>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b09      	cmp	r3, #9
 8004c16:	d106      	bne.n	8004c26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004c24:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	ff03000f 	.word	0xff03000f

08004c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	@ 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	e175      	b.n	8004f54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	f040 8164 	bne.w	8004f4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d005      	beq.n	8004c9e <HAL_GPIO_Init+0x56>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d130      	bne.n	8004d00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	2203      	movs	r2, #3
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 0201 	and.w	r2, r3, #1
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d017      	beq.n	8004d3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	2203      	movs	r2, #3
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d123      	bne.n	8004d90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	08da      	lsrs	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3208      	adds	r2, #8
 8004d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	220f      	movs	r2, #15
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	08da      	lsrs	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3208      	adds	r2, #8
 8004d8a:	69b9      	ldr	r1, [r7, #24]
 8004d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0203 	and.w	r2, r3, #3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80be 	beq.w	8004f4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd2:	4b66      	ldr	r3, [pc, #408]	@ (8004f6c <HAL_GPIO_Init+0x324>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd6:	4a65      	ldr	r2, [pc, #404]	@ (8004f6c <HAL_GPIO_Init+0x324>)
 8004dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dde:	4b63      	ldr	r3, [pc, #396]	@ (8004f6c <HAL_GPIO_Init+0x324>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004dea:	4a61      	ldr	r2, [pc, #388]	@ (8004f70 <HAL_GPIO_Init+0x328>)
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	089b      	lsrs	r3, r3, #2
 8004df0:	3302      	adds	r3, #2
 8004df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	220f      	movs	r2, #15
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a58      	ldr	r2, [pc, #352]	@ (8004f74 <HAL_GPIO_Init+0x32c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d037      	beq.n	8004e86 <HAL_GPIO_Init+0x23e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a57      	ldr	r2, [pc, #348]	@ (8004f78 <HAL_GPIO_Init+0x330>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d031      	beq.n	8004e82 <HAL_GPIO_Init+0x23a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a56      	ldr	r2, [pc, #344]	@ (8004f7c <HAL_GPIO_Init+0x334>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d02b      	beq.n	8004e7e <HAL_GPIO_Init+0x236>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a55      	ldr	r2, [pc, #340]	@ (8004f80 <HAL_GPIO_Init+0x338>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d025      	beq.n	8004e7a <HAL_GPIO_Init+0x232>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a54      	ldr	r2, [pc, #336]	@ (8004f84 <HAL_GPIO_Init+0x33c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01f      	beq.n	8004e76 <HAL_GPIO_Init+0x22e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a53      	ldr	r2, [pc, #332]	@ (8004f88 <HAL_GPIO_Init+0x340>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d019      	beq.n	8004e72 <HAL_GPIO_Init+0x22a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a52      	ldr	r2, [pc, #328]	@ (8004f8c <HAL_GPIO_Init+0x344>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_GPIO_Init+0x226>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a51      	ldr	r2, [pc, #324]	@ (8004f90 <HAL_GPIO_Init+0x348>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00d      	beq.n	8004e6a <HAL_GPIO_Init+0x222>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a50      	ldr	r2, [pc, #320]	@ (8004f94 <HAL_GPIO_Init+0x34c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <HAL_GPIO_Init+0x21e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a4f      	ldr	r2, [pc, #316]	@ (8004f98 <HAL_GPIO_Init+0x350>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_GPIO_Init+0x21a>
 8004e5e:	2309      	movs	r3, #9
 8004e60:	e012      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e62:	230a      	movs	r3, #10
 8004e64:	e010      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e66:	2308      	movs	r3, #8
 8004e68:	e00e      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e6a:	2307      	movs	r3, #7
 8004e6c:	e00c      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e6e:	2306      	movs	r3, #6
 8004e70:	e00a      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e72:	2305      	movs	r3, #5
 8004e74:	e008      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e76:	2304      	movs	r3, #4
 8004e78:	e006      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e004      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e002      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_GPIO_Init+0x240>
 8004e86:	2300      	movs	r3, #0
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	f002 0203 	and.w	r2, r2, #3
 8004e8e:	0092      	lsls	r2, r2, #2
 8004e90:	4093      	lsls	r3, r2
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e98:	4935      	ldr	r1, [pc, #212]	@ (8004f70 <HAL_GPIO_Init+0x328>)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eca:	4a34      	ldr	r2, [pc, #208]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ed0:	4b32      	ldr	r3, [pc, #200]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ef4:	4a29      	ldr	r2, [pc, #164]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004efa:	4b28      	ldr	r3, [pc, #160]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4013      	ands	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f24:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f48:	4a14      	ldr	r2, [pc, #80]	@ (8004f9c <HAL_GPIO_Init+0x354>)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	f67f ae86 	bls.w	8004c68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3724      	adds	r7, #36	@ 0x24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40013800 	.word	0x40013800
 8004f74:	40020000 	.word	0x40020000
 8004f78:	40020400 	.word	0x40020400
 8004f7c:	40020800 	.word	0x40020800
 8004f80:	40020c00 	.word	0x40020c00
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40021400 	.word	0x40021400
 8004f8c:	40021800 	.word	0x40021800
 8004f90:	40021c00 	.word	0x40021c00
 8004f94:	40022000 	.word	0x40022000
 8004f98:	40022400 	.word	0x40022400
 8004f9c:	40013c00 	.word	0x40013c00

08004fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e001      	b.n	8004fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fe0:	787b      	ldrb	r3, [r7, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004fec:	e003      	b.n	8004ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	041a      	lsls	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	619a      	str	r2, [r3, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005014:	887a      	ldrh	r2, [r7, #2]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4013      	ands	r3, r2
 800501a:	041a      	lsls	r2, r3, #16
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	43d9      	mvns	r1, r3
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	400b      	ands	r3, r1
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	619a      	str	r2, [r3, #24]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005042:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800504e:	4a05      	ldr	r2, [pc, #20]	@ (8005064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 f806 	bl	8005068 <HAL_GPIO_EXTI_Callback>
  }
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40013c00 	.word	0x40013c00

08005068 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e08b      	b.n	80051aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fb fcb4 	bl	8000a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2224      	movs	r2, #36	@ 0x24
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	e006      	b.n	8005108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d108      	bne.n	8005122 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	e007      	b.n	8005132 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <HAL_I2C_Init+0x134>)
 800513e:	430b      	orrs	r3, r1
 8005140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69d9      	ldr	r1, [r3, #28]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	02008000 	.word	0x02008000

080051b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d138      	bne.n	8005240 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051d8:	2302      	movs	r3, #2
 80051da:	e032      	b.n	8005242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	@ 0x24
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800520a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b20      	cmp	r3, #32
 8005262:	d139      	bne.n	80052d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800526e:	2302      	movs	r3, #2
 8005270:	e033      	b.n	80052da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2224      	movs	r2, #36	@ 0x24
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e0bf      	b.n	800547a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fb fc62 	bl	8000bd8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800532a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6999      	ldr	r1, [r3, #24]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005340:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b4a      	ldr	r3, [pc, #296]	@ (8005484 <HAL_LTDC_Init+0x19c>)
 800535c:	400b      	ands	r3, r1
 800535e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6899      	ldr	r1, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68d9      	ldr	r1, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b3e      	ldr	r3, [pc, #248]	@ (8005484 <HAL_LTDC_Init+0x19c>)
 800538a:	400b      	ands	r3, r1
 800538c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68d9      	ldr	r1, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6919      	ldr	r1, [r3, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b33      	ldr	r3, [pc, #204]	@ (8005484 <HAL_LTDC_Init+0x19c>)
 80053b8:	400b      	ands	r3, r1
 80053ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6919      	ldr	r1, [r3, #16]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6959      	ldr	r1, [r3, #20]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b27      	ldr	r3, [pc, #156]	@ (8005484 <HAL_LTDC_Init+0x19c>)
 80053e6:	400b      	ands	r3, r1
 80053e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6959      	ldr	r1, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800542a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0206 	orr.w	r2, r2, #6
 8005456:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	f000f800 	.word	0xf000f800

08005488 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005488:	b5b0      	push	{r4, r5, r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_LTDC_ConfigLayer+0x1a>
 800549e:	2302      	movs	r3, #2
 80054a0:	e02c      	b.n	80054fc <HAL_LTDC_ConfigLayer+0x74>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2134      	movs	r1, #52	@ 0x34
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	4413      	add	r3, r2
 80054be:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4614      	mov	r4, r2
 80054c6:	461d      	mov	r5, r3
 80054c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f81f 	bl	8005520 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2201      	movs	r2, #1
 80054e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bdb0      	pop	{r4, r5, r7, pc}

08005504 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005512:	b2db      	uxtb	r3, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	@ 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553c:	4413      	add	r3, r2
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	01db      	lsls	r3, r3, #7
 800554c:	4413      	add	r3, r2
 800554e:	3384      	adds	r3, #132	@ 0x84
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	4611      	mov	r1, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	01d2      	lsls	r2, r2, #7
 800555c:	440a      	add	r2, r1
 800555e:	3284      	adds	r2, #132	@ 0x84
 8005560:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005564:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005576:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005578:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4619      	mov	r1, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	01db      	lsls	r3, r3, #7
 8005584:	440b      	add	r3, r1
 8005586:	3384      	adds	r3, #132	@ 0x84
 8005588:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800558e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800559e:	4413      	add	r3, r2
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	01db      	lsls	r3, r3, #7
 80055ae:	4413      	add	r3, r2
 80055b0:	3384      	adds	r3, #132	@ 0x84
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4611      	mov	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	01d2      	lsls	r2, r2, #7
 80055be:	440a      	add	r2, r1
 80055c0:	3284      	adds	r2, #132	@ 0x84
 80055c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80055c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055d6:	4413      	add	r3, r2
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4619      	mov	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	01db      	lsls	r3, r3, #7
 80055e4:	440b      	add	r3, r1
 80055e6:	3384      	adds	r3, #132	@ 0x84
 80055e8:	4619      	mov	r1, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	01db      	lsls	r3, r3, #7
 80055fa:	4413      	add	r3, r2
 80055fc:	3384      	adds	r3, #132	@ 0x84
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	4611      	mov	r1, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	01d2      	lsls	r2, r2, #7
 800560a:	440a      	add	r2, r1
 800560c:	3284      	adds	r2, #132	@ 0x84
 800560e:	f023 0307 	bic.w	r3, r3, #7
 8005612:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	01db      	lsls	r3, r3, #7
 800561e:	4413      	add	r3, r2
 8005620:	3384      	adds	r3, #132	@ 0x84
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800563a:	041b      	lsls	r3, r3, #16
 800563c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	061b      	lsls	r3, r3, #24
 8005644:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	01db      	lsls	r3, r3, #7
 8005650:	4413      	add	r3, r2
 8005652:	3384      	adds	r3, #132	@ 0x84
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	01db      	lsls	r3, r3, #7
 8005660:	4413      	add	r3, r2
 8005662:	3384      	adds	r3, #132	@ 0x84
 8005664:	461a      	mov	r2, r3
 8005666:	2300      	movs	r3, #0
 8005668:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005670:	461a      	mov	r2, r3
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	431a      	orrs	r2, r3
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	01db      	lsls	r3, r3, #7
 8005684:	440b      	add	r3, r1
 8005686:	3384      	adds	r3, #132	@ 0x84
 8005688:	4619      	mov	r1, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	01db      	lsls	r3, r3, #7
 800569a:	4413      	add	r3, r2
 800569c:	3384      	adds	r3, #132	@ 0x84
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	4611      	mov	r1, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	01d2      	lsls	r2, r2, #7
 80056aa:	440a      	add	r2, r1
 80056ac:	3284      	adds	r2, #132	@ 0x84
 80056ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	01db      	lsls	r3, r3, #7
 80056be:	4413      	add	r3, r2
 80056c0:	3384      	adds	r3, #132	@ 0x84
 80056c2:	461a      	mov	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	01db      	lsls	r3, r3, #7
 80056d4:	4413      	add	r3, r2
 80056d6:	3384      	adds	r3, #132	@ 0x84
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	01db      	lsls	r3, r3, #7
 80056e4:	440b      	add	r3, r1
 80056e6:	3384      	adds	r3, #132	@ 0x84
 80056e8:	4619      	mov	r1, r3
 80056ea:	4b58      	ldr	r3, [pc, #352]	@ (800584c <LTDC_SetConfig+0x32c>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	68f9      	ldr	r1, [r7, #12]
 80056fa:	6809      	ldr	r1, [r1, #0]
 80056fc:	4608      	mov	r0, r1
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	01c9      	lsls	r1, r1, #7
 8005702:	4401      	add	r1, r0
 8005704:	3184      	adds	r1, #132	@ 0x84
 8005706:	4313      	orrs	r3, r2
 8005708:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4413      	add	r3, r2
 8005716:	3384      	adds	r3, #132	@ 0x84
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	01db      	lsls	r3, r3, #7
 8005724:	4413      	add	r3, r2
 8005726:	3384      	adds	r3, #132	@ 0x84
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	01db      	lsls	r3, r3, #7
 8005738:	4413      	add	r3, r2
 800573a:	3384      	adds	r3, #132	@ 0x84
 800573c:	461a      	mov	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800574c:	2304      	movs	r3, #4
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	e01b      	b.n	800578a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d102      	bne.n	8005760 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800575a:	2303      	movs	r3, #3
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	e014      	b.n	800578a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d00b      	beq.n	8005780 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800576c:	2b02      	cmp	r3, #2
 800576e:	d007      	beq.n	8005780 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005774:	2b03      	cmp	r3, #3
 8005776:	d003      	beq.n	8005780 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800577c:	2b07      	cmp	r3, #7
 800577e:	d102      	bne.n	8005786 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005780:	2302      	movs	r3, #2
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e001      	b.n	800578a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005786:	2301      	movs	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	01db      	lsls	r3, r3, #7
 8005794:	4413      	add	r3, r2
 8005796:	3384      	adds	r3, #132	@ 0x84
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	4611      	mov	r1, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	01d2      	lsls	r2, r2, #7
 80057a4:	440a      	add	r2, r1
 80057a6:	3284      	adds	r2, #132	@ 0x84
 80057a8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80057ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
 80057b8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6859      	ldr	r1, [r3, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	1acb      	subs	r3, r1, r3
 80057c4:	69f9      	ldr	r1, [r7, #28]
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	6809      	ldr	r1, [r1, #0]
 80057d0:	4608      	mov	r0, r1
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	01c9      	lsls	r1, r1, #7
 80057d6:	4401      	add	r1, r0
 80057d8:	3184      	adds	r1, #132	@ 0x84
 80057da:	4313      	orrs	r3, r2
 80057dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	01db      	lsls	r3, r3, #7
 80057e8:	4413      	add	r3, r2
 80057ea:	3384      	adds	r3, #132	@ 0x84
 80057ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4619      	mov	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	440b      	add	r3, r1
 80057fa:	3384      	adds	r3, #132	@ 0x84
 80057fc:	4619      	mov	r1, r3
 80057fe:	4b14      	ldr	r3, [pc, #80]	@ (8005850 <LTDC_SetConfig+0x330>)
 8005800:	4013      	ands	r3, r2
 8005802:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	01db      	lsls	r3, r3, #7
 800580e:	4413      	add	r3, r2
 8005810:	3384      	adds	r3, #132	@ 0x84
 8005812:	461a      	mov	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	01db      	lsls	r3, r3, #7
 8005824:	4413      	add	r3, r2
 8005826:	3384      	adds	r3, #132	@ 0x84
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	4611      	mov	r1, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	01d2      	lsls	r2, r2, #7
 8005834:	440a      	add	r2, r1
 8005836:	3284      	adds	r2, #132	@ 0x84
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	6013      	str	r3, [r2, #0]
}
 800583e:	bf00      	nop
 8005840:	3724      	adds	r7, #36	@ 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	fffff8f8 	.word	0xfffff8f8
 8005850:	fffff800 	.word	0xfffff800

08005854 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	4b23      	ldr	r3, [pc, #140]	@ (80058ec <HAL_PWREx_EnableOverDrive+0x98>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	4a22      	ldr	r2, [pc, #136]	@ (80058ec <HAL_PWREx_EnableOverDrive+0x98>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005868:	6413      	str	r3, [r2, #64]	@ 0x40
 800586a:	4b20      	ldr	r3, [pc, #128]	@ (80058ec <HAL_PWREx_EnableOverDrive+0x98>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005876:	4b1e      	ldr	r3, [pc, #120]	@ (80058f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005880:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005882:	f7fe fe05 	bl	8004490 <HAL_GetTick>
 8005886:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005888:	e009      	b.n	800589e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800588a:	f7fe fe01 	bl	8004490 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005898:	d901      	bls.n	800589e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e022      	b.n	80058e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800589e:	4b14      	ldr	r3, [pc, #80]	@ (80058f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058aa:	d1ee      	bne.n	800588a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80058ac:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0f      	ldr	r2, [pc, #60]	@ (80058f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058b8:	f7fe fdea 	bl	8004490 <HAL_GetTick>
 80058bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058be:	e009      	b.n	80058d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80058c0:	f7fe fde6 	bl	8004490 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ce:	d901      	bls.n	80058d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e007      	b.n	80058e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058e0:	d1ee      	bne.n	80058c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40007000 	.word	0x40007000

080058f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80058fc:	2300      	movs	r3, #0
 80058fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e291      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8087 	beq.w	8005a26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005918:	4b96      	ldr	r3, [pc, #600]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 030c 	and.w	r3, r3, #12
 8005920:	2b04      	cmp	r3, #4
 8005922:	d00c      	beq.n	800593e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005924:	4b93      	ldr	r3, [pc, #588]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d112      	bne.n	8005956 <HAL_RCC_OscConfig+0x62>
 8005930:	4b90      	ldr	r3, [pc, #576]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800593c:	d10b      	bne.n	8005956 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d06c      	beq.n	8005a24 <HAL_RCC_OscConfig+0x130>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d168      	bne.n	8005a24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e26b      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595e:	d106      	bne.n	800596e <HAL_RCC_OscConfig+0x7a>
 8005960:	4b84      	ldr	r3, [pc, #528]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a83      	ldr	r2, [pc, #524]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e02e      	b.n	80059cc <HAL_RCC_OscConfig+0xd8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0x9c>
 8005976:	4b7f      	ldr	r3, [pc, #508]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 800597c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b7c      	ldr	r3, [pc, #496]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a7b      	ldr	r2, [pc, #492]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e01d      	b.n	80059cc <HAL_RCC_OscConfig+0xd8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0xc0>
 800599a:	4b76      	ldr	r3, [pc, #472]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a75      	ldr	r2, [pc, #468]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b73      	ldr	r3, [pc, #460]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a72      	ldr	r2, [pc, #456]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e00b      	b.n	80059cc <HAL_RCC_OscConfig+0xd8>
 80059b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe fd5c 	bl	8004490 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fe fd58 	bl	8004490 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	@ 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e21f      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	4b61      	ldr	r3, [pc, #388]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0xe8>
 80059fa:	e014      	b.n	8005a26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fe fd48 	bl	8004490 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a04:	f7fe fd44 	bl	8004490 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	@ 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e20b      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a16:	4b57      	ldr	r3, [pc, #348]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0x110>
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d069      	beq.n	8005b06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a32:	4b50      	ldr	r3, [pc, #320]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d11c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x190>
 8005a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d116      	bne.n	8005a84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a56:	4b47      	ldr	r3, [pc, #284]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_RCC_OscConfig+0x17a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e1df      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6e:	4b41      	ldr	r3, [pc, #260]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	493d      	ldr	r1, [pc, #244]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a82:	e040      	b.n	8005b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d023      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a8c:	4b39      	ldr	r3, [pc, #228]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a38      	ldr	r2, [pc, #224]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fe fcfa 	bl	8004490 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fe fcf6 	bl	8004490 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e1bd      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab2:	4b30      	ldr	r3, [pc, #192]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abe:	4b2d      	ldr	r3, [pc, #180]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4929      	ldr	r1, [pc, #164]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	600b      	str	r3, [r1, #0]
 8005ad2:	e018      	b.n	8005b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad4:	4b27      	ldr	r3, [pc, #156]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a26      	ldr	r2, [pc, #152]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fe fcd6 	bl	8004490 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae8:	f7fe fcd2 	bl	8004490 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e199      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afa:	4b1e      	ldr	r3, [pc, #120]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d038      	beq.n	8005b84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d019      	beq.n	8005b4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b1a:	4b16      	ldr	r3, [pc, #88]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1e:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b26:	f7fe fcb3 	bl	8004490 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2e:	f7fe fcaf 	bl	8004490 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e176      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b40:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x23a>
 8005b4c:	e01a      	b.n	8005b84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b4e:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b52:	4a08      	ldr	r2, [pc, #32]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5a:	f7fe fc99 	bl	8004490 <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b60:	e00a      	b.n	8005b78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b62:	f7fe fc95 	bl	8004490 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d903      	bls.n	8005b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e15c      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
 8005b74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b78:	4b91      	ldr	r3, [pc, #580]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1ee      	bne.n	8005b62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80a4 	beq.w	8005cda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b92:	4b8b      	ldr	r3, [pc, #556]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10d      	bne.n	8005bba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9e:	4b88      	ldr	r3, [pc, #544]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	4a87      	ldr	r2, [pc, #540]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005baa:	4b85      	ldr	r3, [pc, #532]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bba:	4b82      	ldr	r3, [pc, #520]	@ (8005dc4 <HAL_RCC_OscConfig+0x4d0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d118      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8005dc4 <HAL_RCC_OscConfig+0x4d0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a7e      	ldr	r2, [pc, #504]	@ (8005dc4 <HAL_RCC_OscConfig+0x4d0>)
 8005bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd2:	f7fe fc5d 	bl	8004490 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bda:	f7fe fc59 	bl	8004490 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b64      	cmp	r3, #100	@ 0x64
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e120      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bec:	4b75      	ldr	r3, [pc, #468]	@ (8005dc4 <HAL_RCC_OscConfig+0x4d0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f0      	beq.n	8005bda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d106      	bne.n	8005c0e <HAL_RCC_OscConfig+0x31a>
 8005c00:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c04:	4a6e      	ldr	r2, [pc, #440]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c0c:	e02d      	b.n	8005c6a <HAL_RCC_OscConfig+0x376>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10c      	bne.n	8005c30 <HAL_RCC_OscConfig+0x33c>
 8005c16:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1a:	4a69      	ldr	r2, [pc, #420]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c22:	4b67      	ldr	r3, [pc, #412]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c26:	4a66      	ldr	r2, [pc, #408]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c28:	f023 0304 	bic.w	r3, r3, #4
 8005c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2e:	e01c      	b.n	8005c6a <HAL_RCC_OscConfig+0x376>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	d10c      	bne.n	8005c52 <HAL_RCC_OscConfig+0x35e>
 8005c38:	4b61      	ldr	r3, [pc, #388]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3c:	4a60      	ldr	r2, [pc, #384]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c3e:	f043 0304 	orr.w	r3, r3, #4
 8005c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c44:	4b5e      	ldr	r3, [pc, #376]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c48:	4a5d      	ldr	r2, [pc, #372]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c50:	e00b      	b.n	8005c6a <HAL_RCC_OscConfig+0x376>
 8005c52:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	4a5a      	ldr	r2, [pc, #360]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c5e:	4b58      	ldr	r3, [pc, #352]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c62:	4a57      	ldr	r2, [pc, #348]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c64:	f023 0304 	bic.w	r3, r3, #4
 8005c68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d015      	beq.n	8005c9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c72:	f7fe fc0d 	bl	8004490 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c78:	e00a      	b.n	8005c90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7a:	f7fe fc09 	bl	8004490 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e0ce      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c90:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0ee      	beq.n	8005c7a <HAL_RCC_OscConfig+0x386>
 8005c9c:	e014      	b.n	8005cc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9e:	f7fe fbf7 	bl	8004490 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca6:	f7fe fbf3 	bl	8004490 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e0b8      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cbc:	4b40      	ldr	r3, [pc, #256]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ee      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d105      	bne.n	8005cda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cce:	4b3c      	ldr	r3, [pc, #240]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80a4 	beq.w	8005e2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce4:	4b36      	ldr	r3, [pc, #216]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 030c 	and.w	r3, r3, #12
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d06b      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d149      	bne.n	8005d8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf8:	4b31      	ldr	r3, [pc, #196]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a30      	ldr	r2, [pc, #192]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fe fbc4 	bl	8004490 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fe fbc0 	bl	8004490 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e087      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	4b28      	ldr	r3, [pc, #160]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	019b      	lsls	r3, r3, #6
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	3b01      	subs	r3, #1
 8005d44:	041b      	lsls	r3, r3, #16
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	061b      	lsls	r3, r3, #24
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d58:	4b19      	ldr	r3, [pc, #100]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fe fb94 	bl	8004490 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fe fb90 	bl	8004490 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e057      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7e:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x478>
 8005d8a:	e04f      	b.n	8005e2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fe fb7a 	bl	8004490 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fe fb76 	bl	8004490 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e03d      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db2:	4b03      	ldr	r3, [pc, #12]	@ (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x4ac>
 8005dbe:	e035      	b.n	8005e2c <HAL_RCC_OscConfig+0x538>
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e38 <HAL_RCC_OscConfig+0x544>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d028      	beq.n	8005e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d121      	bne.n	8005e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d11a      	bne.n	8005e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d111      	bne.n	8005e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	3b01      	subs	r3, #1
 8005e12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d107      	bne.n	8005e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40023800 	.word	0x40023800

08005e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0d0      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e54:	4b6a      	ldr	r3, [pc, #424]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d910      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e62:	4b67      	ldr	r3, [pc, #412]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 020f 	bic.w	r2, r3, #15
 8005e6a:	4965      	ldr	r1, [pc, #404]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b63      	ldr	r3, [pc, #396]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0b8      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e9c:	4b59      	ldr	r3, [pc, #356]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a58      	ldr	r2, [pc, #352]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ea6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb4:	4b53      	ldr	r3, [pc, #332]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a52      	ldr	r2, [pc, #328]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec0:	4b50      	ldr	r3, [pc, #320]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	494d      	ldr	r1, [pc, #308]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d040      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	4b47      	ldr	r3, [pc, #284]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d115      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e07f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d107      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efe:	4b41      	ldr	r3, [pc, #260]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e073      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e06b      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f1e:	4b39      	ldr	r3, [pc, #228]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f023 0203 	bic.w	r2, r3, #3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	4936      	ldr	r1, [pc, #216]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f30:	f7fe faae 	bl	8004490 <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f36:	e00a      	b.n	8005f4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f38:	f7fe faaa 	bl	8004490 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e053      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 020c 	and.w	r2, r3, #12
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d1eb      	bne.n	8005f38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f60:	4b27      	ldr	r3, [pc, #156]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d210      	bcs.n	8005f90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6e:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 020f 	bic.w	r2, r3, #15
 8005f76:	4922      	ldr	r1, [pc, #136]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7e:	4b20      	ldr	r3, [pc, #128]	@ (8006000 <HAL_RCC_ClockConfig+0x1c4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e032      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f9c:	4b19      	ldr	r3, [pc, #100]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4916      	ldr	r1, [pc, #88]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fba:	4b12      	ldr	r3, [pc, #72]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	490e      	ldr	r1, [pc, #56]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fce:	f000 f821 	bl	8006014 <HAL_RCC_GetSysClockFreq>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006004 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	490a      	ldr	r1, [pc, #40]	@ (8006008 <HAL_RCC_ClockConfig+0x1cc>)
 8005fe0:	5ccb      	ldrb	r3, [r1, r3]
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	4a09      	ldr	r2, [pc, #36]	@ (800600c <HAL_RCC_ClockConfig+0x1d0>)
 8005fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fea:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <HAL_RCC_ClockConfig+0x1d4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fa0a 	bl	8004408 <HAL_InitTick>

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40023c00 	.word	0x40023c00
 8006004:	40023800 	.word	0x40023800
 8006008:	08009834 	.word	0x08009834
 800600c:	20000000 	.word	0x20000000
 8006010:	20000174 	.word	0x20000174

08006014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006018:	b090      	sub	sp, #64	@ 0x40
 800601a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006020:	2300      	movs	r3, #0
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006024:	2300      	movs	r3, #0
 8006026:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800602c:	4b59      	ldr	r3, [pc, #356]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x180>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 030c 	and.w	r3, r3, #12
 8006034:	2b08      	cmp	r3, #8
 8006036:	d00d      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x40>
 8006038:	2b08      	cmp	r3, #8
 800603a:	f200 80a1 	bhi.w	8006180 <HAL_RCC_GetSysClockFreq+0x16c>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_RCC_GetSysClockFreq+0x34>
 8006042:	2b04      	cmp	r3, #4
 8006044:	d003      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x3a>
 8006046:	e09b      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006048:	4b53      	ldr	r3, [pc, #332]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x184>)
 800604a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800604c:	e09b      	b.n	8006186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800604e:	4b53      	ldr	r3, [pc, #332]	@ (800619c <HAL_RCC_GetSysClockFreq+0x188>)
 8006050:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006052:	e098      	b.n	8006186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006054:	4b4f      	ldr	r3, [pc, #316]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x180>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800605c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800605e:	4b4d      	ldr	r3, [pc, #308]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x180>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d028      	beq.n	80060bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606a:	4b4a      	ldr	r3, [pc, #296]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x180>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	2200      	movs	r2, #0
 8006072:	623b      	str	r3, [r7, #32]
 8006074:	627a      	str	r2, [r7, #36]	@ 0x24
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800607c:	2100      	movs	r1, #0
 800607e:	4b47      	ldr	r3, [pc, #284]	@ (800619c <HAL_RCC_GetSysClockFreq+0x188>)
 8006080:	fb03 f201 	mul.w	r2, r3, r1
 8006084:	2300      	movs	r3, #0
 8006086:	fb00 f303 	mul.w	r3, r0, r3
 800608a:	4413      	add	r3, r2
 800608c:	4a43      	ldr	r2, [pc, #268]	@ (800619c <HAL_RCC_GetSysClockFreq+0x188>)
 800608e:	fba0 1202 	umull	r1, r2, r0, r2
 8006092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006094:	460a      	mov	r2, r1
 8006096:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800609a:	4413      	add	r3, r2
 800609c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800609e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a0:	2200      	movs	r2, #0
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	61fa      	str	r2, [r7, #28]
 80060a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80060ae:	f7fa f8ab 	bl	8000208 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4613      	mov	r3, r2
 80060b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ba:	e053      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060bc:	4b35      	ldr	r3, [pc, #212]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x180>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	099b      	lsrs	r3, r3, #6
 80060c2:	2200      	movs	r2, #0
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	617a      	str	r2, [r7, #20]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060ce:	f04f 0b00 	mov.w	fp, #0
 80060d2:	4652      	mov	r2, sl
 80060d4:	465b      	mov	r3, fp
 80060d6:	f04f 0000 	mov.w	r0, #0
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	0159      	lsls	r1, r3, #5
 80060e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e4:	0150      	lsls	r0, r2, #5
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	ebb2 080a 	subs.w	r8, r2, sl
 80060ee:	eb63 090b 	sbc.w	r9, r3, fp
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006102:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006106:	ebb2 0408 	subs.w	r4, r2, r8
 800610a:	eb63 0509 	sbc.w	r5, r3, r9
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	00eb      	lsls	r3, r5, #3
 8006118:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800611c:	00e2      	lsls	r2, r4, #3
 800611e:	4614      	mov	r4, r2
 8006120:	461d      	mov	r5, r3
 8006122:	eb14 030a 	adds.w	r3, r4, sl
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	eb45 030b 	adc.w	r3, r5, fp
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800613a:	4629      	mov	r1, r5
 800613c:	028b      	lsls	r3, r1, #10
 800613e:	4621      	mov	r1, r4
 8006140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006144:	4621      	mov	r1, r4
 8006146:	028a      	lsls	r2, r1, #10
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614e:	2200      	movs	r2, #0
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	60fa      	str	r2, [r7, #12]
 8006154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006158:	f7fa f856 	bl	8000208 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4613      	mov	r3, r2
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006164:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x180>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	3301      	adds	r3, #1
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800617e:	e002      	b.n	8006186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006180:	4b05      	ldr	r3, [pc, #20]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x184>)
 8006182:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006188:	4618      	mov	r0, r3
 800618a:	3740      	adds	r7, #64	@ 0x40
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006192:	bf00      	nop
 8006194:	40023800 	.word	0x40023800
 8006198:	00f42400 	.word	0x00f42400
 800619c:	017d7840 	.word	0x017d7840

080061a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a4:	4b03      	ldr	r3, [pc, #12]	@ (80061b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061a6:	681b      	ldr	r3, [r3, #0]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000000 	.word	0x20000000

080061b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061bc:	f7ff fff0 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	0a9b      	lsrs	r3, r3, #10
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	4903      	ldr	r1, [pc, #12]	@ (80061dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ce:	5ccb      	ldrb	r3, [r1, r3]
 80061d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40023800 	.word	0x40023800
 80061dc:	08009844 	.word	0x08009844

080061e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061e4:	f7ff ffdc 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80061e8:	4602      	mov	r2, r0
 80061ea:	4b05      	ldr	r3, [pc, #20]	@ (8006200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	0b5b      	lsrs	r3, r3, #13
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	4903      	ldr	r1, [pc, #12]	@ (8006204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f6:	5ccb      	ldrb	r3, [r1, r3]
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40023800 	.word	0x40023800
 8006204:	08009844 	.word	0x08009844

08006208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d012      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006230:	4b69      	ldr	r3, [pc, #420]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	4a68      	ldr	r2, [pc, #416]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006236:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800623a:	6093      	str	r3, [r2, #8]
 800623c:	4b66      	ldr	r3, [pc, #408]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006244:	4964      	ldr	r1, [pc, #400]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006246:	4313      	orrs	r3, r2
 8006248:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006252:	2301      	movs	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d017      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006262:	4b5d      	ldr	r3, [pc, #372]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006268:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006270:	4959      	ldr	r1, [pc, #356]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006280:	d101      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006282:	2301      	movs	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800628e:	2301      	movs	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d017      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800629e:	4b4e      	ldr	r3, [pc, #312]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ac:	494a      	ldr	r1, [pc, #296]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062bc:	d101      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80062be:	2301      	movs	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80062ca:	2301      	movs	r3, #1
 80062cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80062da:	2301      	movs	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 808b 	beq.w	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062ec:	4b3a      	ldr	r3, [pc, #232]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	4a39      	ldr	r2, [pc, #228]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80062f8:	4b37      	ldr	r3, [pc, #220]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006304:	4b35      	ldr	r3, [pc, #212]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a34      	ldr	r2, [pc, #208]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800630a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800630e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006310:	f7fe f8be 	bl	8004490 <HAL_GetTick>
 8006314:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006316:	e008      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006318:	f7fe f8ba 	bl	8004490 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b64      	cmp	r3, #100	@ 0x64
 8006324:	d901      	bls.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e357      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800632a:	4b2c      	ldr	r3, [pc, #176]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f0      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006336:	4b28      	ldr	r3, [pc, #160]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d035      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	429a      	cmp	r2, r3
 8006352:	d02e      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006354:	4b20      	ldr	r3, [pc, #128]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800635e:	4b1e      	ldr	r3, [pc, #120]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006362:	4a1d      	ldr	r2, [pc, #116]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006368:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800636a:	4b1b      	ldr	r3, [pc, #108]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636e:	4a1a      	ldr	r2, [pc, #104]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006374:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006376:	4a18      	ldr	r2, [pc, #96]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800637c:	4b16      	ldr	r3, [pc, #88]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b01      	cmp	r3, #1
 8006386:	d114      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fe f882 	bl	8004490 <HAL_GetTick>
 800638c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638e:	e00a      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006390:	f7fe f87e 	bl	8004490 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e319      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a6:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0ee      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063be:	d111      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80063c0:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80063cc:	4b04      	ldr	r3, [pc, #16]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063ce:	400b      	ands	r3, r1
 80063d0:	4901      	ldr	r1, [pc, #4]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
 80063d6:	e00b      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80063d8:	40023800 	.word	0x40023800
 80063dc:	40007000 	.word	0x40007000
 80063e0:	0ffffcff 	.word	0x0ffffcff
 80063e4:	4baa      	ldr	r3, [pc, #680]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4aa9      	ldr	r2, [pc, #676]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063ee:	6093      	str	r3, [r2, #8]
 80063f0:	4ba7      	ldr	r3, [pc, #668]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fc:	49a4      	ldr	r1, [pc, #656]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	d010      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800640e:	4ba0      	ldr	r3, [pc, #640]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006414:	4a9e      	ldr	r2, [pc, #632]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800641a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800641e:	4b9c      	ldr	r3, [pc, #624]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006420:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006428:	4999      	ldr	r1, [pc, #612]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800643c:	4b94      	ldr	r3, [pc, #592]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800644a:	4991      	ldr	r1, [pc, #580]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800645e:	4b8c      	ldr	r3, [pc, #560]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006464:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800646c:	4988      	ldr	r1, [pc, #544]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006480:	4b83      	ldr	r3, [pc, #524]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800648e:	4980      	ldr	r1, [pc, #512]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b0:	4977      	ldr	r1, [pc, #476]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064c4:	4b72      	ldr	r3, [pc, #456]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ca:	f023 0203 	bic.w	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d2:	496f      	ldr	r1, [pc, #444]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ec:	f023 020c 	bic.w	r2, r3, #12
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f4:	4966      	ldr	r1, [pc, #408]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006508:	4b61      	ldr	r3, [pc, #388]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006516:	495e      	ldr	r1, [pc, #376]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800652a:	4b59      	ldr	r3, [pc, #356]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006530:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006538:	4955      	ldr	r1, [pc, #340]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800654c:	4b50      	ldr	r3, [pc, #320]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006552:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	494d      	ldr	r1, [pc, #308]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800656e:	4b48      	ldr	r3, [pc, #288]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006574:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	4944      	ldr	r1, [pc, #272]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006590:	4b3f      	ldr	r3, [pc, #252]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006596:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800659e:	493c      	ldr	r1, [pc, #240]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80065b2:	4b37      	ldr	r3, [pc, #220]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c0:	4933      	ldr	r1, [pc, #204]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065e2:	492b      	ldr	r1, [pc, #172]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80065f6:	4b26      	ldr	r3, [pc, #152]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006604:	4922      	ldr	r1, [pc, #136]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006614:	d101      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006616:	2301      	movs	r3, #1
 8006618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006626:	2301      	movs	r3, #1
 8006628:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006636:	4b16      	ldr	r3, [pc, #88]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006644:	4912      	ldr	r1, [pc, #72]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006658:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006668:	4909      	ldr	r1, [pc, #36]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d006      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80d9 	beq.w	8006836 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006684:	4b02      	ldr	r3, [pc, #8]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a01      	ldr	r2, [pc, #4]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800668a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800668e:	e001      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006690:	40023800 	.word	0x40023800
 8006694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006696:	f7fd fefb 	bl	8004490 <HAL_GetTick>
 800669a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800669c:	e008      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800669e:	f7fd fef7 	bl	8004490 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b64      	cmp	r3, #100	@ 0x64
 80066aa:	d901      	bls.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e194      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066b0:	4b6c      	ldr	r3, [pc, #432]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f0      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d021      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11d      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066d0:	4b64      	ldr	r3, [pc, #400]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80066de:	4b61      	ldr	r3, [pc, #388]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e4:	0e1b      	lsrs	r3, r3, #24
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	019a      	lsls	r2, r3, #6
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	431a      	orrs	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	071b      	lsls	r3, r3, #28
 8006704:	4957      	ldr	r1, [pc, #348]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800672a:	2b00      	cmp	r3, #0
 800672c:	d02e      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006736:	d129      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006738:	4b4a      	ldr	r3, [pc, #296]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800673a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800673e:	0c1b      	lsrs	r3, r3, #16
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006746:	4b47      	ldr	r3, [pc, #284]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674c:	0f1b      	lsrs	r3, r3, #28
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	019a      	lsls	r2, r3, #6
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	041b      	lsls	r3, r3, #16
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	061b      	lsls	r3, r3, #24
 8006766:	431a      	orrs	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	071b      	lsls	r3, r3, #28
 800676c:	493d      	ldr	r1, [pc, #244]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006774:	4b3b      	ldr	r3, [pc, #236]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800677a:	f023 021f 	bic.w	r2, r3, #31
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	3b01      	subs	r3, #1
 8006784:	4937      	ldr	r1, [pc, #220]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01d      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006798:	4b32      	ldr	r3, [pc, #200]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800679a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800679e:	0e1b      	lsrs	r3, r3, #24
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ac:	0f1b      	lsrs	r3, r3, #28
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	019a      	lsls	r2, r3, #6
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	041b      	lsls	r3, r3, #16
 80067c0:	431a      	orrs	r2, r3
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	061b      	lsls	r3, r3, #24
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	071b      	lsls	r3, r3, #28
 80067cc:	4925      	ldr	r1, [pc, #148]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d011      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	019a      	lsls	r2, r3, #6
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	061b      	lsls	r3, r3, #24
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	071b      	lsls	r3, r3, #28
 80067fc:	4919      	ldr	r1, [pc, #100]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006804:	4b17      	ldr	r3, [pc, #92]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a16      	ldr	r2, [pc, #88]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800680a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800680e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006810:	f7fd fe3e 	bl	8004490 <HAL_GetTick>
 8006814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006816:	e008      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006818:	f7fd fe3a 	bl	8004490 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b64      	cmp	r3, #100	@ 0x64
 8006824:	d901      	bls.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e0d7      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800682a:	4b0e      	ldr	r3, [pc, #56]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0f0      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b01      	cmp	r3, #1
 800683a:	f040 80cd 	bne.w	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800683e:	4b09      	ldr	r3, [pc, #36]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a08      	ldr	r2, [pc, #32]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800684a:	f7fd fe21 	bl	8004490 <HAL_GetTick>
 800684e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006850:	e00a      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006852:	f7fd fe1d 	bl	8004490 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b64      	cmp	r3, #100	@ 0x64
 800685e:	d903      	bls.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e0ba      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006864:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006868:	4b5e      	ldr	r3, [pc, #376]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006874:	d0ed      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02e      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d12a      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800689e:	4b51      	ldr	r3, [pc, #324]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068ac:	4b4d      	ldr	r3, [pc, #308]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b2:	0f1b      	lsrs	r3, r3, #28
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	019a      	lsls	r2, r3, #6
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	041b      	lsls	r3, r3, #16
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	061b      	lsls	r3, r3, #24
 80068cc:	431a      	orrs	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	071b      	lsls	r3, r3, #28
 80068d2:	4944      	ldr	r1, [pc, #272]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068da:	4b42      	ldr	r3, [pc, #264]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	3b01      	subs	r3, #1
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	493d      	ldr	r1, [pc, #244]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d022      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006908:	d11d      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800690a:	4b36      	ldr	r3, [pc, #216]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	0e1b      	lsrs	r3, r3, #24
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006918:	4b32      	ldr	r3, [pc, #200]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691e:	0f1b      	lsrs	r3, r3, #28
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	019a      	lsls	r2, r3, #6
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	431a      	orrs	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	061b      	lsls	r3, r3, #24
 8006938:	431a      	orrs	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	071b      	lsls	r3, r3, #28
 800693e:	4929      	ldr	r1, [pc, #164]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d028      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006952:	4b24      	ldr	r3, [pc, #144]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006958:	0e1b      	lsrs	r3, r3, #24
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006960:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	f003 0303 	and.w	r3, r3, #3
 800696c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	019a      	lsls	r2, r3, #6
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	431a      	orrs	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	071b      	lsls	r3, r3, #28
 8006986:	4917      	ldr	r1, [pc, #92]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800698e:	4b15      	ldr	r3, [pc, #84]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006994:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	4911      	ldr	r1, [pc, #68]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069a4:	4b0f      	ldr	r3, [pc, #60]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b0:	f7fd fd6e 	bl	8004490 <HAL_GetTick>
 80069b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069b8:	f7fd fd6a 	bl	8004490 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b64      	cmp	r3, #100	@ 0x64
 80069c4:	d901      	bls.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e007      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069ca:	4b06      	ldr	r3, [pc, #24]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d6:	d1ef      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40023800 	.word	0x40023800

080069e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e025      	b.n	8006a48 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7f9 feab 	bl	800076c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f002 fdc9 	bl	80095c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	461a      	mov	r2, r3
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	f002 fe1d 	bl	8009678 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10a      	bne.n	8006a7c <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f80c 	bl	8006a84 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	695a      	ldr	r2, [r3, #20]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	615a      	str	r2, [r3, #20]
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006aaa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d101      	bne.n	8006ab6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e021      	b.n	8006afa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d002      	beq.n	8006ac2 <HAL_SDRAM_SendCommand+0x2a>
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	d118      	bne.n	8006af4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 fe3a 	bl	800974c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d104      	bne.n	8006aea <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2205      	movs	r2, #5
 8006ae4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ae8:	e006      	b.n	8006af8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006af2:	e001      	b.n	8006af8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d101      	bne.n	8006b1c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e016      	b.n	8006b4a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d10f      	bne.n	8006b48 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f002 fe2c 	bl	8009794 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e000      	b.n	8006b4a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e0c1      	b.n	8006cea <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d108      	bne.n	8006b80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b76:	d009      	beq.n	8006b8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	61da      	str	r2, [r3, #28]
 8006b7e:	e005      	b.n	8006b8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d12a      	bne.n	8006bf4 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a52      	ldr	r2, [pc, #328]	@ (8006cf4 <HAL_SPI_Init+0x1a0>)
 8006baa:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a52      	ldr	r2, [pc, #328]	@ (8006cf8 <HAL_SPI_Init+0x1a4>)
 8006bb0:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a51      	ldr	r2, [pc, #324]	@ (8006cfc <HAL_SPI_Init+0x1a8>)
 8006bb6:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a51      	ldr	r2, [pc, #324]	@ (8006d00 <HAL_SPI_Init+0x1ac>)
 8006bbc:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a50      	ldr	r2, [pc, #320]	@ (8006d04 <HAL_SPI_Init+0x1b0>)
 8006bc2:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a50      	ldr	r2, [pc, #320]	@ (8006d08 <HAL_SPI_Init+0x1b4>)
 8006bc8:	679a      	str	r2, [r3, #120]	@ 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a4f      	ldr	r2, [pc, #316]	@ (8006d0c <HAL_SPI_Init+0x1b8>)
 8006bce:	67da      	str	r2, [r3, #124]	@ 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a4f      	ldr	r2, [pc, #316]	@ (8006d10 <HAL_SPI_Init+0x1bc>)
 8006bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    if (hspi->MspInitCallback == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d103      	bne.n	8006bea <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a4b      	ldr	r2, [pc, #300]	@ (8006d14 <HAL_SPI_Init+0x1c0>)
 8006be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c14:	d902      	bls.n	8006c1c <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	e002      	b.n	8006c22 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_Init+0xe8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c34:	d002      	beq.n	8006c3c <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7e:	ea42 0103 	orr.w	r1, r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	0c1b      	lsrs	r3, r3, #16
 8006c98:	f003 0204 	and.w	r2, r3, #4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006cb8:	ea42 0103 	orr.w	r1, r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	0800715d 	.word	0x0800715d
 8006cf8:	08007171 	.word	0x08007171
 8006cfc:	08007185 	.word	0x08007185
 8006d00:	08007199 	.word	0x08007199
 8006d04:	080071ad 	.word	0x080071ad
 8006d08:	080071c1 	.word	0x080071c1
 8006d0c:	080071d5 	.word	0x080071d5
 8006d10:	080071e9 	.word	0x080071e9
 8006d14:	080010f5 	.word	0x080010f5

08006d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	@ 0x28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d26:	2301      	movs	r3, #1
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_SPI_TransmitReceive+0x26>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e20a      	b.n	8007154 <HAL_SPI_TransmitReceive+0x43c>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d46:	f7fd fba3 	bl	8004490 <HAL_GetTick>
 8006d4a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d52:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d5a:	887b      	ldrh	r3, [r7, #2]
 8006d5c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d5e:	887b      	ldrh	r3, [r7, #2]
 8006d60:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d62:	7efb      	ldrb	r3, [r7, #27]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d00e      	beq.n	8006d86 <HAL_SPI_TransmitReceive+0x6e>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d6e:	d106      	bne.n	8006d7e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <HAL_SPI_TransmitReceive+0x66>
 8006d78:	7efb      	ldrb	r3, [r7, #27]
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d003      	beq.n	8006d86 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006d84:	e1e0      	b.n	8007148 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_SPI_TransmitReceive+0x80>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_SPI_TransmitReceive+0x80>
 8006d92:	887b      	ldrh	r3, [r7, #2]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d103      	bne.n	8006da0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006d9e:	e1d3      	b.n	8007148 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d003      	beq.n	8006db4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2205      	movs	r2, #5
 8006db0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	887a      	ldrh	r2, [r7, #2]
 8006dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	887a      	ldrh	r2, [r7, #2]
 8006dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	887a      	ldrh	r2, [r7, #2]
 8006dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	887a      	ldrh	r2, [r7, #2]
 8006de0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006df6:	d802      	bhi.n	8006dfe <HAL_SPI_TransmitReceive+0xe6>
 8006df8:	8a3b      	ldrh	r3, [r7, #16]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d908      	bls.n	8006e10 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e0c:	605a      	str	r2, [r3, #4]
 8006e0e:	e007      	b.n	8006e20 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2a:	2b40      	cmp	r3, #64	@ 0x40
 8006e2c:	d007      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e46:	f240 8081 	bls.w	8006f4c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x140>
 8006e52:	8a7b      	ldrh	r3, [r7, #18]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d16d      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	881a      	ldrh	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	1c9a      	adds	r2, r3, #2
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e7c:	e05a      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x1ac>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d016      	beq.n	8006ec4 <HAL_SPI_TransmitReceive+0x1ac>
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d113      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eac:	1c9a      	adds	r2, r3, #2
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d11c      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x1f4>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d016      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee8:	b292      	uxth	r2, r2
 8006eea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef0:	1c9a      	adds	r2, r3, #2
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f0c:	f7fd fac0 	bl	8004490 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d80b      	bhi.n	8006f34 <HAL_SPI_TransmitReceive+0x21c>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d007      	beq.n	8006f34 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006f32:	e109      	b.n	8007148 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d19f      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x166>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d199      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x166>
 8006f4a:	e0e3      	b.n	8007114 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_SPI_TransmitReceive+0x244>
 8006f54:	8a7b      	ldrh	r3, [r7, #18]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	f040 80cf 	bne.w	80070fa <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d912      	bls.n	8006f8c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6a:	881a      	ldrh	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f76:	1c9a      	adds	r2, r3, #2
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b02      	subs	r3, #2
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f8a:	e0b6      	b.n	80070fa <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb2:	e0a2      	b.n	80070fa <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d134      	bne.n	800702c <HAL_SPI_TransmitReceive+0x314>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d02f      	beq.n	800702c <HAL_SPI_TransmitReceive+0x314>
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d12c      	bne.n	800702c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d912      	bls.n	8007002 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe0:	881a      	ldrh	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b02      	subs	r3, #2
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007000:	e012      	b.n	8007028 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	330c      	adds	r3, #12
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b01      	cmp	r3, #1
 8007038:	d148      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x3b4>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d042      	beq.n	80070cc <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d923      	bls.n	800709a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705c:	b292      	uxth	r2, r2
 800705e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	1c9a      	adds	r2, r3, #2
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b02      	subs	r3, #2
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	d81f      	bhi.n	80070c8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007096:	605a      	str	r2, [r3, #4]
 8007098:	e016      	b.n	80070c8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f103 020c 	add.w	r2, r3, #12
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070c8:	2301      	movs	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070cc:	f7fd f9e0 	bl	8004490 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d8:	429a      	cmp	r2, r3
 80070da:	d803      	bhi.n	80070e4 <HAL_SPI_TransmitReceive+0x3cc>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d102      	bne.n	80070ea <HAL_SPI_TransmitReceive+0x3d2>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d107      	bne.n	80070fa <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80070f8:	e026      	b.n	8007148 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	f47f af57 	bne.w	8006fb4 <HAL_SPI_TransmitReceive+0x29c>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	f47f af50 	bne.w	8006fb4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007114:	69fa      	ldr	r2, [r7, #28]
 8007116:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f98d 	bl	8007438 <SPI_EndRxTxTransaction>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713e:	e003      	b.n	8007148 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007150:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007154:	4618      	mov	r0, r3
 8007156:	3728      	adds	r7, #40	@ 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800720c:	f7fd f940 	bl	8004490 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4413      	add	r3, r2
 800721a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800721c:	f7fd f938 	bl	8004490 <HAL_GetTick>
 8007220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007222:	4b39      	ldr	r3, [pc, #228]	@ (8007308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	015b      	lsls	r3, r3, #5
 8007228:	0d1b      	lsrs	r3, r3, #20
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	fb02 f303 	mul.w	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007232:	e054      	b.n	80072de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d050      	beq.n	80072de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800723c:	f7fd f928 	bl	8004490 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	429a      	cmp	r2, r3
 800724a:	d902      	bls.n	8007252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d13d      	bne.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800726a:	d111      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007274:	d004      	beq.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800727e:	d107      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800728e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007298:	d10f      	bne.n	80072ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e017      	b.n	80072fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3b01      	subs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4013      	ands	r3, r2
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	bf0c      	ite	eq
 80072ee:	2301      	moveq	r3, #1
 80072f0:	2300      	movne	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d19b      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000000 	.word	0x20000000

0800730c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	@ 0x28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800731e:	f7fd f8b7 	bl	8004490 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	4413      	add	r3, r2
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800732e:	f7fd f8af 	bl	8004490 <HAL_GetTick>
 8007332:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800733c:	4b3d      	ldr	r3, [pc, #244]	@ (8007434 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	00da      	lsls	r2, r3, #3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	0d1b      	lsrs	r3, r3, #20
 800734c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007354:	e060      	b.n	8007418 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800735c:	d107      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0x62>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800736c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d050      	beq.n	8007418 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007376:	f7fd f88b 	bl	8004490 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007382:	429a      	cmp	r2, r3
 8007384:	d902      	bls.n	800738c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d13d      	bne.n	8007408 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800739a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073a4:	d111      	bne.n	80073ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ae:	d004      	beq.n	80073ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073b8:	d107      	bne.n	80073ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073d2:	d10f      	bne.n	80073f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e010      	b.n	800742a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	3b01      	subs	r3, #1
 8007416:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4013      	ands	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	429a      	cmp	r2, r3
 8007426:	d196      	bne.n	8007356 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3728      	adds	r7, #40	@ 0x28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000000 	.word	0x20000000

08007438 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2200      	movs	r2, #0
 800744c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff ff5b 	bl	800730c <SPI_WaitFifoStateUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007460:	f043 0220 	orr.w	r2, r3, #32
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e046      	b.n	80074fa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800746c:	4b25      	ldr	r3, [pc, #148]	@ (8007504 <SPI_EndRxTxTransaction+0xcc>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a25      	ldr	r2, [pc, #148]	@ (8007508 <SPI_EndRxTxTransaction+0xd0>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	0d5b      	lsrs	r3, r3, #21
 8007478:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800747c:	fb02 f303 	mul.w	r3, r2, r3
 8007480:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800748a:	d112      	bne.n	80074b2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	2180      	movs	r1, #128	@ 0x80
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff feb0 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d016      	beq.n	80074d0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a6:	f043 0220 	orr.w	r2, r3, #32
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e023      	b.n	80074fa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c8:	2b80      	cmp	r3, #128	@ 0x80
 80074ca:	d0f2      	beq.n	80074b2 <SPI_EndRxTxTransaction+0x7a>
 80074cc:	e000      	b.n	80074d0 <SPI_EndRxTxTransaction+0x98>
        break;
 80074ce:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff ff15 	bl	800730c <SPI_WaitFifoStateUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ec:	f043 0220 	orr.w	r2, r3, #32
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e000      	b.n	80074fa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000000 	.word	0x20000000
 8007508:	165e9f81 	.word	0x165e9f81

0800750c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e054      	b.n	80075c8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d111      	bne.n	800754e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fa08 	bl	8008948 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d102      	bne.n	8007546 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a23      	ldr	r2, [pc, #140]	@ (80075d0 <HAL_TIM_Base_Init+0xc4>)
 8007544:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2202      	movs	r2, #2
 8007552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f000 fe27 	bl	80081b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	080013ad 	.word	0x080013ad

080075d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e054      	b.n	8007690 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d111      	bne.n	8007616 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 f9a4 	bl	8008948 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a23      	ldr	r2, [pc, #140]	@ (8007698 <HAL_TIM_PWM_Init+0xc4>)
 800760c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f000 fdc3 	bl	80081b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	0800769d 	.word	0x0800769d

0800769c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <HAL_TIM_PWM_Start_IT+0x28>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	bf14      	ite	ne
 80076d0:	2301      	movne	r3, #1
 80076d2:	2300      	moveq	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	e03c      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xa2>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d109      	bne.n	80076f2 <HAL_TIM_PWM_Start_IT+0x42>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	bf14      	ite	ne
 80076ea:	2301      	movne	r3, #1
 80076ec:	2300      	moveq	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	e02f      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xa2>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d109      	bne.n	800770c <HAL_TIM_PWM_Start_IT+0x5c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b01      	cmp	r3, #1
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	e022      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xa2>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b0c      	cmp	r3, #12
 8007710:	d109      	bne.n	8007726 <HAL_TIM_PWM_Start_IT+0x76>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	e015      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xa2>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b10      	cmp	r3, #16
 800772a:	d109      	bne.n	8007740 <HAL_TIM_PWM_Start_IT+0x90>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	bf14      	ite	ne
 8007738:	2301      	movne	r3, #1
 800773a:	2300      	moveq	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	e008      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xa2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	bf14      	ite	ne
 800774c:	2301      	movne	r3, #1
 800774e:	2300      	moveq	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e0dd      	b.n	8007916 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <HAL_TIM_PWM_Start_IT+0xba>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007768:	e023      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x102>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b04      	cmp	r3, #4
 800776e:	d104      	bne.n	800777a <HAL_TIM_PWM_Start_IT+0xca>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007778:	e01b      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x102>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d104      	bne.n	800778a <HAL_TIM_PWM_Start_IT+0xda>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007788:	e013      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x102>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b0c      	cmp	r3, #12
 800778e:	d104      	bne.n	800779a <HAL_TIM_PWM_Start_IT+0xea>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007798:	e00b      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x102>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b10      	cmp	r3, #16
 800779e:	d104      	bne.n	80077aa <HAL_TIM_PWM_Start_IT+0xfa>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a8:	e003      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x102>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b0c      	cmp	r3, #12
 80077b6:	d841      	bhi.n	800783c <HAL_TIM_PWM_Start_IT+0x18c>
 80077b8:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <HAL_TIM_PWM_Start_IT+0x110>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	0800783d 	.word	0x0800783d
 80077c8:	0800783d 	.word	0x0800783d
 80077cc:	0800783d 	.word	0x0800783d
 80077d0:	08007807 	.word	0x08007807
 80077d4:	0800783d 	.word	0x0800783d
 80077d8:	0800783d 	.word	0x0800783d
 80077dc:	0800783d 	.word	0x0800783d
 80077e0:	08007819 	.word	0x08007819
 80077e4:	0800783d 	.word	0x0800783d
 80077e8:	0800783d 	.word	0x0800783d
 80077ec:	0800783d 	.word	0x0800783d
 80077f0:	0800782b 	.word	0x0800782b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0202 	orr.w	r2, r2, #2
 8007802:	60da      	str	r2, [r3, #12]
      break;
 8007804:	e01d      	b.n	8007842 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0204 	orr.w	r2, r2, #4
 8007814:	60da      	str	r2, [r3, #12]
      break;
 8007816:	e014      	b.n	8007842 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0208 	orr.w	r2, r2, #8
 8007826:	60da      	str	r2, [r3, #12]
      break;
 8007828:	e00b      	b.n	8007842 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0210 	orr.w	r2, r2, #16
 8007838:	60da      	str	r2, [r3, #12]
      break;
 800783a:	e002      	b.n	8007842 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	73fb      	strb	r3, [r7, #15]
      break;
 8007840:	bf00      	nop
  }

  if (status == HAL_OK)
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d165      	bne.n	8007914 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2201      	movs	r2, #1
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f853 	bl	80088fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a31      	ldr	r2, [pc, #196]	@ (8007920 <HAL_TIM_PWM_Start_IT+0x270>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIM_PWM_Start_IT+0x1ba>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a2f      	ldr	r2, [pc, #188]	@ (8007924 <HAL_TIM_PWM_Start_IT+0x274>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d101      	bne.n	800786e <HAL_TIM_PWM_Start_IT+0x1be>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_TIM_PWM_Start_IT+0x1c0>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007882:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a25      	ldr	r2, [pc, #148]	@ (8007920 <HAL_TIM_PWM_Start_IT+0x270>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d022      	beq.n	80078d4 <HAL_TIM_PWM_Start_IT+0x224>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007896:	d01d      	beq.n	80078d4 <HAL_TIM_PWM_Start_IT+0x224>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a22      	ldr	r2, [pc, #136]	@ (8007928 <HAL_TIM_PWM_Start_IT+0x278>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d018      	beq.n	80078d4 <HAL_TIM_PWM_Start_IT+0x224>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a21      	ldr	r2, [pc, #132]	@ (800792c <HAL_TIM_PWM_Start_IT+0x27c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <HAL_TIM_PWM_Start_IT+0x224>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007930 <HAL_TIM_PWM_Start_IT+0x280>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00e      	beq.n	80078d4 <HAL_TIM_PWM_Start_IT+0x224>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007924 <HAL_TIM_PWM_Start_IT+0x274>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_TIM_PWM_Start_IT+0x224>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007934 <HAL_TIM_PWM_Start_IT+0x284>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIM_PWM_Start_IT+0x224>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007938 <HAL_TIM_PWM_Start_IT+0x288>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d115      	bne.n	8007900 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	4b18      	ldr	r3, [pc, #96]	@ (800793c <HAL_TIM_PWM_Start_IT+0x28c>)
 80078dc:	4013      	ands	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b06      	cmp	r3, #6
 80078e4:	d015      	beq.n	8007912 <HAL_TIM_PWM_Start_IT+0x262>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ec:	d011      	beq.n	8007912 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fe:	e008      	b.n	8007912 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	e000      	b.n	8007914 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007912:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40014000 	.word	0x40014000
 8007938:	40001800 	.word	0x40001800
 800793c:	00010007 	.word	0x00010007

08007940 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b0c      	cmp	r3, #12
 8007952:	d841      	bhi.n	80079d8 <HAL_TIM_PWM_Stop_IT+0x98>
 8007954:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007991 	.word	0x08007991
 8007960:	080079d9 	.word	0x080079d9
 8007964:	080079d9 	.word	0x080079d9
 8007968:	080079d9 	.word	0x080079d9
 800796c:	080079a3 	.word	0x080079a3
 8007970:	080079d9 	.word	0x080079d9
 8007974:	080079d9 	.word	0x080079d9
 8007978:	080079d9 	.word	0x080079d9
 800797c:	080079b5 	.word	0x080079b5
 8007980:	080079d9 	.word	0x080079d9
 8007984:	080079d9 	.word	0x080079d9
 8007988:	080079d9 	.word	0x080079d9
 800798c:	080079c7 	.word	0x080079c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0202 	bic.w	r2, r2, #2
 800799e:	60da      	str	r2, [r3, #12]
      break;
 80079a0:	e01d      	b.n	80079de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0204 	bic.w	r2, r2, #4
 80079b0:	60da      	str	r2, [r3, #12]
      break;
 80079b2:	e014      	b.n	80079de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0208 	bic.w	r2, r2, #8
 80079c2:	60da      	str	r2, [r3, #12]
      break;
 80079c4:	e00b      	b.n	80079de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0210 	bic.w	r2, r2, #16
 80079d4:	60da      	str	r2, [r3, #12]
      break;
 80079d6:	e002      	b.n	80079de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d171      	bne.n	8007ac8 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2200      	movs	r2, #0
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 ff85 	bl	80088fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a37      	ldr	r2, [pc, #220]	@ (8007ad4 <HAL_TIM_PWM_Stop_IT+0x194>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d004      	beq.n	8007a06 <HAL_TIM_PWM_Stop_IT+0xc6>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a35      	ldr	r2, [pc, #212]	@ (8007ad8 <HAL_TIM_PWM_Stop_IT+0x198>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d101      	bne.n	8007a0a <HAL_TIM_PWM_Stop_IT+0xca>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <HAL_TIM_PWM_Stop_IT+0xcc>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d017      	beq.n	8007a40 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a1a      	ldr	r2, [r3, #32]
 8007a16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10f      	bne.n	8007a40 <HAL_TIM_PWM_Stop_IT+0x100>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d107      	bne.n	8007a40 <HAL_TIM_PWM_Stop_IT+0x100>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6a1a      	ldr	r2, [r3, #32]
 8007a46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10f      	bne.n	8007a70 <HAL_TIM_PWM_Stop_IT+0x130>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6a1a      	ldr	r2, [r3, #32]
 8007a56:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d107      	bne.n	8007a70 <HAL_TIM_PWM_Stop_IT+0x130>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0201 	bic.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <HAL_TIM_PWM_Stop_IT+0x140>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a7e:	e023      	b.n	8007ac8 <HAL_TIM_PWM_Stop_IT+0x188>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d104      	bne.n	8007a90 <HAL_TIM_PWM_Stop_IT+0x150>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a8e:	e01b      	b.n	8007ac8 <HAL_TIM_PWM_Stop_IT+0x188>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d104      	bne.n	8007aa0 <HAL_TIM_PWM_Stop_IT+0x160>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a9e:	e013      	b.n	8007ac8 <HAL_TIM_PWM_Stop_IT+0x188>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b0c      	cmp	r3, #12
 8007aa4:	d104      	bne.n	8007ab0 <HAL_TIM_PWM_Stop_IT+0x170>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007aae:	e00b      	b.n	8007ac8 <HAL_TIM_PWM_Stop_IT+0x188>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b10      	cmp	r3, #16
 8007ab4:	d104      	bne.n	8007ac0 <HAL_TIM_PWM_Stop_IT+0x180>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007abe:	e003      	b.n	8007ac8 <HAL_TIM_PWM_Stop_IT+0x188>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40010000 	.word	0x40010000
 8007ad8:	40010400 	.word	0x40010400

08007adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d026      	beq.n	8007b4c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d021      	beq.n	8007b4c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0202 	mvn.w	r2, #2
 8007b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
 8007b30:	e009      	b.n	8007b46 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d026      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d021      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f06f 0204 	mvn.w	r2, #4
 8007b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
 8007b88:	e009      	b.n	8007b9e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d026      	beq.n	8007bfc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d021      	beq.n	8007bfc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0208 	mvn.w	r2, #8
 8007bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	4798      	blx	r3
 8007be0:	e009      	b.n	8007bf6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d026      	beq.n	8007c54 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d021      	beq.n	8007c54 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0210 	mvn.w	r2, #16
 8007c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	4798      	blx	r3
 8007c38:	e009      	b.n	8007c4e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00e      	beq.n	8007c7c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0201 	mvn.w	r2, #1
 8007c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00e      	beq.n	8007cae <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f06f 0220 	mvn.w	r2, #32
 8007d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e0ff      	b.n	8007f4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b14      	cmp	r3, #20
 8007d5a:	f200 80f0 	bhi.w	8007f3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007db9 	.word	0x08007db9
 8007d68:	08007f3f 	.word	0x08007f3f
 8007d6c:	08007f3f 	.word	0x08007f3f
 8007d70:	08007f3f 	.word	0x08007f3f
 8007d74:	08007df9 	.word	0x08007df9
 8007d78:	08007f3f 	.word	0x08007f3f
 8007d7c:	08007f3f 	.word	0x08007f3f
 8007d80:	08007f3f 	.word	0x08007f3f
 8007d84:	08007e3b 	.word	0x08007e3b
 8007d88:	08007f3f 	.word	0x08007f3f
 8007d8c:	08007f3f 	.word	0x08007f3f
 8007d90:	08007f3f 	.word	0x08007f3f
 8007d94:	08007e7b 	.word	0x08007e7b
 8007d98:	08007f3f 	.word	0x08007f3f
 8007d9c:	08007f3f 	.word	0x08007f3f
 8007da0:	08007f3f 	.word	0x08007f3f
 8007da4:	08007ebd 	.word	0x08007ebd
 8007da8:	08007f3f 	.word	0x08007f3f
 8007dac:	08007f3f 	.word	0x08007f3f
 8007db0:	08007f3f 	.word	0x08007f3f
 8007db4:	08007efd 	.word	0x08007efd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 faa4 	bl	800830c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699a      	ldr	r2, [r3, #24]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0208 	orr.w	r2, r2, #8
 8007dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0204 	bic.w	r2, r2, #4
 8007de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6999      	ldr	r1, [r3, #24]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	619a      	str	r2, [r3, #24]
      break;
 8007df6:	e0a5      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68b9      	ldr	r1, [r7, #8]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 faf6 	bl	80083f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6999      	ldr	r1, [r3, #24]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	021a      	lsls	r2, r3, #8
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	619a      	str	r2, [r3, #24]
      break;
 8007e38:	e084      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fb4d 	bl	80084e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69da      	ldr	r2, [r3, #28]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0208 	orr.w	r2, r2, #8
 8007e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0204 	bic.w	r2, r2, #4
 8007e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69d9      	ldr	r1, [r3, #28]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	61da      	str	r2, [r3, #28]
      break;
 8007e78:	e064      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fba3 	bl	80085cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69da      	ldr	r2, [r3, #28]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69d9      	ldr	r1, [r3, #28]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	021a      	lsls	r2, r3, #8
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	61da      	str	r2, [r3, #28]
      break;
 8007eba:	e043      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fbda 	bl	800867c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0208 	orr.w	r2, r2, #8
 8007ed6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0204 	bic.w	r2, r2, #4
 8007ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007efa:	e023      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fc0c 	bl	8008720 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	021a      	lsls	r2, r3, #8
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f3c:	e002      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
      break;
 8007f42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop

08007f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIM_ConfigClockSource+0x1c>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e0b4      	b.n	80080de <HAL_TIM_ConfigClockSource+0x186>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	4b56      	ldr	r3, [pc, #344]	@ (80080e8 <HAL_TIM_ConfigClockSource+0x190>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fac:	d03e      	beq.n	800802c <HAL_TIM_ConfigClockSource+0xd4>
 8007fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb2:	f200 8087 	bhi.w	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fba:	f000 8086 	beq.w	80080ca <HAL_TIM_ConfigClockSource+0x172>
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc2:	d87f      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b70      	cmp	r3, #112	@ 0x70
 8007fc6:	d01a      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0xa6>
 8007fc8:	2b70      	cmp	r3, #112	@ 0x70
 8007fca:	d87b      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fcc:	2b60      	cmp	r3, #96	@ 0x60
 8007fce:	d050      	beq.n	8008072 <HAL_TIM_ConfigClockSource+0x11a>
 8007fd0:	2b60      	cmp	r3, #96	@ 0x60
 8007fd2:	d877      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd4:	2b50      	cmp	r3, #80	@ 0x50
 8007fd6:	d03c      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0xfa>
 8007fd8:	2b50      	cmp	r3, #80	@ 0x50
 8007fda:	d873      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fdc:	2b40      	cmp	r3, #64	@ 0x40
 8007fde:	d058      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x13a>
 8007fe0:	2b40      	cmp	r3, #64	@ 0x40
 8007fe2:	d86f      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe4:	2b30      	cmp	r3, #48	@ 0x30
 8007fe6:	d064      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007fe8:	2b30      	cmp	r3, #48	@ 0x30
 8007fea:	d86b      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d060      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d867      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d05c      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d05a      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ffc:	e062      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800800e:	f000 fc55 	bl	80088bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	609a      	str	r2, [r3, #8]
      break;
 800802a:	e04f      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800803c:	f000 fc3e 	bl	80088bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800804e:	609a      	str	r2, [r3, #8]
      break;
 8008050:	e03c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800805e:	461a      	mov	r2, r3
 8008060:	f000 fbb2 	bl	80087c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2150      	movs	r1, #80	@ 0x50
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fc0b 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 8008070:	e02c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800807e:	461a      	mov	r2, r3
 8008080:	f000 fbd1 	bl	8008826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2160      	movs	r1, #96	@ 0x60
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fbfb 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 8008090:	e01c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 fb92 	bl	80087c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2140      	movs	r1, #64	@ 0x40
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fbeb 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 80080b0:	e00c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f000 fbe2 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 80080c2:	e003      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
      break;
 80080c8:	e000      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	fffeff88 	.word	0xfffeff88

080080ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a46      	ldr	r2, [pc, #280]	@ (80082e0 <TIM_Base_SetConfig+0x12c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d013      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d2:	d00f      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a43      	ldr	r2, [pc, #268]	@ (80082e4 <TIM_Base_SetConfig+0x130>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00b      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a42      	ldr	r2, [pc, #264]	@ (80082e8 <TIM_Base_SetConfig+0x134>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d007      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a41      	ldr	r2, [pc, #260]	@ (80082ec <TIM_Base_SetConfig+0x138>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a40      	ldr	r2, [pc, #256]	@ (80082f0 <TIM_Base_SetConfig+0x13c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d108      	bne.n	8008206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a35      	ldr	r2, [pc, #212]	@ (80082e0 <TIM_Base_SetConfig+0x12c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d02b      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008214:	d027      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a32      	ldr	r2, [pc, #200]	@ (80082e4 <TIM_Base_SetConfig+0x130>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d023      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a31      	ldr	r2, [pc, #196]	@ (80082e8 <TIM_Base_SetConfig+0x134>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d01f      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a30      	ldr	r2, [pc, #192]	@ (80082ec <TIM_Base_SetConfig+0x138>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d01b      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a2f      	ldr	r2, [pc, #188]	@ (80082f0 <TIM_Base_SetConfig+0x13c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d017      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a2e      	ldr	r2, [pc, #184]	@ (80082f4 <TIM_Base_SetConfig+0x140>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d013      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a2d      	ldr	r2, [pc, #180]	@ (80082f8 <TIM_Base_SetConfig+0x144>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00f      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a2c      	ldr	r2, [pc, #176]	@ (80082fc <TIM_Base_SetConfig+0x148>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d00b      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a2b      	ldr	r2, [pc, #172]	@ (8008300 <TIM_Base_SetConfig+0x14c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d007      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a2a      	ldr	r2, [pc, #168]	@ (8008304 <TIM_Base_SetConfig+0x150>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d003      	beq.n	8008266 <TIM_Base_SetConfig+0xb2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a29      	ldr	r2, [pc, #164]	@ (8008308 <TIM_Base_SetConfig+0x154>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d108      	bne.n	8008278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800826c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a10      	ldr	r2, [pc, #64]	@ (80082e0 <TIM_Base_SetConfig+0x12c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d003      	beq.n	80082ac <TIM_Base_SetConfig+0xf8>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a12      	ldr	r2, [pc, #72]	@ (80082f0 <TIM_Base_SetConfig+0x13c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d103      	bne.n	80082b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	691a      	ldr	r2, [r3, #16]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d105      	bne.n	80082d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f023 0201 	bic.w	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	611a      	str	r2, [r3, #16]
  }
}
 80082d2:	bf00      	nop
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40000400 	.word	0x40000400
 80082e8:	40000800 	.word	0x40000800
 80082ec:	40000c00 	.word	0x40000c00
 80082f0:	40010400 	.word	0x40010400
 80082f4:	40014000 	.word	0x40014000
 80082f8:	40014400 	.word	0x40014400
 80082fc:	40014800 	.word	0x40014800
 8008300:	40001800 	.word	0x40001800
 8008304:	40001c00 	.word	0x40001c00
 8008308:	40002000 	.word	0x40002000

0800830c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	f023 0201 	bic.w	r2, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4b2b      	ldr	r3, [pc, #172]	@ (80083e4 <TIM_OC1_SetConfig+0xd8>)
 8008338:	4013      	ands	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f023 0302 	bic.w	r3, r3, #2
 8008354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a21      	ldr	r2, [pc, #132]	@ (80083e8 <TIM_OC1_SetConfig+0xdc>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d003      	beq.n	8008370 <TIM_OC1_SetConfig+0x64>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a20      	ldr	r2, [pc, #128]	@ (80083ec <TIM_OC1_SetConfig+0xe0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d10c      	bne.n	800838a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f023 0308 	bic.w	r3, r3, #8
 8008376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 0304 	bic.w	r3, r3, #4
 8008388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a16      	ldr	r2, [pc, #88]	@ (80083e8 <TIM_OC1_SetConfig+0xdc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d003      	beq.n	800839a <TIM_OC1_SetConfig+0x8e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a15      	ldr	r2, [pc, #84]	@ (80083ec <TIM_OC1_SetConfig+0xe0>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d111      	bne.n	80083be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	621a      	str	r2, [r3, #32]
}
 80083d8:	bf00      	nop
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	fffeff8f 	.word	0xfffeff8f
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40010400 	.word	0x40010400

080083f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	f023 0210 	bic.w	r2, r3, #16
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4b2e      	ldr	r3, [pc, #184]	@ (80084d4 <TIM_OC2_SetConfig+0xe4>)
 800841c:	4013      	ands	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f023 0320 	bic.w	r3, r3, #32
 800843a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a23      	ldr	r2, [pc, #140]	@ (80084d8 <TIM_OC2_SetConfig+0xe8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d003      	beq.n	8008458 <TIM_OC2_SetConfig+0x68>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a22      	ldr	r2, [pc, #136]	@ (80084dc <TIM_OC2_SetConfig+0xec>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d10d      	bne.n	8008474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800845e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a18      	ldr	r2, [pc, #96]	@ (80084d8 <TIM_OC2_SetConfig+0xe8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_OC2_SetConfig+0x94>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a17      	ldr	r2, [pc, #92]	@ (80084dc <TIM_OC2_SetConfig+0xec>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d113      	bne.n	80084ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800848a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	621a      	str	r2, [r3, #32]
}
 80084c6:	bf00      	nop
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	feff8fff 	.word	0xfeff8fff
 80084d8:	40010000 	.word	0x40010000
 80084dc:	40010400 	.word	0x40010400

080084e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4b2d      	ldr	r3, [pc, #180]	@ (80085c0 <TIM_OC3_SetConfig+0xe0>)
 800850c:	4013      	ands	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a22      	ldr	r2, [pc, #136]	@ (80085c4 <TIM_OC3_SetConfig+0xe4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d003      	beq.n	8008546 <TIM_OC3_SetConfig+0x66>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a21      	ldr	r2, [pc, #132]	@ (80085c8 <TIM_OC3_SetConfig+0xe8>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d10d      	bne.n	8008562 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800854c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	021b      	lsls	r3, r3, #8
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a17      	ldr	r2, [pc, #92]	@ (80085c4 <TIM_OC3_SetConfig+0xe4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_OC3_SetConfig+0x92>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a16      	ldr	r2, [pc, #88]	@ (80085c8 <TIM_OC3_SetConfig+0xe8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d113      	bne.n	800859a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	4313      	orrs	r3, r2
 800858c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	621a      	str	r2, [r3, #32]
}
 80085b4:	bf00      	nop
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	fffeff8f 	.word	0xfffeff8f
 80085c4:	40010000 	.word	0x40010000
 80085c8:	40010400 	.word	0x40010400

080085cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008670 <TIM_OC4_SetConfig+0xa4>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	031b      	lsls	r3, r3, #12
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a13      	ldr	r2, [pc, #76]	@ (8008674 <TIM_OC4_SetConfig+0xa8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d003      	beq.n	8008634 <TIM_OC4_SetConfig+0x68>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a12      	ldr	r2, [pc, #72]	@ (8008678 <TIM_OC4_SetConfig+0xac>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d109      	bne.n	8008648 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800863a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	019b      	lsls	r3, r3, #6
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	621a      	str	r2, [r3, #32]
}
 8008662:	bf00      	nop
 8008664:	371c      	adds	r7, #28
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	feff8fff 	.word	0xfeff8fff
 8008674:	40010000 	.word	0x40010000
 8008678:	40010400 	.word	0x40010400

0800867c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008714 <TIM_OC5_SetConfig+0x98>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80086bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	041b      	lsls	r3, r3, #16
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a12      	ldr	r2, [pc, #72]	@ (8008718 <TIM_OC5_SetConfig+0x9c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d003      	beq.n	80086da <TIM_OC5_SetConfig+0x5e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a11      	ldr	r2, [pc, #68]	@ (800871c <TIM_OC5_SetConfig+0xa0>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d109      	bne.n	80086ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	021b      	lsls	r3, r3, #8
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	621a      	str	r2, [r3, #32]
}
 8008708:	bf00      	nop
 800870a:	371c      	adds	r7, #28
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	fffeff8f 	.word	0xfffeff8f
 8008718:	40010000 	.word	0x40010000
 800871c:	40010400 	.word	0x40010400

08008720 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4b1c      	ldr	r3, [pc, #112]	@ (80087bc <TIM_OC6_SetConfig+0x9c>)
 800874c:	4013      	ands	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	051b      	lsls	r3, r3, #20
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a13      	ldr	r2, [pc, #76]	@ (80087c0 <TIM_OC6_SetConfig+0xa0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC6_SetConfig+0x60>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a12      	ldr	r2, [pc, #72]	@ (80087c4 <TIM_OC6_SetConfig+0xa4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d109      	bne.n	8008794 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	029b      	lsls	r3, r3, #10
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	4313      	orrs	r3, r2
 8008792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	621a      	str	r2, [r3, #32]
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	feff8fff 	.word	0xfeff8fff
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400

080087c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f023 0201 	bic.w	r2, r3, #1
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f023 030a 	bic.w	r3, r3, #10
 8008804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	621a      	str	r2, [r3, #32]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008826:	b480      	push	{r7}
 8008828:	b087      	sub	sp, #28
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	f023 0210 	bic.w	r2, r3, #16
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	031b      	lsls	r3, r3, #12
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008862:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f043 0307 	orr.w	r3, r3, #7
 80088a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	609a      	str	r2, [r3, #8]
}
 80088b0:	bf00      	nop
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	021a      	lsls	r2, r3, #8
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	431a      	orrs	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	609a      	str	r2, [r3, #8]
}
 80088f0:	bf00      	nop
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f003 031f 	and.w	r3, r3, #31
 800890e:	2201      	movs	r2, #1
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a1a      	ldr	r2, [r3, #32]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	43db      	mvns	r3, r3
 800891e:	401a      	ands	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a1a      	ldr	r2, [r3, #32]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	f003 031f 	and.w	r3, r3, #31
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	fa01 f303 	lsl.w	r3, r1, r3
 8008934:	431a      	orrs	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a1e      	ldr	r2, [pc, #120]	@ (80089cc <TIM_ResetCallback+0x84>)
 8008954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a1d      	ldr	r2, [pc, #116]	@ (80089d0 <TIM_ResetCallback+0x88>)
 800895c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a1c      	ldr	r2, [pc, #112]	@ (80089d4 <TIM_ResetCallback+0x8c>)
 8008964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a1b      	ldr	r2, [pc, #108]	@ (80089d8 <TIM_ResetCallback+0x90>)
 800896c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a1a      	ldr	r2, [pc, #104]	@ (80089dc <TIM_ResetCallback+0x94>)
 8008974:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a19      	ldr	r2, [pc, #100]	@ (80089e0 <TIM_ResetCallback+0x98>)
 800897c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a18      	ldr	r2, [pc, #96]	@ (80089e4 <TIM_ResetCallback+0x9c>)
 8008984:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a17      	ldr	r2, [pc, #92]	@ (80089e8 <TIM_ResetCallback+0xa0>)
 800898c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a16      	ldr	r2, [pc, #88]	@ (80089ec <TIM_ResetCallback+0xa4>)
 8008994:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a15      	ldr	r2, [pc, #84]	@ (80089f0 <TIM_ResetCallback+0xa8>)
 800899c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a14      	ldr	r2, [pc, #80]	@ (80089f4 <TIM_ResetCallback+0xac>)
 80089a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a13      	ldr	r2, [pc, #76]	@ (80089f8 <TIM_ResetCallback+0xb0>)
 80089ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a12      	ldr	r2, [pc, #72]	@ (80089fc <TIM_ResetCallback+0xb4>)
 80089b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a11      	ldr	r2, [pc, #68]	@ (8008a00 <TIM_ResetCallback+0xb8>)
 80089bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	080080ed 	.word	0x080080ed
 80089d0:	08008101 	.word	0x08008101
 80089d4:	08008179 	.word	0x08008179
 80089d8:	0800818d 	.word	0x0800818d
 80089dc:	08008129 	.word	0x08008129
 80089e0:	0800813d 	.word	0x0800813d
 80089e4:	08008115 	.word	0x08008115
 80089e8:	08008151 	.word	0x08008151
 80089ec:	08008165 	.word	0x08008165
 80089f0:	080081a1 	.word	0x080081a1
 80089f4:	08008b21 	.word	0x08008b21
 80089f8:	08008b35 	.word	0x08008b35
 80089fc:	08008b49 	.word	0x08008b49
 8008a00:	08008b5d 	.word	0x08008b5d

08008a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e06d      	b.n	8008af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a30      	ldr	r2, [pc, #192]	@ (8008b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d108      	bne.n	8008a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a20      	ldr	r2, [pc, #128]	@ (8008b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d022      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a8e:	d01d      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1d      	ldr	r2, [pc, #116]	@ (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d018      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d013      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00e      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a15      	ldr	r2, [pc, #84]	@ (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d009      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a16      	ldr	r2, [pc, #88]	@ (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d004      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a15      	ldr	r2, [pc, #84]	@ (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d10c      	bne.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	40010000 	.word	0x40010000
 8008b08:	40010400 	.word	0x40010400
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	40000800 	.word	0x40000800
 8008b14:	40000c00 	.word	0x40000c00
 8008b18:	40014000 	.word	0x40014000
 8008b1c:	40001800 	.word	0x40001800

08008b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e04e      	b.n	8008c20 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d114      	bne.n	8008bb4 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f8a6 	bl	8008ce4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d103      	bne.n	8008baa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a20      	ldr	r2, [pc, #128]	@ (8008c28 <HAL_UART_Init+0xb8>)
 8008ba6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2224      	movs	r2, #36	@ 0x24
 8008bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0201 	bic.w	r2, r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fb2a 	bl	800922c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8c3 	bl	8008d64 <UART_SetConfig>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d101      	bne.n	8008be8 <HAL_UART_Init+0x78>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e01b      	b.n	8008c20 <HAL_UART_Init+0xb0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0201 	orr.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fba9 	bl	8009370 <UART_CheckIdleState>
 8008c1e:	4603      	mov	r3, r0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	080014c1 	.word	0x080014c1

08008c2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a14      	ldr	r2, [pc, #80]	@ (8008d40 <UART_InitCallbacksToDefault+0x5c>)
 8008cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a13      	ldr	r2, [pc, #76]	@ (8008d44 <UART_InitCallbacksToDefault+0x60>)
 8008cf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a12      	ldr	r2, [pc, #72]	@ (8008d48 <UART_InitCallbacksToDefault+0x64>)
 8008d00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a11      	ldr	r2, [pc, #68]	@ (8008d4c <UART_InitCallbacksToDefault+0x68>)
 8008d08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a10      	ldr	r2, [pc, #64]	@ (8008d50 <UART_InitCallbacksToDefault+0x6c>)
 8008d10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a0f      	ldr	r2, [pc, #60]	@ (8008d54 <UART_InitCallbacksToDefault+0x70>)
 8008d18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8008d58 <UART_InitCallbacksToDefault+0x74>)
 8008d20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a0d      	ldr	r2, [pc, #52]	@ (8008d5c <UART_InitCallbacksToDefault+0x78>)
 8008d28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8008d60 <UART_InitCallbacksToDefault+0x7c>)
 8008d30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	08008c41 	.word	0x08008c41
 8008d44:	08008c2d 	.word	0x08008c2d
 8008d48:	08008c69 	.word	0x08008c69
 8008d4c:	08008c55 	.word	0x08008c55
 8008d50:	08008c7d 	.word	0x08008c7d
 8008d54:	08008c91 	.word	0x08008c91
 8008d58:	08008ca5 	.word	0x08008ca5
 8008d5c:	08008cb9 	.word	0x08008cb9
 8008d60:	08008ccd 	.word	0x08008ccd

08008d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4ba6      	ldr	r3, [pc, #664]	@ (8009028 <UART_SetConfig+0x2c4>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	6979      	ldr	r1, [r7, #20]
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a94      	ldr	r2, [pc, #592]	@ (800902c <UART_SetConfig+0x2c8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d120      	bne.n	8008e22 <UART_SetConfig+0xbe>
 8008de0:	4b93      	ldr	r3, [pc, #588]	@ (8009030 <UART_SetConfig+0x2cc>)
 8008de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d816      	bhi.n	8008e1c <UART_SetConfig+0xb8>
 8008dee:	a201      	add	r2, pc, #4	@ (adr r2, 8008df4 <UART_SetConfig+0x90>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e05 	.word	0x08008e05
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e0b 	.word	0x08008e0b
 8008e00:	08008e17 	.word	0x08008e17
 8008e04:	2301      	movs	r3, #1
 8008e06:	77fb      	strb	r3, [r7, #31]
 8008e08:	e150      	b.n	80090ac <UART_SetConfig+0x348>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	77fb      	strb	r3, [r7, #31]
 8008e0e:	e14d      	b.n	80090ac <UART_SetConfig+0x348>
 8008e10:	2304      	movs	r3, #4
 8008e12:	77fb      	strb	r3, [r7, #31]
 8008e14:	e14a      	b.n	80090ac <UART_SetConfig+0x348>
 8008e16:	2308      	movs	r3, #8
 8008e18:	77fb      	strb	r3, [r7, #31]
 8008e1a:	e147      	b.n	80090ac <UART_SetConfig+0x348>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	77fb      	strb	r3, [r7, #31]
 8008e20:	e144      	b.n	80090ac <UART_SetConfig+0x348>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a83      	ldr	r2, [pc, #524]	@ (8009034 <UART_SetConfig+0x2d0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d132      	bne.n	8008e92 <UART_SetConfig+0x12e>
 8008e2c:	4b80      	ldr	r3, [pc, #512]	@ (8009030 <UART_SetConfig+0x2cc>)
 8008e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e32:	f003 030c 	and.w	r3, r3, #12
 8008e36:	2b0c      	cmp	r3, #12
 8008e38:	d828      	bhi.n	8008e8c <UART_SetConfig+0x128>
 8008e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e40 <UART_SetConfig+0xdc>)
 8008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e40:	08008e75 	.word	0x08008e75
 8008e44:	08008e8d 	.word	0x08008e8d
 8008e48:	08008e8d 	.word	0x08008e8d
 8008e4c:	08008e8d 	.word	0x08008e8d
 8008e50:	08008e81 	.word	0x08008e81
 8008e54:	08008e8d 	.word	0x08008e8d
 8008e58:	08008e8d 	.word	0x08008e8d
 8008e5c:	08008e8d 	.word	0x08008e8d
 8008e60:	08008e7b 	.word	0x08008e7b
 8008e64:	08008e8d 	.word	0x08008e8d
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e8d 	.word	0x08008e8d
 8008e70:	08008e87 	.word	0x08008e87
 8008e74:	2300      	movs	r3, #0
 8008e76:	77fb      	strb	r3, [r7, #31]
 8008e78:	e118      	b.n	80090ac <UART_SetConfig+0x348>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	77fb      	strb	r3, [r7, #31]
 8008e7e:	e115      	b.n	80090ac <UART_SetConfig+0x348>
 8008e80:	2304      	movs	r3, #4
 8008e82:	77fb      	strb	r3, [r7, #31]
 8008e84:	e112      	b.n	80090ac <UART_SetConfig+0x348>
 8008e86:	2308      	movs	r3, #8
 8008e88:	77fb      	strb	r3, [r7, #31]
 8008e8a:	e10f      	b.n	80090ac <UART_SetConfig+0x348>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	77fb      	strb	r3, [r7, #31]
 8008e90:	e10c      	b.n	80090ac <UART_SetConfig+0x348>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a68      	ldr	r2, [pc, #416]	@ (8009038 <UART_SetConfig+0x2d4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d120      	bne.n	8008ede <UART_SetConfig+0x17a>
 8008e9c:	4b64      	ldr	r3, [pc, #400]	@ (8009030 <UART_SetConfig+0x2cc>)
 8008e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ea6:	2b30      	cmp	r3, #48	@ 0x30
 8008ea8:	d013      	beq.n	8008ed2 <UART_SetConfig+0x16e>
 8008eaa:	2b30      	cmp	r3, #48	@ 0x30
 8008eac:	d814      	bhi.n	8008ed8 <UART_SetConfig+0x174>
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	d009      	beq.n	8008ec6 <UART_SetConfig+0x162>
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d810      	bhi.n	8008ed8 <UART_SetConfig+0x174>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <UART_SetConfig+0x15c>
 8008eba:	2b10      	cmp	r3, #16
 8008ebc:	d006      	beq.n	8008ecc <UART_SetConfig+0x168>
 8008ebe:	e00b      	b.n	8008ed8 <UART_SetConfig+0x174>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	77fb      	strb	r3, [r7, #31]
 8008ec4:	e0f2      	b.n	80090ac <UART_SetConfig+0x348>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	77fb      	strb	r3, [r7, #31]
 8008eca:	e0ef      	b.n	80090ac <UART_SetConfig+0x348>
 8008ecc:	2304      	movs	r3, #4
 8008ece:	77fb      	strb	r3, [r7, #31]
 8008ed0:	e0ec      	b.n	80090ac <UART_SetConfig+0x348>
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	77fb      	strb	r3, [r7, #31]
 8008ed6:	e0e9      	b.n	80090ac <UART_SetConfig+0x348>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e0e6      	b.n	80090ac <UART_SetConfig+0x348>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a56      	ldr	r2, [pc, #344]	@ (800903c <UART_SetConfig+0x2d8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d120      	bne.n	8008f2a <UART_SetConfig+0x1c6>
 8008ee8:	4b51      	ldr	r3, [pc, #324]	@ (8009030 <UART_SetConfig+0x2cc>)
 8008eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ef4:	d013      	beq.n	8008f1e <UART_SetConfig+0x1ba>
 8008ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ef8:	d814      	bhi.n	8008f24 <UART_SetConfig+0x1c0>
 8008efa:	2b80      	cmp	r3, #128	@ 0x80
 8008efc:	d009      	beq.n	8008f12 <UART_SetConfig+0x1ae>
 8008efe:	2b80      	cmp	r3, #128	@ 0x80
 8008f00:	d810      	bhi.n	8008f24 <UART_SetConfig+0x1c0>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <UART_SetConfig+0x1a8>
 8008f06:	2b40      	cmp	r3, #64	@ 0x40
 8008f08:	d006      	beq.n	8008f18 <UART_SetConfig+0x1b4>
 8008f0a:	e00b      	b.n	8008f24 <UART_SetConfig+0x1c0>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	77fb      	strb	r3, [r7, #31]
 8008f10:	e0cc      	b.n	80090ac <UART_SetConfig+0x348>
 8008f12:	2302      	movs	r3, #2
 8008f14:	77fb      	strb	r3, [r7, #31]
 8008f16:	e0c9      	b.n	80090ac <UART_SetConfig+0x348>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	77fb      	strb	r3, [r7, #31]
 8008f1c:	e0c6      	b.n	80090ac <UART_SetConfig+0x348>
 8008f1e:	2308      	movs	r3, #8
 8008f20:	77fb      	strb	r3, [r7, #31]
 8008f22:	e0c3      	b.n	80090ac <UART_SetConfig+0x348>
 8008f24:	2310      	movs	r3, #16
 8008f26:	77fb      	strb	r3, [r7, #31]
 8008f28:	e0c0      	b.n	80090ac <UART_SetConfig+0x348>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a44      	ldr	r2, [pc, #272]	@ (8009040 <UART_SetConfig+0x2dc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d125      	bne.n	8008f80 <UART_SetConfig+0x21c>
 8008f34:	4b3e      	ldr	r3, [pc, #248]	@ (8009030 <UART_SetConfig+0x2cc>)
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f42:	d017      	beq.n	8008f74 <UART_SetConfig+0x210>
 8008f44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f48:	d817      	bhi.n	8008f7a <UART_SetConfig+0x216>
 8008f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f4e:	d00b      	beq.n	8008f68 <UART_SetConfig+0x204>
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f54:	d811      	bhi.n	8008f7a <UART_SetConfig+0x216>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <UART_SetConfig+0x1fe>
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f5e:	d006      	beq.n	8008f6e <UART_SetConfig+0x20a>
 8008f60:	e00b      	b.n	8008f7a <UART_SetConfig+0x216>
 8008f62:	2300      	movs	r3, #0
 8008f64:	77fb      	strb	r3, [r7, #31]
 8008f66:	e0a1      	b.n	80090ac <UART_SetConfig+0x348>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e09e      	b.n	80090ac <UART_SetConfig+0x348>
 8008f6e:	2304      	movs	r3, #4
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e09b      	b.n	80090ac <UART_SetConfig+0x348>
 8008f74:	2308      	movs	r3, #8
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e098      	b.n	80090ac <UART_SetConfig+0x348>
 8008f7a:	2310      	movs	r3, #16
 8008f7c:	77fb      	strb	r3, [r7, #31]
 8008f7e:	e095      	b.n	80090ac <UART_SetConfig+0x348>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a2f      	ldr	r2, [pc, #188]	@ (8009044 <UART_SetConfig+0x2e0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d125      	bne.n	8008fd6 <UART_SetConfig+0x272>
 8008f8a:	4b29      	ldr	r3, [pc, #164]	@ (8009030 <UART_SetConfig+0x2cc>)
 8008f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f98:	d017      	beq.n	8008fca <UART_SetConfig+0x266>
 8008f9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f9e:	d817      	bhi.n	8008fd0 <UART_SetConfig+0x26c>
 8008fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa4:	d00b      	beq.n	8008fbe <UART_SetConfig+0x25a>
 8008fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008faa:	d811      	bhi.n	8008fd0 <UART_SetConfig+0x26c>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <UART_SetConfig+0x254>
 8008fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fb4:	d006      	beq.n	8008fc4 <UART_SetConfig+0x260>
 8008fb6:	e00b      	b.n	8008fd0 <UART_SetConfig+0x26c>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	77fb      	strb	r3, [r7, #31]
 8008fbc:	e076      	b.n	80090ac <UART_SetConfig+0x348>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	77fb      	strb	r3, [r7, #31]
 8008fc2:	e073      	b.n	80090ac <UART_SetConfig+0x348>
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	77fb      	strb	r3, [r7, #31]
 8008fc8:	e070      	b.n	80090ac <UART_SetConfig+0x348>
 8008fca:	2308      	movs	r3, #8
 8008fcc:	77fb      	strb	r3, [r7, #31]
 8008fce:	e06d      	b.n	80090ac <UART_SetConfig+0x348>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	77fb      	strb	r3, [r7, #31]
 8008fd4:	e06a      	b.n	80090ac <UART_SetConfig+0x348>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a1b      	ldr	r2, [pc, #108]	@ (8009048 <UART_SetConfig+0x2e4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d138      	bne.n	8009052 <UART_SetConfig+0x2ee>
 8008fe0:	4b13      	ldr	r3, [pc, #76]	@ (8009030 <UART_SetConfig+0x2cc>)
 8008fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008fea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fee:	d017      	beq.n	8009020 <UART_SetConfig+0x2bc>
 8008ff0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ff4:	d82a      	bhi.n	800904c <UART_SetConfig+0x2e8>
 8008ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ffa:	d00b      	beq.n	8009014 <UART_SetConfig+0x2b0>
 8008ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009000:	d824      	bhi.n	800904c <UART_SetConfig+0x2e8>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <UART_SetConfig+0x2aa>
 8009006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800900a:	d006      	beq.n	800901a <UART_SetConfig+0x2b6>
 800900c:	e01e      	b.n	800904c <UART_SetConfig+0x2e8>
 800900e:	2300      	movs	r3, #0
 8009010:	77fb      	strb	r3, [r7, #31]
 8009012:	e04b      	b.n	80090ac <UART_SetConfig+0x348>
 8009014:	2302      	movs	r3, #2
 8009016:	77fb      	strb	r3, [r7, #31]
 8009018:	e048      	b.n	80090ac <UART_SetConfig+0x348>
 800901a:	2304      	movs	r3, #4
 800901c:	77fb      	strb	r3, [r7, #31]
 800901e:	e045      	b.n	80090ac <UART_SetConfig+0x348>
 8009020:	2308      	movs	r3, #8
 8009022:	77fb      	strb	r3, [r7, #31]
 8009024:	e042      	b.n	80090ac <UART_SetConfig+0x348>
 8009026:	bf00      	nop
 8009028:	efff69f3 	.word	0xefff69f3
 800902c:	40011000 	.word	0x40011000
 8009030:	40023800 	.word	0x40023800
 8009034:	40004400 	.word	0x40004400
 8009038:	40004800 	.word	0x40004800
 800903c:	40004c00 	.word	0x40004c00
 8009040:	40005000 	.word	0x40005000
 8009044:	40011400 	.word	0x40011400
 8009048:	40007800 	.word	0x40007800
 800904c:	2310      	movs	r3, #16
 800904e:	77fb      	strb	r3, [r7, #31]
 8009050:	e02c      	b.n	80090ac <UART_SetConfig+0x348>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a72      	ldr	r2, [pc, #456]	@ (8009220 <UART_SetConfig+0x4bc>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d125      	bne.n	80090a8 <UART_SetConfig+0x344>
 800905c:	4b71      	ldr	r3, [pc, #452]	@ (8009224 <UART_SetConfig+0x4c0>)
 800905e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009062:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009066:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800906a:	d017      	beq.n	800909c <UART_SetConfig+0x338>
 800906c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009070:	d817      	bhi.n	80090a2 <UART_SetConfig+0x33e>
 8009072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009076:	d00b      	beq.n	8009090 <UART_SetConfig+0x32c>
 8009078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800907c:	d811      	bhi.n	80090a2 <UART_SetConfig+0x33e>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <UART_SetConfig+0x326>
 8009082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009086:	d006      	beq.n	8009096 <UART_SetConfig+0x332>
 8009088:	e00b      	b.n	80090a2 <UART_SetConfig+0x33e>
 800908a:	2300      	movs	r3, #0
 800908c:	77fb      	strb	r3, [r7, #31]
 800908e:	e00d      	b.n	80090ac <UART_SetConfig+0x348>
 8009090:	2302      	movs	r3, #2
 8009092:	77fb      	strb	r3, [r7, #31]
 8009094:	e00a      	b.n	80090ac <UART_SetConfig+0x348>
 8009096:	2304      	movs	r3, #4
 8009098:	77fb      	strb	r3, [r7, #31]
 800909a:	e007      	b.n	80090ac <UART_SetConfig+0x348>
 800909c:	2308      	movs	r3, #8
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e004      	b.n	80090ac <UART_SetConfig+0x348>
 80090a2:	2310      	movs	r3, #16
 80090a4:	77fb      	strb	r3, [r7, #31]
 80090a6:	e001      	b.n	80090ac <UART_SetConfig+0x348>
 80090a8:	2310      	movs	r3, #16
 80090aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090b4:	d15b      	bne.n	800916e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80090b6:	7ffb      	ldrb	r3, [r7, #31]
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d828      	bhi.n	800910e <UART_SetConfig+0x3aa>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <UART_SetConfig+0x360>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090e9 	.word	0x080090e9
 80090c8:	080090f1 	.word	0x080090f1
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	0800910f 	.word	0x0800910f
 80090d4:	080090ff 	.word	0x080090ff
 80090d8:	0800910f 	.word	0x0800910f
 80090dc:	0800910f 	.word	0x0800910f
 80090e0:	0800910f 	.word	0x0800910f
 80090e4:	08009107 	.word	0x08009107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e8:	f7fd f866 	bl	80061b8 <HAL_RCC_GetPCLK1Freq>
 80090ec:	61b8      	str	r0, [r7, #24]
        break;
 80090ee:	e013      	b.n	8009118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f0:	f7fd f876 	bl	80061e0 <HAL_RCC_GetPCLK2Freq>
 80090f4:	61b8      	str	r0, [r7, #24]
        break;
 80090f6:	e00f      	b.n	8009118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090f8:	4b4b      	ldr	r3, [pc, #300]	@ (8009228 <UART_SetConfig+0x4c4>)
 80090fa:	61bb      	str	r3, [r7, #24]
        break;
 80090fc:	e00c      	b.n	8009118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090fe:	f7fc ff89 	bl	8006014 <HAL_RCC_GetSysClockFreq>
 8009102:	61b8      	str	r0, [r7, #24]
        break;
 8009104:	e008      	b.n	8009118 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800910a:	61bb      	str	r3, [r7, #24]
        break;
 800910c:	e004      	b.n	8009118 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	77bb      	strb	r3, [r7, #30]
        break;
 8009116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d074      	beq.n	8009208 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	005a      	lsls	r2, r3, #1
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	441a      	add	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2b0f      	cmp	r3, #15
 8009138:	d916      	bls.n	8009168 <UART_SetConfig+0x404>
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009140:	d212      	bcs.n	8009168 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	b29b      	uxth	r3, r3
 8009146:	f023 030f 	bic.w	r3, r3, #15
 800914a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	085b      	lsrs	r3, r3, #1
 8009150:	b29b      	uxth	r3, r3
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	b29a      	uxth	r2, r3
 8009158:	89fb      	ldrh	r3, [r7, #14]
 800915a:	4313      	orrs	r3, r2
 800915c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	89fa      	ldrh	r2, [r7, #14]
 8009164:	60da      	str	r2, [r3, #12]
 8009166:	e04f      	b.n	8009208 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	77bb      	strb	r3, [r7, #30]
 800916c:	e04c      	b.n	8009208 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800916e:	7ffb      	ldrb	r3, [r7, #31]
 8009170:	2b08      	cmp	r3, #8
 8009172:	d828      	bhi.n	80091c6 <UART_SetConfig+0x462>
 8009174:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <UART_SetConfig+0x418>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091a9 	.word	0x080091a9
 8009184:	080091b1 	.word	0x080091b1
 8009188:	080091c7 	.word	0x080091c7
 800918c:	080091b7 	.word	0x080091b7
 8009190:	080091c7 	.word	0x080091c7
 8009194:	080091c7 	.word	0x080091c7
 8009198:	080091c7 	.word	0x080091c7
 800919c:	080091bf 	.word	0x080091bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a0:	f7fd f80a 	bl	80061b8 <HAL_RCC_GetPCLK1Freq>
 80091a4:	61b8      	str	r0, [r7, #24]
        break;
 80091a6:	e013      	b.n	80091d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a8:	f7fd f81a 	bl	80061e0 <HAL_RCC_GetPCLK2Freq>
 80091ac:	61b8      	str	r0, [r7, #24]
        break;
 80091ae:	e00f      	b.n	80091d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009228 <UART_SetConfig+0x4c4>)
 80091b2:	61bb      	str	r3, [r7, #24]
        break;
 80091b4:	e00c      	b.n	80091d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091b6:	f7fc ff2d 	bl	8006014 <HAL_RCC_GetSysClockFreq>
 80091ba:	61b8      	str	r0, [r7, #24]
        break;
 80091bc:	e008      	b.n	80091d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091c2:	61bb      	str	r3, [r7, #24]
        break;
 80091c4:	e004      	b.n	80091d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	77bb      	strb	r3, [r7, #30]
        break;
 80091ce:	bf00      	nop
    }

    if (pclk != 0U)
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d018      	beq.n	8009208 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	085a      	lsrs	r2, r3, #1
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	441a      	add	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b0f      	cmp	r3, #15
 80091ee:	d909      	bls.n	8009204 <UART_SetConfig+0x4a0>
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091f6:	d205      	bcs.n	8009204 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60da      	str	r2, [r3, #12]
 8009202:	e001      	b.n	8009208 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009214:	7fbb      	ldrb	r3, [r7, #30]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3720      	adds	r7, #32
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	40007c00 	.word	0x40007c00
 8009224:	40023800 	.word	0x40023800
 8009228:	00f42400 	.word	0x00f42400

0800922c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00a      	beq.n	800929a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c0:	f003 0310 	and.w	r3, r3, #16
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01a      	beq.n	8009342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800932a:	d10a      	bne.n	8009342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	605a      	str	r2, [r3, #4]
  }
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08c      	sub	sp, #48	@ 0x30
 8009374:	af02      	add	r7, sp, #8
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009380:	f7fb f886 	bl	8004490 <HAL_GetTick>
 8009384:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0308 	and.w	r3, r3, #8
 8009390:	2b08      	cmp	r3, #8
 8009392:	d12e      	bne.n	80093f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	2200      	movs	r2, #0
 800939e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f83b 	bl	800941e <UART_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d021      	beq.n	80093f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093c2:	623b      	str	r3, [r7, #32]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	69b9      	ldr	r1, [r7, #24]
 80093d2:	69fa      	ldr	r2, [r7, #28]
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	617b      	str	r3, [r7, #20]
   return(result);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2220      	movs	r2, #32
 80093e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e011      	b.n	8009416 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3728      	adds	r7, #40	@ 0x28
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	4613      	mov	r3, r2
 800942c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800942e:	e04f      	b.n	80094d0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009436:	d04b      	beq.n	80094d0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009438:	f7fb f82a 	bl	8004490 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	429a      	cmp	r2, r3
 8009446:	d302      	bcc.n	800944e <UART_WaitOnFlagUntilTimeout+0x30>
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e04e      	b.n	80094f0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d037      	beq.n	80094d0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b80      	cmp	r3, #128	@ 0x80
 8009464:	d034      	beq.n	80094d0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b40      	cmp	r3, #64	@ 0x40
 800946a:	d031      	beq.n	80094d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f003 0308 	and.w	r3, r3, #8
 8009476:	2b08      	cmp	r3, #8
 8009478:	d110      	bne.n	800949c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2208      	movs	r2, #8
 8009480:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f838 	bl	80094f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2208      	movs	r2, #8
 800948c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e029      	b.n	80094f0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094aa:	d111      	bne.n	80094d0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 f81e 	bl	80094f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2220      	movs	r2, #32
 80094c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e00f      	b.n	80094f0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69da      	ldr	r2, [r3, #28]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	4013      	ands	r3, r2
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	429a      	cmp	r2, r3
 80094de:	bf0c      	ite	eq
 80094e0:	2301      	moveq	r3, #1
 80094e2:	2300      	movne	r3, #0
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d0a0      	beq.n	8009430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b095      	sub	sp, #84	@ 0x54
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800951e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009520:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e6      	bne.n	8009500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	61fb      	str	r3, [r7, #28]
   return(result);
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	f023 0301 	bic.w	r3, r3, #1
 8009548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3308      	adds	r3, #8
 8009550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009554:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e5      	bne.n	8009532 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800956a:	2b01      	cmp	r3, #1
 800956c:	d118      	bne.n	80095a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	60bb      	str	r3, [r7, #8]
   return(result);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f023 0310 	bic.w	r3, r3, #16
 8009582:	647b      	str	r3, [r7, #68]	@ 0x44
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6979      	ldr	r1, [r7, #20]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	613b      	str	r3, [r7, #16]
   return(result);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e6      	bne.n	800956e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80095b4:	bf00      	nop
 80095b6:	3754      	adds	r7, #84	@ 0x54
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d121      	bne.n	8009616 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	4b27      	ldr	r3, [pc, #156]	@ (8009674 <FMC_SDRAM_Init+0xb4>)
 80095d8:	4013      	ands	r3, r2
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	6851      	ldr	r1, [r2, #4]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	6892      	ldr	r2, [r2, #8]
 80095e2:	4311      	orrs	r1, r2
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	68d2      	ldr	r2, [r2, #12]
 80095e8:	4311      	orrs	r1, r2
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	6912      	ldr	r2, [r2, #16]
 80095ee:	4311      	orrs	r1, r2
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	6952      	ldr	r2, [r2, #20]
 80095f4:	4311      	orrs	r1, r2
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	6992      	ldr	r2, [r2, #24]
 80095fa:	4311      	orrs	r1, r2
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	69d2      	ldr	r2, [r2, #28]
 8009600:	4311      	orrs	r1, r2
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	6a12      	ldr	r2, [r2, #32]
 8009606:	4311      	orrs	r1, r2
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800960c:	430a      	orrs	r2, r1
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e026      	b.n	8009664 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	69d9      	ldr	r1, [r3, #28]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	4319      	orrs	r1, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962c:	430b      	orrs	r3, r1
 800962e:	431a      	orrs	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	4b0e      	ldr	r3, [pc, #56]	@ (8009674 <FMC_SDRAM_Init+0xb4>)
 800963a:	4013      	ands	r3, r2
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	6851      	ldr	r1, [r2, #4]
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	6892      	ldr	r2, [r2, #8]
 8009644:	4311      	orrs	r1, r2
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	68d2      	ldr	r2, [r2, #12]
 800964a:	4311      	orrs	r1, r2
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	6912      	ldr	r2, [r2, #16]
 8009650:	4311      	orrs	r1, r2
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	6952      	ldr	r2, [r2, #20]
 8009656:	4311      	orrs	r1, r2
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	6992      	ldr	r2, [r2, #24]
 800965c:	430a      	orrs	r2, r1
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	ffff8000 	.word	0xffff8000

08009678 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d128      	bne.n	80096dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	1e59      	subs	r1, r3, #1
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	3b01      	subs	r3, #1
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	4319      	orrs	r1, r3
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	4319      	orrs	r1, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	031b      	lsls	r3, r3, #12
 80096b4:	4319      	orrs	r1, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	041b      	lsls	r3, r3, #16
 80096be:	4319      	orrs	r1, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	051b      	lsls	r3, r3, #20
 80096c8:	4319      	orrs	r1, r3
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	430b      	orrs	r3, r1
 80096d4:	431a      	orrs	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	609a      	str	r2, [r3, #8]
 80096da:	e02d      	b.n	8009738 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	4b19      	ldr	r3, [pc, #100]	@ (8009748 <FMC_SDRAM_Timing_Init+0xd0>)
 80096e2:	4013      	ands	r3, r2
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	68d2      	ldr	r2, [r2, #12]
 80096e8:	3a01      	subs	r2, #1
 80096ea:	0311      	lsls	r1, r2, #12
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	6952      	ldr	r2, [r2, #20]
 80096f0:	3a01      	subs	r2, #1
 80096f2:	0512      	lsls	r2, r2, #20
 80096f4:	430a      	orrs	r2, r1
 80096f6:	431a      	orrs	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	1e59      	subs	r1, r3, #1
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	3b01      	subs	r3, #1
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	4319      	orrs	r1, r3
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	3b01      	subs	r3, #1
 800971a:	021b      	lsls	r3, r3, #8
 800971c:	4319      	orrs	r1, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	3b01      	subs	r3, #1
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	4319      	orrs	r1, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	3b01      	subs	r3, #1
 800972e:	061b      	lsls	r3, r3, #24
 8009730:	430b      	orrs	r3, r1
 8009732:	431a      	orrs	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	ff0f0fff 	.word	0xff0f0fff

0800974c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	4b0c      	ldr	r3, [pc, #48]	@ (8009790 <FMC_SDRAM_SendCommand+0x44>)
 800975e:	4013      	ands	r3, r2
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	6811      	ldr	r1, [r2, #0]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	6852      	ldr	r2, [r2, #4]
 8009768:	4311      	orrs	r1, r2
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	6892      	ldr	r2, [r2, #8]
 800976e:	3a01      	subs	r2, #1
 8009770:	0152      	lsls	r2, r2, #5
 8009772:	4311      	orrs	r1, r2
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	68d2      	ldr	r2, [r2, #12]
 8009778:	0252      	lsls	r2, r2, #9
 800977a:	430a      	orrs	r2, r1
 800977c:	431a      	orrs	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	ffc00000 	.word	0xffc00000

08009794 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	695a      	ldr	r2, [r3, #20]
 80097a2:	4b07      	ldr	r3, [pc, #28]	@ (80097c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	0052      	lsls	r2, r2, #1
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	ffffc001 	.word	0xffffc001

080097c4 <memset>:
 80097c4:	4402      	add	r2, r0
 80097c6:	4603      	mov	r3, r0
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d100      	bne.n	80097ce <memset+0xa>
 80097cc:	4770      	bx	lr
 80097ce:	f803 1b01 	strb.w	r1, [r3], #1
 80097d2:	e7f9      	b.n	80097c8 <memset+0x4>

080097d4 <__libc_init_array>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4d0d      	ldr	r5, [pc, #52]	@ (800980c <__libc_init_array+0x38>)
 80097d8:	4c0d      	ldr	r4, [pc, #52]	@ (8009810 <__libc_init_array+0x3c>)
 80097da:	1b64      	subs	r4, r4, r5
 80097dc:	10a4      	asrs	r4, r4, #2
 80097de:	2600      	movs	r6, #0
 80097e0:	42a6      	cmp	r6, r4
 80097e2:	d109      	bne.n	80097f8 <__libc_init_array+0x24>
 80097e4:	4d0b      	ldr	r5, [pc, #44]	@ (8009814 <__libc_init_array+0x40>)
 80097e6:	4c0c      	ldr	r4, [pc, #48]	@ (8009818 <__libc_init_array+0x44>)
 80097e8:	f000 f818 	bl	800981c <_init>
 80097ec:	1b64      	subs	r4, r4, r5
 80097ee:	10a4      	asrs	r4, r4, #2
 80097f0:	2600      	movs	r6, #0
 80097f2:	42a6      	cmp	r6, r4
 80097f4:	d105      	bne.n	8009802 <__libc_init_array+0x2e>
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fc:	4798      	blx	r3
 80097fe:	3601      	adds	r6, #1
 8009800:	e7ee      	b.n	80097e0 <__libc_init_array+0xc>
 8009802:	f855 3b04 	ldr.w	r3, [r5], #4
 8009806:	4798      	blx	r3
 8009808:	3601      	adds	r6, #1
 800980a:	e7f2      	b.n	80097f2 <__libc_init_array+0x1e>
 800980c:	0800b314 	.word	0x0800b314
 8009810:	0800b314 	.word	0x0800b314
 8009814:	0800b314 	.word	0x0800b314
 8009818:	0800b318 	.word	0x0800b318

0800981c <_init>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr

08009828 <_fini>:
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982a:	bf00      	nop
 800982c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982e:	bc08      	pop	{r3}
 8009830:	469e      	mov	lr, r3
 8009832:	4770      	bx	lr
