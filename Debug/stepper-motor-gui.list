
stepper-motor-gui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024674  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd0  08024844  08024844  00025844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08026414  08026414  00027414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080265bc  080265bc  000275bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000010  080265d4  080265d4  000275d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080265e4  080265e4  0006d4a8  2**0
                  CONTENTS
  7 .ARM          00000008  080265e4  080265e4  000275e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080265ec  080265ec  0006d4a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080265ec  080265ec  000275ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fini_array   00000008  08026600  08026600  00027600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         00000280  20000000  08026608  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  20000280  08026888  00028280  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  20000380  08026988  00028380  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          000026ac  20000480  08026a88  0006e480  2**2
                  ALLOC
 15 ._user_heap_stack 00001404  20002b2c  08026a88  0006db2c  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  0006d4a8  2**0
                  CONTENTS, READONLY
 17 BufferSection 0007f800  c0000000  c0000000  0006e000  2**2
                  ALLOC
 18 ExtFlashSection 00044a20  08026a88  08026a88  00028a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .debug_info   00082466  00000000  00000000  0006d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0000fd27  00000000  00000000  000ef93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003790  00000000  00000000  000ff668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00002974  00000000  00000000  00102df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000337a9  00000000  00000000  0010576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00041f5d  00000000  00000000  00138f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    00123097  00000000  00000000  0017ae72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0029df09  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000f1b8  00000000  00000000  0029dfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 0000006a  00000000  00000000  002ad184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000480 	.word	0x20000480
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802482c 	.word	0x0802482c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000484 	.word	0x20000484
 800020c:	0802482c 	.word	0x0802482c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_CRC_Init+0x3c>)
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <MX_CRC_Init+0x40>)
 80005a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_CRC_Init+0x3c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <MX_CRC_Init+0x3c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_CRC_Init+0x3c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <MX_CRC_Init+0x3c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_CRC_Init+0x3c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <MX_CRC_Init+0x3c>)
 80005ca:	f004 fc3b 	bl	8004e44 <HAL_CRC_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005d4:	f000 fe89 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000049c 	.word	0x2000049c
 80005e0:	40023000 	.word	0x40023000

080005e4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <HAL_CRC_MspInit+0x38>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10b      	bne.n	800060e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <HAL_CRC_MspInit+0x3c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a09      	ldr	r2, [pc, #36]	@ (8000620 <HAL_CRC_MspInit+0x3c>)
 80005fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <HAL_CRC_MspInit+0x3c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023000 	.word	0x40023000
 8000620:	40023800 	.word	0x40023800

08000624 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 800062a:	4a16      	ldr	r2, [pc, #88]	@ (8000684 <MX_DMA2D_Init+0x60>)
 800062c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 8000654:	2200      	movs	r2, #0
 8000656:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000658:	4809      	ldr	r0, [pc, #36]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 800065a:	f004 fce5 	bl	8005028 <HAL_DMA2D_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000664:	f000 fe41 	bl	80012ea <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000668:	2101      	movs	r1, #1
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_DMA2D_Init+0x5c>)
 800066c:	f004 fe36 	bl	80052dc <HAL_DMA2D_ConfigLayer>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000676:	f000 fe38 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200004c0 	.word	0x200004c0
 8000684:	4002b000 	.word	0x4002b000

08000688 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <HAL_DMA2D_MspInit+0x44>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d113      	bne.n	80006c2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <HAL_DMA2D_MspInit+0x48>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <HAL_DMA2D_MspInit+0x48>)
 80006a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <HAL_DMA2D_MspInit+0x48>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	205a      	movs	r0, #90	@ 0x5a
 80006b8:	f004 fb15 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80006bc:	205a      	movs	r0, #90	@ 0x5a
 80006be:	f004 fb2e 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	4002b000 	.word	0x4002b000
 80006d0:	40023800 	.word	0x40023800

080006d4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006ec:	4b4c      	ldr	r3, [pc, #304]	@ (8000820 <MX_FMC_Init+0x14c>)
 80006ee:	4a4d      	ldr	r2, [pc, #308]	@ (8000824 <MX_FMC_Init+0x150>)
 80006f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80006f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000820 <MX_FMC_Init+0x14c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80006f8:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <MX_FMC_Init+0x14c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80006fe:	4b48      	ldr	r3, [pc, #288]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000700:	2204      	movs	r2, #4
 8000702:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000704:	4b46      	ldr	r3, [pc, #280]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000706:	2210      	movs	r2, #16
 8000708:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800070a:	4b45      	ldr	r3, [pc, #276]	@ (8000820 <MX_FMC_Init+0x14c>)
 800070c:	2240      	movs	r2, #64	@ 0x40
 800070e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000710:	4b43      	ldr	r3, [pc, #268]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000712:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000716:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000718:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <MX_FMC_Init+0x14c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800071e:	4b40      	ldr	r3, [pc, #256]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000720:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000724:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000726:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000728:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800072e:	4b3c      	ldr	r3, [pc, #240]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000744:	2303      	movs	r3, #3
 8000746:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4832      	ldr	r0, [pc, #200]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000756:	f007 fce7 	bl	8008128 <HAL_SDRAM_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000760:	f000 fdc3 	bl	80012ea <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]

      /* Step 1: Configure a clock configuration enable command */
      Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000768:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <MX_FMC_Init+0x154>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800076e:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <MX_FMC_Init+0x154>)
 8000770:	2210      	movs	r2, #16
 8000772:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 1;
 8000774:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <MX_FMC_Init+0x154>)
 8000776:	2201      	movs	r2, #1
 8000778:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = 0;
 800077a:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <MX_FMC_Init+0x154>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000784:	4928      	ldr	r1, [pc, #160]	@ (8000828 <MX_FMC_Init+0x154>)
 8000786:	4826      	ldr	r0, [pc, #152]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000788:	f007 fd02 	bl	8008190 <HAL_SDRAM_SendCommand>

      /* Step 2: Insert 100 us minimum delay */
      /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
      HAL_Delay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f004 f9ab 	bl	8004ae8 <HAL_Delay>

      /* Step 3: Configure a PALL (precharge all) command */
      Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_FMC_Init+0x154>)
 8000794:	2202      	movs	r2, #2
 8000796:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <MX_FMC_Init+0x154>)
 800079a:	2210      	movs	r2, #16
 800079c:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 1;
 800079e:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_FMC_Init+0x154>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = 0;
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_FMC_Init+0x154>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80007aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ae:	491e      	ldr	r1, [pc, #120]	@ (8000828 <MX_FMC_Init+0x154>)
 80007b0:	481b      	ldr	r0, [pc, #108]	@ (8000820 <MX_FMC_Init+0x14c>)
 80007b2:	f007 fced 	bl	8008190 <HAL_SDRAM_SendCommand>

      /* Step 4: Configure an Auto Refresh command */
      Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_FMC_Init+0x154>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_FMC_Init+0x154>)
 80007be:	2210      	movs	r2, #16
 80007c0:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 8;
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_FMC_Init+0x154>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = 0;
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_FMC_Init+0x154>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d2:	4915      	ldr	r1, [pc, #84]	@ (8000828 <MX_FMC_Init+0x154>)
 80007d4:	4812      	ldr	r0, [pc, #72]	@ (8000820 <MX_FMC_Init+0x14c>)
 80007d6:	f007 fcdb 	bl	8008190 <HAL_SDRAM_SendCommand>

      /* Step 5: Program the external memory mode register */
      tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80007da:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80007de:	603b      	str	r3, [r7, #0]
               SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
               SDRAM_MODEREG_CAS_LATENCY_3            | \
               SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
               SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

      Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_FMC_Init+0x154>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	601a      	str	r2, [r3, #0]
      Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_FMC_Init+0x154>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	605a      	str	r2, [r3, #4]
      Command.AutoRefreshNumber      = 1;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_FMC_Init+0x154>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	609a      	str	r2, [r3, #8]
      Command.ModeRegisterDefinition = tmpmrd;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <MX_FMC_Init+0x154>)
 80007f6:	60d3      	str	r3, [r2, #12]

      /* Send the command */
      HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80007f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007fc:	490a      	ldr	r1, [pc, #40]	@ (8000828 <MX_FMC_Init+0x154>)
 80007fe:	4808      	ldr	r0, [pc, #32]	@ (8000820 <MX_FMC_Init+0x14c>)
 8000800:	f007 fcc6 	bl	8008190 <HAL_SDRAM_SendCommand>

      /* Step 6: Set the refresh rate counter */
      /* Set the device refresh rate */
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000804:	f240 712b 	movw	r1, #1835	@ 0x72b
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_FMC_Init+0x14c>)
 800080a:	f007 fcf6 	bl	80081fa <HAL_SDRAM_ProgramRefreshRate>

      //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
      FMC_Bank1->BTCR[0] = 0x000030D2;
 800080e:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 8000812:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000816:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000510 	.word	0x20000510
 8000824:	a0000140 	.word	0xa0000140
 8000828:	20000500 	.word	0x20000500

0800082c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000840:	4b3a      	ldr	r3, [pc, #232]	@ (800092c <HAL_FMC_MspInit+0x100>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d16d      	bne.n	8000924 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000848:	4b38      	ldr	r3, [pc, #224]	@ (800092c <HAL_FMC_MspInit+0x100>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800084e:	4b38      	ldr	r3, [pc, #224]	@ (8000930 <HAL_FMC_MspInit+0x104>)
 8000850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000852:	4a37      	ldr	r2, [pc, #220]	@ (8000930 <HAL_FMC_MspInit+0x104>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6393      	str	r3, [r2, #56]	@ 0x38
 800085a:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <HAL_FMC_MspInit+0x104>)
 800085c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000866:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800086a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000878:	230c      	movs	r3, #12
 800087a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	482c      	ldr	r0, [pc, #176]	@ (8000934 <HAL_FMC_MspInit+0x108>)
 8000882:	f004 fdbd 	bl	8005400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000886:	f248 1333 	movw	r3, #33075	@ 0x8133
 800088a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000898:	230c      	movs	r3, #12
 800089a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <HAL_FMC_MspInit+0x10c>)
 80008a2:	f004 fdad 	bl	8005400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80008a6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80008aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	481e      	ldr	r0, [pc, #120]	@ (800093c <HAL_FMC_MspInit+0x110>)
 80008c2:	f004 fd9d 	bl	8005400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008c6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80008ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d8:	230c      	movs	r3, #12
 80008da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4817      	ldr	r0, [pc, #92]	@ (8000940 <HAL_FMC_MspInit+0x114>)
 80008e2:	f004 fd8d 	bl	8005400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80008e6:	2328      	movs	r3, #40	@ 0x28
 80008e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4811      	ldr	r0, [pc, #68]	@ (8000944 <HAL_FMC_MspInit+0x118>)
 8000900:	f004 fd7e 	bl	8005400 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000904:	2308      	movs	r3, #8
 8000906:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000914:	230c      	movs	r3, #12
 8000916:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	480a      	ldr	r0, [pc, #40]	@ (8000948 <HAL_FMC_MspInit+0x11c>)
 800091e:	f004 fd6f 	bl	8005400 <HAL_GPIO_Init>
 8000922:	e000      	b.n	8000926 <HAL_FMC_MspInit+0xfa>
    return;
 8000924:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000544 	.word	0x20000544
 8000930:	40023800 	.word	0x40023800
 8000934:	40021000 	.word	0x40021000
 8000938:	40021800 	.word	0x40021800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40021400 	.word	0x40021400
 8000944:	40021c00 	.word	0x40021c00
 8000948:	40020800 	.word	0x40020800

0800094c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000954:	f7ff ff6a 	bl	800082c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b090      	sub	sp, #64	@ 0x40
 8000964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	4b7d      	ldr	r3, [pc, #500]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a7c      	ldr	r2, [pc, #496]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b7a      	ldr	r3, [pc, #488]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800098c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b77      	ldr	r3, [pc, #476]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a76      	ldr	r2, [pc, #472]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b74      	ldr	r3, [pc, #464]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80009a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b71      	ldr	r3, [pc, #452]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a70      	ldr	r2, [pc, #448]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b6e      	ldr	r3, [pc, #440]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b6b      	ldr	r3, [pc, #428]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a6a      	ldr	r2, [pc, #424]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b68      	ldr	r3, [pc, #416]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009d6:	4b65      	ldr	r3, [pc, #404]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a64      	ldr	r2, [pc, #400]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b62      	ldr	r3, [pc, #392]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	4b5f      	ldr	r3, [pc, #380]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a5e      	ldr	r2, [pc, #376]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b5c      	ldr	r3, [pc, #368]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a06:	4b59      	ldr	r3, [pc, #356]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a58      	ldr	r2, [pc, #352]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b56      	ldr	r3, [pc, #344]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a1e:	4b53      	ldr	r3, [pc, #332]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a52      	ldr	r2, [pc, #328]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b50      	ldr	r3, [pc, #320]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a36:	4b4d      	ldr	r3, [pc, #308]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a4c      	ldr	r2, [pc, #304]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b4a      	ldr	r3, [pc, #296]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0320 	and.w	r3, r3, #32
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	4b47      	ldr	r3, [pc, #284]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a46      	ldr	r2, [pc, #280]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b44      	ldr	r3, [pc, #272]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b41      	ldr	r3, [pc, #260]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a40      	ldr	r2, [pc, #256]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b3e      	ldr	r3, [pc, #248]	@ (8000b6c <MX_GPIO_Init+0x20c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f241 0104 	movw	r1, #4100	@ 0x1004
 8000a84:	483a      	ldr	r0, [pc, #232]	@ (8000b70 <MX_GPIO_Init+0x210>)
 8000a86:	f004 ff8b 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a90:	4837      	ldr	r0, [pc, #220]	@ (8000b70 <MX_GPIO_Init+0x210>)
 8000a92:	f004 ff85 	bl	80059a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2108      	movs	r1, #8
 8000a9a:	4836      	ldr	r0, [pc, #216]	@ (8000b74 <MX_GPIO_Init+0x214>)
 8000a9c:	f004 ff80 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa6:	4834      	ldr	r0, [pc, #208]	@ (8000b78 <MX_GPIO_Init+0x218>)
 8000aa8:	f004 ff7a 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aac:	2304      	movs	r3, #4
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	482b      	ldr	r0, [pc, #172]	@ (8000b70 <MX_GPIO_Init+0x210>)
 8000ac4:	f004 fc9c 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000adc:	4619      	mov	r1, r3
 8000ade:	4825      	ldr	r0, [pc, #148]	@ (8000b74 <MX_GPIO_Init+0x214>)
 8000ae0:	f004 fc8e 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	481c      	ldr	r0, [pc, #112]	@ (8000b70 <MX_GPIO_Init+0x210>)
 8000afe:	f004 fc7f 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b10:	2301      	movs	r3, #1
 8000b12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	@ (8000b78 <MX_GPIO_Init+0x218>)
 8000b1c:	f004 fc70 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <MX_GPIO_Init+0x210>)
 8000b36:	f004 fc63 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b3a:	23c0      	movs	r3, #192	@ 0xc0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b3e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <MX_GPIO_Init+0x21c>)
 8000b50:	f004 fc56 	bl	8005400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2017      	movs	r0, #23
 8000b5a:	f004 f8c4 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b5e:	2017      	movs	r0, #23
 8000b60:	f004 f8dd 	bl	8004d1e <HAL_NVIC_EnableIRQ>

}
 8000b64:	bf00      	nop
 8000b66:	3740      	adds	r7, #64	@ 0x40
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40022000 	.word	0x40022000
 8000b74:	40022800 	.word	0x40022800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40021800 	.word	0x40021800

08000b80 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf8 <MX_I2C3_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <MX_I2C3_Init+0x7c>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bba:	480e      	ldr	r0, [pc, #56]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000bbc:	f004 ff2e 	bl	8005a1c <HAL_I2C_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bc6:	f000 fb90 	bl	80012ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000bce:	f005 fcef 	bl	80065b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bd8:	f000 fb87 	bl	80012ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_I2C3_Init+0x74>)
 8000be0:	f005 fd31 	bl	8006646 <HAL_I2CEx_ConfigDigitalFilter>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bea:	f000 fb7e 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000548 	.word	0x20000548
 8000bf8:	40005c00 	.word	0x40005c00
 8000bfc:	20404768 	.word	0x20404768

08000c00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0aa      	sub	sp, #168	@ 0xa8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	2284      	movs	r2, #132	@ 0x84
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f022 fff8 	bl	8023c16 <memset>
  if(i2cHandle->Instance==I2C3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <HAL_I2C_MspInit+0xb4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d13c      	bne.n	8000caa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 fe82 	bl	8007948 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c4a:	f000 fb4e 	bl	80012ea <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_I2C_MspInit+0xb8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_I2C_MspInit+0xb8>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <HAL_I2C_MspInit+0xb8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c66:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c80:	2304      	movs	r3, #4
 8000c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c86:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480b      	ldr	r0, [pc, #44]	@ (8000cbc <HAL_I2C_MspInit+0xbc>)
 8000c8e:	f004 fbb7 	bl	8005400 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_I2C_MspInit+0xb8>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_I2C_MspInit+0xb8>)
 8000c98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_I2C_MspInit+0xb8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	37a8      	adds	r7, #168	@ 0xa8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40005c00 	.word	0x40005c00
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40021c00 	.word	0x40021c00

08000cc0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_I2C_MspDeInit+0x38>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10e      	bne.n	8000cf0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_I2C_MspDeInit+0x3c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a09      	ldr	r2, [pc, #36]	@ (8000cfc <HAL_I2C_MspDeInit+0x3c>)
 8000cd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8000cde:	2180      	movs	r1, #128	@ 0x80
 8000ce0:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <HAL_I2C_MspDeInit+0x40>)
 8000ce2:	f004 fd39 	bl	8005758 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8000ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <HAL_I2C_MspDeInit+0x40>)
 8000cec:	f004 fd34 	bl	8005758 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40005c00 	.word	0x40005c00
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40021c00 	.word	0x40021c00

08000d04 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	@ 0x38
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2234      	movs	r2, #52	@ 0x34
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f022 ff80 	bl	8023c16 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d16:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d18:	4a3a      	ldr	r2, [pc, #232]	@ (8000e04 <MX_LTDC_Init+0x100>)
 8000d1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d1c:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d22:	4b37      	ldr	r3, [pc, #220]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d28:	4b35      	ldr	r3, [pc, #212]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d2e:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000d34:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d36:	2228      	movs	r2, #40	@ 0x28
 8000d38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d3c:	2209      	movs	r2, #9
 8000d3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000d40:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d42:	2235      	movs	r2, #53	@ 0x35
 8000d44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d48:	220b      	movs	r2, #11
 8000d4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d4e:	f240 2215 	movw	r2, #533	@ 0x215
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d56:	f240 121b 	movw	r2, #283	@ 0x11b
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000d5c:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d5e:	f240 2235 	movw	r2, #565	@ 0x235
 8000d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d66:	f240 121d 	movw	r2, #285	@ 0x11d
 8000d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d74:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d84:	481e      	ldr	r0, [pc, #120]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000d86:	f005 fcab 	bl	80066e0 <HAL_LTDC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000d90:	f000 faab 	bl	80012ea <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000d98:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d9c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000da2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000da6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000da8:	2302      	movs	r3, #2
 8000daa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000dac:	23ff      	movs	r3, #255	@ 0xff
 8000dae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000db4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000dba:	2305      	movs	r3, #5
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000dbe:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000dc4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000dca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_LTDC_Init+0xfc>)
 8000dea:	f005 fe01 	bl	80069f0 <HAL_LTDC_ConfigLayer>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000df4:	f000 fa79 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3738      	adds	r7, #56	@ 0x38
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000059c 	.word	0x2000059c
 8000e04:	40016800 	.word	0x40016800

08000e08 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	2284      	movs	r2, #132	@ 0x84
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f022 fef4 	bl	8023c16 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6f      	ldr	r2, [pc, #444]	@ (8000ff0 <HAL_LTDC_MspInit+0x1e8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	f040 80d6 	bne.w	8000fe6 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e3e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e44:	2305      	movs	r3, #5
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fd72 	bl	8007948 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8000e6a:	f000 fa3e 	bl	80012ea <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e6e:	4b61      	ldr	r3, [pc, #388]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	4a60      	ldr	r2, [pc, #384]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000e74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b58      	ldr	r3, [pc, #352]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e9e:	4b55      	ldr	r3, [pc, #340]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a54      	ldr	r2, [pc, #336]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ea4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b52      	ldr	r3, [pc, #328]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a4e      	ldr	r2, [pc, #312]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ebc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ece:	4b49      	ldr	r3, [pc, #292]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a48      	ldr	r2, [pc, #288]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b46      	ldr	r3, [pc, #280]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ee6:	4b43      	ldr	r3, [pc, #268]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a42      	ldr	r2, [pc, #264]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b40      	ldr	r3, [pc, #256]	@ (8000ff4 <HAL_LTDC_MspInit+0x1ec>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000efe:	2310      	movs	r3, #16
 8000f00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f16:	230e      	movs	r3, #14
 8000f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4835      	ldr	r0, [pc, #212]	@ (8000ff8 <HAL_LTDC_MspInit+0x1f0>)
 8000f24:	f004 fa6c 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000f28:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f42:	230e      	movs	r3, #14
 8000f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482b      	ldr	r0, [pc, #172]	@ (8000ffc <HAL_LTDC_MspInit+0x1f4>)
 8000f50:	f004 fa56 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000f54:	23f7      	movs	r3, #247	@ 0xf7
 8000f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f6c:	230e      	movs	r3, #14
 8000f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4821      	ldr	r0, [pc, #132]	@ (8001000 <HAL_LTDC_MspInit+0x1f8>)
 8000f7a:	f004 fa41 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f98:	2309      	movs	r3, #9
 8000f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4817      	ldr	r0, [pc, #92]	@ (8001004 <HAL_LTDC_MspInit+0x1fc>)
 8000fa6:	f004 fa2b 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000faa:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <HAL_LTDC_MspInit+0x200>)
 8000fd2:	f004 fa15 	bl	8005400 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2058      	movs	r0, #88	@ 0x58
 8000fdc:	f003 fe83 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fe0:	2058      	movs	r0, #88	@ 0x58
 8000fe2:	f003 fe9c 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	37b8      	adds	r7, #184	@ 0xb8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40016800 	.word	0x40016800
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40022400 	.word	0x40022400
 8001000:	40022800 	.word	0x40022800
 8001004:	40021800 	.word	0x40021800
 8001008:	40022000 	.word	0x40022000

0800100c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001010:	f3bf 8f4f 	dsb	sy
}
 8001014:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001016:	f3bf 8f6f 	isb	sy
}
 800101a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <SCB_EnableICache+0x48>)
 800101e:	2200      	movs	r2, #0
 8001020:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001024:	f3bf 8f4f 	dsb	sy
}
 8001028:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800102a:	f3bf 8f6f 	isb	sy
}
 800102e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <SCB_EnableICache+0x48>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <SCB_EnableICache+0x48>)
 8001036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800103c:	f3bf 8f4f 	dsb	sy
}
 8001040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001042:	f3bf 8f6f 	isb	sy
}
 8001046:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800105e:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <SCB_EnableDCache+0x84>)
 8001060:	2200      	movs	r2, #0
 8001062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001066:	f3bf 8f4f 	dsb	sy
}
 800106a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <SCB_EnableDCache+0x84>)
 800106e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001072:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0b5b      	lsrs	r3, r3, #13
 8001078:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800107c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001086:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	015a      	lsls	r2, r3, #5
 800108c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001090:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001096:	4911      	ldr	r1, [pc, #68]	@ (80010dc <SCB_EnableDCache+0x84>)
 8001098:	4313      	orrs	r3, r2
 800109a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1ef      	bne.n	8001088 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	60fa      	str	r2, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1e5      	bne.n	800107e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80010b2:	f3bf 8f4f 	dsb	sy
}
 80010b6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <SCB_EnableDCache+0x84>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <SCB_EnableDCache+0x84>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c4:	f3bf 8f4f 	dsb	sy
}
 80010c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ca:	f3bf 8f6f 	isb	sy
}
 80010ce:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010e4:	f000 f8ca 	bl	800127c <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010e8:	f7ff ff90 	bl	800100c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010ec:	f7ff ffb4 	bl	8001058 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f003 fc94 	bl	8004a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f834 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f7ff fc32 	bl	8000960 <MX_GPIO_Init>
  MX_SPI2_Init();
 80010fc:	f000 f9b8 	bl	8001470 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001100:	f000 fbaa 	bl	8001858 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001104:	f000 fc78 	bl	80019f8 <MX_USART2_UART_Init>
  MX_DMA2D_Init();
 8001108:	f7ff fa8c 	bl	8000624 <MX_DMA2D_Init>
  MX_LTDC_Init();
 800110c:	f7ff fdfa 	bl	8000d04 <MX_LTDC_Init>
  MX_FMC_Init();
 8001110:	f7ff fae0 	bl	80006d4 <MX_FMC_Init>
  MX_I2C3_Init();
 8001114:	f7ff fd34 	bl	8000b80 <MX_I2C3_Init>
  MX_CRC_Init();
 8001118:	f7ff fa42 	bl	80005a0 <MX_CRC_Init>
  MX_QUADSPI_Init();
 800111c:	f000 f8ec 	bl	80012f8 <MX_QUADSPI_Init>
  MX_TouchGFX_Init();
 8001120:	f009 fecc 	bl	800aebc <MX_TouchGFX_Init>
//  	    // Display a character on the specified line and column using the BSP_LCD_DisplayChar() function or a complete string line using the BSP_LCD_DisplayStringAtLine() function.
//  	    BSP_LCD_DisplayStringAt(0, 0, "TEST", CENTER_MODE);

  	//HAL_Delay(2000);

	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 1);
 8001124:	2101      	movs	r1, #1
 8001126:	2001      	movs	r0, #1
 8001128:	f003 fbea 	bl	8004900 <BSP_MotorControl_SetNbDevices>
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 800112c:	2100      	movs	r1, #0
 800112e:	2001      	movs	r0, #1
 8001130:	f003 fb38 	bl	80047a4 <BSP_MotorControl_Init>
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8001134:	4807      	ldr	r0, [pc, #28]	@ (8001154 <main+0x74>)
 8001136:	f003 fadb 	bl	80046f0 <BSP_MotorControl_AttachFlagInterrupt>
	BSP_MotorControl_AttachBusyInterrupt(MyBusyInterruptHandler);
 800113a:	4807      	ldr	r0, [pc, #28]	@ (8001158 <main+0x78>)
 800113c:	f003 faf6 	bl	800472c <BSP_MotorControl_AttachBusyInterrupt>
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8001140:	4806      	ldr	r0, [pc, #24]	@ (800115c <main+0x7c>)
 8001142:	f003 fab7 	bl	80046b4 <BSP_MotorControl_AttachErrorHandler>
	//BSP_MotorControl_Move(0, BACKWARD, 1600);

	/* Wait for the motor of device 0 ends moving */
	//BSP_MotorControl_WaitWhileActive(0);

	BSP_MotorControl_CmdSoftHiZ(0);
 8001146:	2000      	movs	r0, #0
 8001148:	f003 fbb8 	bl	80048bc <BSP_MotorControl_CmdSoftHiZ>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TouchGFX_Process();
 800114c:	f009 febe 	bl	800aecc <MX_TouchGFX_Process>
 8001150:	e7fc      	b.n	800114c <main+0x6c>
 8001152:	bf00      	nop
 8001154:	0800123d 	.word	0x0800123d
 8001158:	08001271 	.word	0x08001271
 800115c:	080012eb 	.word	0x080012eb

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	@ 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f022 fd51 	bl	8023c16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <SystemClock_Config+0xd4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a2a      	ldr	r2, [pc, #168]	@ (8001234 <SystemClock_Config+0xd4>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <SystemClock_Config+0xd4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <SystemClock_Config+0xd8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a25      	ldr	r2, [pc, #148]	@ (8001238 <SystemClock_Config+0xd8>)
 80011a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <SystemClock_Config+0xd8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b4:	2301      	movs	r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011be:	2302      	movs	r3, #2
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011c8:	2319      	movs	r3, #25
 80011ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80011cc:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80011d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 ff28 	bl	8007034 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ea:	f000 f87e 	bl	80012ea <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011ee:	f005 fe0f 	bl	8006e10 <HAL_PWREx_EnableOverDrive>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f8:	f000 f877 	bl	80012ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001208:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2107      	movs	r1, #7
 800121a:	4618      	mov	r0, r3
 800121c:	f006 f9ae 	bl	800757c <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001226:	f000 f860 	bl	80012ea <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	@ 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 8001242:	2000      	movs	r0, #0
 8001244:	f003 faf2 	bl	800482c <BSP_MotorControl_CmdGetStatus>
 8001248:	4603      	mov	r3, r0
 800124a:	80fb      	strh	r3, [r7, #6]
  }
  else
  {
    // FORWARD
  }
  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_STOPPED )
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001252:	2b00      	cmp	r3, #0
 8001254:	d008      	beq.n	8001268 <MyFlagInterruptHandler+0x2c>
  {
       // MOTOR STOPPED
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_ACCELERATION )
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800125c:	2b20      	cmp	r3, #32
 800125e:	d003      	beq.n	8001268 <MyFlagInterruptHandler+0x2c>
  {
           // MOTOR ACCELERATION
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_DECELERATION )
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001266:	2b40      	cmp	r3, #64	@ 0x40
  if ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0)
  {
    //overcurrent detection
  }

}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <MyBusyInterruptHandler>:
  * @brief  This function is the User handler for the busy interrupt
  * @param  None
  * @retval None
  */
void MyBusyInterruptHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

   if (BSP_MotorControl_CheckBusyHw())
 8001274:	f003 fb00 	bl	8004878 <BSP_MotorControl_CheckBusyHw>
   }
   else
   {
     /* To be customized (for example Switch off a LED) */
   }
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800128e:	f003 fd61 	bl	8004d54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001292:	2301      	movs	r3, #1
 8001294:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001296:	2300      	movs	r3, #0
 8001298:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800129a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 800129e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80012a0:	231b      	movs	r3, #27
 80012a2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012ac:	2303      	movs	r3, #3
 80012ae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012c0:	463b      	mov	r3, r7
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fd7e 	bl	8004dc4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80012cc:	2317      	movs	r3, #23
 80012ce:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012d4:	463b      	mov	r3, r7
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fd74 	bl	8004dc4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012dc:	2004      	movs	r0, #4
 80012de:	f003 fd51 	bl	8004d84 <HAL_MPU_Enable>

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012ee:	b672      	cpsid	i
}
 80012f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f2:	bf00      	nop
 80012f4:	e7fd      	b.n	80012f2 <Error_Handler+0x8>
	...

080012f8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <MX_QUADSPI_Init+0x54>)
 8001300:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 8001304:	2201      	movs	r2, #1
 8001306:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 800130a:	2204      	movs	r2, #4
 800130c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 8001310:	2210      	movs	r2, #16
 8001312:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 8001316:	2218      	movs	r2, #24
 8001318:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 800131c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001320:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_QUADSPI_Init+0x50>)
 8001336:	f005 fdbb 	bl	8006eb0 <HAL_QSPI_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001340:	f7ff ffd3 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000644 	.word	0x20000644
 800134c:	a0001000 	.word	0xa0001000

08001350 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	@ 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a3b      	ldr	r2, [pc, #236]	@ (800145c <HAL_QSPI_MspInit+0x10c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d170      	bne.n	8001454 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001372:	4b3b      	ldr	r3, [pc, #236]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 8001374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001376:	4a3a      	ldr	r2, [pc, #232]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6393      	str	r3, [r2, #56]	@ 0x38
 800137e:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 8001380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a34      	ldr	r2, [pc, #208]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a28      	ldr	r2, [pc, #160]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b26      	ldr	r3, [pc, #152]	@ (8001460 <HAL_QSPI_MspInit+0x110>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d2:	2304      	movs	r3, #4
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013e2:	2309      	movs	r3, #9
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	481d      	ldr	r0, [pc, #116]	@ (8001464 <HAL_QSPI_MspInit+0x114>)
 80013ee:	f004 f807 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f2:	2340      	movs	r3, #64	@ 0x40
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001402:	230a      	movs	r3, #10
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4816      	ldr	r0, [pc, #88]	@ (8001468 <HAL_QSPI_MspInit+0x118>)
 800140e:	f003 fff7 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001412:	2304      	movs	r3, #4
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001422:	2309      	movs	r3, #9
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	480e      	ldr	r0, [pc, #56]	@ (8001468 <HAL_QSPI_MspInit+0x118>)
 800142e:	f003 ffe7 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001432:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001444:	2309      	movs	r3, #9
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	@ (800146c <HAL_QSPI_MspInit+0x11c>)
 8001450:	f003 ffd6 	bl	8005400 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	@ 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	a0001000 	.word	0xa0001000
 8001460:	40023800 	.word	0x40023800
 8001464:	40021000 	.word	0x40021000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020c00 	.word	0x40020c00

08001470 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_SPI2_Init+0x74>)
 8001476:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <MX_SPI2_Init+0x78>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_SPI2_Init+0x74>)
 800147c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_SPI2_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_SPI2_Init+0x74>)
 800148a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800148e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_SPI2_Init+0x74>)
 8001492:	2202      	movs	r2, #2
 8001494:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_SPI2_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_SPI2_Init+0x74>)
 800149e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014a6:	2220      	movs	r2, #32
 80014a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014be:	2207      	movs	r2, #7
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_SPI2_Init+0x74>)
 80014d0:	f006 febc 	bl	800824c <HAL_SPI_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014da:	f7ff ff06 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000690 	.word	0x20000690
 80014e8:	40003800 	.word	0x40003800

080014ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <HAL_SPI_MspInit+0xb4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d144      	bne.n	8001598 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800150e:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a24      	ldr	r2, [pc, #144]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001556:	2302      	movs	r3, #2
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001566:	2305      	movs	r3, #5
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <HAL_SPI_MspInit+0xbc>)
 8001572:	f003 ff45 	bl	8005400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001576:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <HAL_SPI_MspInit+0xc0>)
 8001594:	f003 ff34 	bl	8005400 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	@ 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40003800 	.word	0x40003800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40022000 	.word	0x40022000
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_MspInit+0x44>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <HAL_MspInit+0x44>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_MspInit+0x44>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_MspInit+0x44>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <HAL_MspInit+0x44>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_MspInit+0x44>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f003 fa2b 	bl	8004aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800165a:	2040      	movs	r0, #64	@ 0x40
 800165c:	f004 f9ba 	bl	80059d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001660:	2080      	movs	r0, #128	@ 0x80
 8001662:	f004 f9b7 	bl	80059d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <TIM2_IRQHandler+0x10>)
 8001672:	f007 fdaf 	bl	80091d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000720 	.word	0x20000720

08001680 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <LTDC_IRQHandler+0x10>)
 8001686:	f005 f8fb 	bl	8006880 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000059c 	.word	0x2000059c

08001694 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <DMA2D_IRQHandler+0x10>)
 800169a:	f003 fd0f 	bl	80050bc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200004c0 	.word	0x200004c0

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_kill>:

int _kill(int pid, int sig)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c2:	f022 fb4b 	bl	8023d5c <__errno>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2216      	movs	r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_exit>:

void _exit (int status)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffe7 	bl	80016b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ea:	bf00      	nop
 80016ec:	e7fd      	b.n	80016ea <_exit+0x12>

080016ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e00a      	b.n	8001716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001700:	f3af 8000 	nop.w
 8001704:	4601      	mov	r1, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbf0      	blt.n	8001700 <_read+0x12>
  }

  return len;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e009      	b.n	800174e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf1      	blt.n	800173a <_write+0x12>
  }
  return len;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_close>:

int _close(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_isatty>:

int _isatty(int file)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f022 fab0 	bl	8023d5c <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20050000 	.word	0x20050000
 8001828:	00000a00 	.word	0x00000a00
 800182c:	2000071c 	.word	0x2000071c
 8001830:	20002b30 	.word	0x20002b30

08001834 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08e      	sub	sp, #56	@ 0x38
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <MX_TIM2_Init+0xe8>)
 800188c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <MX_TIM2_Init+0xe8>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b29      	ldr	r3, [pc, #164]	@ (8001940 <MX_TIM2_Init+0xe8>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800189e:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <MX_TIM2_Init+0xe8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a4:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <MX_TIM2_Init+0xe8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <MX_TIM2_Init+0xe8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018b0:	4823      	ldr	r0, [pc, #140]	@ (8001940 <MX_TIM2_Init+0xe8>)
 80018b2:	f007 f9a7 	bl	8008c04 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018bc:	f7ff fd15 	bl	80012ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ca:	4619      	mov	r1, r3
 80018cc:	481c      	ldr	r0, [pc, #112]	@ (8001940 <MX_TIM2_Init+0xe8>)
 80018ce:	f007 febf 	bl	8009650 <HAL_TIM_ConfigClockSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018d8:	f7ff fd07 	bl	80012ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018dc:	4818      	ldr	r0, [pc, #96]	@ (8001940 <MX_TIM2_Init+0xe8>)
 80018de:	f007 f9f5 	bl	8008ccc <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018e8:	f7ff fcff 	bl	80012ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4811      	ldr	r0, [pc, #68]	@ (8001940 <MX_TIM2_Init+0xe8>)
 80018fc:	f008 fbfe 	bl	800a0fc <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001906:	f7ff fcf0 	bl	80012ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190a:	2360      	movs	r3, #96	@ 0x60
 800190c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	4807      	ldr	r0, [pc, #28]	@ (8001940 <MX_TIM2_Init+0xe8>)
 8001922:	f007 fd81 	bl	8009428 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800192c:	f7ff fcdd 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001930:	4803      	ldr	r0, [pc, #12]	@ (8001940 <MX_TIM2_Init+0xe8>)
 8001932:	f000 f82b 	bl	800198c <HAL_TIM_MspPostInit>

}
 8001936:	bf00      	nop
 8001938:	3738      	adds	r7, #56	@ 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000720 	.word	0x20000720

08001944 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001954:	d113      	bne.n	800197e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <HAL_TIM_Base_MspInit+0x44>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <HAL_TIM_Base_MspInit+0x44>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_TIM_Base_MspInit+0x44>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	201c      	movs	r0, #28
 8001974:	f003 f9b7 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001978:	201c      	movs	r0, #28
 800197a:	f003 f9d0 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ac:	d11c      	bne.n	80019e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_TIM_MspPostInit+0x64>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <HAL_TIM_MspPostInit+0x64>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_TIM_MspPostInit+0x64>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d8:	2301      	movs	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	4619      	mov	r1, r3
 80019e2:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <HAL_TIM_MspPostInit+0x68>)
 80019e4:	f003 fd0c 	bl	8005400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000

080019f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019fc:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 80019fe:	4a15      	ldr	r2, [pc, #84]	@ (8001a54 <MX_USART2_UART_Init+0x5c>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a3a:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <MX_USART2_UART_Init+0x58>)
 8001a3c:	f008 fc14 	bl	800a268 <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a46:	f7ff fc50 	bl	80012ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200007dc 	.word	0x200007dc
 8001a54:	40004400 	.word	0x40004400

08001a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0aa      	sub	sp, #168	@ 0xa8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	2284      	movs	r2, #132	@ 0x84
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f022 f8cc 	bl	8023c16 <memset>
  if(uartHandle->Instance==USART2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_UART_MspInit+0xb0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d13a      	bne.n	8001afe <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 ff57 	bl	8007948 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aa0:	f7ff fc23 	bl	80012ea <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_UART_MspInit+0xb4>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	4a18      	ldr	r2, [pc, #96]	@ (8001b0c <HAL_UART_MspInit+0xb4>)
 8001aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_UART_MspInit+0xb4>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <HAL_UART_MspInit+0xb4>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <HAL_UART_MspInit+0xb4>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <HAL_UART_MspInit+0xb4>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001ad4:	2360      	movs	r3, #96	@ 0x60
 8001ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aec:	2307      	movs	r3, #7
 8001aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <HAL_UART_MspInit+0xb8>)
 8001afa:	f003 fc81 	bl	8005400 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	37a8      	adds	r7, #168	@ 0xa8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020c00 	.word	0x40020c00

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b18:	f7ff fe8c 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f022 f911 	bl	8023d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff facb 	bl	80010e0 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8001b58:	08026608 	.word	0x08026608
  ldr r2, =_sbss
 8001b5c:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 8001b60:	20002b2c 	.word	0x20002b2c

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>

08001b66 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001b70:	20c8      	movs	r0, #200	@ 0xc8
 8001b72:	f002 fb87 	bl	8004284 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001b76:	f000 f9b3 	bl	8001ee0 <ft5336_I2C_InitializeIfRequired>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001baa:	2300      	movs	r3, #0
 8001bac:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001bae:	f000 f997 	bl	8001ee0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
 8001bb6:	e010      	b.n	8001bda <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	21a8      	movs	r1, #168	@ 0xa8
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fb42 	bl	8004248 <TS_IO_Read>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b51      	cmp	r3, #81	@ 0x51
 8001bce:	d101      	bne.n	8001bd4 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d802      	bhi.n	8001be6 <ft5336_ReadID+0x4e>
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0e8      	beq.n	8001bb8 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001be6:	7b7b      	ldrb	r3, [r7, #13]
 8001be8:	b2db      	uxtb	r3, r3
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f97e 	bl	8001f00 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f932 	bl	8001e70 <ft5336_TS_DisableIT>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2102      	movs	r1, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 fb0d 	bl	8004248 <TS_IO_Read>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d901      	bls.n	8001c4a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <ft5336_TS_DetectTouch+0x50>)
 8001c50:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <ft5336_TS_DetectTouch+0x50>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	b2db      	uxtb	r3, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000890 	.word	0x20000890

08001c68 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e40 <ft5336_TS_GetXY+0x1d8>)
 8001c8c:	789a      	ldrb	r2, [r3, #2]
 8001c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001e40 <ft5336_TS_GetXY+0x1d8>)
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	f080 80cf 	bcs.w	8001e36 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001c98:	4b69      	ldr	r3, [pc, #420]	@ (8001e40 <ft5336_TS_GetXY+0x1d8>)
 8001c9a:	789b      	ldrb	r3, [r3, #2]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d871      	bhi.n	8001d84 <ft5336_TS_GetXY+0x11c>
 8001ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <ft5336_TS_GetXY+0x40>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cd1 	.word	0x08001cd1
 8001cac:	08001ce3 	.word	0x08001ce3
 8001cb0:	08001cf5 	.word	0x08001cf5
 8001cb4:	08001d07 	.word	0x08001d07
 8001cb8:	08001d19 	.word	0x08001d19
 8001cbc:	08001d2b 	.word	0x08001d2b
 8001cc0:	08001d3d 	.word	0x08001d3d
 8001cc4:	08001d4f 	.word	0x08001d4f
 8001cc8:	08001d61 	.word	0x08001d61
 8001ccc:	08001d73 	.word	0x08001d73
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001cdc:	2305      	movs	r3, #5
 8001cde:	753b      	strb	r3, [r7, #20]
      break;
 8001ce0:	e051      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001cea:	230c      	movs	r3, #12
 8001cec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001cee:	230b      	movs	r3, #11
 8001cf0:	753b      	strb	r3, [r7, #20]
      break;
 8001cf2:	e048      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001d00:	2311      	movs	r3, #17
 8001d02:	753b      	strb	r3, [r7, #20]
      break;
 8001d04:	e03f      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001d06:	2316      	movs	r3, #22
 8001d08:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001d0a:	2315      	movs	r3, #21
 8001d0c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001d0e:	2318      	movs	r3, #24
 8001d10:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001d12:	2317      	movs	r3, #23
 8001d14:	753b      	strb	r3, [r7, #20]
      break;
 8001d16:	e036      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001d18:	231c      	movs	r3, #28
 8001d1a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001d1c:	231b      	movs	r3, #27
 8001d1e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001d20:	231e      	movs	r3, #30
 8001d22:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001d24:	231d      	movs	r3, #29
 8001d26:	753b      	strb	r3, [r7, #20]
      break;
 8001d28:	e02d      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001d2a:	2322      	movs	r3, #34	@ 0x22
 8001d2c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001d2e:	2321      	movs	r3, #33	@ 0x21
 8001d30:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001d32:	2324      	movs	r3, #36	@ 0x24
 8001d34:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001d36:	2323      	movs	r3, #35	@ 0x23
 8001d38:	753b      	strb	r3, [r7, #20]
      break;
 8001d3a:	e024      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001d3c:	2328      	movs	r3, #40	@ 0x28
 8001d3e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001d40:	2327      	movs	r3, #39	@ 0x27
 8001d42:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001d44:	232a      	movs	r3, #42	@ 0x2a
 8001d46:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001d48:	2329      	movs	r3, #41	@ 0x29
 8001d4a:	753b      	strb	r3, [r7, #20]
      break;
 8001d4c:	e01b      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001d4e:	232e      	movs	r3, #46	@ 0x2e
 8001d50:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001d52:	232d      	movs	r3, #45	@ 0x2d
 8001d54:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001d56:	2330      	movs	r3, #48	@ 0x30
 8001d58:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001d5a:	232f      	movs	r3, #47	@ 0x2f
 8001d5c:	753b      	strb	r3, [r7, #20]
      break;
 8001d5e:	e012      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001d60:	2334      	movs	r3, #52	@ 0x34
 8001d62:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001d64:	2333      	movs	r3, #51	@ 0x33
 8001d66:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001d68:	2336      	movs	r3, #54	@ 0x36
 8001d6a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001d6c:	2335      	movs	r3, #53	@ 0x35
 8001d6e:	753b      	strb	r3, [r7, #20]
      break;
 8001d70:	e009      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001d72:	233a      	movs	r3, #58	@ 0x3a
 8001d74:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001d76:	2339      	movs	r3, #57	@ 0x39
 8001d78:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001d7a:	233c      	movs	r3, #60	@ 0x3c
 8001d7c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001d7e:	233b      	movs	r3, #59	@ 0x3b
 8001d80:	753b      	strb	r3, [r7, #20]
      break;
 8001d82:	e000      	b.n	8001d86 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001d84:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	7dfa      	ldrb	r2, [r7, #23]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fa5a 	bl	8004248 <TS_IO_Read>
 8001d94:	4603      	mov	r3, r0
 8001d96:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001da0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	7dba      	ldrb	r2, [r7, #22]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fa4c 	bl	8004248 <TS_IO_Read>
 8001db0:	4603      	mov	r3, r0
 8001db2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001dce:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	7d7a      	ldrb	r2, [r7, #21]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 fa31 	bl	8004248 <TS_IO_Read>
 8001de6:	4603      	mov	r3, r0
 8001de8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001dea:	7cfb      	ldrb	r3, [r7, #19]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001df2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	7d3a      	ldrb	r2, [r7, #20]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fa23 	bl	8004248 <TS_IO_Read>
 8001e02:	4603      	mov	r3, r0
 8001e04:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001e06:	7cfb      	ldrb	r3, [r7, #19]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001e20:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <ft5336_TS_GetXY+0x1dc>)
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <ft5336_TS_GetXY+0x1d8>)
 8001e2c:	789b      	ldrb	r3, [r3, #2]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <ft5336_TS_GetXY+0x1d8>)
 8001e34:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000890 	.word	0x20000890
 8001e44:	20000894 	.word	0x20000894

08001e48 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	21a4      	movs	r1, #164	@ 0xa4
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 f9d6 	bl	8004214 <TS_IO_Write>
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	21a4      	movs	r1, #164	@ 0xa4
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 f9c2 	bl	8004214 <TS_IO_Write>
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000890 	.word	0x20000890

08001ee0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001ee4:	f7ff fff0 	bl	8001ec8 <ft5336_Get_I2C_InitializedStatus>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d104      	bne.n	8001ef8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001eee:	f002 f987 	bl	8004200 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001ef2:	4b02      	ldr	r3, [pc, #8]	@ (8001efc <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000890 	.word	0x20000890

08001f00 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <Powerstep01_AttachErrorHandler+0x1c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200008a0 	.word	0x200008a0

08001f3c <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8001f44:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <Powerstep01_AttachFlagInterrupt+0x1c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	2000089c 	.word	0x2000089c

08001f5c <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <Powerstep01_AttachBusyInterrupt+0x1c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000898 	.word	0x20000898

08001f7c <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <Powerstep01_ReadId+0x14>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200008b2 	.word	0x200008b2

08001f94 <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <Powerstep01_Init+0x84>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 f996 	bl	80042d4 <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 8001fa8:	f002 fac0 	bl	800452c <Powerstep01_Board_SpiInit>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 8001fb2:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8001fb6:	f001 f90b 	bl	80031d0 <Powerstep01_ErrorHandler>
  } 
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 8001fba:	f002 fa29 	bl	8004410 <Powerstep01_Board_StepClockInit>
  
  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <Powerstep01_Init+0x84>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fa91 	bl	80044ec <Powerstep01_Board_ReleaseReset>
  
  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f002 f965 	bl	800429a <Powerstep01_Board_Delay>

  if (pInit == 0)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h 
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <Powerstep01_Init+0x84>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f9e7 	bl	80033b0 <Powerstep01_SetRegisterToPredefinedValues>
 8001fe2:	e006      	b.n	8001ff2 <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <Powerstep01_Init+0x84>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 fb31 	bl	8003654 <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <Powerstep01_Init+0x84>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fa00 	bl	80023fe <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 8001ffe:	f000 fb8f 	bl	8002720 <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 8002002:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <Powerstep01_Init+0x84>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <Powerstep01_Init+0x84>)
 800200c:	801a      	strh	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200008b2 	.word	0x200008b2

0800201c <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 8002020:	f002 faf8 	bl	8004614 <Powerstep01_Board_BUSY_PIN_GetState>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 800202e:	2300      	movs	r3, #0
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}

08002034 <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 8002038:	f002 faf8 	bl	800462c <Powerstep01_Board_FLAG_PIN_GetState>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 8002046:	2300      	movs	r3, #0
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}

0800204c <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 800205c:	4b67      	ldr	r3, [pc, #412]	@ (80021fc <Powerstep01_CmdGetParam+0x1b0>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	429a      	cmp	r2, r3
 8002066:	f080 80c4 	bcs.w	80021f2 <Powerstep01_CmdGetParam+0x1a6>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800206e:	4b63      	ldr	r3, [pc, #396]	@ (80021fc <Powerstep01_CmdGetParam+0x1b0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 800207e:	2300      	movs	r3, #0
 8002080:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8002082:	4b5f      	ldr	r3, [pc, #380]	@ (8002200 <Powerstep01_CmdGetParam+0x1b4>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002088:	7bbb      	ldrb	r3, [r7, #14]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800208e:	f002 f918 	bl	80042c2 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8002092:	2300      	movs	r3, #0
 8002094:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e030      	b.n	80020fe <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 800209c:	4a59      	ldr	r2, [pc, #356]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80020a6:	4a57      	ldr	r2, [pc, #348]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	3301      	adds	r3, #1
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80020b2:	4a54      	ldr	r2, [pc, #336]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	3302      	adds	r3, #2
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80020be:	4a51      	ldr	r2, [pc, #324]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	3303      	adds	r3, #3
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 80020ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 80020d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	3301      	adds	r3, #1
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 80020e0:	4a49      	ldr	r2, [pc, #292]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	3302      	adds	r3, #2
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;    
 80020ec:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	3303      	adds	r3, #3
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	3301      	adds	r3, #1
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <Powerstep01_CmdGetParam+0x1b0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4293      	cmp	r3, r2
 800210a:	d3c7      	bcc.n	800209c <Powerstep01_CmdGetParam+0x50>
      }
      switch (param)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b1b      	cmp	r3, #27
 8002110:	bf8c      	ite	hi
 8002112:	2301      	movhi	r3, #1
 8002114:	2300      	movls	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d12c      	bne.n	8002176 <Powerstep01_CmdGetParam+0x12a>
 800211c:	2201      	movs	r2, #1
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	409a      	lsls	r2, r3
 8002122:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <Powerstep01_CmdGetParam+0x1c0>)
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d113      	bne.n	800215c <Powerstep01_CmdGetParam+0x110>
 8002134:	f002 031a 	and.w	r3, r2, #26
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d017      	beq.n	8002176 <Powerstep01_CmdGetParam+0x12a>
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	7b7b      	ldrb	r3, [r7, #13]
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d1      	uxtb	r1, r2
 8002152:	4a2c      	ldr	r2, [pc, #176]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 8002154:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 8002156:	2303      	movs	r3, #3
 8002158:	73fb      	strb	r3, [r7, #15]
          break;
 800215a:	e018      	b.n	800218e <Powerstep01_CmdGetParam+0x142>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	7b7b      	ldrb	r3, [r7, #13]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d1      	uxtb	r1, r2
 8002168:	4a26      	ldr	r2, [pc, #152]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 800216a:	4413      	add	r3, r2
 800216c:	460a      	mov	r2, r1
 800216e:	705a      	strb	r2, [r3, #1]
          maxArgumentNbBytes = 2;
 8002170:	2302      	movs	r3, #2
 8002172:	73fb      	strb	r3, [r7, #15]
          break;
 8002174:	e00b      	b.n	800218e <Powerstep01_CmdGetParam+0x142>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	7b7b      	ldrb	r3, [r7, #13]
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	b2d1      	uxtb	r1, r2
 8002182:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 8002184:	4413      	add	r3, r2
 8002186:	460a      	mov	r2, r1
 8002188:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 800218e:	f002 f88f 	bl	80042b0 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8002192:	2301      	movs	r3, #1
 8002194:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <Powerstep01_CmdGetParam+0x1b4>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f af70 	bne.w	8002082 <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	f1c3 0303 	rsb	r3, r3, #3
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e00c      	b.n	80021c6 <Powerstep01_CmdGetParam+0x17a>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4a15      	ldr	r2, [pc, #84]	@ (8002204 <Powerstep01_CmdGetParam+0x1b8>)
 80021b0:	441a      	add	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4914      	ldr	r1, [pc, #80]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80021b6:	440b      	add	r3, r1
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f001 fc46 	bl	8003a4c <Powerstep01_WriteBytes>
         loop++)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3301      	adds	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d9ef      	bls.n	80021ac <Powerstep01_CmdGetParam+0x160>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80021cc:	7b7b      	ldrb	r3, [r7, #13]
 80021ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80021d0:	4413      	add	r3, r2
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	041a      	lsls	r2, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 80021d6:	7b7b      	ldrb	r3, [r7, #13]
 80021d8:	490b      	ldr	r1, [pc, #44]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80021da:	440b      	add	r3, r1
 80021dc:	789b      	ldrb	r3, [r3, #2]
 80021de:	021b      	lsls	r3, r3, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80021e0:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);    
 80021e2:	7b7a      	ldrb	r2, [r7, #13]
 80021e4:	4908      	ldr	r1, [pc, #32]	@ (8002208 <Powerstep01_CmdGetParam+0x1bc>)
 80021e6:	440a      	add	r2, r1
 80021e8:	78d2      	ldrb	r2, [r2, #3]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80021ee:	f002 f868 	bl	80042c2 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 80021f2:	697b      	ldr	r3, [r7, #20]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200008a4 	.word	0x200008a4
 8002200:	200008b0 	.word	0x200008b0
 8002204:	200008a8 	.word	0x200008a8
 8002208:	200008ac 	.word	0x200008ac
 800220c:	0d2021e4 	.word	0x0d2021e4

08002210 <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 800221e:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <Powerstep01_CmdGetStatus+0x124>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	429a      	cmp	r2, r3
 8002228:	d27e      	bcs.n	8002328 <Powerstep01_CmdGetStatus+0x118>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800222a:	4b42      	ldr	r3, [pc, #264]	@ (8002334 <Powerstep01_CmdGetStatus+0x124>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 800223e:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <Powerstep01_CmdGetStatus+0x128>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <Powerstep01_CmdGetStatus+0x42>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800224a:	f002 f83a 	bl	80042c2 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e030      	b.n	80022ba <Powerstep01_CmdGetStatus+0xaa>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8002258:	4a38      	ldr	r2, [pc, #224]	@ (800233c <Powerstep01_CmdGetStatus+0x12c>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002262:	4a36      	ldr	r2, [pc, #216]	@ (800233c <Powerstep01_CmdGetStatus+0x12c>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	3301      	adds	r3, #1
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800226e:	4a33      	ldr	r2, [pc, #204]	@ (800233c <Powerstep01_CmdGetStatus+0x12c>)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	3302      	adds	r3, #2
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 800227a:	4a30      	ldr	r2, [pc, #192]	@ (800233c <Powerstep01_CmdGetStatus+0x12c>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	3303      	adds	r3, #3
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 8002286:	4a2e      	ldr	r2, [pc, #184]	@ (8002340 <Powerstep01_CmdGetStatus+0x130>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 8002290:	4a2b      	ldr	r2, [pc, #172]	@ (8002340 <Powerstep01_CmdGetStatus+0x130>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	3301      	adds	r3, #1
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 800229c:	4a28      	ldr	r2, [pc, #160]	@ (8002340 <Powerstep01_CmdGetStatus+0x130>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	3302      	adds	r3, #2
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;       
 80022a8:	4a25      	ldr	r2, [pc, #148]	@ (8002340 <Powerstep01_CmdGetStatus+0x130>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	3303      	adds	r3, #3
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3301      	adds	r3, #1
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002334 <Powerstep01_CmdGetStatus+0x124>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d3c7      	bcc.n	8002258 <Powerstep01_CmdGetStatus+0x48>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	@ (800233c <Powerstep01_CmdGetStatus+0x12c>)
 80022cc:	21d0      	movs	r1, #208	@ 0xd0
 80022ce:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80022d0:	f001 ffee 	bl	80042b0 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 80022d8:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <Powerstep01_CmdGetStatus+0x128>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ad      	bne.n	800223e <Powerstep01_CmdGetStatus+0x2e>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e00c      	b.n	8002302 <Powerstep01_CmdGetStatus+0xf2>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4a14      	ldr	r2, [pc, #80]	@ (800233c <Powerstep01_CmdGetStatus+0x12c>)
 80022ec:	441a      	add	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4913      	ldr	r1, [pc, #76]	@ (8002340 <Powerstep01_CmdGetStatus+0x130>)
 80022f2:	440b      	add	r3, r1
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f001 fba8 	bl	8003a4c <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3301      	adds	r3, #1
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d9ef      	bls.n	80022e8 <Powerstep01_CmdGetStatus+0xd8>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <Powerstep01_CmdGetStatus+0x130>)
 800230c:	4413      	add	r3, r2
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b21a      	sxth	r2, r3
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	490a      	ldr	r1, [pc, #40]	@ (8002340 <Powerstep01_CmdGetStatus+0x130>)
 8002318:	440b      	add	r3, r1
 800231a:	789b      	ldrb	r3, [r3, #2]
 800231c:	b21b      	sxth	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b21b      	sxth	r3, r3
 8002322:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 8002324:	f001 ffcd 	bl	80042c2 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 8002328:	8afb      	ldrh	r3, [r7, #22]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200008a4 	.word	0x200008a4
 8002338:	200008b0 	.word	0x200008b0
 800233c:	200008a8 	.word	0x200008a8
 8002340:	200008ac 	.word	0x200008ac

08002344 <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	2200      	movs	r2, #0
 8002352:	2170      	movs	r1, #112	@ 0x70
 8002354:	4618      	mov	r0, r3
 8002356:	f000 ff67 	bl	8003228 <Powerstep01_SendCommand>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2200      	movs	r2, #0
 8002370:	2178      	movs	r1, #120	@ 0x78
 8002372:	4618      	mov	r0, r3
 8002374:	f000 ff58 	bl	8003228 <Powerstep01_SendCommand>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2160      	movs	r1, #96	@ 0x60
 8002392:	4618      	mov	r0, r3
 8002394:	f000 ff48 	bl	8003228 <Powerstep01_SendCommand>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	603a      	str	r2, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	460b      	mov	r3, r1
 80023ae:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80023b6:	b2d9      	uxtb	r1, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 ff33 	bl	8003228 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	460b      	mov	r3, r1
 80023d8:	71bb      	strb	r3, [r7, #6]
 80023da:	4613      	mov	r3, r2
 80023dc:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 80023de:	79ba      	ldrb	r2, [r7, #6]
 80023e0:	797b      	ldrb	r3, [r7, #5]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f063 037d 	orn	r3, r3, #125	@ 0x7d
 80023ea:	b2d9      	uxtb	r1, r3
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 ff19 	bl	8003228 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	2200      	movs	r2, #0
 800240c:	21a8      	movs	r1, #168	@ 0xa8
 800240e:	4618      	mov	r0, r3
 8002410:	f000 ff0a 	bl	8003228 <Powerstep01_SendCommand>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	2200      	movs	r2, #0
 800242a:	21b8      	movs	r1, #184	@ 0xb8
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fefb 	bl	8003228 <Powerstep01_SendCommand>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	603a      	str	r2, [r7, #0]
 8002444:	71fb      	strb	r3, [r7, #7]
 8002446:	460b      	mov	r3, r1
 8002448:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 800244a:	79bb      	ldrb	r3, [r7, #6]
 800244c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002450:	b2d9      	uxtb	r1, r3
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fee6 	bl	8003228 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fed7 	bl	8003228 <Powerstep01_SendCommand>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	460b      	mov	r3, r1
 800248e:	71bb      	strb	r3, [r7, #6]
 8002490:	4613      	mov	r3, r2
 8002492:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 8002494:	79ba      	ldrb	r2, [r7, #6]
 8002496:	797b      	ldrb	r3, [r7, #5]
 8002498:	4313      	orrs	r3, r2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f063 036d 	orn	r3, r3, #109	@ 0x6d
 80024a0:	b2d9      	uxtb	r1, r3
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2200      	movs	r2, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 febe 	bl	8003228 <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2200      	movs	r2, #0
 80024c2:	21c0      	movs	r1, #192	@ 0xc0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 feaf 	bl	8003228 <Powerstep01_SendCommand>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2200      	movs	r2, #0
 80024e0:	21d8      	movs	r1, #216	@ 0xd8
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fea0 	bl	8003228 <Powerstep01_SendCommand>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	603a      	str	r2, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	460b      	mov	r3, r1
 80024fe:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8002500:	79bb      	ldrb	r3, [r7, #6]
 8002502:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8002506:	b2d9      	uxtb	r1, r3
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fe8b 	bl	8003228 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 800252a:	4b5e      	ldr	r3, [pc, #376]	@ (80026a4 <Powerstep01_CmdSetParam+0x188>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	429a      	cmp	r2, r3
 8002534:	f080 80b2 	bcs.w	800269c <Powerstep01_CmdSetParam+0x180>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800253c:	4b59      	ldr	r3, [pc, #356]	@ (80026a4 <Powerstep01_CmdSetParam+0x188>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 800254c:	2300      	movs	r3, #0
 800254e:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8002550:	4b55      	ldr	r3, [pc, #340]	@ (80026a8 <Powerstep01_CmdSetParam+0x18c>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002556:	7cbb      	ldrb	r3, [r7, #18]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800255c:	f001 feb1 	bl	80042c2 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8002560:	2300      	movs	r3, #0
 8002562:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e019      	b.n	800259e <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 800256a:	4a50      	ldr	r2, [pc, #320]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002574:	4a4d      	ldr	r2, [pc, #308]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4413      	add	r3, r2
 800257a:	3301      	adds	r3, #1
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8002580:	4a4a      	ldr	r2, [pc, #296]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4413      	add	r3, r2
 8002586:	3302      	adds	r3, #2
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 800258c:	4a47      	ldr	r2, [pc, #284]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	4413      	add	r3, r2
 8002592:	3303      	adds	r3, #3
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <Powerstep01_CmdSetParam+0x188>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d3de      	bcc.n	800256a <Powerstep01_CmdSetParam+0x4e>
      }
      switch (param)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b1a      	cmp	r3, #26
 80025b0:	bf8c      	ite	hi
 80025b2:	2301      	movhi	r3, #1
 80025b4:	2300      	movls	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d13e      	bne.n	800263a <Powerstep01_CmdSetParam+0x11e>
 80025bc:	2201      	movs	r2, #1
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	409a      	lsls	r2, r3
 80025c2:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <Powerstep01_CmdSetParam+0x194>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d120      	bne.n	8002616 <Powerstep01_CmdSetParam+0xfa>
 80025d4:	f002 030a 	and.w	r3, r2, #10
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d029      	beq.n	800263a <Powerstep01_CmdSetParam+0x11e>
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 80025e6:	7c7b      	ldrb	r3, [r7, #17]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	b2d1      	uxtb	r1, r2
 80025ec:	4a2f      	ldr	r2, [pc, #188]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 80025ee:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0c1a      	lsrs	r2, r3, #16
 80025f4:	7c7b      	ldrb	r3, [r7, #17]
 80025f6:	b2d1      	uxtb	r1, r2
 80025f8:	4a2c      	ldr	r2, [pc, #176]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 80025fa:	4413      	add	r3, r2
 80025fc:	460a      	mov	r2, r1
 80025fe:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0a1a      	lsrs	r2, r3, #8
 8002604:	7c7b      	ldrb	r3, [r7, #17]
 8002606:	b2d1      	uxtb	r1, r2
 8002608:	4a28      	ldr	r2, [pc, #160]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 800260a:	4413      	add	r3, r2
 800260c:	460a      	mov	r2, r1
 800260e:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 3;
 8002610:	2303      	movs	r3, #3
 8002612:	74fb      	strb	r3, [r7, #19]
          break;
 8002614:	e01a      	b.n	800264c <Powerstep01_CmdSetParam+0x130>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8002616:	7c7b      	ldrb	r3, [r7, #17]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	b2d1      	uxtb	r1, r2
 800261c:	4a23      	ldr	r2, [pc, #140]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 800261e:	4413      	add	r3, r2
 8002620:	460a      	mov	r2, r1
 8002622:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0a1a      	lsrs	r2, r3, #8
 8002628:	7c7b      	ldrb	r3, [r7, #17]
 800262a:	b2d1      	uxtb	r1, r2
 800262c:	4a1f      	ldr	r2, [pc, #124]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 800262e:	4413      	add	r3, r2
 8002630:	460a      	mov	r2, r1
 8002632:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 2;
 8002634:	2302      	movs	r3, #2
 8002636:	74fb      	strb	r3, [r7, #19]
          break;
 8002638:	e008      	b.n	800264c <Powerstep01_CmdSetParam+0x130>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800263a:	7c7b      	ldrb	r3, [r7, #17]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	b2d1      	uxtb	r1, r2
 8002640:	4a1a      	ldr	r2, [pc, #104]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 8002642:	4413      	add	r3, r2
 8002644:	460a      	mov	r2, r1
 8002646:	709a      	strb	r2, [r3, #2]
          maxArgumentNbBytes = 1;
 8002648:	2301      	movs	r3, #1
 800264a:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 800264c:	7c7b      	ldrb	r3, [r7, #17]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	b2d1      	uxtb	r1, r2
 8002652:	4a16      	ldr	r2, [pc, #88]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 8002654:	4413      	add	r3, r2
 8002656:	460a      	mov	r2, r1
 8002658:	70da      	strb	r2, [r3, #3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 800265a:	f001 fe29 	bl	80042b0 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 800265e:	2301      	movs	r3, #1
 8002660:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 8002662:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <Powerstep01_CmdSetParam+0x18c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	f47f af71 	bne.w	8002550 <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	f1c3 0303 	rsb	r3, r3, #3
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e00c      	b.n	8002692 <Powerstep01_CmdSetParam+0x176>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4a0c      	ldr	r2, [pc, #48]	@ (80026ac <Powerstep01_CmdSetParam+0x190>)
 800267c:	441a      	add	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	490c      	ldr	r1, [pc, #48]	@ (80026b4 <Powerstep01_CmdSetParam+0x198>)
 8002682:	440b      	add	r3, r1
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f001 f9e0 	bl	8003a4c <Powerstep01_WriteBytes>
         loop++)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d9ef      	bls.n	8002678 <Powerstep01_CmdSetParam+0x15c>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8002698:	f001 fe13 	bl	80042c2 <Powerstep01_Board_EnableIrq>
  }
}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200008a4 	.word	0x200008a4
 80026a8:	200008b0 	.word	0x200008b0
 80026ac:	200008a8 	.word	0x200008a8
 80026b0:	052021e4 	.word	0x052021e4
 80026b4:	200008ac 	.word	0x200008ac

080026b8 <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2200      	movs	r2, #0
 80026c6:	21a0      	movs	r1, #160	@ 0xa0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fdad 	bl	8003228 <Powerstep01_SendCommand>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2200      	movs	r2, #0
 80026e4:	21b0      	movs	r1, #176	@ 0xb0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fd9e 	bl	8003228 <Powerstep01_SendCommand>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 800270a:	b2d9      	uxtb	r1, r3
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	2200      	movs	r2, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fd89 	bl	8003228 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 8002726:	2300      	movs	r3, #0
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	e028      	b.n	800277e <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4a23      	ldr	r2, [pc, #140]	@ (80027bc <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8002730:	21d0      	movs	r1, #208	@ 0xd0
 8002732:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4a21      	ldr	r2, [pc, #132]	@ (80027bc <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8002738:	4413      	add	r3, r2
 800273a:	2200      	movs	r2, #0
 800273c:	705a      	strb	r2, [r3, #1]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8002742:	4413      	add	r3, r2
 8002744:	2200      	movs	r2, #0
 8002746:	709a      	strb	r2, [r3, #2]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	4a1c      	ldr	r2, [pc, #112]	@ (80027bc <Powerstep01_FetchAndClearAllStatus+0x9c>)
 800274c:	4413      	add	r3, r2
 800274e:	2200      	movs	r2, #0
 8002750:	70da      	strb	r2, [r3, #3]
     spiRxBursts[0][loop] = 0;
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	4a1a      	ldr	r2, [pc, #104]	@ (80027c0 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8002756:	2100      	movs	r1, #0
 8002758:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 800275e:	4413      	add	r3, r2
 8002760:	2200      	movs	r2, #0
 8002762:	705a      	strb	r2, [r3, #1]
     spiRxBursts[2][loop] = 0;
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8002768:	4413      	add	r3, r2
 800276a:	2200      	movs	r2, #0
 800276c:	709a      	strb	r2, [r3, #2]
     spiRxBursts[3][loop] = 0;
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 8002772:	4413      	add	r3, r2
 8002774:	2200      	movs	r2, #0
 8002776:	70da      	strb	r2, [r3, #3]
  for (loop = 0; loop < numberOfDevices; loop++)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	3301      	adds	r3, #1
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	429a      	cmp	r2, r3
 8002788:	d3d0      	bcc.n	800272c <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0; 
 800278a:	2300      	movs	r3, #0
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	e00c      	b.n	80027aa <Powerstep01_FetchAndClearAllStatus+0x8a>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <Powerstep01_FetchAndClearAllStatus+0x9c>)
 8002794:	441a      	add	r2, r3
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4909      	ldr	r1, [pc, #36]	@ (80027c0 <Powerstep01_FetchAndClearAllStatus+0xa0>)
 800279a:	440b      	add	r3, r1
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f001 f954 	bl	8003a4c <Powerstep01_WriteBytes>
       loop++)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	3301      	adds	r3, #1
 80027a8:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d9ef      	bls.n	8002790 <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200008a8 	.word	0x200008a8
 80027c0:	200008ac 	.word	0x200008ac
 80027c4:	200008a4 	.word	0x200008a4

080027c8 <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <Powerstep01_GetFetchedStatus+0x54>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d215      	bcs.n	800280e <Powerstep01_GetFetchedStatus+0x46>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <Powerstep01_GetFetchedStatus+0x54>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 80027f2:	7b7b      	ldrb	r3, [r7, #13]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <Powerstep01_GetFetchedStatus+0x58>)
 80027f6:	4413      	add	r3, r2
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	7b7b      	ldrb	r3, [r7, #13]
 8002800:	4907      	ldr	r1, [pc, #28]	@ (8002820 <Powerstep01_GetFetchedStatus+0x58>)
 8002802:	440b      	add	r3, r1
 8002804:	789b      	ldrb	r3, [r3, #2]
 8002806:	b21b      	sxth	r3, r3
 8002808:	4313      	orrs	r3, r2
 800280a:	b21b      	sxth	r3, r3
 800280c:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 800280e:	89fb      	ldrh	r3, [r7, #14]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	200008a4 	.word	0x200008a4
 8002820:	200008ac 	.word	0x200008ac

08002824 <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 8002828:	4b02      	ldr	r3, [pc, #8]	@ (8002834 <Powerstep01_GetMotorHandle+0x10>)
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20000030 	.word	0x20000030

08002838 <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 800283c:	4b02      	ldr	r3, [pc, #8]	@ (8002848 <Powerstep01_GetFwVersion+0x10>)
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	00010500 	.word	0x00010500

0800284c <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	2103      	movs	r1, #3
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fbf6 	bl	800204c <Powerstep01_CmdGetParam>
 8002860:	4603      	mov	r3, r0
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fc7e 	bl	8003164 <Powerstep01_ConvertPosition>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 8002878:	4b03      	ldr	r3, [pc, #12]	@ (8002888 <Powerstep01_GetNbDevices+0x14>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	200008a4 	.word	0x200008a4

0800288c <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	2116      	movs	r1, #22
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fbd5 	bl	800204c <Powerstep01_CmdGetParam>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fbc7 	bl	800204c <Powerstep01_CmdGetParam>
 80028be:	60f8      	str	r0, [r7, #12]
  float value;
  switch (param)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	2b14      	cmp	r3, #20
 80028c6:	f200 8090 	bhi.w	80029ea <Powerstep01_GetAnalogValue+0x15e>
 80028ca:	a201      	add	r2, pc, #4	@ (adr r2, 80028d0 <Powerstep01_GetAnalogValue+0x44>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	08002925 	.word	0x08002925
 80028d4:	080029eb 	.word	0x080029eb
 80028d8:	08002925 	.word	0x08002925
 80028dc:	08002945 	.word	0x08002945
 80028e0:	08002939 	.word	0x08002939
 80028e4:	08002939 	.word	0x08002939
 80028e8:	08002951 	.word	0x08002951
 80028ec:	0800295d 	.word	0x0800295d
 80028f0:	080029a9 	.word	0x080029a9
 80028f4:	080029a9 	.word	0x080029a9
 80028f8:	080029a9 	.word	0x080029a9
 80028fc:	080029a9 	.word	0x080029a9
 8002900:	08002985 	.word	0x08002985
 8002904:	080029c7 	.word	0x080029c7
 8002908:	080029cd 	.word	0x080029cd
 800290c:	080029cd 	.word	0x080029cd
 8002910:	08002991 	.word	0x08002991
 8002914:	080029eb 	.word	0x080029eb
 8002918:	0800299d 	.word	0x0800299d
 800291c:	0800299d 	.word	0x0800299d
 8002920:	08002971 	.word	0x08002971
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fc1d 	bl	8003164 <Powerstep01_ConvertPosition>
 800292a:	ee07 0a90 	vmov	s15, r0
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 8002936:	e061      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f001 f8c9 	bl	8003ad0 <Powerstep01_AccDec_RegVal_to_Steps_s2>
 800293e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002942:	e05b      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f001 fa45 	bl	8003dd4 <Powerstep01_Speed_RegVal_to_Steps_s>
 800294a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800294e:	e055      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f001 f9f7 	bl	8003d44 <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 8002956:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800295a:	e04f      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002962:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f001 fa1f 	bl	8003da8 <Powerstep01_MinSpd_RegVal_to_Steps_s>
 800296a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 800296e:	e045      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002976:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f001 f90b 	bl	8003b94 <Powerstep01_FSSpd_RegVal_to_Steps_s>
 800297e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8002982:	e03b      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f001 f93d 	bl	8003c04 <Powerstep01_IntSpd_RegVal_to_Steps_s>
 800298a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800298e:	e035      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f001 f96f 	bl	8003c74 <Powerstep01_KTherm_RegVal_to_Comp>
 8002996:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800299a:	e02f      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f001 fa53 	bl	8003e48 <Powerstep01_StallOcd_RegVal_to_Th>
 80029a2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80029a6:	e029      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <Powerstep01_GetAnalogValue+0x12e>
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f001 f998 	bl	8003ce4 <Powerstep01_Kval_RegVal_to_Perc>
 80029b4:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 80029b8:	e020      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f001 fa80 	bl	8003ec0 <Powerstep01_Tval_RegVal_to_RefVoltage>
 80029c0:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80029c4:	e01a      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d016      	beq.n	80029fa <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <Powerstep01_GetAnalogValue+0x152>
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f001 f8b0 	bl	8003b38 <Powerstep01_BEMFslope_RegVal_to_Perc>
 80029d8:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 80029dc:	e00e      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f001 faa3 	bl	8003f2a <Powerstep01_Tmin_RegVal_to_Time>
 80029e4:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80029e8:	e008      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	ee07 3a90 	vmov	s15, r3
 80029f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f4:	edc7 7a05 	vstr	s15, [r7, #20]
 80029f8:	e000      	b.n	80029fc <Powerstep01_GetAnalogValue+0x170>
        break;
 80029fa:	bf00      	nop
  }
  return value;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	ee07 3a90 	vmov	s15, r3
}
 8002a02:	eeb0 0a67 	vmov.f32	s0, s15
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fb16 	bl	800204c <Powerstep01_CmdGetParam>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fb9e 	bl	8003164 <Powerstep01_ConvertPosition>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fbe6 	bl	8002210 <Powerstep01_CmdGetStatus>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 8002a52:	2300      	movs	r3, #0
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	603a      	str	r2, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 8002a6c:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <Powerstep01_QueueCommands+0xd8>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	79fa      	ldrb	r2, [r7, #7]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d257      	bcs.n	8002b28 <Powerstep01_QueueCommands+0xcc>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002a78:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <Powerstep01_QueueCommands+0xd8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 8002a88:	79bb      	ldrb	r3, [r7, #6]
 8002a8a:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8002a8e:	2b8a      	cmp	r3, #138	@ 0x8a
 8002a90:	d01a      	beq.n	8002ac8 <Powerstep01_QueueCommands+0x6c>
 8002a92:	2b8a      	cmp	r3, #138	@ 0x8a
 8002a94:	dc35      	bgt.n	8002b02 <Powerstep01_QueueCommands+0xa6>
 8002a96:	2b82      	cmp	r3, #130	@ 0x82
 8002a98:	d016      	beq.n	8002ac8 <Powerstep01_QueueCommands+0x6c>
 8002a9a:	2b82      	cmp	r3, #130	@ 0x82
 8002a9c:	dc31      	bgt.n	8002b02 <Powerstep01_QueueCommands+0xa6>
 8002a9e:	2b40      	cmp	r3, #64	@ 0x40
 8002aa0:	d012      	beq.n	8002ac8 <Powerstep01_QueueCommands+0x6c>
 8002aa2:	2b40      	cmp	r3, #64	@ 0x40
 8002aa4:	db2d      	blt.n	8002b02 <Powerstep01_QueueCommands+0xa6>
 8002aa6:	2b68      	cmp	r3, #104	@ 0x68
 8002aa8:	dc2b      	bgt.n	8002b02 <Powerstep01_QueueCommands+0xa6>
 8002aaa:	2b50      	cmp	r3, #80	@ 0x50
 8002aac:	db29      	blt.n	8002b02 <Powerstep01_QueueCommands+0xa6>
 8002aae:	3b50      	subs	r3, #80	@ 0x50
 8002ab0:	4a21      	ldr	r2, [pc, #132]	@ (8002b38 <Powerstep01_QueueCommands+0xdc>)
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01c      	beq.n	8002b02 <Powerstep01_QueueCommands+0xa6>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	491c      	ldr	r1, [pc, #112]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002acc:	79ba      	ldrb	r2, [r7, #6]
 8002ace:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	141a      	asrs	r2, r3, #16
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	b2d1      	uxtb	r1, r2
 8002ad8:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002ada:	4413      	add	r3, r2
 8002adc:	460a      	mov	r2, r1
 8002ade:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	121a      	asrs	r2, r3, #8
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	b2d1      	uxtb	r1, r2
 8002ae8:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002aea:	4413      	add	r3, r2
 8002aec:	460a      	mov	r2, r1
 8002aee:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	b2d1      	uxtb	r1, r2
 8002af6:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002af8:	4413      	add	r3, r2
 8002afa:	460a      	mov	r2, r1
 8002afc:	70da      	strb	r2, [r3, #3]
       break;
 8002afe:	bf00      	nop
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[3][spiIndex] = command;
    }
  }
}
 8002b00:	e012      	b.n	8002b28 <Powerstep01_QueueCommands+0xcc>
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002b06:	2100      	movs	r1, #0
 8002b08:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	2200      	movs	r2, #0
 8002b12:	705a      	strb	r2, [r3, #1]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	4a09      	ldr	r2, [pc, #36]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	709a      	strb	r2, [r3, #2]
       spiTxBursts[3][spiIndex] = command;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <Powerstep01_QueueCommands+0xe0>)
 8002b22:	4413      	add	r3, r2
 8002b24:	79ba      	ldrb	r2, [r7, #6]
 8002b26:	70da      	strb	r2, [r3, #3]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	200008a4 	.word	0x200008a4
 8002b38:	01010001 	.word	0x01010001
 8002b3c:	200008a8 	.word	0x200008a8

08002b40 <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	211b      	movs	r1, #27
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fa7c 	bl	800204c <Powerstep01_CmdGetParam>
 8002b54:	4603      	mov	r3, r0
 8002b56:	b29b      	uxth	r3, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 fcbd 	bl	80044ec <Powerstep01_Board_ReleaseReset>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fcc0 	bl	800450c <Powerstep01_Board_Reset>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8002ba4:	79bb      	ldrb	r3, [r7, #6]
 8002ba6:	2b07      	cmp	r3, #7
 8002ba8:	d82a      	bhi.n	8002c00 <Powerstep01_SelectStepMode+0x6c>
 8002baa:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <Powerstep01_SelectStepMode+0x1c>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bd1 	.word	0x08002bd1
 8002bb4:	08002bd7 	.word	0x08002bd7
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002be3 	.word	0x08002be3
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bef 	.word	0x08002bef
 8002bc8:	08002bf5 	.word	0x08002bf5
 8002bcc:	08002bfb 	.word	0x08002bfb
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e016      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
      break;    
 8002bda:	e013      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;        
 8002be0:	e010      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8002be2:	2303      	movs	r3, #3
 8002be4:	73fb      	strb	r3, [r7, #15]
      break;
 8002be6:	e00d      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 8002be8:	2304      	movs	r3, #4
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;        
 8002bec:	e00a      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 8002bee:	2305      	movs	r3, #5
 8002bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf2:	e007      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 8002bf4:	2306      	movs	r3, #6
 8002bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf8:	e004      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfe:	e001      	b.n	8002c04 <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 8002c00:	2300      	movs	r3, #0
 8002c02:	e01c      	b.n	8002c3e <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fbf9 	bl	80023fe <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	2116      	movs	r1, #22
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fa1b 	bl	800204c <Powerstep01_CmdGetParam>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 8002c20:	7bba      	ldrb	r2, [r7, #14]
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2116      	movs	r1, #22
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fc74 	bl	800251c <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fc4b 	bl	80024d2 <Powerstep01_CmdResetPos>
  
  return TRUE;
 8002c3c:	2301      	movs	r3, #1
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop

08002c48 <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0; 
 8002c4e:	2300      	movs	r3, #0
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	e00c      	b.n	8002c6e <Powerstep01_SendQueuedCommands+0x26>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <Powerstep01_SendQueuedCommands+0x38>)
 8002c58:	441a      	add	r2, r3
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	4909      	ldr	r1, [pc, #36]	@ (8002c84 <Powerstep01_SendQueuedCommands+0x3c>)
 8002c5e:	440b      	add	r3, r1
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 fef2 	bl	8003a4c <Powerstep01_WriteBytes>
       loop++)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d9ef      	bls.n	8002c54 <Powerstep01_SendQueuedCommands+0xc>
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200008a8 	.word	0x200008a8
 8002c84:	200008ac 	.word	0x200008ac

08002c88 <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff f9d7 	bl	800204c <Powerstep01_CmdGetParam>
 8002c9e:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	1ad2      	subs	r2, r2, r3
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fc36 	bl	800251c <Powerstep01_CmdSetParam>
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2103      	movs	r1, #3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fc26 	bl	800251c <Powerstep01_CmdSetParam>
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d804      	bhi.n	8002cf2 <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 8002ce8:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <Powerstep01_SetNbDevices+0x28>)
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 8002cf2:	2300      	movs	r3, #0
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	200008a4 	.word	0x200008a4

08002d04 <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8002d14:	2301      	movs	r3, #1
 8002d16:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2116      	movs	r1, #22
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f995 	bl	800204c <Powerstep01_CmdGetParam>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 8002d34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d507      	bpl.n	8002d52 <Powerstep01_SetAnalogValue+0x4e>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d004      	beq.n	8002d52 <Powerstep01_SetAnalogValue+0x4e>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d001      	beq.n	8002d52 <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	74fb      	strb	r3, [r7, #19]
  }
  switch (param)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	2b14      	cmp	r3, #20
 8002d58:	f200 8191 	bhi.w	800307e <Powerstep01_SetAnalogValue+0x37a>
 8002d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d64 <Powerstep01_SetAnalogValue+0x60>)
 8002d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d62:	bf00      	nop
 8002d64:	08002e1f 	.word	0x08002e1f
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002e1f 	.word	0x08002e1f
 8002d70:	0800307f 	.word	0x0800307f
 8002d74:	08002e93 	.word	0x08002e93
 8002d78:	08002e93 	.word	0x08002e93
 8002d7c:	08002eb9 	.word	0x08002eb9
 8002d80:	08002edf 	.word	0x08002edf
 8002d84:	08002fd3 	.word	0x08002fd3
 8002d88:	08002fd3 	.word	0x08002fd3
 8002d8c:	08002fd3 	.word	0x08002fd3
 8002d90:	08002fd3 	.word	0x08002fd3
 8002d94:	08002f4f 	.word	0x08002f4f
 8002d98:	08003021 	.word	0x08003021
 8002d9c:	0800302d 	.word	0x0800302d
 8002da0:	0800302d 	.word	0x0800302d
 8002da4:	08002f75 	.word	0x08002f75
 8002da8:	0800307f 	.word	0x0800307f
 8002dac:	08002fad 	.word	0x08002fad
 8002db0:	08002fad 	.word	0x08002fad
 8002db4:	08002f17 	.word	0x08002f17
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 8002db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dbc:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 80030a0 <Powerstep01_SetAnalogValue+0x39c>
 8002dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	dc1c      	bgt.n	8002e04 <Powerstep01_SetAnalogValue+0x100>
 8002dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d018      	beq.n	8002e0a <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 8002dd8:	2116      	movs	r1, #22
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7ff f936 	bl	800204c <Powerstep01_CmdGetParam>
 8002de0:	4603      	mov	r3, r0
 8002de2:	43db      	mvns	r3, r3
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df6:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	d502      	bpl.n	8002e0a <Powerstep01_SetAnalogValue+0x106>
 8002e04:	2300      	movs	r3, #0
 8002e06:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 8002e08:	e13b      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 8002e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e12:	ee17 3a90 	vmov	r3, s15
 8002e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1a:	617b      	str	r3, [r7, #20]
      break;        
 8002e1c:	e131      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 8002e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	d51c      	bpl.n	8002e66 <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 8002e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e30:	eef1 7a67 	vneg.f32	s15, s15
 8002e34:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 8002e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e40:	ee17 3a90 	vmov	r3, s15
 8002e44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e48:	d80a      	bhi.n	8002e60 <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8002e4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e52:	ee17 3a90 	vmov	r3, s15
 8002e56:	425b      	negs	r3, r3
 8002e58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002e5c:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 8002e5e:	e110      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 8002e60:	2300      	movs	r3, #0
 8002e62:	74fb      	strb	r3, [r7, #19]
      break;
 8002e64:	e10d      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 8002e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6e:	ee17 3a90 	vmov	r3, s15
 8002e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e76:	d209      	bcs.n	8002e8c <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8002e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e80:	ee17 3a90 	vmov	r3, s15
 8002e84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002e88:	617b      	str	r3, [r7, #20]
      break;
 8002e8a:	e0fa      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	74fb      	strb	r3, [r7, #19]
      break;
 8002e90:	e0f7      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 8002e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e96:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80030a4 <Powerstep01_SetAnalogValue+0x3a0>
 8002e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	dd02      	ble.n	8002eaa <Powerstep01_SetAnalogValue+0x1a6>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 8002ea8:	e0eb      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 8002eaa:	ed97 0a01 	vldr	s0, [r7, #4]
 8002eae:	f000 fdf3 	bl	8003a98 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	617b      	str	r3, [r7, #20]
      break;
 8002eb6:	e0e4      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 8002eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ebc:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80030a8 <Powerstep01_SetAnalogValue+0x3a4>
 8002ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	dd02      	ble.n	8002ed0 <Powerstep01_SetAnalogValue+0x1cc>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8002ece:	e0d8      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8002ed0:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ed4:	f000 ff1a 	bl	8003d0c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	617b      	str	r3, [r7, #20]
      break;
 8002edc:	e0d1      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8002ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee2:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80030ac <Powerstep01_SetAnalogValue+0x3a8>
 8002ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	dd02      	ble.n	8002ef6 <Powerstep01_SetAnalogValue+0x1f2>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 8002ef4:	e0c5      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff f8a6 	bl	800204c <Powerstep01_CmdGetParam>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f403 5480 	and.w	r4, r3, #4096	@ 0x1000
 8002f06:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f0a:	f000 ff31 	bl	8003d70 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4323      	orrs	r3, r4
 8002f12:	617b      	str	r3, [r7, #20]
      break;      
 8002f14:	e0b5      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 8002f16:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f1a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80030b0 <Powerstep01_SetAnalogValue+0x3ac>
 8002f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	dd02      	ble.n	8002f2e <Powerstep01_SetAnalogValue+0x22a>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 8002f2c:	e0a9      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f88a 	bl	800204c <Powerstep01_CmdGetParam>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f403 6480 	and.w	r4, r3, #1024	@ 0x400
 8002f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f42:	f000 fe0f 	bl	8003b64 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4323      	orrs	r3, r4
 8002f4a:	617b      	str	r3, [r7, #20]
      break;
 8002f4c:	e099      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 8002f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f52:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80030b4 <Powerstep01_SetAnalogValue+0x3b0>
 8002f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5e:	dd02      	ble.n	8002f66 <Powerstep01_SetAnalogValue+0x262>
 8002f60:	2300      	movs	r3, #0
 8002f62:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 8002f64:	e08d      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 8002f66:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f6a:	f000 fe2f 	bl	8003bcc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	e086      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 8002f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d408      	bmi.n	8002f98 <Powerstep01_SetAnalogValue+0x294>
 8002f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f8a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80030b8 <Powerstep01_SetAnalogValue+0x3b4>
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	dd02      	ble.n	8002f9e <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 8002f9c:	e071      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 8002f9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fa2:	f000 fe45 	bl	8003c30 <Powerstep01_KTherm_Comp_to_RegVal>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	617b      	str	r3, [r7, #20]
      break;
 8002faa:	e06a      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 8002fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb0:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80030bc <Powerstep01_SetAnalogValue+0x3b8>
 8002fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	dd02      	ble.n	8002fc4 <Powerstep01_SetAnalogValue+0x2c0>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 8002fc2:	e05e      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8002fc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fc8:	f000 ff1a 	bl	8003e00 <Powerstep01_StallOcd_Th_to_RegVal>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	617b      	str	r3, [r7, #20]
      break;
 8002fd0:	e057      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 8002fd2:	7cbb      	ldrb	r3, [r7, #18]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d112      	bne.n	8002ffe <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 8002fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fdc:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80030bc <Powerstep01_SetAnalogValue+0x3b8>
 8002fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	dd02      	ble.n	8002ff0 <Powerstep01_SetAnalogValue+0x2ec>
 8002fea:	2300      	movs	r3, #0
 8002fec:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 8002fee:	e048      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 8002ff0:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ff4:	f000 ff40 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	617b      	str	r3, [r7, #20]
      break;
 8002ffc:	e041      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 8002ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	dd02      	ble.n	8003012 <Powerstep01_SetAnalogValue+0x30e>
 800300c:	2300      	movs	r3, #0
 800300e:	74fb      	strb	r3, [r7, #19]
      break;
 8003010:	e037      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 8003012:	ed97 0a01 	vldr	s0, [r7, #4]
 8003016:	f000 fe47 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 800301a:	4603      	mov	r3, r0
 800301c:	617b      	str	r3, [r7, #20]
      break;
 800301e:	e030      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8003020:	7cbb      	ldrb	r3, [r7, #18]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	74fb      	strb	r3, [r7, #19]
        break;
 800302a:	e02a      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 800302c:	7cbb      	ldrb	r3, [r7, #18]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d112      	bne.n	8003058 <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 8003032:	edd7 7a01 	vldr	s15, [r7, #4]
 8003036:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80030c0 <Powerstep01_SetAnalogValue+0x3bc>
 800303a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	dd02      	ble.n	800304a <Powerstep01_SetAnalogValue+0x346>
 8003044:	2300      	movs	r3, #0
 8003046:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 8003048:	e01b      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 800304a:	ed97 0a01 	vldr	s0, [r7, #4]
 800304e:	f000 ff4f 	bl	8003ef0 <Powerstep01_Tmin_Time_to_RegVal>
 8003052:	4603      	mov	r3, r0
 8003054:	617b      	str	r3, [r7, #20]
      break;
 8003056:	e014      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 8003058:	edd7 7a01 	vldr	s15, [r7, #4]
 800305c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80030c4 <Powerstep01_SetAnalogValue+0x3c0>
 8003060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003068:	dd02      	ble.n	8003070 <Powerstep01_SetAnalogValue+0x36c>
 800306a:	2300      	movs	r3, #0
 800306c:	74fb      	strb	r3, [r7, #19]
      break;
 800306e:	e008      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 8003070:	ed97 0a01 	vldr	s0, [r7, #4]
 8003074:	f000 fd42 	bl	8003afc <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003078:	4603      	mov	r3, r0
 800307a:	617b      	str	r3, [r7, #20]
      break;
 800307c:	e001      	b.n	8003082 <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fa44 	bl	800251c <Powerstep01_CmdSetParam>
  }
  return result;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
}
 8003096:	4618      	mov	r0, r3
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}
 800309e:	bf00      	nop
 80030a0:	43ff8000 	.word	0x43ff8000
 80030a4:	4768c600 	.word	0x4768c600
 80030a8:	4673e800 	.word	0x4673e800
 80030ac:	44741333 	.word	0x44741333
 80030b0:	46742400 	.word	0x46742400
 80030b4:	44742000 	.word	0x44742000
 80030b8:	3fbc0000 	.word	0x3fbc0000
 80030bc:	447a0000 	.word	0x447a0000
 80030c0:	42800000 	.word	0x42800000
 80030c4:	3ecccccd 	.word	0x3ecccccd

080030c8 <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 f9d9 	bl	800448c <Powerstep01_Board_StartStepClock>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 80030e6:	f001 f9f7 	bl	80044d8 <Powerstep01_Board_StopStepClock>
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 80030fa:	e016      	b.n	800312a <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8003100:	2300      	movs	r3, #0
 8003102:	71bb      	strb	r3, [r7, #6]
 8003104:	e00b      	b.n	800311e <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 8003106:	79bb      	ldrb	r3, [r7, #6]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fc92 	bl	8002a32 <Powerstep01_IsDeviceBusy>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4313      	orrs	r3, r2
 8003116:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8003118:	79bb      	ldrb	r3, [r7, #6]
 800311a:	3301      	adds	r3, #1
 800311c:	71bb      	strb	r3, [r7, #6]
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	79ba      	ldrb	r2, [r7, #6]
 8003126:	429a      	cmp	r2, r3
 8003128:	d3ed      	bcc.n	8003106 <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e5      	bne.n	80030fc <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200008a4 	.word	0x200008a4

08003140 <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 800314a:	bf00      	nop
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fc6f 	bl	8002a32 <Powerstep01_IsDeviceBusy>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f8      	bne.n	800314c <Powerstep01_WaitWhileActive+0xc>
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	43db      	mvns	r3, r3
 800317a:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3301      	adds	r3, #1
 8003180:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003188:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	425b      	negs	r3, r3
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e001      	b.n	8003196 <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 8003196:	68fb      	ldr	r3, [r7, #12]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 80031a8:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <Powerstep01_BusyInterruptHandler+0x24>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <Powerstep01_BusyInterruptHandler+0x28>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 80031b6:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <Powerstep01_BusyInterruptHandler+0x24>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 80031bc:	4b03      	ldr	r3, [pc, #12]	@ (80031cc <Powerstep01_BusyInterruptHandler+0x28>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
  }
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000898 	.word	0x20000898
 80031cc:	200008b1 	.word	0x200008b1

080031d0 <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 80031da:	4b07      	ldr	r3, [pc, #28]	@ (80031f8 <Powerstep01_ErrorHandler+0x28>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 80031e2:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <Powerstep01_ErrorHandler+0x28>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	4610      	mov	r0, r2
 80031ea:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 80031ec:	e000      	b.n	80031f0 <Powerstep01_ErrorHandler+0x20>
    while(1)
 80031ee:	e7fe      	b.n	80031ee <Powerstep01_ErrorHandler+0x1e>
}
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200008a0 	.word	0x200008a0

080031fc <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8003200:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <Powerstep01_FlagInterruptHandler+0x24>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <Powerstep01_FlagInterruptHandler+0x28>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 800320e:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <Powerstep01_FlagInterruptHandler+0x24>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8003214:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <Powerstep01_FlagInterruptHandler+0x28>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
  }
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	2000089c 	.word	0x2000089c
 8003224:	200008b1 	.word	0x200008b1

08003228 <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	603a      	str	r2, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
 8003234:	460b      	mov	r3, r1
 8003236:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 8003238:	4b59      	ldr	r3, [pc, #356]	@ (80033a0 <Powerstep01_SendCommand+0x178>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	79fa      	ldrb	r2, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	f080 80a8 	bcs.w	8003396 <Powerstep01_SendCommand+0x16e>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800324a:	4b55      	ldr	r3, [pc, #340]	@ (80033a0 <Powerstep01_SendCommand+0x178>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 800325a:	2300      	movs	r3, #0
 800325c:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 800325e:	4b51      	ldr	r3, [pc, #324]	@ (80033a4 <Powerstep01_SendCommand+0x17c>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8003264:	7abb      	ldrb	r3, [r7, #10]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800326a:	f001 f82a 	bl	80042c2 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 800326e:	2300      	movs	r3, #0
 8003270:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e019      	b.n	80032ac <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8003278:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8003282:	4a49      	ldr	r2, [pc, #292]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	3301      	adds	r3, #1
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800328e:	4a46      	ldr	r2, [pc, #280]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	3302      	adds	r3, #2
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;   
 800329a:	4a43      	ldr	r2, [pc, #268]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	3303      	adds	r3, #3
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <Powerstep01_SendCommand+0x178>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d3de      	bcc.n	8003278 <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 80032c0:	2b8a      	cmp	r3, #138	@ 0x8a
 80032c2:	d016      	beq.n	80032f2 <Powerstep01_SendCommand+0xca>
 80032c4:	2b8a      	cmp	r3, #138	@ 0x8a
 80032c6:	dc32      	bgt.n	800332e <Powerstep01_SendCommand+0x106>
 80032c8:	2b82      	cmp	r3, #130	@ 0x82
 80032ca:	d012      	beq.n	80032f2 <Powerstep01_SendCommand+0xca>
 80032cc:	2b82      	cmp	r3, #130	@ 0x82
 80032ce:	dc2e      	bgt.n	800332e <Powerstep01_SendCommand+0x106>
 80032d0:	2b68      	cmp	r3, #104	@ 0x68
 80032d2:	d00a      	beq.n	80032ea <Powerstep01_SendCommand+0xc2>
 80032d4:	2b68      	cmp	r3, #104	@ 0x68
 80032d6:	dc2a      	bgt.n	800332e <Powerstep01_SendCommand+0x106>
 80032d8:	2b60      	cmp	r3, #96	@ 0x60
 80032da:	d006      	beq.n	80032ea <Powerstep01_SendCommand+0xc2>
 80032dc:	2b60      	cmp	r3, #96	@ 0x60
 80032de:	dc26      	bgt.n	800332e <Powerstep01_SendCommand+0x106>
 80032e0:	2b40      	cmp	r3, #64	@ 0x40
 80032e2:	d006      	beq.n	80032f2 <Powerstep01_SendCommand+0xca>
 80032e4:	2b50      	cmp	r3, #80	@ 0x50
 80032e6:	d004      	beq.n	80032f2 <Powerstep01_SendCommand+0xca>
 80032e8:	e021      	b.n	800332e <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80032f0:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 80032f2:	7a7b      	ldrb	r3, [r7, #9]
 80032f4:	492c      	ldr	r1, [pc, #176]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 80032f6:	79ba      	ldrb	r2, [r7, #6]
 80032f8:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	0c1a      	lsrs	r2, r3, #16
 80032fe:	7a7b      	ldrb	r3, [r7, #9]
 8003300:	b2d1      	uxtb	r1, r2
 8003302:	4a29      	ldr	r2, [pc, #164]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003304:	4413      	add	r3, r2
 8003306:	460a      	mov	r2, r1
 8003308:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	0a1a      	lsrs	r2, r3, #8
 800330e:	7a7b      	ldrb	r3, [r7, #9]
 8003310:	b2d1      	uxtb	r1, r2
 8003312:	4a25      	ldr	r2, [pc, #148]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003314:	4413      	add	r3, r2
 8003316:	460a      	mov	r2, r1
 8003318:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 800331a:	7a7b      	ldrb	r3, [r7, #9]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d1      	uxtb	r1, r2
 8003320:	4a21      	ldr	r2, [pc, #132]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003322:	4413      	add	r3, r2
 8003324:	460a      	mov	r2, r1
 8003326:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 3;
 8003328:	2303      	movs	r3, #3
 800332a:	72fb      	strb	r3, [r7, #11]
          break;
 800332c:	e012      	b.n	8003354 <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 800332e:	7a7b      	ldrb	r3, [r7, #9]
 8003330:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003332:	2100      	movs	r1, #0
 8003334:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8003336:	7a7b      	ldrb	r3, [r7, #9]
 8003338:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 800333a:	4413      	add	r3, r2
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8003340:	7a7b      	ldrb	r3, [r7, #9]
 8003342:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003344:	4413      	add	r3, r2
 8003346:	2200      	movs	r2, #0
 8003348:	709a      	strb	r2, [r3, #2]
          spiTxBursts[3][spiIndex] = param;
 800334a:	7a7b      	ldrb	r3, [r7, #9]
 800334c:	4a16      	ldr	r2, [pc, #88]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 800334e:	4413      	add	r3, r2
 8003350:	79ba      	ldrb	r2, [r7, #6]
 8003352:	70da      	strb	r2, [r3, #3]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8003354:	f000 ffac 	bl	80042b0 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <Powerstep01_SendCommand+0x17c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	f47f af7b 	bne.w	800325e <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes; 
 8003368:	7afb      	ldrb	r3, [r7, #11]
 800336a:	f1c3 0303 	rsb	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00c      	b.n	800338c <Powerstep01_SendCommand+0x164>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a0c      	ldr	r2, [pc, #48]	@ (80033a8 <Powerstep01_SendCommand+0x180>)
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	490c      	ldr	r1, [pc, #48]	@ (80033ac <Powerstep01_SendCommand+0x184>)
 800337c:	440b      	add	r3, r1
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f000 fb63 	bl	8003a4c <Powerstep01_WriteBytes>
         loop++)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d9ef      	bls.n	8003372 <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8003392:	f000 ff96 	bl	80042c2 <Powerstep01_Board_EnableIrq>
  }
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200008a4 	.word	0x200008a4
 80033a4:	200008b0 	.word	0x200008b0
 80033a8:	200008a8 	.word	0x200008a8
 80033ac:	200008ac 	.word	0x200008ac

080033b0 <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	2200      	movs	r2, #0
 80033be:	2101      	movs	r1, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f8ab 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f8a5 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2103      	movs	r1, #3
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff f89f 	bl	800251c <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 8120 	bne.w	8003626 <Powerstep01_SetRegisterToPredefinedValues+0x276>
  {
    case 0:
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 80033e6:	2308      	movs	r3, #8
 80033e8:	73fb      	strb	r3, [r7, #15]
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 80033ea:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8003630 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 80033ee:	f000 fb53 	bl	8003a98 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80033f2:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 80033f4:	461a      	mov	r2, r3
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2105      	movs	r1, #5
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f88e 	bl	800251c <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_ACC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8003400:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8003630 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 8003404:	f000 fb48 	bl	8003a98 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003408:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 800340a:	461a      	mov	r2, r3
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	2106      	movs	r1, #6
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff f883 	bl	800251c <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_DEC_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8003416:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8003630 <Powerstep01_SetRegisterToPredefinedValues+0x280>
 800341a:	f000 fc77 	bl	8003d0c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 800341e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8003420:	461a      	mov	r2, r3
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2107      	movs	r1, #7
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f878 	bl	800251c <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MAX_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
        POWERSTEP01_CONF_PARAM_LSPD_BIT_DEVICE_0|
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 800342c:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8003634 <Powerstep01_SetRegisterToPredefinedValues+0x284>
 8003430:	f000 fc9e 	bl	8003d70 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8003434:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8003436:	461a      	mov	r2, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	2108      	movs	r1, #8
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff f86d 	bl	800251c <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_MIN_SPEED_DEVICE_0));
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
        POWERSTEP01_CONF_PARAM_BOOST_MODE_DEVICE_0|
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8003442:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8003638 <Powerstep01_SetRegisterToPredefinedValues+0x288>
 8003446:	f000 fb8d 	bl	8003b64 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 800344a:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 800344c:	461a      	mov	r2, r3
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2115      	movs	r1, #21
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f862 	bl	800251c <Powerstep01_CmdSetParam>
          POWERSTEP01_CONF_PARAM_FS_SPD_DEVICE_0)); 
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2208      	movs	r2, #8
 800345c:	2113      	movs	r1, #19
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f85c 	bl	800251c <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_OCD_TH_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	220b      	movs	r2, #11
 8003468:	2116      	movs	r1, #22
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f856 	bl	800251c <Powerstep01_CmdSetParam>
        (uint8_t)POWERSTEP01_CONF_PARAM_SYNC_MODE_DEVICE_0 |
        (uint8_t)POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0|
        (uint8_t)POWERSTEP01_CONF_PARAM_STEP_MODE_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	22ef      	movs	r2, #239	@ 0xef
 8003474:	2117      	movs	r1, #23
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff f850 	bl	800251c <Powerstep01_CmdSetParam>
        POWERSTEP01_CONF_PARAM_ALARM_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	22c3      	movs	r2, #195	@ 0xc3
 8003480:	2118      	movs	r1, #24
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f84a 	bl	800251c <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_IGATE_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TCC_DEVICE_0   | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TBOOST_DEVICE_0|
        (uint16_t)POWERSTEP01_CONF_PARAM_WD_EN_DEVICE_0);
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	2119      	movs	r1, #25
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f844 	bl	800251c <Powerstep01_CmdSetParam>
        (uint16_t)POWERSTEP01_CONF_PARAM_TBLANK_DEVICE_0 | 
        (uint16_t)POWERSTEP01_CONF_PARAM_TDT_DEVICE_0);
      // Voltage mode
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d175      	bne.n	8003586 <Powerstep01_SetRegisterToPredefinedValues+0x1d6>
      {
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 800349a:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 800363c <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 800349e:	f000 fb95 	bl	8003bcc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80034a2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80034a4:	461a      	mov	r2, r3
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	210d      	movs	r1, #13
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff f836 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_INT_SPD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
          Powerstep01_KTherm_Comp_to_RegVal(
 80034b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80034b4:	f000 fbbc 	bl	8003c30 <Powerstep01_KTherm_Comp_to_RegVal>
 80034b8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 80034ba:	461a      	mov	r2, r3
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2111      	movs	r1, #17
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f82b 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_K_THERM_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
          Powerstep01_StallOcd_Th_to_RegVal(
 80034c6:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8003640 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 80034ca:	f000 fc99 	bl	8003e00 <Powerstep01_StallOcd_Th_to_RegVal>
 80034ce:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 80034d0:	461a      	mov	r2, r3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2114      	movs	r1, #20
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f820 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_STALL_TH_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
          Powerstep01_Kval_Perc_to_RegVal(
 80034dc:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8003644 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 80034e0:	f000 fbe2 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 80034e4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 80034e6:	461a      	mov	r2, r3
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2109      	movs	r1, #9
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f815 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_HOLD_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
          Powerstep01_Kval_Perc_to_RegVal(
 80034f2:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003644 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 80034f6:	f000 fbd7 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 80034fa:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	210a      	movs	r1, #10
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f80a 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_RUN_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
          Powerstep01_Kval_Perc_to_RegVal(
 8003508:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8003644 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 800350c:	f000 fbcc 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 8003510:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8003512:	461a      	mov	r2, r3
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	210b      	movs	r1, #11
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe ffff 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_ACC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
          Powerstep01_Kval_Perc_to_RegVal(
 800351e:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8003644 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8003522:	f000 fbc1 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 8003526:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	210c      	movs	r1, #12
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fff4 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_KVAL_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003534:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8003648 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8003538:	f000 fae0 	bl	8003afc <Powerstep01_BEMFslope_Perc_to_RegVal>
 800353c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	210e      	movs	r1, #14
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe ffe9 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_ST_SLP_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800354a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800364c <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 800354e:	f000 fad5 	bl	8003afc <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003552:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8003554:	461a      	mov	r2, r3
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	210f      	movs	r1, #15
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe ffde 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_ACC_DEVICE_0));  
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8003560:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 800364c <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8003564:	f000 faca 	bl	8003afc <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003568:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 800356a:	461a      	mov	r2, r3
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2110      	movs	r1, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ffd3 	bl	800251c <Powerstep01_CmdSetParam>
            POWERSTEP01_CONF_PARAM_FN_SLP_DEC_DEVICE_0));
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	f642 6208 	movw	r2, #11784	@ 0x2e08
 800357c:	211a      	movs	r1, #26
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe ffcc 	bl	800251c <Powerstep01_CmdSetParam>
          (uint16_t)POWERSTEP01_CONF_PARAM_UVLOVAL_DEVICE_0       | 
          (uint16_t)POWERSTEP01_CONF_PARAM_VCCVAL_DEVICE_0        | 
          (uint16_t)POWERSTEP01_CONF_PARAM_TSW_DEVICE_0           |
          (uint16_t)POWERSTEP01_CONF_PARAM_PRED_DEVICE_0);          
      }
      break;
 8003584:	e04e      	b.n	8003624 <Powerstep01_SetRegisterToPredefinedValues+0x274>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003586:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8003650 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 800358a:	f000 fc75 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800358e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8003590:	461a      	mov	r2, r3
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2109      	movs	r1, #9
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe ffc0 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800359c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8003650 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 80035a0:	f000 fc6a 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80035a4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	210a      	movs	r1, #10
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe ffb5 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80035b2:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003650 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 80035b6:	f000 fc5f 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80035ba:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 80035bc:	461a      	mov	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	210b      	movs	r1, #11
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe ffaa 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80035c8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003650 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 80035cc:	f000 fc54 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80035d0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	210c      	movs	r1, #12
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fe ff9f 	bl	800251c <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2235      	movs	r2, #53	@ 0x35
 80035e2:	210e      	movs	r1, #14
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe ff99 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80035ea:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80035ee:	f000 fc7f 	bl	8003ef0 <Powerstep01_Tmin_Time_to_RegVal>
 80035f2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 80035f4:	461a      	mov	r2, r3
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	210f      	movs	r1, #15
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe ff8e 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8003600:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 8003604:	f000 fc74 	bl	8003ef0 <Powerstep01_Tmin_Time_to_RegVal>
 8003608:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 800360a:	461a      	mov	r2, r3
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	2110      	movs	r1, #16
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe ff83 	bl	800251c <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f243 2208 	movw	r2, #12808	@ 0x3208
 800361c:	211a      	movs	r1, #26
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe ff7c 	bl	800251c <Powerstep01_CmdSetParam>
      break;
 8003624:	bf00      	nop
      }
      break;
#endif
    default: ;
  }
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	44c80000 	.word	0x44c80000
 8003634:	00000000 	.word	0x00000000
 8003638:	451c4000 	.word	0x451c4000
 800363c:	42760c4a 	.word	0x42760c4a
 8003640:	4404d000 	.word	0x4404d000
 8003644:	418028f6 	.word	0x418028f6
 8003648:	3d1c432d 	.word	0x3d1c432d
 800364c:	3d801f75 	.word	0x3d801f75
 8003650:	43a40f5c 	.word	0x43a40f5c

08003654 <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	2200      	movs	r2, #0
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe ff58 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	2200      	movs	r2, #0
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe ff52 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	2200      	movs	r2, #0
 800367c:	2103      	movs	r1, #3
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe ff4c 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	edd3 7a01 	vldr	s15, [r3, #4]
 800368a:	eeb0 0a67 	vmov.f32	s0, s15
 800368e:	f000 fa03 	bl	8003a98 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8003692:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8003694:	461a      	mov	r2, r3
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	2105      	movs	r1, #5
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe ff3e 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	f000 f9f5 	bl	8003a98 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80036ae:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	2106      	movs	r1, #6
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe ff30 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	edd3 7a03 	vldr	s15, [r3, #12]
 80036c2:	eeb0 0a67 	vmov.f32	s0, s15
 80036c6:	f000 fb21 	bl	8003d0c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 80036ca:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	2107      	movs	r1, #7
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe ff22 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	edd3 7a04 	vldr	s15, [r3, #16]
 80036e2:	eeb0 0a67 	vmov.f32	s0, s15
 80036e6:	f000 fb11 	bl	8003d0c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 80036ea:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 80036ec:	4323      	orrs	r3, r4
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	2108      	movs	r1, #8
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe ff10 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	edd3 7a06 	vldr	s15, [r3, #24]
 8003706:	eeb0 0a67 	vmov.f32	s0, s15
 800370a:	f000 fa2b 	bl	8003b64 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 800370e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8003710:	4323      	orrs	r3, r4
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	2115      	movs	r1, #21
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fefe 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	edd3 7a08 	vldr	s15, [r3, #32]
 8003726:	eeb0 0a67 	vmov.f32	s0, s15
 800372a:	f000 fb69 	bl	8003e00 <Powerstep01_StallOcd_Th_to_RegVal>
 800372e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8003730:	461a      	mov	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2113      	movs	r1, #19
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fef0 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8003746:	4313      	orrs	r3, r2
 8003748:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8003750:	4313      	orrs	r3, r2
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	2116      	movs	r1, #22
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fede 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8003766:	461a      	mov	r2, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	2117      	movs	r1, #23
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fed5 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 800377e:	4313      	orrs	r3, r2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 8003788:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 800378e:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2118      	movs	r1, #24
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fec0 	bl	800251c <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80037a8:	4313      	orrs	r3, r2
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2119      	movs	r1, #25
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe feb2 	bl	800251c <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f040 80b6 	bne.w	800392e <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80037c8:	eeb0 0a67 	vmov.f32	s0, s15
 80037cc:	f000 f9fe 	bl	8003bcc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80037d0:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80037d2:	461a      	mov	r2, r3
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	210d      	movs	r1, #13
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe fe9f 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80037e4:	eeb0 0a67 	vmov.f32	s0, s15
 80037e8:	f000 fa22 	bl	8003c30 <Powerstep01_KTherm_Comp_to_RegVal>
 80037ec:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 80037ee:	461a      	mov	r2, r3
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	2111      	movs	r1, #17
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fe91 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003800:	eeb0 0a67 	vmov.f32	s0, s15
 8003804:	f000 fafc 	bl	8003e00 <Powerstep01_StallOcd_Th_to_RegVal>
 8003808:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 800380a:	461a      	mov	r2, r3
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	2114      	movs	r1, #20
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fe83 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800381c:	eeb0 0a67 	vmov.f32	s0, s15
 8003820:	f000 fa42 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 8003824:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8003826:	461a      	mov	r2, r3
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2109      	movs	r1, #9
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fe75 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003838:	eeb0 0a67 	vmov.f32	s0, s15
 800383c:	f000 fa34 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 8003840:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	210a      	movs	r1, #10
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fe67 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003854:	eeb0 0a67 	vmov.f32	s0, s15
 8003858:	f000 fa26 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 800385c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 800385e:	461a      	mov	r2, r3
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	210b      	movs	r1, #11
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fe59 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003870:	eeb0 0a67 	vmov.f32	s0, s15
 8003874:	f000 fa18 	bl	8003ca8 <Powerstep01_Kval_Perc_to_RegVal>
 8003878:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 800387a:	461a      	mov	r2, r3
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	210c      	movs	r1, #12
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fe4b 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	f000 f934 	bl	8003afc <Powerstep01_BEMFslope_Perc_to_RegVal>
 8003894:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8003896:	461a      	mov	r2, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	210e      	movs	r1, #14
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fe3d 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80038a8:	eeb0 0a67 	vmov.f32	s0, s15
 80038ac:	f000 f926 	bl	8003afc <Powerstep01_BEMFslope_Perc_to_RegVal>
 80038b0:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 80038b2:	461a      	mov	r2, r3
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	210f      	movs	r1, #15
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fe2f 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80038c4:	eeb0 0a67 	vmov.f32	s0, s15
 80038c8:	f000 f918 	bl	8003afc <Powerstep01_BEMFslope_Perc_to_RegVal>
 80038cc:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	2110      	movs	r1, #16
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe fe21 	bl	800251c <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
      (uint16_t)initPrm->vm.swMode | 
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 80038e6:	4313      	orrs	r3, r2
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80038f0:	4313      	orrs	r3, r2
 80038f2:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 8003906:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 800390e:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
      (uint16_t)initPrm->vm.vccVal| 
 8003916:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 800391e:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003920:	461a      	mov	r2, r3
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	211a      	movs	r1, #26
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fdf8 	bl	800251c <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 800392c:	e08a      	b.n	8003a44 <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003934:	eeb0 0a67 	vmov.f32	s0, s15
 8003938:	f000 fa9e 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800393c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 800393e:	461a      	mov	r2, r3
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	2109      	movs	r1, #9
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fde9 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003950:	eeb0 0a67 	vmov.f32	s0, s15
 8003954:	f000 fa90 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003958:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 800395a:	461a      	mov	r2, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	210a      	movs	r1, #10
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fddb 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	f000 fa82 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003974:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8003976:	461a      	mov	r2, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	210b      	movs	r1, #11
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fdcd 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003988:	eeb0 0a67 	vmov.f32	s0, s15
 800398c:	f000 fa74 	bl	8003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8003990:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8003992:	461a      	mov	r2, r3
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	210c      	movs	r1, #12
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fdbf 	bl	800251c <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
          (uint8_t)initPrm->cm.fastStep);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80039aa:	4313      	orrs	r3, r2
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	210e      	movs	r1, #14
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fdb1 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80039c0:	eeb0 0a67 	vmov.f32	s0, s15
 80039c4:	f000 fa94 	bl	8003ef0 <Powerstep01_Tmin_Time_to_RegVal>
 80039c8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 80039ca:	461a      	mov	r2, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	210f      	movs	r1, #15
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fda3 	bl	800251c <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80039dc:	eeb0 0a67 	vmov.f32	s0, s15
 80039e0:	f000 fa86 	bl	8003ef0 <Powerstep01_Tmin_Time_to_RegVal>
 80039e4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 80039e6:	461a      	mov	r2, r3
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2110      	movs	r1, #16
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fd95 	bl	800251c <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
          (uint16_t)initPrm->cm.swMode| 
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 80039fe:	4313      	orrs	r3, r2
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
          (uint16_t)initPrm->cm.tqReg| 
 8003a12:	4313      	orrs	r3, r2
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
          (uint16_t)initPrm->cm.ocSd| 
 8003a1e:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 8003a26:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
          (uint16_t)initPrm->cm.vccVal|
 8003a2e:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
          (uint16_t)initPrm->cm.tsw|
 8003a36:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	211a      	movs	r1, #26
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fd6c 	bl	800251c <Powerstep01_CmdSetParam>
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd90      	pop	{r4, r7, pc}

08003a4c <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8003a56:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <Powerstep01_WriteBytes+0x40>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fd9b 	bl	800459c <Powerstep01_Board_SpiWriteBytes>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 8003a6c:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8003a70:	f7ff fbae 	bl	80031d0 <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <Powerstep01_WriteBytes+0x44>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <Powerstep01_WriteBytes+0x48>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
  }
}                     
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200008a4 	.word	0x200008a4
 8003a90:	200008b1 	.word	0x200008b1
 8003a94:	200008b0 	.word	0x200008b0

08003a98 <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 8003aa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003acc <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 8003aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aba:	ee17 3a90 	vmov	r3, s15
 8003abe:	b29b      	uxth	r3, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	3d8cbccc 	.word	0x3d8cbccc

08003ad0 <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003af8 <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 8003ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003aea:	eeb0 0a67 	vmov.f32	s0, s15
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	4168d4a5 	.word	0x4168d4a5

08003afc <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 8003b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b0a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003b34 <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 8003b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b1e:	edc7 7a00 	vstr	s15, [r7]
 8003b22:	783b      	ldrb	r3, [r7, #0]
 8003b24:	b2db      	uxtb	r3, r3
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	441f6000 	.word	0x441f6000

08003b38 <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003b60 <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 8003b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003b52:	eeb0 0a67 	vmov.f32	s0, s15
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	3acd9a67 	.word	0x3acd9a67

08003b64 <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 8003b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b72:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003b90 <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 8003b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7e:	ee17 3a90 	vmov	r3, s15
 8003b82:	b29b      	uxth	r3, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	3d8637bd 	.word	0x3d8637bd

08003b94 <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003bc4 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 8003baa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bae:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003bc8 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 8003bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	3f7fbe77 	.word	0x3f7fbe77
 8003bc8:	41742400 	.word	0x41742400

08003bcc <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 8003bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bda:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003c00 <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 8003bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 3a90 	vmov	r3, s15
 8003bf2:	b29b      	uxth	r3, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	418637bd 	.word	0x418637bd

08003c04 <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003c2c <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 8003c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	3d7423d9 	.word	0x3d7423d9

08003c30 <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 8003c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c46:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003c70 <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 8003c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003c52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c5a:	edc7 7a00 	vstr	s15, [r7]
 8003c5e:	783b      	ldrb	r3, [r7, #0]
 8003c60:	b2db      	uxtb	r3, r3
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	42000000 	.word	0x42000000

08003c74 <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003ca4 <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 8003c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c92:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8003c96:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	3d000000 	.word	0x3d000000

08003ca8 <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 8003cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003ce0 <Powerstep01_Kval_Perc_to_RegVal+0x38>
 8003cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003cc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cca:	edc7 7a00 	vstr	s15, [r7]
 8003cce:	783b      	ldrb	r3, [r7, #0]
 8003cd0:	b2db      	uxtb	r3, r3
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	4023d70a 	.word	0x4023d70a

08003ce4 <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eeb5 7a09 	vmov.f32	s14, #89	@ 0x3ec80000  0.3906250
 8003cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 8003d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d1a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003d40 <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 8003d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d2e:	ee17 3a90 	vmov	r3, s15
 8003d32:	b29b      	uxth	r3, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	3d8637bd 	.word	0x3d8637bd

08003d44 <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003d6c <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 8003d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	41742400 	.word	0x41742400

08003d70 <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 8003d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d7e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003da4 <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 8003d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d92:	ee17 3a90 	vmov	r3, s15
 8003d96:	b29b      	uxth	r3, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	408637bd 	.word	0x408637bd

08003da8 <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003dd0 <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 8003dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	3e742400 	.word	0x3e742400

08003dd4 <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003dfc <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 8003dea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003dee:	eeb0 0a67 	vmov.f32	s0, s15
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	3c742400 	.word	0x3c742400

08003e00 <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 8003e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003e40 <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 8003e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e16:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003e44 <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 8003e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2a:	edc7 7a00 	vstr	s15, [r7]
 8003e2e:	783b      	ldrb	r3, [r7, #0]
 8003e30:	b2db      	uxtb	r3, r3
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	41fa0000 	.word	0x41fa0000
 8003e44:	3d03126f 	.word	0x3d03126f

08003e48 <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3301      	adds	r3, #1
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003e74 <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 8003e60:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003e64:	eeb0 0a67 	vmov.f32	s0, s15
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	41fa0000 	.word	0x41fa0000

08003e78 <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 8003e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e86:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003eb8 <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 8003e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e8e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003ebc <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 8003e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea2:	edc7 7a00 	vstr	s15, [r7]
 8003ea6:	783b      	ldrb	r3, [r7, #0]
 8003ea8:	b2db      	uxtb	r3, r3
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40fa0000 	.word	0x40fa0000
 8003ebc:	3e03126f 	.word	0x3e03126f

08003ec0 <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003eec <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 8003ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003edc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40fa0000 	.word	0x40fa0000

08003ef0 <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 8003efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003efe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f16:	edc7 7a00 	vstr	s15, [r7]
 8003f1a:	783b      	ldrb	r3, [r7, #0]
 8003f1c:	b2db      	uxtb	r3, r3
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3301      	adds	r3, #1
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f42:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003f46:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	@ 0x30
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a51      	ldr	r2, [pc, #324]	@ (80040a4 <I2Cx_MspInit+0x150>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d14d      	bne.n	8004000 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003f64:	4b50      	ldr	r3, [pc, #320]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	4a4f      	ldr	r2, [pc, #316]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f70:	4b4d      	ldr	r3, [pc, #308]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003f80:	2312      	movs	r3, #18
 8003f82:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	4619      	mov	r1, r3
 8003f96:	4845      	ldr	r0, [pc, #276]	@ (80040ac <I2Cx_MspInit+0x158>)
 8003f98:	f001 fa32 	bl	8005400 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4840      	ldr	r0, [pc, #256]	@ (80040ac <I2Cx_MspInit+0x158>)
 8003faa:	f001 fa29 	bl	8005400 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003fae:	4b3e      	ldr	r3, [pc, #248]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003fb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fba:	4b3b      	ldr	r3, [pc, #236]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003fc6:	4b38      	ldr	r3, [pc, #224]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a37      	ldr	r2, [pc, #220]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003fcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fd0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003fd2:	4b35      	ldr	r3, [pc, #212]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	4a34      	ldr	r2, [pc, #208]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8003fd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fdc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	2048      	movs	r0, #72	@ 0x48
 8003fe4:	f000 fe7f 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003fe8:	2048      	movs	r0, #72	@ 0x48
 8003fea:	f000 fe98 	bl	8004d1e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	210f      	movs	r1, #15
 8003ff2:	2049      	movs	r0, #73	@ 0x49
 8003ff4:	f000 fe77 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003ff8:	2049      	movs	r0, #73	@ 0x49
 8003ffa:	f000 fe90 	bl	8004d1e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003ffe:	e04d      	b.n	800409c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004000:	4b29      	ldr	r3, [pc, #164]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	4a28      	ldr	r2, [pc, #160]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8004006:	f043 0302 	orr.w	r3, r3, #2
 800400a:	6313      	str	r3, [r2, #48]	@ 0x30
 800400c:	4b26      	ldr	r3, [pc, #152]	@ (80040a8 <I2Cx_MspInit+0x154>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800401c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800401e:	2312      	movs	r3, #18
 8004020:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004026:	2302      	movs	r3, #2
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800402a:	2304      	movs	r3, #4
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800402e:	f107 031c 	add.w	r3, r7, #28
 8004032:	4619      	mov	r1, r3
 8004034:	481e      	ldr	r0, [pc, #120]	@ (80040b0 <I2Cx_MspInit+0x15c>)
 8004036:	f001 f9e3 	bl	8005400 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800403a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800403e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004040:	f107 031c 	add.w	r3, r7, #28
 8004044:	4619      	mov	r1, r3
 8004046:	481a      	ldr	r0, [pc, #104]	@ (80040b0 <I2Cx_MspInit+0x15c>)
 8004048:	f001 f9da 	bl	8005400 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800404c:	4b16      	ldr	r3, [pc, #88]	@ (80040a8 <I2Cx_MspInit+0x154>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	4a15      	ldr	r2, [pc, #84]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8004052:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004056:	6413      	str	r3, [r2, #64]	@ 0x40
 8004058:	4b13      	ldr	r3, [pc, #76]	@ (80040a8 <I2Cx_MspInit+0x154>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004064:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	4a0f      	ldr	r2, [pc, #60]	@ (80040a8 <I2Cx_MspInit+0x154>)
 800406a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800406e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004070:	4b0d      	ldr	r3, [pc, #52]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4a0c      	ldr	r2, [pc, #48]	@ (80040a8 <I2Cx_MspInit+0x154>)
 8004076:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800407a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800407c:	2200      	movs	r2, #0
 800407e:	210f      	movs	r1, #15
 8004080:	201f      	movs	r0, #31
 8004082:	f000 fe30 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004086:	201f      	movs	r0, #31
 8004088:	f000 fe49 	bl	8004d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800408c:	2200      	movs	r2, #0
 800408e:	210f      	movs	r1, #15
 8004090:	2020      	movs	r0, #32
 8004092:	f000 fe28 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004096:	2020      	movs	r0, #32
 8004098:	f000 fe41 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 800409c:	bf00      	nop
 800409e:	3730      	adds	r7, #48	@ 0x30
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	200008b4 	.word	0x200008b4
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40021c00 	.word	0x40021c00
 80040b0:	40020400 	.word	0x40020400

080040b4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f001 ffa7 	bl	8006010 <HAL_I2C_GetState>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d125      	bne.n	8004114 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a14      	ldr	r2, [pc, #80]	@ (800411c <I2Cx_Init+0x68>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <I2Cx_Init+0x6c>)
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e002      	b.n	80040de <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a12      	ldr	r2, [pc, #72]	@ (8004124 <I2Cx_Init+0x70>)
 80040dc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a11      	ldr	r2, [pc, #68]	@ (8004128 <I2Cx_Init+0x74>)
 80040e2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff23 	bl	8003f54 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f001 fc84 	bl	8005a1c <HAL_I2C_Init>
  }
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	200008b4 	.word	0x200008b4
 8004120:	40005c00 	.word	0x40005c00
 8004124:	40005400 	.word	0x40005400
 8004128:	40912732 	.word	0x40912732

0800412c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af04      	add	r7, sp, #16
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	72fb      	strb	r3, [r7, #11]
 800413e:	460b      	mov	r3, r1
 8004140:	813b      	strh	r3, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	b299      	uxth	r1, r3
 800414e:	88f8      	ldrh	r0, [r7, #6]
 8004150:	893a      	ldrh	r2, [r7, #8]
 8004152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4603      	mov	r3, r0
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f001 fe3a 	bl	8005ddc <HAL_I2C_Mem_Read>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	4619      	mov	r1, r3
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f832 	bl	80041e0 <I2Cx_Error>
  }
  return status;    
 800417c:	7dfb      	ldrb	r3, [r7, #23]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b08a      	sub	sp, #40	@ 0x28
 800418a:	af04      	add	r7, sp, #16
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	4608      	mov	r0, r1
 8004190:	4611      	mov	r1, r2
 8004192:	461a      	mov	r2, r3
 8004194:	4603      	mov	r3, r0
 8004196:	72fb      	strb	r3, [r7, #11]
 8004198:	460b      	mov	r3, r1
 800419a:	813b      	strh	r3, [r7, #8]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80041a4:	7afb      	ldrb	r3, [r7, #11]
 80041a6:	b299      	uxth	r1, r3
 80041a8:	88f8      	ldrh	r0, [r7, #6]
 80041aa:	893a      	ldrh	r2, [r7, #8]
 80041ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4603      	mov	r3, r0
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f001 fcf9 	bl	8005bb4 <HAL_I2C_Mem_Write>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	4619      	mov	r1, r3
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f805 	bl	80041e0 <I2Cx_Error>
  }
  return status;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f001 fcb1 	bl	8005b54 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff5e 	bl	80040b4 <I2Cx_Init>
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004204:	4802      	ldr	r0, [pc, #8]	@ (8004210 <TS_IO_Init+0x10>)
 8004206:	f7ff ff55 	bl	80040b4 <I2Cx_Init>
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200008b4 	.word	0x200008b4

08004214 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af02      	add	r7, sp, #8
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	460b      	mov	r3, r1
 8004220:	71bb      	strb	r3, [r7, #6]
 8004222:	4613      	mov	r3, r2
 8004224:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004226:	79bb      	ldrb	r3, [r7, #6]
 8004228:	b29a      	uxth	r2, r3
 800422a:	79f9      	ldrb	r1, [r7, #7]
 800422c:	2301      	movs	r3, #1
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	1d7b      	adds	r3, r7, #5
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2301      	movs	r3, #1
 8004236:	4803      	ldr	r0, [pc, #12]	@ (8004244 <TS_IO_Write+0x30>)
 8004238:	f7ff ffa5 	bl	8004186 <I2Cx_WriteMultiple>
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	200008b4 	.word	0x200008b4

08004248 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af02      	add	r7, sp, #8
 800424e:	4603      	mov	r3, r0
 8004250:	460a      	mov	r2, r1
 8004252:	71fb      	strb	r3, [r7, #7]
 8004254:	4613      	mov	r3, r2
 8004256:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800425c:	79bb      	ldrb	r3, [r7, #6]
 800425e:	b29a      	uxth	r2, r3
 8004260:	79f9      	ldrb	r1, [r7, #7]
 8004262:	2301      	movs	r3, #1
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	f107 030f 	add.w	r3, r7, #15
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2301      	movs	r3, #1
 800426e:	4804      	ldr	r0, [pc, #16]	@ (8004280 <TS_IO_Read+0x38>)
 8004270:	f7ff ff5c 	bl	800412c <I2Cx_ReadMultiple>

  return read_value;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200008b4 	.word	0x200008b4

08004284 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fc2b 	bl	8004ae8 <HAL_Delay>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fc20 	bl	8004ae8 <HAL_Delay>
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80042b4:	b672      	cpsid	i
}
 80042b6:	bf00      	nop
  __disable_irq();
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80042c6:	b662      	cpsie	i
}
 80042c8:	bf00      	nop
  __enable_irq();
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	@ 0x30
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (deviceId==0)
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 8088 	bne.w	80043f6 <Powerstep01_Board_GpioInit+0x122>
  {
    /* GPIO Ports Clock Enable */
    __GPIOA_CLK_ENABLE();
 80042e6:	4b46      	ldr	r3, [pc, #280]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	4a45      	ldr	r2, [pc, #276]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f2:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	69bb      	ldr	r3, [r7, #24]
    __GPIOB_CLK_ENABLE();
 80042fe:	4b40      	ldr	r3, [pc, #256]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	4a3f      	ldr	r2, [pc, #252]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	6313      	str	r3, [r2, #48]	@ 0x30
 800430a:	4b3d      	ldr	r3, [pc, #244]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]
    __GPIOG_CLK_ENABLE();
 8004316:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	4a39      	ldr	r2, [pc, #228]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 800431c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004320:	6313      	str	r3, [r2, #48]	@ 0x30
 8004322:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	693b      	ldr	r3, [r7, #16]
    __GPIOI_CLK_ENABLE();
 800432e:	4b34      	ldr	r3, [pc, #208]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	4a33      	ldr	r2, [pc, #204]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6313      	str	r3, [r2, #48]	@ 0x30
 800433a:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <Powerstep01_Board_GpioInit+0x12c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
    
    /* Configure Powerstep01 - Busy pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_PIN;
 8004346:	2380      	movs	r3, #128	@ 0x80
 8004348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800434a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800434e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004350:	2301      	movs	r3, #1
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004354:	2301      	movs	r3, #1
 8004356:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, &GPIO_InitStruct);
 8004358:	f107 031c 	add.w	r3, r7, #28
 800435c:	4619      	mov	r1, r3
 800435e:	4829      	ldr	r0, [pc, #164]	@ (8004404 <Powerstep01_Board_GpioInit+0x130>)
 8004360:	f001 f84e 	bl	8005400 <HAL_GPIO_Init>
    
    /* Set Priority of Exti line Interrupt used for the busy interrupt*/ 
    HAL_NVIC_SetPriority(BUSY_EXTI_LINE_IRQn, 6, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	2106      	movs	r1, #6
 8004368:	2017      	movs	r0, #23
 800436a:	f000 fcbc 	bl	8004ce6 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line Interrupt used for the busy interrupt*/
    HAL_NVIC_EnableIRQ(BUSY_EXTI_LINE_IRQn);
 800436e:	2017      	movs	r0, #23
 8004370:	f000 fcd5 	bl	8004d1e <HAL_NVIC_EnableIRQ>
    
    /* Configure Powerstep01 - Flag pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8004374:	2340      	movs	r3, #64	@ 0x40
 8004376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004378:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800437c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800437e:	2301      	movs	r3, #1
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004382:	2301      	movs	r3, #1
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8004386:	f107 031c 	add.w	r3, r7, #28
 800438a:	4619      	mov	r1, r3
 800438c:	481d      	ldr	r0, [pc, #116]	@ (8004404 <Powerstep01_Board_GpioInit+0x130>)
 800438e:	f001 f837 	bl	8005400 <HAL_GPIO_Init>
    
    /* Set Priority of Exti lineInterrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(FLAG_EXTI_LINE_IRQn, 5, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	2105      	movs	r1, #5
 8004396:	2017      	movs	r0, #23
 8004398:	f000 fca5 	bl	8004ce6 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line  Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(FLAG_EXTI_LINE_IRQn);    
 800439c:	2017      	movs	r0, #23
 800439e:	f000 fcbe 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  
    /* Configure Powerstep01 - CS pin ----------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 80043a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a8:	2301      	movs	r3, #1
 80043aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80043b0:	2301      	movs	r3, #1
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 80043b4:	f107 031c 	add.w	r3, r7, #28
 80043b8:	4619      	mov	r1, r3
 80043ba:	4813      	ldr	r0, [pc, #76]	@ (8004408 <Powerstep01_Board_GpioInit+0x134>)
 80043bc:	f001 f820 	bl	8005400 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80043c0:	2201      	movs	r2, #1
 80043c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043c6:	4810      	ldr	r0, [pc, #64]	@ (8004408 <Powerstep01_Board_GpioInit+0x134>)
 80043c8:	f001 faea 	bl	80059a0 <HAL_GPIO_WritePin>
    
    /* Configure Powerstep01 - STBY/RESET pin --------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN;
 80043cc:	2304      	movs	r3, #4
 80043ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d0:	2301      	movs	r3, #1
 80043d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80043d8:	2301      	movs	r3, #1
 80043da:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, &GPIO_InitStruct);
 80043dc:	f107 031c 	add.w	r3, r7, #28
 80043e0:	4619      	mov	r1, r3
 80043e2:	480a      	ldr	r0, [pc, #40]	@ (800440c <Powerstep01_Board_GpioInit+0x138>)
 80043e4:	f001 f80c 	bl	8005400 <HAL_GPIO_Init>
    
    /* Reset Powerstep0*/
    Powerstep01_Board_Reset(deviceId);
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f88e 	bl	800450c <Powerstep01_Board_Reset>
    
    /* Let a delay after reset */
    Powerstep01_Board_Delay(1); 
 80043f0:	2001      	movs	r0, #1
 80043f2:	f7ff ff52 	bl	800429a <Powerstep01_Board_Delay>
  }
}
 80043f6:	bf00      	nop
 80043f8:	3730      	adds	r7, #48	@ 0x30
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	40021800 	.word	0x40021800
 8004408:	40020000 	.word	0x40020000
 800440c:	40022000 	.word	0x40022000

08004410 <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08e      	sub	sp, #56	@ 0x38
 8004414:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_ClockConfigTypeDef sClockSourceConfig;
  
  hTimStepClock.Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK;
 8004416:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 8004418:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800441c:	601a      	str	r2, [r3, #0]
  hTimStepClock.Init.Prescaler = TIMER_PRESCALER -1;
 800441e:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 8004420:	223f      	movs	r2, #63	@ 0x3f
 8004422:	605a      	str	r2, [r3, #4]
  hTimStepClock.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004424:	4b18      	ldr	r3, [pc, #96]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  hTimStepClock.Init.Period = 0;
 800442a:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 800442c:	2200      	movs	r2, #0
 800442e:	60da      	str	r2, [r3, #12]
  hTimStepClock.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004430:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&hTimStepClock);
 8004436:	4814      	ldr	r0, [pc, #80]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 8004438:	f004 fc48 	bl	8008ccc <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800443c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004440:	603b      	str	r3, [r7, #0]
  HAL_TIM_ConfigClockSource(&hTimStepClock, &sClockSourceConfig);
 8004442:	463b      	mov	r3, r7
 8004444:	4619      	mov	r1, r3
 8004446:	4810      	ldr	r0, [pc, #64]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 8004448:	f005 f902 	bl	8009650 <HAL_TIM_ConfigClockSource>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800444c:	2360      	movs	r3, #96	@ 0x60
 800444e:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004454:	2300      	movs	r3, #0
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_TIM_PWM_ConfigChannel(&hTimStepClock, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 800445c:	f107 031c 	add.w	r3, r7, #28
 8004460:	2200      	movs	r2, #0
 8004462:	4619      	mov	r1, r3
 8004464:	4808      	ldr	r0, [pc, #32]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 8004466:	f004 ffdf 	bl	8009428 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);
 8004472:	f107 0310 	add.w	r3, r7, #16
 8004476:	4619      	mov	r1, r3
 8004478:	4803      	ldr	r0, [pc, #12]	@ (8004488 <Powerstep01_Board_StepClockInit+0x78>)
 800447a:	f005 fe3f 	bl	800a0fc <HAL_TIMEx_MasterConfigSynchronization>
}
 800447e:	bf00      	nop
 8004480:	3738      	adds	r7, #56	@ 0x38
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000994 	.word	0x20000994

0800448c <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004496:	f003 f95d 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800449a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	019b      	lsls	r3, r3, #6
 80044a0:	461a      	mov	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a8:	3b01      	subs	r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimStepClock, period);
 80044ac:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <Powerstep01_Board_StartStepClock+0x48>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044b4:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <Powerstep01_Board_StartStepClock+0x48>)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <Powerstep01_Board_StartStepClock+0x48>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	0852      	lsrs	r2, r2, #1
 80044c2:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start_IT(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);  
 80044c4:	2100      	movs	r1, #0
 80044c6:	4803      	ldr	r0, [pc, #12]	@ (80044d4 <Powerstep01_Board_StartStepClock+0x48>)
 80044c8:	f004 fc6e 	bl	8008da8 <HAL_TIM_PWM_Start_IT>
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000994 	.word	0x20000994

080044d8 <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&hTimStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 80044dc:	2100      	movs	r1, #0
 80044de:	4802      	ldr	r0, [pc, #8]	@ (80044e8 <Powerstep01_Board_StopStepClock+0x10>)
 80044e0:	f004 fdaa 	bl	8009038 <HAL_TIM_PWM_Stop_IT>
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000994 	.word	0x20000994

080044ec <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_SET);
 80044f6:	2201      	movs	r2, #1
 80044f8:	2104      	movs	r1, #4
 80044fa:	4803      	ldr	r0, [pc, #12]	@ (8004508 <Powerstep01_Board_ReleaseReset+0x1c>)
 80044fc:	f001 fa50 	bl	80059a0 <HAL_GPIO_WritePin>
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40022000 	.word	0x40022000

0800450c <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_RESET);
 8004516:	2200      	movs	r2, #0
 8004518:	2104      	movs	r1, #4
 800451a:	4803      	ldr	r0, [pc, #12]	@ (8004528 <Powerstep01_Board_Reset+0x1c>)
 800451c:	f001 fa40 	bl	80059a0 <HAL_GPIO_WritePin>
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40022000 	.word	0x40022000

0800452c <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8004532:	4b18      	ldr	r3, [pc, #96]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004534:	4a18      	ldr	r2, [pc, #96]	@ (8004598 <Powerstep01_Board_SpiInit+0x6c>)
 8004536:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8004538:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 800453a:	2220      	movs	r2, #32
 800453c:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800453e:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8004544:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 800454c:	2202      	movs	r2, #2
 800454e:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8004550:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004552:	2200      	movs	r2, #0
 8004554:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8004556:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004558:	2207      	movs	r2, #7
 800455a:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800455c:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 800455e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004562:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004564:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004566:	2200      	movs	r2, #0
 8004568:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 800456c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004570:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004574:	2200      	movs	r2, #0
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004578:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 800457a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800457e:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8004580:	4804      	ldr	r0, [pc, #16]	@ (8004594 <Powerstep01_Board_SpiInit+0x68>)
 8004582:	f003 fe63 	bl	800824c <HAL_SPI_Init>
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 800458a:	79fb      	ldrb	r3, [r7, #7]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000908 	.word	0x20000908
 8004598:	40003800 	.word	0x40003800

0800459c <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 80045aa:	2200      	movs	r2, #0
 80045ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045b0:	4816      	ldr	r0, [pc, #88]	@ (800460c <Powerstep01_Board_SpiWriteBytes+0x70>)
 80045b2:	f001 f9f5 	bl	80059a0 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e016      	b.n	80045ea <Powerstep01_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 80045bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2301      	movs	r3, #1
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	4811      	ldr	r0, [pc, #68]	@ (8004610 <Powerstep01_Board_SpiWriteBytes+0x74>)
 80045ca:	f003 ff21 	bl	8008410 <HAL_SPI_TransmitReceive>
 80045ce:	4603      	mov	r3, r0
 80045d0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <Powerstep01_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3301      	adds	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3e4      	bcc.n	80045bc <Powerstep01_Board_SpiWriteBytes+0x20>
 80045f2:	e000      	b.n	80045f6 <Powerstep01_Board_SpiWriteBytes+0x5a>
      break;
 80045f4:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80045f6:	2201      	movs	r2, #1
 80045f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045fc:	4803      	ldr	r0, [pc, #12]	@ (800460c <Powerstep01_Board_SpiWriteBytes+0x70>)
 80045fe:	f001 f9cf 	bl	80059a0 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8004602:	7dfb      	ldrb	r3, [r7, #23]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40020000 	.word	0x40020000
 8004610:	20000908 	.word	0x20000908

08004614 <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	4803      	ldr	r0, [pc, #12]	@ (8004628 <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 800461c:	f001 f9a8 	bl	8005970 <HAL_GPIO_ReadPin>
 8004620:	4603      	mov	r3, r0
}
 8004622:	4618      	mov	r0, r3
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40021800 	.word	0x40021800

0800462c <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 8004630:	2140      	movs	r1, #64	@ 0x40
 8004632:	4803      	ldr	r0, [pc, #12]	@ (8004640 <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 8004634:	f001 f99c 	bl	8005970 <HAL_GPIO_ReadPin>
 8004638:	4603      	mov	r3, r0
}
 800463a:	4618      	mov	r0, r3
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40021800 	.word	0x40021800

08004644 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
 8004648:	2300      	movs	r3, #0
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
 8004658:	2300      	movs	r3, #0
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
 8004668:	2300      	movs	r3, #0
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
 8004678:	2300      	movs	r3, #0
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
 8004688:	2300      	movs	r3, #0
 800468a:	4618      	mov	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4618      	mov	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	2300      	movs	r3, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <BSP_MotorControl_AttachErrorHandler+0x38>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <BSP_MotorControl_AttachErrorHandler+0x26>
 80046c4:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <BSP_MotorControl_AttachErrorHandler+0x38>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 80046ce:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <BSP_MotorControl_AttachErrorHandler+0x38>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
 80046d8:	e004      	b.n	80046e4 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80046da:	f640 0002 	movw	r0, #2050	@ 0x802
 80046de:	f000 f843 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000a50 	.word	0x20000a50

080046f0 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8004700:	4b09      	ldr	r3, [pc, #36]	@ (8004728 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 800470a:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
 8004714:	e004      	b.n	8004720 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8004716:	f640 0003 	movw	r0, #2051	@ 0x803
 800471a:	f000 f825 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }  
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000a50 	.word	0x20000a50

0800472c <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <BSP_MotorControl_AttachBusyInterrupt+0x26>
 800473c:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 8004746:	4b07      	ldr	r3, [pc, #28]	@ (8004764 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
 8004750:	e004      	b.n	800475c <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8004752:	f640 0004 	movw	r0, #2052	@ 0x804
 8004756:	f000 f807 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }  
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000a50 	.word	0x20000a50

08004768 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8004772:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <BSP_MotorControl_ErrorHandler+0x38>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <BSP_MotorControl_ErrorHandler+0x2e>
 800477a:	4b09      	ldr	r3, [pc, #36]	@ (80047a0 <BSP_MotorControl_ErrorHandler+0x38>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <BSP_MotorControl_ErrorHandler+0x38>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8004794:	e000      	b.n	8004798 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8004796:	e7fe      	b.n	8004796 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000a50 	.word	0x20000a50

080047a4 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <BSP_MotorControl_Init+0x3c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <BSP_MotorControl_Init+0x2a>
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <BSP_MotorControl_Init+0x3c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <BSP_MotorControl_Init+0x3c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6838      	ldr	r0, [r7, #0]
 80047ca:	4798      	blx	r3
 80047cc:	e004      	b.n	80047d8 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 80047ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80047d2:	f7ff ffc9 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }  
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000a50 	.word	0x20000a50

080047e4 <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	603a      	str	r2, [r7, #0]
 80047ee:	71fb      	strb	r3, [r7, #7]
 80047f0:	460b      	mov	r3, r1
 80047f2:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 80047f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <BSP_MotorControl_Move+0x44>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00c      	beq.n	8004816 <BSP_MotorControl_Move+0x32>
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <BSP_MotorControl_Move+0x44>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 8004806:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <BSP_MotorControl_Move+0x44>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480c:	79b9      	ldrb	r1, [r7, #6]
 800480e:	79f8      	ldrb	r0, [r7, #7]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	4798      	blx	r3
 8004814:	e004      	b.n	8004820 <BSP_MotorControl_Move+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 8004816:	f640 0013 	movw	r0, #2067	@ 0x813
 800481a:	f7ff ffa5 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }      
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000a50 	.word	0x20000a50

0800482c <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800483a:	4b0e      	ldr	r3, [pc, #56]	@ (8004874 <BSP_MotorControl_CmdGetStatus+0x48>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00f      	beq.n	8004862 <BSP_MotorControl_CmdGetStatus+0x36>
 8004842:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <BSP_MotorControl_CmdGetStatus+0x48>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 800484e:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <BSP_MotorControl_CmdGetStatus+0x48>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	79fa      	ldrb	r2, [r7, #7]
 8004858:	4610      	mov	r0, r2
 800485a:	4798      	blx	r3
 800485c:	4603      	mov	r3, r0
 800485e:	81fb      	strh	r3, [r7, #14]
 8004860:	e003      	b.n	800486a <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8004862:	f640 0022 	movw	r0, #2082	@ 0x822
 8004866:	f7ff ff7f 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 800486a:	89fb      	ldrh	r3, [r7, #14]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000a50 	.word	0x20000a50

08004878 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <BSP_MotorControl_CheckBusyHw+0x40>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00d      	beq.n	80048a6 <BSP_MotorControl_CheckBusyHw+0x2e>
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <BSP_MotorControl_CheckBusyHw+0x40>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 8004896:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <BSP_MotorControl_CheckBusyHw+0x40>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800489e:	4798      	blx	r3
 80048a0:	4603      	mov	r3, r0
 80048a2:	71fb      	strb	r3, [r7, #7]
 80048a4:	e003      	b.n	80048ae <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 80048a6:	f640 002b 	movw	r0, #2091	@ 0x82b
 80048aa:	f7ff ff5d 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 80048ae:	79fb      	ldrb	r3, [r7, #7]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000a50 	.word	0x20000a50

080048bc <BSP_MotorControl_CmdSoftHiZ>:
 * @brief Issues Soft HiZ command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdSoftHiZ(uint8_t deviceId)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdSoftHiZ != 0))
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <BSP_MotorControl_CmdSoftHiZ+0x40>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00d      	beq.n	80048ea <BSP_MotorControl_CmdSoftHiZ+0x2e>
 80048ce:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <BSP_MotorControl_CmdSoftHiZ+0x40>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <BSP_MotorControl_CmdSoftHiZ+0x2e>
  {
    motorDrvHandle->CmdSoftHiZ(deviceId);
 80048da:	4b08      	ldr	r3, [pc, #32]	@ (80048fc <BSP_MotorControl_CmdSoftHiZ+0x40>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80048e2:	79fa      	ldrb	r2, [r7, #7]
 80048e4:	4610      	mov	r0, r2
 80048e6:	4798      	blx	r3
 80048e8:	e004      	b.n	80048f4 <BSP_MotorControl_CmdSoftHiZ+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(51);
 80048ea:	f640 0033 	movw	r0, #2099	@ 0x833
 80048ee:	f7ff ff3b 	bl	8004768 <BSP_MotorControl_ErrorHandler>
  }
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000a50 	.word	0x20000a50

08004900 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	460a      	mov	r2, r1
 800490a:	80fb      	strh	r3, [r7, #6]
 800490c:	4613      	mov	r3, r2
 800490e:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8004910:	4a40      	ldr	r2, [pc, #256]	@ (8004a14 <BSP_MotorControl_SetNbDevices+0x114>)
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	f641 124a 	movw	r2, #6474	@ 0x194a
 8004920:	4293      	cmp	r3, r2
 8004922:	d105      	bne.n	8004930 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8004924:	f7ff fe8e 	bl	8004644 <L6474_GetMotorHandle>
 8004928:	4603      	mov	r3, r0
 800492a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e055      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8004936:	f7fd ff75 	bl	8002824 <Powerstep01_GetMotorHandle>
 800493a:	4603      	mov	r3, r0
 800493c:	4a36      	ldr	r2, [pc, #216]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e04c      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	f641 023e 	movw	r2, #6206	@ 0x183e
 8004948:	4293      	cmp	r3, r2
 800494a:	d105      	bne.n	8004958 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 800494c:	f7ff fe92 	bl	8004674 <L6206_GetMotorHandle>
 8004950:	4603      	mov	r3, r0
 8004952:	4a31      	ldr	r2, [pc, #196]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e041      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	f5b3 5fc2 	cmp.w	r3, #6208	@ 0x1840
 800495e:	d105      	bne.n	800496c <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8004960:	f7ff fe90 	bl	8004684 <L6208_GetMotorHandle>
 8004964:	4603      	mov	r3, r0
 8004966:	4a2c      	ldr	r2, [pc, #176]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e037      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	2bdc      	cmp	r3, #220	@ 0xdc
 8004970:	d105      	bne.n	800497e <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8004972:	f7ff fe8f 	bl	8004694 <Stspin220_GetMotorHandle>
 8004976:	4603      	mov	r3, r0
 8004978:	4a27      	ldr	r2, [pc, #156]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e02e      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	f641 1246 	movw	r2, #6470	@ 0x1946
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <BSP_MotorControl_SetNbDevices+0x92>
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	f641 1248 	movw	r2, #6472	@ 0x1948
 800498e:	4293      	cmp	r3, r2
 8004990:	d105      	bne.n	800499e <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8004992:	f7ff fe5f 	bl	8004654 <l647x_GetMotorHandle>
 8004996:	4603      	mov	r3, r0
 8004998:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e01e      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	f641 1250 	movw	r2, #6480	@ 0x1950
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d004      	beq.n	80049b2 <BSP_MotorControl_SetNbDevices+0xb2>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	f641 1252 	movw	r2, #6482	@ 0x1952
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d105      	bne.n	80049be <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 80049b2:	f7ff fe57 	bl	8004664 <l648x_GetMotorHandle>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e00e      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80049c2:	d002      	beq.n	80049ca <BSP_MotorControl_SetNbDevices+0xca>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2bfa      	cmp	r3, #250	@ 0xfa
 80049c8:	d105      	bne.n	80049d6 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 80049ca:	f7ff fe6b 	bl	80046a4 <Stspin240_250_GetMotorHandle>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4a11      	ldr	r2, [pc, #68]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	e002      	b.n	80049dc <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 80049d6:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 80049dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d011      	beq.n	8004a08 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 80049e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
  if ((motorDrvHandle != 0)&&
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 80049f0:	797b      	ldrb	r3, [r7, #5]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 80049f6:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <BSP_MotorControl_SetNbDevices+0x118>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80049fe:	797a      	ldrb	r2, [r7, #5]
 8004a00:	4610      	mov	r0, r2
 8004a02:	4798      	blx	r3
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000a54 	.word	0x20000a54
 8004a18:	20000a50 	.word	0x20000a50

08004a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a20:	4b08      	ldr	r3, [pc, #32]	@ (8004a44 <HAL_Init+0x28>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a07      	ldr	r2, [pc, #28]	@ (8004a44 <HAL_Init+0x28>)
 8004a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a2c:	2003      	movs	r0, #3
 8004a2e:	f000 f94f 	bl	8004cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a32:	200f      	movs	r0, #15
 8004a34:	f000 f808 	bl	8004a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a38:	f7fc fdba 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023c00 	.word	0x40023c00

08004a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a50:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <HAL_InitTick+0x54>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <HAL_InitTick+0x58>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f967 	bl	8004d3a <HAL_SYSTICK_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e00e      	b.n	8004a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b0f      	cmp	r3, #15
 8004a7a:	d80a      	bhi.n	8004a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	f000 f92f 	bl	8004ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a88:	4a06      	ldr	r2, [pc, #24]	@ (8004aa4 <HAL_InitTick+0x5c>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000004 	.word	0x20000004
 8004aa0:	20000198 	.word	0x20000198
 8004aa4:	20000194 	.word	0x20000194

08004aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aac:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_IncTick+0x20>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <HAL_IncTick+0x24>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	4a04      	ldr	r2, [pc, #16]	@ (8004acc <HAL_IncTick+0x24>)
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000198 	.word	0x20000198
 8004acc:	20000a58 	.word	0x20000a58

08004ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	@ (8004ae4 <HAL_GetTick+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000a58 	.word	0x20000a58

08004ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004af0:	f7ff ffee 	bl	8004ad0 <HAL_GetTick>
 8004af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d005      	beq.n	8004b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b02:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <HAL_Delay+0x44>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b0e:	bf00      	nop
 8004b10:	f7ff ffde 	bl	8004ad0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d8f7      	bhi.n	8004b10 <HAL_Delay+0x28>
  {
  }
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000198 	.word	0x20000198

08004b30 <__NVIC_SetPriorityGrouping>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <__NVIC_SetPriorityGrouping+0x40>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b58:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x44>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5e:	4a04      	ldr	r2, [pc, #16]	@ (8004b70 <__NVIC_SetPriorityGrouping+0x40>)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	60d3      	str	r3, [r2, #12]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000ed00 	.word	0xe000ed00
 8004b74:	05fa0000 	.word	0x05fa0000

08004b78 <__NVIC_GetPriorityGrouping>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b7c:	4b04      	ldr	r3, [pc, #16]	@ (8004b90 <__NVIC_GetPriorityGrouping+0x18>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	f003 0307 	and.w	r3, r3, #7
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <__NVIC_EnableIRQ>:
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db0b      	blt.n	8004bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	f003 021f 	and.w	r2, r3, #31
 8004bac:	4907      	ldr	r1, [pc, #28]	@ (8004bcc <__NVIC_EnableIRQ+0x38>)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000e100 	.word	0xe000e100

08004bd0 <__NVIC_SetPriority>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	6039      	str	r1, [r7, #0]
 8004bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	db0a      	blt.n	8004bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	490c      	ldr	r1, [pc, #48]	@ (8004c1c <__NVIC_SetPriority+0x4c>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	0112      	lsls	r2, r2, #4
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bf8:	e00a      	b.n	8004c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4908      	ldr	r1, [pc, #32]	@ (8004c20 <__NVIC_SetPriority+0x50>)
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	3b04      	subs	r3, #4
 8004c08:	0112      	lsls	r2, r2, #4
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	761a      	strb	r2, [r3, #24]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e100 	.word	0xe000e100
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <NVIC_EncodePriority>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f1c3 0307 	rsb	r3, r3, #7
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf28      	it	cs
 8004c42:	2304      	movcs	r3, #4
 8004c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2b06      	cmp	r3, #6
 8004c4c:	d902      	bls.n	8004c54 <NVIC_EncodePriority+0x30>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3b03      	subs	r3, #3
 8004c52:	e000      	b.n	8004c56 <NVIC_EncodePriority+0x32>
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43da      	mvns	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	401a      	ands	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	43d9      	mvns	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	4313      	orrs	r3, r2
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c9c:	d301      	bcc.n	8004ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e00f      	b.n	8004cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <SysTick_Config+0x40>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004caa:	210f      	movs	r1, #15
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	f7ff ff8e 	bl	8004bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <SysTick_Config+0x40>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <SysTick_Config+0x40>)
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000e010 	.word	0xe000e010

08004cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff29 	bl	8004b30 <__NVIC_SetPriorityGrouping>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf8:	f7ff ff3e 	bl	8004b78 <__NVIC_GetPriorityGrouping>
 8004cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff ff8e 	bl	8004c24 <NVIC_EncodePriority>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff5d 	bl	8004bd0 <__NVIC_SetPriority>
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff31 	bl	8004b94 <__NVIC_EnableIRQ>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ffa2 	bl	8004c8c <SysTick_Config>
 8004d48:	4603      	mov	r3, r0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004d58:	f3bf 8f5f 	dmb	sy
}
 8004d5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004d5e:	4b07      	ldr	r3, [pc, #28]	@ (8004d7c <HAL_MPU_Disable+0x28>)
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <HAL_MPU_Disable+0x28>)
 8004d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d68:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_MPU_Disable+0x2c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	605a      	str	r2, [r3, #4]
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	e000ed00 	.word	0xe000ed00
 8004d80:	e000ed90 	.word	0xe000ed90

08004d84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004dbc <HAL_MPU_Enable+0x38>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004d96:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc0 <HAL_MPU_Enable+0x3c>)
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <HAL_MPU_Enable+0x3c>)
 8004d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004da2:	f3bf 8f4f 	dsb	sy
}
 8004da6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004da8:	f3bf 8f6f 	isb	sy
}
 8004dac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	e000ed90 	.word	0xe000ed90
 8004dc0:	e000ed00 	.word	0xe000ed00

08004dc4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	785a      	ldrb	r2, [r3, #1]
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <HAL_MPU_ConfigRegion+0x7c>)
 8004dd2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e40 <HAL_MPU_ConfigRegion+0x7c>)
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	@ (8004e40 <HAL_MPU_ConfigRegion+0x7c>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004de0:	4a17      	ldr	r2, [pc, #92]	@ (8004e40 <HAL_MPU_ConfigRegion+0x7c>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7b1b      	ldrb	r3, [r3, #12]
 8004dec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	7adb      	ldrb	r3, [r3, #11]
 8004df2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004df4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7a9b      	ldrb	r3, [r3, #10]
 8004dfa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004dfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7b5b      	ldrb	r3, [r3, #13]
 8004e02:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	7b9b      	ldrb	r3, [r3, #14]
 8004e0a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7bdb      	ldrb	r3, [r3, #15]
 8004e12:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7a5b      	ldrb	r3, [r3, #9]
 8004e1a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7a1b      	ldrb	r3, [r3, #8]
 8004e22:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e24:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e2c:	4a04      	ldr	r2, [pc, #16]	@ (8004e40 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e2e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e30:	6113      	str	r3, [r2, #16]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000ed90 	.word	0xe000ed90

08004e44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e054      	b.n	8004f00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	7f5b      	ldrb	r3, [r3, #29]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fbbc 	bl	80005e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	791b      	ldrb	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10c      	bne.n	8004e94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a22      	ldr	r2, [pc, #136]	@ (8004f08 <HAL_CRC_Init+0xc4>)
 8004e80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0218 	bic.w	r2, r2, #24
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	e00c      	b.n	8004eae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6899      	ldr	r1, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f834 	bl	8004f0c <HAL_CRCEx_Polynomial_Set>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e028      	b.n	8004f00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	795b      	ldrb	r3, [r3, #5]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	611a      	str	r2, [r3, #16]
 8004ec0:	e004      	b.n	8004ecc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6912      	ldr	r2, [r2, #16]
 8004eca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	04c11db7 	.word	0x04c11db7

08004f0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f1c:	231f      	movs	r3, #31
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
 8004f2e:	e063      	b.n	8004ff8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f30:	bf00      	nop
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	613a      	str	r2, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_CRCEx_Polynomial_Set+0x44>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b18      	cmp	r3, #24
 8004f54:	d846      	bhi.n	8004fe4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004f56:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <HAL_CRCEx_Polynomial_Set+0x50>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004feb 	.word	0x08004feb
 8004f60:	08004fe5 	.word	0x08004fe5
 8004f64:	08004fe5 	.word	0x08004fe5
 8004f68:	08004fe5 	.word	0x08004fe5
 8004f6c:	08004fe5 	.word	0x08004fe5
 8004f70:	08004fe5 	.word	0x08004fe5
 8004f74:	08004fe5 	.word	0x08004fe5
 8004f78:	08004fe5 	.word	0x08004fe5
 8004f7c:	08004fd9 	.word	0x08004fd9
 8004f80:	08004fe5 	.word	0x08004fe5
 8004f84:	08004fe5 	.word	0x08004fe5
 8004f88:	08004fe5 	.word	0x08004fe5
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004fe5 	.word	0x08004fe5
 8004f98:	08004fe5 	.word	0x08004fe5
 8004f9c:	08004fcd 	.word	0x08004fcd
 8004fa0:	08004fe5 	.word	0x08004fe5
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fe5 	.word	0x08004fe5
 8004fac:	08004fe5 	.word	0x08004fe5
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	08004fe5 	.word	0x08004fe5
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004fc1 	.word	0x08004fc1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d913      	bls.n	8004fee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004fca:	e010      	b.n	8004fee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b07      	cmp	r3, #7
 8004fd0:	d90f      	bls.n	8004ff2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004fd6:	e00c      	b.n	8004ff2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b0f      	cmp	r3, #15
 8004fdc:	d90b      	bls.n	8004ff6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004fe2:	e008      	b.n	8004ff6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	75fb      	strb	r3, [r7, #23]
        break;
 8004fe8:	e006      	b.n	8004ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004fea:	bf00      	nop
 8004fec:	e004      	b.n	8004ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004fee:	bf00      	nop
 8004ff0:	e002      	b.n	8004ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ff2:	bf00      	nop
 8004ff4:	e000      	b.n	8004ff8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ff6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10d      	bne.n	800501a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f023 0118 	bic.w	r1, r3, #24
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e039      	b.n	80050ae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fb fb1a 	bl	8000688 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005078:	f023 0107 	bic.w	r1, r3, #7
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800508e:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <HAL_DMA2D_Init+0x90>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68d1      	ldr	r1, [r2, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	430b      	orrs	r3, r1
 800509c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	ffffc000 	.word	0xffffc000

080050bc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d026      	beq.n	800512c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d021      	beq.n	800512c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2201      	movs	r2, #1
 800510a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2204      	movs	r2, #4
 8005110:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d026      	beq.n	8005184 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d021      	beq.n	8005184 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800514e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2220      	movs	r2, #32
 8005156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515c:	f043 0202 	orr.w	r2, r3, #2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2204      	movs	r2, #4
 8005168:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d026      	beq.n	80051dc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005194:	2b00      	cmp	r3, #0
 8005196:	d021      	beq.n	80051dc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2208      	movs	r2, #8
 80051ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b4:	f043 0204 	orr.w	r2, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2204      	movs	r2, #4
 80051c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d013      	beq.n	800520e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2204      	movs	r2, #4
 8005206:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f853 	bl	80052b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d024      	beq.n	8005262 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01f      	beq.n	8005262 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005230:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2202      	movs	r2, #2
 8005238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01f      	beq.n	80052ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01a      	beq.n	80052ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005284:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2210      	movs	r2, #16
 800528c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f80e 	bl	80052c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_DMA2D_ConfigLayer+0x20>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e079      	b.n	80053f0 <HAL_DMA2D_ConfigLayer+0x114>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	3318      	adds	r3, #24
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005326:	4b35      	ldr	r3, [pc, #212]	@ (80053fc <HAL_DMA2D_ConfigLayer+0x120>)
 8005328:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b0a      	cmp	r3, #10
 8005330:	d003      	beq.n	800533a <HAL_DMA2D_ConfigLayer+0x5e>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b09      	cmp	r3, #9
 8005338:	d107      	bne.n	800534a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e005      	b.n	8005356 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	061b      	lsls	r3, r3, #24
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d120      	bne.n	800539e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	43db      	mvns	r3, r3
 8005366:	ea02 0103 	and.w	r1, r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	430a      	orrs	r2, r1
 8005372:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b0a      	cmp	r3, #10
 8005384:	d003      	beq.n	800538e <HAL_DMA2D_ConfigLayer+0xb2>
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b09      	cmp	r3, #9
 800538c:	d127      	bne.n	80053de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800539a:	629a      	str	r2, [r3, #40]	@ 0x28
 800539c:	e01f      	b.n	80053de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	ea02 0103 	and.w	r1, r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b0a      	cmp	r3, #10
 80053c6:	d003      	beq.n	80053d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b09      	cmp	r3, #9
 80053ce:	d106      	bne.n	80053de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80053dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	ff03000f 	.word	0xff03000f

08005400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	@ 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005416:	2300      	movs	r3, #0
 8005418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	e175      	b.n	800570c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005420:	2201      	movs	r2, #1
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4013      	ands	r3, r2
 8005432:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	429a      	cmp	r2, r3
 800543a:	f040 8164 	bne.w	8005706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d005      	beq.n	8005456 <HAL_GPIO_Init+0x56>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d130      	bne.n	80054b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	2203      	movs	r2, #3
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800548c:	2201      	movs	r2, #1
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4013      	ands	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 0201 	and.w	r2, r3, #1
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d017      	beq.n	80054f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	2203      	movs	r2, #3
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	43db      	mvns	r3, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4013      	ands	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d123      	bne.n	8005548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	08da      	lsrs	r2, r3, #3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3208      	adds	r2, #8
 8005508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	220f      	movs	r2, #15
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	08da      	lsrs	r2, r3, #3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3208      	adds	r2, #8
 8005542:	69b9      	ldr	r1, [r7, #24]
 8005544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	2203      	movs	r2, #3
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4013      	ands	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0203 	and.w	r2, r3, #3
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80be 	beq.w	8005706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800558a:	4b66      	ldr	r3, [pc, #408]	@ (8005724 <HAL_GPIO_Init+0x324>)
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	4a65      	ldr	r2, [pc, #404]	@ (8005724 <HAL_GPIO_Init+0x324>)
 8005590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005594:	6453      	str	r3, [r2, #68]	@ 0x44
 8005596:	4b63      	ldr	r3, [pc, #396]	@ (8005724 <HAL_GPIO_Init+0x324>)
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80055a2:	4a61      	ldr	r2, [pc, #388]	@ (8005728 <HAL_GPIO_Init+0x328>)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	3302      	adds	r3, #2
 80055aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	220f      	movs	r2, #15
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4013      	ands	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a58      	ldr	r2, [pc, #352]	@ (800572c <HAL_GPIO_Init+0x32c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d037      	beq.n	800563e <HAL_GPIO_Init+0x23e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a57      	ldr	r2, [pc, #348]	@ (8005730 <HAL_GPIO_Init+0x330>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d031      	beq.n	800563a <HAL_GPIO_Init+0x23a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a56      	ldr	r2, [pc, #344]	@ (8005734 <HAL_GPIO_Init+0x334>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d02b      	beq.n	8005636 <HAL_GPIO_Init+0x236>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a55      	ldr	r2, [pc, #340]	@ (8005738 <HAL_GPIO_Init+0x338>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d025      	beq.n	8005632 <HAL_GPIO_Init+0x232>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a54      	ldr	r2, [pc, #336]	@ (800573c <HAL_GPIO_Init+0x33c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <HAL_GPIO_Init+0x22e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a53      	ldr	r2, [pc, #332]	@ (8005740 <HAL_GPIO_Init+0x340>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d019      	beq.n	800562a <HAL_GPIO_Init+0x22a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a52      	ldr	r2, [pc, #328]	@ (8005744 <HAL_GPIO_Init+0x344>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_GPIO_Init+0x226>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a51      	ldr	r2, [pc, #324]	@ (8005748 <HAL_GPIO_Init+0x348>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00d      	beq.n	8005622 <HAL_GPIO_Init+0x222>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a50      	ldr	r2, [pc, #320]	@ (800574c <HAL_GPIO_Init+0x34c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <HAL_GPIO_Init+0x21e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a4f      	ldr	r2, [pc, #316]	@ (8005750 <HAL_GPIO_Init+0x350>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_GPIO_Init+0x21a>
 8005616:	2309      	movs	r3, #9
 8005618:	e012      	b.n	8005640 <HAL_GPIO_Init+0x240>
 800561a:	230a      	movs	r3, #10
 800561c:	e010      	b.n	8005640 <HAL_GPIO_Init+0x240>
 800561e:	2308      	movs	r3, #8
 8005620:	e00e      	b.n	8005640 <HAL_GPIO_Init+0x240>
 8005622:	2307      	movs	r3, #7
 8005624:	e00c      	b.n	8005640 <HAL_GPIO_Init+0x240>
 8005626:	2306      	movs	r3, #6
 8005628:	e00a      	b.n	8005640 <HAL_GPIO_Init+0x240>
 800562a:	2305      	movs	r3, #5
 800562c:	e008      	b.n	8005640 <HAL_GPIO_Init+0x240>
 800562e:	2304      	movs	r3, #4
 8005630:	e006      	b.n	8005640 <HAL_GPIO_Init+0x240>
 8005632:	2303      	movs	r3, #3
 8005634:	e004      	b.n	8005640 <HAL_GPIO_Init+0x240>
 8005636:	2302      	movs	r3, #2
 8005638:	e002      	b.n	8005640 <HAL_GPIO_Init+0x240>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_GPIO_Init+0x240>
 800563e:	2300      	movs	r3, #0
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	f002 0203 	and.w	r2, r2, #3
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	4093      	lsls	r3, r2
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005650:	4935      	ldr	r1, [pc, #212]	@ (8005728 <HAL_GPIO_Init+0x328>)
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	3302      	adds	r3, #2
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800565e:	4b3d      	ldr	r3, [pc, #244]	@ (8005754 <HAL_GPIO_Init+0x354>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	43db      	mvns	r3, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4013      	ands	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005682:	4a34      	ldr	r2, [pc, #208]	@ (8005754 <HAL_GPIO_Init+0x354>)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005688:	4b32      	ldr	r3, [pc, #200]	@ (8005754 <HAL_GPIO_Init+0x354>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056ac:	4a29      	ldr	r2, [pc, #164]	@ (8005754 <HAL_GPIO_Init+0x354>)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056b2:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <HAL_GPIO_Init+0x354>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	43db      	mvns	r3, r3
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4013      	ands	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <HAL_GPIO_Init+0x354>)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <HAL_GPIO_Init+0x354>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005700:	4a14      	ldr	r2, [pc, #80]	@ (8005754 <HAL_GPIO_Init+0x354>)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3301      	adds	r3, #1
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	f67f ae86 	bls.w	8005420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	3724      	adds	r7, #36	@ 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	40013800 	.word	0x40013800
 800572c:	40020000 	.word	0x40020000
 8005730:	40020400 	.word	0x40020400
 8005734:	40020800 	.word	0x40020800
 8005738:	40020c00 	.word	0x40020c00
 800573c:	40021000 	.word	0x40021000
 8005740:	40021400 	.word	0x40021400
 8005744:	40021800 	.word	0x40021800
 8005748:	40021c00 	.word	0x40021c00
 800574c:	40022000 	.word	0x40022000
 8005750:	40022400 	.word	0x40022400
 8005754:	40013c00 	.word	0x40013c00

08005758 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e0d9      	b.n	8005928 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005774:	2201      	movs	r2, #1
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4013      	ands	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	429a      	cmp	r2, r3
 800578c:	f040 80c9 	bne.w	8005922 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005790:	4a6b      	ldr	r2, [pc, #428]	@ (8005940 <HAL_GPIO_DeInit+0x1e8>)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	3302      	adds	r3, #2
 8005798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	220f      	movs	r2, #15
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a63      	ldr	r2, [pc, #396]	@ (8005944 <HAL_GPIO_DeInit+0x1ec>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d037      	beq.n	800582a <HAL_GPIO_DeInit+0xd2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a62      	ldr	r2, [pc, #392]	@ (8005948 <HAL_GPIO_DeInit+0x1f0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d031      	beq.n	8005826 <HAL_GPIO_DeInit+0xce>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a61      	ldr	r2, [pc, #388]	@ (800594c <HAL_GPIO_DeInit+0x1f4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d02b      	beq.n	8005822 <HAL_GPIO_DeInit+0xca>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a60      	ldr	r2, [pc, #384]	@ (8005950 <HAL_GPIO_DeInit+0x1f8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d025      	beq.n	800581e <HAL_GPIO_DeInit+0xc6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005954 <HAL_GPIO_DeInit+0x1fc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <HAL_GPIO_DeInit+0xc2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005958 <HAL_GPIO_DeInit+0x200>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d019      	beq.n	8005816 <HAL_GPIO_DeInit+0xbe>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a5d      	ldr	r2, [pc, #372]	@ (800595c <HAL_GPIO_DeInit+0x204>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <HAL_GPIO_DeInit+0xba>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005960 <HAL_GPIO_DeInit+0x208>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00d      	beq.n	800580e <HAL_GPIO_DeInit+0xb6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a5b      	ldr	r2, [pc, #364]	@ (8005964 <HAL_GPIO_DeInit+0x20c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <HAL_GPIO_DeInit+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005968 <HAL_GPIO_DeInit+0x210>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <HAL_GPIO_DeInit+0xae>
 8005802:	2309      	movs	r3, #9
 8005804:	e012      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 8005806:	230a      	movs	r3, #10
 8005808:	e010      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 800580a:	2308      	movs	r3, #8
 800580c:	e00e      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 800580e:	2307      	movs	r3, #7
 8005810:	e00c      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 8005812:	2306      	movs	r3, #6
 8005814:	e00a      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 8005816:	2305      	movs	r3, #5
 8005818:	e008      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 800581a:	2304      	movs	r3, #4
 800581c:	e006      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 800581e:	2303      	movs	r3, #3
 8005820:	e004      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 8005822:	2302      	movs	r3, #2
 8005824:	e002      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <HAL_GPIO_DeInit+0xd4>
 800582a:	2300      	movs	r3, #0
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	f002 0203 	and.w	r2, r2, #3
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	4093      	lsls	r3, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	d132      	bne.n	80058a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800583c:	4b4b      	ldr	r3, [pc, #300]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	43db      	mvns	r3, r3
 8005844:	4949      	ldr	r1, [pc, #292]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 8005846:	4013      	ands	r3, r2
 8005848:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800584a:	4b48      	ldr	r3, [pc, #288]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	43db      	mvns	r3, r3
 8005852:	4946      	ldr	r1, [pc, #280]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 8005854:	4013      	ands	r3, r2
 8005856:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005858:	4b44      	ldr	r3, [pc, #272]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	43db      	mvns	r3, r3
 8005860:	4942      	ldr	r1, [pc, #264]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 8005862:	4013      	ands	r3, r2
 8005864:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005866:	4b41      	ldr	r3, [pc, #260]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	43db      	mvns	r3, r3
 800586e:	493f      	ldr	r1, [pc, #252]	@ (800596c <HAL_GPIO_DeInit+0x214>)
 8005870:	4013      	ands	r3, r2
 8005872:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	220f      	movs	r2, #15
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005884:	4a2e      	ldr	r2, [pc, #184]	@ (8005940 <HAL_GPIO_DeInit+0x1e8>)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	089b      	lsrs	r3, r3, #2
 800588a:	3302      	adds	r3, #2
 800588c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	43da      	mvns	r2, r3
 8005894:	482a      	ldr	r0, [pc, #168]	@ (8005940 <HAL_GPIO_DeInit+0x1e8>)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	089b      	lsrs	r3, r3, #2
 800589a:	400a      	ands	r2, r1
 800589c:	3302      	adds	r3, #2
 800589e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	2103      	movs	r1, #3
 80058ac:	fa01 f303 	lsl.w	r3, r1, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	08da      	lsrs	r2, r3, #3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3208      	adds	r2, #8
 80058c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	220f      	movs	r2, #15
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	08d2      	lsrs	r2, r2, #3
 80058d8:	4019      	ands	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3208      	adds	r2, #8
 80058de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2103      	movs	r1, #3
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	2101      	movs	r1, #1
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	fa01 f303 	lsl.w	r3, r1, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	401a      	ands	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2103      	movs	r1, #3
 8005916:	fa01 f303 	lsl.w	r3, r1, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	401a      	ands	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	3301      	adds	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b0f      	cmp	r3, #15
 800592c:	f67f af22 	bls.w	8005774 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40013800 	.word	0x40013800
 8005944:	40020000 	.word	0x40020000
 8005948:	40020400 	.word	0x40020400
 800594c:	40020800 	.word	0x40020800
 8005950:	40020c00 	.word	0x40020c00
 8005954:	40021000 	.word	0x40021000
 8005958:	40021400 	.word	0x40021400
 800595c:	40021800 	.word	0x40021800
 8005960:	40021c00 	.word	0x40021c00
 8005964:	40022000 	.word	0x40022000
 8005968:	40022400 	.word	0x40022400
 800596c:	40013c00 	.word	0x40013c00

08005970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	e001      	b.n	8005992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
 80059ac:	4613      	mov	r3, r2
 80059ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059b0:	787b      	ldrb	r3, [r7, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059b6:	887a      	ldrh	r2, [r7, #2]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80059bc:	e003      	b.n	80059c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	041a      	lsls	r2, r3, #16
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	619a      	str	r2, [r3, #24]
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059de:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d006      	beq.n	80059f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ea:	4a05      	ldr	r2, [pc, #20]	@ (8005a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f806 	bl	8005a04 <HAL_GPIO_EXTI_Callback>
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40013c00 	.word	0x40013c00

08005a04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e08b      	b.n	8005b46 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fb f8dc 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2224      	movs	r2, #36	@ 0x24
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d107      	bne.n	8005a96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a92:	609a      	str	r2, [r3, #8]
 8005a94:	e006      	b.n	8005aa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005aa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d108      	bne.n	8005abe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aba:	605a      	str	r2, [r3, #4]
 8005abc:	e007      	b.n	8005ace <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005acc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b50 <HAL_I2C_Init+0x134>)
 8005ada:	430b      	orrs	r3, r1
 8005adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69d9      	ldr	r1, [r3, #28]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	02008000 	.word	0x02008000

08005b54 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e021      	b.n	8005baa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2224      	movs	r2, #36	@ 0x24
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fb f89e 	bl	8000cc0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	817b      	strh	r3, [r7, #10]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	813b      	strh	r3, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	f040 80f9 	bne.w	8005dce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_I2C_Mem_Write+0x34>
 8005be2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0ed      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_I2C_Mem_Write+0x4e>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e0e6      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c0a:	f7fe ff61 	bl	8004ad0 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	2319      	movs	r3, #25
 8005c16:	2201      	movs	r2, #1
 8005c18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fad1 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0d1      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2221      	movs	r2, #33	@ 0x21
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2240      	movs	r2, #64	@ 0x40
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c54:	88f8      	ldrh	r0, [r7, #6]
 8005c56:	893a      	ldrh	r2, [r7, #8]
 8005c58:	8979      	ldrh	r1, [r7, #10]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4603      	mov	r3, r0
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f9e1 	bl	800602c <I2C_RequestMemoryWrite>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0a9      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2bff      	cmp	r3, #255	@ 0xff
 8005c84:	d90e      	bls.n	8005ca4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	22ff      	movs	r2, #255	@ 0xff
 8005c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	8979      	ldrh	r1, [r7, #10]
 8005c94:	2300      	movs	r3, #0
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fc55 	bl	800654c <I2C_TransferConfig>
 8005ca2:	e00f      	b.n	8005cc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	8979      	ldrh	r1, [r7, #10]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fc44 	bl	800654c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fad4 	bl	8006276 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e07b      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d034      	beq.n	8005d7c <HAL_I2C_Mem_Write+0x1c8>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d130      	bne.n	8005d7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	2200      	movs	r2, #0
 8005d22:	2180      	movs	r1, #128	@ 0x80
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fa4d 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e04d      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2bff      	cmp	r3, #255	@ 0xff
 8005d3c:	d90e      	bls.n	8005d5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	22ff      	movs	r2, #255	@ 0xff
 8005d42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	8979      	ldrh	r1, [r7, #10]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fbf9 	bl	800654c <I2C_TransferConfig>
 8005d5a:	e00f      	b.n	8005d7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	8979      	ldrh	r1, [r7, #10]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fbe8 	bl	800654c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d19e      	bne.n	8005cc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 faba 	bl	8006304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e01a      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6859      	ldr	r1, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <HAL_I2C_Mem_Write+0x224>)
 8005dae:	400b      	ands	r3, r1
 8005db0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	fe00e800 	.word	0xfe00e800

08005ddc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	461a      	mov	r2, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	817b      	strh	r3, [r7, #10]
 8005dee:	460b      	mov	r3, r1
 8005df0:	813b      	strh	r3, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	f040 80fd 	bne.w	8005ffe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_I2C_Mem_Read+0x34>
 8005e0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e16:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0f1      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_I2C_Mem_Read+0x4e>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e0ea      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e32:	f7fe fe4d 	bl	8004ad0 <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	2319      	movs	r3, #25
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f9bd 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0d5      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2222      	movs	r2, #34	@ 0x22
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2240      	movs	r2, #64	@ 0x40
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e7c:	88f8      	ldrh	r0, [r7, #6]
 8005e7e:	893a      	ldrh	r2, [r7, #8]
 8005e80:	8979      	ldrh	r1, [r7, #10]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f921 	bl	80060d4 <I2C_RequestMemoryRead>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0ad      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2bff      	cmp	r3, #255	@ 0xff
 8005eac:	d90e      	bls.n	8005ecc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	8979      	ldrh	r1, [r7, #10]
 8005ebc:	4b52      	ldr	r3, [pc, #328]	@ (8006008 <HAL_I2C_Mem_Read+0x22c>)
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fb41 	bl	800654c <I2C_TransferConfig>
 8005eca:	e00f      	b.n	8005eec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	8979      	ldrh	r1, [r7, #10]
 8005ede:	4b4a      	ldr	r3, [pc, #296]	@ (8006008 <HAL_I2C_Mem_Read+0x22c>)
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fb30 	bl	800654c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2104      	movs	r1, #4
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f964 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e07c      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d034      	beq.n	8005fac <HAL_I2C_Mem_Read+0x1d0>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d130      	bne.n	8005fac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f50:	2200      	movs	r2, #0
 8005f52:	2180      	movs	r1, #128	@ 0x80
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f935 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e04d      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2bff      	cmp	r3, #255	@ 0xff
 8005f6c:	d90e      	bls.n	8005f8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	8979      	ldrh	r1, [r7, #10]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fae1 	bl	800654c <I2C_TransferConfig>
 8005f8a:	e00f      	b.n	8005fac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	8979      	ldrh	r1, [r7, #10]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fad0 	bl	800654c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d19a      	bne.n	8005eec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 f9a2 	bl	8006304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e01a      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <HAL_I2C_Mem_Read+0x230>)
 8005fde:	400b      	ands	r3, r1
 8005fe0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e000      	b.n	8006000 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	80002400 	.word	0x80002400
 800600c:	fe00e800 	.word	0xfe00e800

08006010 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800601e:	b2db      	uxtb	r3, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	4603      	mov	r3, r0
 800603c:	817b      	strh	r3, [r7, #10]
 800603e:	460b      	mov	r3, r1
 8006040:	813b      	strh	r3, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	b2da      	uxtb	r2, r3
 800604a:	8979      	ldrh	r1, [r7, #10]
 800604c:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <I2C_RequestMemoryWrite+0xa4>)
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fa79 	bl	800654c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	69b9      	ldr	r1, [r7, #24]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f909 	bl	8006276 <I2C_WaitOnTXISFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e02c      	b.n	80060c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d105      	bne.n	8006080 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	629a      	str	r2, [r3, #40]	@ 0x28
 800607e:	e015      	b.n	80060ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006080:	893b      	ldrh	r3, [r7, #8]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	b29b      	uxth	r3, r3
 8006086:	b2da      	uxtb	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f8ef 	bl	8006276 <I2C_WaitOnTXISFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e012      	b.n	80060c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060a2:	893b      	ldrh	r3, [r7, #8]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2200      	movs	r2, #0
 80060b4:	2180      	movs	r1, #128	@ 0x80
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f884 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	80002000 	.word	0x80002000

080060d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	461a      	mov	r2, r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	817b      	strh	r3, [r7, #10]
 80060e6:	460b      	mov	r3, r1
 80060e8:	813b      	strh	r3, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	8979      	ldrh	r1, [r7, #10]
 80060f4:	4b20      	ldr	r3, [pc, #128]	@ (8006178 <I2C_RequestMemoryRead+0xa4>)
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fa26 	bl	800654c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	69b9      	ldr	r1, [r7, #24]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f8b6 	bl	8006276 <I2C_WaitOnTXISFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e02c      	b.n	800616e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d105      	bne.n	8006126 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800611a:	893b      	ldrh	r3, [r7, #8]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	629a      	str	r2, [r3, #40]	@ 0x28
 8006124:	e015      	b.n	8006152 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006126:	893b      	ldrh	r3, [r7, #8]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	b29b      	uxth	r3, r3
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	69b9      	ldr	r1, [r7, #24]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f89c 	bl	8006276 <I2C_WaitOnTXISFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e012      	b.n	800616e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006148:	893b      	ldrh	r3, [r7, #8]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2200      	movs	r2, #0
 800615a:	2140      	movs	r1, #64	@ 0x40
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f831 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	80002000 	.word	0x80002000

0800617c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d103      	bne.n	800619a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d007      	beq.n	80061b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	619a      	str	r2, [r3, #24]
  }
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d4:	e03b      	b.n	800624e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f8d6 	bl	800638c <I2C_IsErrorOccurred>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e041      	b.n	800626e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d02d      	beq.n	800624e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f2:	f7fe fc6d 	bl	8004ad0 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d122      	bne.n	800624e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4013      	ands	r3, r2
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	429a      	cmp	r2, r3
 8006216:	bf0c      	ite	eq
 8006218:	2301      	moveq	r3, #1
 800621a:	2300      	movne	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	429a      	cmp	r2, r3
 8006224:	d113      	bne.n	800624e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622a:	f043 0220 	orr.w	r2, r3, #32
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e00f      	b.n	800626e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	429a      	cmp	r2, r3
 800626a:	d0b4      	beq.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006282:	e033      	b.n	80062ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f87f 	bl	800638c <I2C_IsErrorOccurred>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e031      	b.n	80062fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d025      	beq.n	80062ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a0:	f7fe fc16 	bl	8004ad0 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d302      	bcc.n	80062b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d11a      	bne.n	80062ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d013      	beq.n	80062ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e007      	b.n	80062fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d1c4      	bne.n	8006284 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006310:	e02f      	b.n	8006372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f838 	bl	800638c <I2C_IsErrorOccurred>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e02d      	b.n	8006382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fe fbd3 	bl	8004ad0 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11a      	bne.n	8006372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b20      	cmp	r3, #32
 8006348:	d013      	beq.n	8006372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e007      	b.n	8006382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b20      	cmp	r3, #32
 800637e:	d1c8      	bne.n	8006312 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	@ 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d068      	beq.n	800648a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2210      	movs	r2, #16
 80063be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063c0:	e049      	b.n	8006456 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d045      	beq.n	8006456 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063ca:	f7fe fb81 	bl	8004ad0 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <I2C_IsErrorOccurred+0x54>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d13a      	bne.n	8006456 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006402:	d121      	bne.n	8006448 <I2C_IsErrorOccurred+0xbc>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800640a:	d01d      	beq.n	8006448 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800640c:	7cfb      	ldrb	r3, [r7, #19]
 800640e:	2b20      	cmp	r3, #32
 8006410:	d01a      	beq.n	8006448 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006422:	f7fe fb55 	bl	8004ad0 <HAL_GetTick>
 8006426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006428:	e00e      	b.n	8006448 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800642a:	f7fe fb51 	bl	8004ad0 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b19      	cmp	r3, #25
 8006436:	d907      	bls.n	8006448 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f043 0320 	orr.w	r3, r3, #32
 800643e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006446:	e006      	b.n	8006456 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b20      	cmp	r3, #32
 8006454:	d1e9      	bne.n	800642a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b20      	cmp	r3, #32
 8006462:	d003      	beq.n	800646c <I2C_IsErrorOccurred+0xe0>
 8006464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0aa      	beq.n	80063c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2220      	movs	r2, #32
 800647a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	f043 0304 	orr.w	r3, r3, #4
 8006482:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	f043 0308 	orr.w	r3, r3, #8
 80064c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f043 0302 	orr.w	r3, r3, #2
 80064e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80064f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff fe3b 	bl	800617c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6859      	ldr	r1, [r3, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <I2C_IsErrorOccurred+0x1bc>)
 8006512:	400b      	ands	r3, r1
 8006514:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	431a      	orrs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800653a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800653e:	4618      	mov	r0, r3
 8006540:	3728      	adds	r7, #40	@ 0x28
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	fe00e800 	.word	0xfe00e800

0800654c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	817b      	strh	r3, [r7, #10]
 800655a:	4613      	mov	r3, r2
 800655c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800655e:	897b      	ldrh	r3, [r7, #10]
 8006560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006564:	7a7b      	ldrb	r3, [r7, #9]
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800656c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	4313      	orrs	r3, r2
 8006576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800657a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	0d5b      	lsrs	r3, r3, #21
 8006586:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800658a:	4b08      	ldr	r3, [pc, #32]	@ (80065ac <I2C_TransferConfig+0x60>)
 800658c:	430b      	orrs	r3, r1
 800658e:	43db      	mvns	r3, r3
 8006590:	ea02 0103 	and.w	r1, r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	03ff63ff 	.word	0x03ff63ff

080065b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d138      	bne.n	8006638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e032      	b.n	800663a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2224      	movs	r2, #36	@ 0x24
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6819      	ldr	r1, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e000      	b.n	800663a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
  }
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b20      	cmp	r3, #32
 800665a:	d139      	bne.n	80066d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006666:	2302      	movs	r3, #2
 8006668:	e033      	b.n	80066d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2224      	movs	r2, #36	@ 0x24
 8006676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006698:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e0bf      	b.n	8006872 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fa fb7e 	bl	8000e08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006722:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6999      	ldr	r1, [r3, #24]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006738:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6899      	ldr	r1, [r3, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b4a      	ldr	r3, [pc, #296]	@ (800687c <HAL_LTDC_Init+0x19c>)
 8006754:	400b      	ands	r3, r1
 8006756:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	041b      	lsls	r3, r3, #16
 800675e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6899      	ldr	r1, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68d9      	ldr	r1, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b3e      	ldr	r3, [pc, #248]	@ (800687c <HAL_LTDC_Init+0x19c>)
 8006782:	400b      	ands	r3, r1
 8006784:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68d9      	ldr	r1, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6919      	ldr	r1, [r3, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b33      	ldr	r3, [pc, #204]	@ (800687c <HAL_LTDC_Init+0x19c>)
 80067b0:	400b      	ands	r3, r1
 80067b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6919      	ldr	r1, [r3, #16]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6959      	ldr	r1, [r3, #20]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4b27      	ldr	r3, [pc, #156]	@ (800687c <HAL_LTDC_Init+0x19c>)
 80067de:	400b      	ands	r3, r1
 80067e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6959      	ldr	r1, [r3, #20]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0206 	orr.w	r2, r2, #6
 800684e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	f000f800 	.word	0xf000f800

08006880 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006896:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d023      	beq.n	80068ea <HAL_LTDC_IRQHandler+0x6a>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01e      	beq.n	80068ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0204 	bic.w	r2, r2, #4
 80068ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2204      	movs	r2, #4
 80068c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068ca:	f043 0201 	orr.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2204      	movs	r2, #4
 80068d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f86f 	bl	80069c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d023      	beq.n	800693c <HAL_LTDC_IRQHandler+0xbc>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01e      	beq.n	800693c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0202 	bic.w	r2, r2, #2
 800690c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2202      	movs	r2, #2
 8006914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800691c:	f043 0202 	orr.w	r2, r3, #2
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2204      	movs	r2, #4
 800692a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f846 	bl	80069c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01b      	beq.n	800697e <HAL_LTDC_IRQHandler+0xfe>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d016      	beq.n	800697e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0201 	bic.w	r2, r2, #1
 800695e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2201      	movs	r2, #1
 8006966:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f009 fa5d 	bl	800fe38 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01b      	beq.n	80069c0 <HAL_LTDC_IRQHandler+0x140>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d016      	beq.n	80069c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0208 	bic.w	r2, r2, #8
 80069a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2208      	movs	r2, #8
 80069a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f80e 	bl	80069dc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069f0:	b5b0      	push	{r4, r5, r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_LTDC_ConfigLayer+0x1a>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e02c      	b.n	8006a64 <HAL_LTDC_ConfigLayer+0x74>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2134      	movs	r1, #52	@ 0x34
 8006a20:	fb01 f303 	mul.w	r3, r1, r3
 8006a24:	4413      	add	r3, r2
 8006a26:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	461d      	mov	r5, r3
 8006a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f849 	bl	8006adc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bdb0      	pop	{r4, r5, r7, pc}

08006a6c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_LTDC_ProgramLineEvent+0x18>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e023      	b.n	8006acc <HAL_LTDC_ProgramLineEvent+0x60>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40016800 	.word	0x40016800

08006adc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b089      	sub	sp, #36	@ 0x24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	0c1b      	lsrs	r3, r3, #16
 8006af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006af8:	4413      	add	r3, r2
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	4413      	add	r3, r2
 8006b0a:	3384      	adds	r3, #132	@ 0x84
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	6812      	ldr	r2, [r2, #0]
 8006b12:	4611      	mov	r1, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	01d2      	lsls	r2, r2, #7
 8006b18:	440a      	add	r2, r1
 8006b1a:	3284      	adds	r2, #132	@ 0x84
 8006b1c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006b20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b32:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b34:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	01db      	lsls	r3, r3, #7
 8006b40:	440b      	add	r3, r1
 8006b42:	3384      	adds	r3, #132	@ 0x84
 8006b44:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b5a:	4413      	add	r3, r2
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	01db      	lsls	r3, r3, #7
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3384      	adds	r3, #132	@ 0x84
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	4611      	mov	r1, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	01d2      	lsls	r2, r2, #7
 8006b7a:	440a      	add	r2, r1
 8006b7c:	3284      	adds	r2, #132	@ 0x84
 8006b7e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006b82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b92:	4413      	add	r3, r2
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	01db      	lsls	r3, r3, #7
 8006ba0:	440b      	add	r3, r1
 8006ba2:	3384      	adds	r3, #132	@ 0x84
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	01db      	lsls	r3, r3, #7
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3384      	adds	r3, #132	@ 0x84
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	01d2      	lsls	r2, r2, #7
 8006bc6:	440a      	add	r2, r1
 8006bc8:	3284      	adds	r2, #132	@ 0x84
 8006bca:	f023 0307 	bic.w	r3, r3, #7
 8006bce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	01db      	lsls	r3, r3, #7
 8006bda:	4413      	add	r3, r2
 8006bdc:	3384      	adds	r3, #132	@ 0x84
 8006bde:	461a      	mov	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	061b      	lsls	r3, r3, #24
 8006c00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	01db      	lsls	r3, r3, #7
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3384      	adds	r3, #132	@ 0x84
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3384      	adds	r3, #132	@ 0x84
 8006c20:	461a      	mov	r2, r3
 8006c22:	2300      	movs	r3, #0
 8006c24:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	01db      	lsls	r3, r3, #7
 8006c40:	440b      	add	r3, r1
 8006c42:	3384      	adds	r3, #132	@ 0x84
 8006c44:	4619      	mov	r1, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	01db      	lsls	r3, r3, #7
 8006c56:	4413      	add	r3, r2
 8006c58:	3384      	adds	r3, #132	@ 0x84
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	4611      	mov	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	01d2      	lsls	r2, r2, #7
 8006c66:	440a      	add	r2, r1
 8006c68:	3284      	adds	r2, #132	@ 0x84
 8006c6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	01db      	lsls	r3, r3, #7
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3384      	adds	r3, #132	@ 0x84
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	4413      	add	r3, r2
 8006c92:	3384      	adds	r3, #132	@ 0x84
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	01db      	lsls	r3, r3, #7
 8006ca0:	440b      	add	r3, r1
 8006ca2:	3384      	adds	r3, #132	@ 0x84
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4b58      	ldr	r3, [pc, #352]	@ (8006e08 <LTDC_SetConfig+0x32c>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	68f9      	ldr	r1, [r7, #12]
 8006cb6:	6809      	ldr	r1, [r1, #0]
 8006cb8:	4608      	mov	r0, r1
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	01c9      	lsls	r1, r1, #7
 8006cbe:	4401      	add	r1, r0
 8006cc0:	3184      	adds	r1, #132	@ 0x84
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	01db      	lsls	r3, r3, #7
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3384      	adds	r3, #132	@ 0x84
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3384      	adds	r3, #132	@ 0x84
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	01db      	lsls	r3, r3, #7
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3384      	adds	r3, #132	@ 0x84
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfe:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006d08:	2304      	movs	r3, #4
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e01b      	b.n	8006d46 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d102      	bne.n	8006d1c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006d16:	2303      	movs	r3, #3
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	e014      	b.n	8006d46 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d00b      	beq.n	8006d3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d007      	beq.n	8006d3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d003      	beq.n	8006d3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d38:	2b07      	cmp	r3, #7
 8006d3a:	d102      	bne.n	8006d42 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	61fb      	str	r3, [r7, #28]
 8006d40:	e001      	b.n	8006d46 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006d42:	2301      	movs	r3, #1
 8006d44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	01db      	lsls	r3, r3, #7
 8006d50:	4413      	add	r3, r2
 8006d52:	3384      	adds	r3, #132	@ 0x84
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	01d2      	lsls	r2, r2, #7
 8006d60:	440a      	add	r2, r1
 8006d62:	3284      	adds	r2, #132	@ 0x84
 8006d64:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006d68:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6859      	ldr	r1, [r3, #4]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	1acb      	subs	r3, r1, r3
 8006d80:	69f9      	ldr	r1, [r7, #28]
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d88:	68f9      	ldr	r1, [r7, #12]
 8006d8a:	6809      	ldr	r1, [r1, #0]
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	01c9      	lsls	r1, r1, #7
 8006d92:	4401      	add	r1, r0
 8006d94:	3184      	adds	r1, #132	@ 0x84
 8006d96:	4313      	orrs	r3, r2
 8006d98:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	01db      	lsls	r3, r3, #7
 8006da4:	4413      	add	r3, r2
 8006da6:	3384      	adds	r3, #132	@ 0x84
 8006da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4619      	mov	r1, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	01db      	lsls	r3, r3, #7
 8006db4:	440b      	add	r3, r1
 8006db6:	3384      	adds	r3, #132	@ 0x84
 8006db8:	4619      	mov	r1, r3
 8006dba:	4b14      	ldr	r3, [pc, #80]	@ (8006e0c <LTDC_SetConfig+0x330>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	01db      	lsls	r3, r3, #7
 8006dca:	4413      	add	r3, r2
 8006dcc:	3384      	adds	r3, #132	@ 0x84
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	01db      	lsls	r3, r3, #7
 8006de0:	4413      	add	r3, r2
 8006de2:	3384      	adds	r3, #132	@ 0x84
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	4611      	mov	r1, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	01d2      	lsls	r2, r2, #7
 8006df0:	440a      	add	r2, r1
 8006df2:	3284      	adds	r2, #132	@ 0x84
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	6013      	str	r3, [r2, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	3724      	adds	r7, #36	@ 0x24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	fffff8f8 	.word	0xfffff8f8
 8006e0c:	fffff800 	.word	0xfffff800

08006e10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e1a:	4b23      	ldr	r3, [pc, #140]	@ (8006ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	4a22      	ldr	r2, [pc, #136]	@ (8006ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e26:	4b20      	ldr	r3, [pc, #128]	@ (8006ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e32:	4b1e      	ldr	r3, [pc, #120]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1d      	ldr	r2, [pc, #116]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e3e:	f7fd fe47 	bl	8004ad0 <HAL_GetTick>
 8006e42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e44:	e009      	b.n	8006e5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e46:	f7fd fe43 	bl	8004ad0 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e54:	d901      	bls.n	8006e5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e022      	b.n	8006ea0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e5a:	4b14      	ldr	r3, [pc, #80]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e66:	d1ee      	bne.n	8006e46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e68:	4b10      	ldr	r3, [pc, #64]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e74:	f7fd fe2c 	bl	8004ad0 <HAL_GetTick>
 8006e78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e7a:	e009      	b.n	8006e90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e7c:	f7fd fe28 	bl	8004ad0 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e8a:	d901      	bls.n	8006e90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e007      	b.n	8006ea0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e90:	4b06      	ldr	r3, [pc, #24]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e9c:	d1ee      	bne.n	8006e7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	40007000 	.word	0x40007000

08006eb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006eb8:	f7fd fe0a 	bl	8004ad0 <HAL_GetTick>
 8006ebc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e067      	b.n	8006f98 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fa fa37 	bl	8001350 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006ee2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f85e 	bl	8006fa8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	021a      	lsls	r2, r3, #8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2120      	movs	r1, #32
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f856 	bl	8006fc4 <QSPI_WaitFlagStateUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d135      	bne.n	8006f8e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa0 <HAL_QSPI_Init+0xf0>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6852      	ldr	r2, [r2, #4]
 8006f30:	0611      	lsls	r1, r2, #24
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	68d2      	ldr	r2, [r2, #12]
 8006f36:	4311      	orrs	r1, r2
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	69d2      	ldr	r2, [r2, #28]
 8006f3c:	4311      	orrs	r1, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6a12      	ldr	r2, [r2, #32]
 8006f42:	4311      	orrs	r1, r2
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <HAL_QSPI_Init+0xf4>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6912      	ldr	r2, [r2, #16]
 8006f5a:	0411      	lsls	r1, r2, #16
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6952      	ldr	r2, [r2, #20]
 8006f60:	4311      	orrs	r1, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6992      	ldr	r2, [r2, #24]
 8006f66:	4311      	orrs	r1, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0201 	orr.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006f96:	7afb      	ldrb	r3, [r7, #11]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	00ffff2f 	.word	0x00ffff2f
 8006fa4:	ffe0f8fe 	.word	0xffe0f8fe

08006fa8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006fd4:	e01a      	b.n	800700c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d016      	beq.n	800700c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fde:	f7fd fd77 	bl	8004ad0 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007000:	f043 0201 	orr.w	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e00e      	b.n	800702a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf14      	ite	ne
 800701a:	2301      	movne	r3, #1
 800701c:	2300      	moveq	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	429a      	cmp	r2, r3
 8007026:	d1d6      	bne.n	8006fd6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e291      	b.n	800756e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8087 	beq.w	8007166 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007058:	4b96      	ldr	r3, [pc, #600]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 030c 	and.w	r3, r3, #12
 8007060:	2b04      	cmp	r3, #4
 8007062:	d00c      	beq.n	800707e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007064:	4b93      	ldr	r3, [pc, #588]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 030c 	and.w	r3, r3, #12
 800706c:	2b08      	cmp	r3, #8
 800706e:	d112      	bne.n	8007096 <HAL_RCC_OscConfig+0x62>
 8007070:	4b90      	ldr	r3, [pc, #576]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800707c:	d10b      	bne.n	8007096 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800707e:	4b8d      	ldr	r3, [pc, #564]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d06c      	beq.n	8007164 <HAL_RCC_OscConfig+0x130>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d168      	bne.n	8007164 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e26b      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800709e:	d106      	bne.n	80070ae <HAL_RCC_OscConfig+0x7a>
 80070a0:	4b84      	ldr	r3, [pc, #528]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a83      	ldr	r2, [pc, #524]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e02e      	b.n	800710c <HAL_RCC_OscConfig+0xd8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10c      	bne.n	80070d0 <HAL_RCC_OscConfig+0x9c>
 80070b6:	4b7f      	ldr	r3, [pc, #508]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a7e      	ldr	r2, [pc, #504]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	4b7c      	ldr	r3, [pc, #496]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a7b      	ldr	r2, [pc, #492]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e01d      	b.n	800710c <HAL_RCC_OscConfig+0xd8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070d8:	d10c      	bne.n	80070f4 <HAL_RCC_OscConfig+0xc0>
 80070da:	4b76      	ldr	r3, [pc, #472]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a75      	ldr	r2, [pc, #468]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	4b73      	ldr	r3, [pc, #460]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a72      	ldr	r2, [pc, #456]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	e00b      	b.n	800710c <HAL_RCC_OscConfig+0xd8>
 80070f4:	4b6f      	ldr	r3, [pc, #444]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a6e      	ldr	r2, [pc, #440]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80070fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	4b6c      	ldr	r3, [pc, #432]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a6b      	ldr	r2, [pc, #428]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800710a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d013      	beq.n	800713c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fd fcdc 	bl	8004ad0 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800711c:	f7fd fcd8 	bl	8004ad0 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b64      	cmp	r3, #100	@ 0x64
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e21f      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712e:	4b61      	ldr	r3, [pc, #388]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0f0      	beq.n	800711c <HAL_RCC_OscConfig+0xe8>
 800713a:	e014      	b.n	8007166 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fd fcc8 	bl	8004ad0 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007144:	f7fd fcc4 	bl	8004ad0 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b64      	cmp	r3, #100	@ 0x64
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e20b      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007156:	4b57      	ldr	r3, [pc, #348]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f0      	bne.n	8007144 <HAL_RCC_OscConfig+0x110>
 8007162:	e000      	b.n	8007166 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d069      	beq.n	8007246 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007172:	4b50      	ldr	r3, [pc, #320]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 030c 	and.w	r3, r3, #12
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800717e:	4b4d      	ldr	r3, [pc, #308]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 030c 	and.w	r3, r3, #12
 8007186:	2b08      	cmp	r3, #8
 8007188:	d11c      	bne.n	80071c4 <HAL_RCC_OscConfig+0x190>
 800718a:	4b4a      	ldr	r3, [pc, #296]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d116      	bne.n	80071c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007196:	4b47      	ldr	r3, [pc, #284]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_RCC_OscConfig+0x17a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d001      	beq.n	80071ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e1df      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ae:	4b41      	ldr	r3, [pc, #260]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	493d      	ldr	r1, [pc, #244]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c2:	e040      	b.n	8007246 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d023      	beq.n	8007214 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071cc:	4b39      	ldr	r3, [pc, #228]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a38      	ldr	r2, [pc, #224]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fd fc7a 	bl	8004ad0 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e0:	f7fd fc76 	bl	8004ad0 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e1bd      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f2:	4b30      	ldr	r3, [pc, #192]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fe:	4b2d      	ldr	r3, [pc, #180]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4929      	ldr	r1, [pc, #164]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]
 8007212:	e018      	b.n	8007246 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007214:	4b27      	ldr	r3, [pc, #156]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a26      	ldr	r2, [pc, #152]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800721a:	f023 0301 	bic.w	r3, r3, #1
 800721e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fd fc56 	bl	8004ad0 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007228:	f7fd fc52 	bl	8004ad0 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e199      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800723a:	4b1e      	ldr	r3, [pc, #120]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d038      	beq.n	80072c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d019      	beq.n	800728e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800725a:	4b16      	ldr	r3, [pc, #88]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 800725c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725e:	4a15      	ldr	r2, [pc, #84]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007266:	f7fd fc33 	bl	8004ad0 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800726e:	f7fd fc2f 	bl	8004ad0 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e176      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007280:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0x23a>
 800728c:	e01a      	b.n	80072c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800728e:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007292:	4a08      	ldr	r2, [pc, #32]	@ (80072b4 <HAL_RCC_OscConfig+0x280>)
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729a:	f7fd fc19 	bl	8004ad0 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a0:	e00a      	b.n	80072b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a2:	f7fd fc15 	bl	8004ad0 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d903      	bls.n	80072b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e15c      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
 80072b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b8:	4b91      	ldr	r3, [pc, #580]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1ee      	bne.n	80072a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80a4 	beq.w	800741a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d2:	4b8b      	ldr	r3, [pc, #556]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80072de:	4b88      	ldr	r3, [pc, #544]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	4a87      	ldr	r2, [pc, #540]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80072ea:	4b85      	ldr	r3, [pc, #532]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072fa:	4b82      	ldr	r3, [pc, #520]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d118      	bne.n	8007338 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007306:	4b7f      	ldr	r3, [pc, #508]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7e      	ldr	r2, [pc, #504]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007312:	f7fd fbdd 	bl	8004ad0 <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007318:	e008      	b.n	800732c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731a:	f7fd fbd9 	bl	8004ad0 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b64      	cmp	r3, #100	@ 0x64
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e120      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800732c:	4b75      	ldr	r3, [pc, #468]	@ (8007504 <HAL_RCC_OscConfig+0x4d0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f0      	beq.n	800731a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d106      	bne.n	800734e <HAL_RCC_OscConfig+0x31a>
 8007340:	4b6f      	ldr	r3, [pc, #444]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007344:	4a6e      	ldr	r2, [pc, #440]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6713      	str	r3, [r2, #112]	@ 0x70
 800734c:	e02d      	b.n	80073aa <HAL_RCC_OscConfig+0x376>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10c      	bne.n	8007370 <HAL_RCC_OscConfig+0x33c>
 8007356:	4b6a      	ldr	r3, [pc, #424]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735a:	4a69      	ldr	r2, [pc, #420]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	6713      	str	r3, [r2, #112]	@ 0x70
 8007362:	4b67      	ldr	r3, [pc, #412]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007366:	4a66      	ldr	r2, [pc, #408]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007368:	f023 0304 	bic.w	r3, r3, #4
 800736c:	6713      	str	r3, [r2, #112]	@ 0x70
 800736e:	e01c      	b.n	80073aa <HAL_RCC_OscConfig+0x376>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b05      	cmp	r3, #5
 8007376:	d10c      	bne.n	8007392 <HAL_RCC_OscConfig+0x35e>
 8007378:	4b61      	ldr	r3, [pc, #388]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737c:	4a60      	ldr	r2, [pc, #384]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800737e:	f043 0304 	orr.w	r3, r3, #4
 8007382:	6713      	str	r3, [r2, #112]	@ 0x70
 8007384:	4b5e      	ldr	r3, [pc, #376]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007388:	4a5d      	ldr	r2, [pc, #372]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007390:	e00b      	b.n	80073aa <HAL_RCC_OscConfig+0x376>
 8007392:	4b5b      	ldr	r3, [pc, #364]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007396:	4a5a      	ldr	r2, [pc, #360]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6713      	str	r3, [r2, #112]	@ 0x70
 800739e:	4b58      	ldr	r3, [pc, #352]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a2:	4a57      	ldr	r2, [pc, #348]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073a4:	f023 0304 	bic.w	r3, r3, #4
 80073a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d015      	beq.n	80073de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b2:	f7fd fb8d 	bl	8004ad0 <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b8:	e00a      	b.n	80073d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ba:	f7fd fb89 	bl	8004ad0 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e0ce      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d0:	4b4b      	ldr	r3, [pc, #300]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0ee      	beq.n	80073ba <HAL_RCC_OscConfig+0x386>
 80073dc:	e014      	b.n	8007408 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073de:	f7fd fb77 	bl	8004ad0 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e4:	e00a      	b.n	80073fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073e6:	f7fd fb73 	bl	8004ad0 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e0b8      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073fc:	4b40      	ldr	r3, [pc, #256]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80073fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ee      	bne.n	80073e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d105      	bne.n	800741a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800740e:	4b3c      	ldr	r3, [pc, #240]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	4a3b      	ldr	r2, [pc, #236]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007418:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80a4 	beq.w	800756c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007424:	4b36      	ldr	r3, [pc, #216]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 030c 	and.w	r3, r3, #12
 800742c:	2b08      	cmp	r3, #8
 800742e:	d06b      	beq.n	8007508 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d149      	bne.n	80074cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007438:	4b31      	ldr	r3, [pc, #196]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a30      	ldr	r2, [pc, #192]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800743e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007444:	f7fd fb44 	bl	8004ad0 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800744c:	f7fd fb40 	bl	8004ad0 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e087      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745e:	4b28      	ldr	r3, [pc, #160]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f0      	bne.n	800744c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007478:	019b      	lsls	r3, r3, #6
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	3b01      	subs	r3, #1
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	061b      	lsls	r3, r3, #24
 800748e:	4313      	orrs	r3, r2
 8007490:	4a1b      	ldr	r2, [pc, #108]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 8007492:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007496:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007498:	4b19      	ldr	r3, [pc, #100]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 800749e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a4:	f7fd fb14 	bl	8004ad0 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fd fb10 	bl	8004ad0 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e057      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074be:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x478>
 80074ca:	e04f      	b.n	800756c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d8:	f7fd fafa 	bl	8004ad0 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fd faf6 	bl	8004ad0 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e03d      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f2:	4b03      	ldr	r3, [pc, #12]	@ (8007500 <HAL_RCC_OscConfig+0x4cc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f0      	bne.n	80074e0 <HAL_RCC_OscConfig+0x4ac>
 80074fe:	e035      	b.n	800756c <HAL_RCC_OscConfig+0x538>
 8007500:	40023800 	.word	0x40023800
 8007504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007508:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <HAL_RCC_OscConfig+0x544>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d028      	beq.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d121      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d11a      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800753e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007540:	4293      	cmp	r3, r2
 8007542:	d111      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	3b01      	subs	r3, #1
 8007552:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007554:	429a      	cmp	r2, r3
 8007556:	d107      	bne.n	8007568 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d001      	beq.n	800756c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	40023800 	.word	0x40023800

0800757c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0d0      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b6a      	ldr	r3, [pc, #424]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d910      	bls.n	80075c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b67      	ldr	r3, [pc, #412]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 020f 	bic.w	r2, r3, #15
 80075aa:	4965      	ldr	r1, [pc, #404]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	4b63      	ldr	r3, [pc, #396]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d001      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0b8      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d020      	beq.n	8007612 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075dc:	4b59      	ldr	r3, [pc, #356]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4a58      	ldr	r2, [pc, #352]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f4:	4b53      	ldr	r3, [pc, #332]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	4a52      	ldr	r2, [pc, #328]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80075fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007600:	4b50      	ldr	r3, [pc, #320]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	494d      	ldr	r1, [pc, #308]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800760e:	4313      	orrs	r3, r2
 8007610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d040      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d107      	bne.n	8007636 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	4b47      	ldr	r3, [pc, #284]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d115      	bne.n	800765e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e07f      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d107      	bne.n	800764e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800763e:	4b41      	ldr	r3, [pc, #260]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e073      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800764e:	4b3d      	ldr	r3, [pc, #244]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e06b      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800765e:	4b39      	ldr	r3, [pc, #228]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f023 0203 	bic.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4936      	ldr	r1, [pc, #216]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800766c:	4313      	orrs	r3, r2
 800766e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007670:	f7fd fa2e 	bl	8004ad0 <HAL_GetTick>
 8007674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007676:	e00a      	b.n	800768e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007678:	f7fd fa2a 	bl	8004ad0 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007686:	4293      	cmp	r3, r2
 8007688:	d901      	bls.n	800768e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e053      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768e:	4b2d      	ldr	r3, [pc, #180]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 020c 	and.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	429a      	cmp	r2, r3
 800769e:	d1eb      	bne.n	8007678 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076a0:	4b27      	ldr	r3, [pc, #156]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d210      	bcs.n	80076d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ae:	4b24      	ldr	r3, [pc, #144]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f023 020f 	bic.w	r2, r3, #15
 80076b6:	4922      	ldr	r1, [pc, #136]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	4b20      	ldr	r3, [pc, #128]	@ (8007740 <HAL_RCC_ClockConfig+0x1c4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e032      	b.n	8007736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076dc:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4916      	ldr	r1, [pc, #88]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076fa:	4b12      	ldr	r3, [pc, #72]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	490e      	ldr	r1, [pc, #56]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 800770a:	4313      	orrs	r3, r2
 800770c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800770e:	f000 f821 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8007712:	4602      	mov	r2, r0
 8007714:	4b0b      	ldr	r3, [pc, #44]	@ (8007744 <HAL_RCC_ClockConfig+0x1c8>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	490a      	ldr	r1, [pc, #40]	@ (8007748 <HAL_RCC_ClockConfig+0x1cc>)
 8007720:	5ccb      	ldrb	r3, [r1, r3]
 8007722:	fa22 f303 	lsr.w	r3, r2, r3
 8007726:	4a09      	ldr	r2, [pc, #36]	@ (800774c <HAL_RCC_ClockConfig+0x1d0>)
 8007728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800772a:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <HAL_RCC_ClockConfig+0x1d4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fd f98a 	bl	8004a48 <HAL_InitTick>

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40023c00 	.word	0x40023c00
 8007744:	40023800 	.word	0x40023800
 8007748:	080250c8 	.word	0x080250c8
 800774c:	20000004 	.word	0x20000004
 8007750:	20000194 	.word	0x20000194

08007754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b090      	sub	sp, #64	@ 0x40
 800775a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007764:	2300      	movs	r3, #0
 8007766:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800776c:	4b59      	ldr	r3, [pc, #356]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b08      	cmp	r3, #8
 8007776:	d00d      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x40>
 8007778:	2b08      	cmp	r3, #8
 800777a:	f200 80a1 	bhi.w	80078c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0x34>
 8007782:	2b04      	cmp	r3, #4
 8007784:	d003      	beq.n	800778e <HAL_RCC_GetSysClockFreq+0x3a>
 8007786:	e09b      	b.n	80078c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007788:	4b53      	ldr	r3, [pc, #332]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800778a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800778c:	e09b      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800778e:	4b53      	ldr	r3, [pc, #332]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x188>)
 8007790:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007792:	e098      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007794:	4b4f      	ldr	r3, [pc, #316]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800779e:	4b4d      	ldr	r3, [pc, #308]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d028      	beq.n	80077fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077aa:	4b4a      	ldr	r3, [pc, #296]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	099b      	lsrs	r3, r3, #6
 80077b0:	2200      	movs	r2, #0
 80077b2:	623b      	str	r3, [r7, #32]
 80077b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80077bc:	2100      	movs	r1, #0
 80077be:	4b47      	ldr	r3, [pc, #284]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x188>)
 80077c0:	fb03 f201 	mul.w	r2, r3, r1
 80077c4:	2300      	movs	r3, #0
 80077c6:	fb00 f303 	mul.w	r3, r0, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	4a43      	ldr	r2, [pc, #268]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x188>)
 80077ce:	fba0 1202 	umull	r1, r2, r0, r2
 80077d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077d4:	460a      	mov	r2, r1
 80077d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80077d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077da:	4413      	add	r3, r2
 80077dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e0:	2200      	movs	r2, #0
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	61fa      	str	r2, [r7, #28]
 80077e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80077ee:	f7f8 fd5f 	bl	80002b0 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4613      	mov	r3, r2
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077fa:	e053      	b.n	80078a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077fc:	4b35      	ldr	r3, [pc, #212]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	099b      	lsrs	r3, r3, #6
 8007802:	2200      	movs	r2, #0
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	617a      	str	r2, [r7, #20]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800780e:	f04f 0b00 	mov.w	fp, #0
 8007812:	4652      	mov	r2, sl
 8007814:	465b      	mov	r3, fp
 8007816:	f04f 0000 	mov.w	r0, #0
 800781a:	f04f 0100 	mov.w	r1, #0
 800781e:	0159      	lsls	r1, r3, #5
 8007820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007824:	0150      	lsls	r0, r2, #5
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	ebb2 080a 	subs.w	r8, r2, sl
 800782e:	eb63 090b 	sbc.w	r9, r3, fp
 8007832:	f04f 0200 	mov.w	r2, #0
 8007836:	f04f 0300 	mov.w	r3, #0
 800783a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800783e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007842:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007846:	ebb2 0408 	subs.w	r4, r2, r8
 800784a:	eb63 0509 	sbc.w	r5, r3, r9
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	00eb      	lsls	r3, r5, #3
 8007858:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800785c:	00e2      	lsls	r2, r4, #3
 800785e:	4614      	mov	r4, r2
 8007860:	461d      	mov	r5, r3
 8007862:	eb14 030a 	adds.w	r3, r4, sl
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	eb45 030b 	adc.w	r3, r5, fp
 800786c:	607b      	str	r3, [r7, #4]
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800787a:	4629      	mov	r1, r5
 800787c:	028b      	lsls	r3, r1, #10
 800787e:	4621      	mov	r1, r4
 8007880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007884:	4621      	mov	r1, r4
 8007886:	028a      	lsls	r2, r1, #10
 8007888:	4610      	mov	r0, r2
 800788a:	4619      	mov	r1, r3
 800788c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788e:	2200      	movs	r2, #0
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	60fa      	str	r2, [r7, #12]
 8007894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007898:	f7f8 fd0a 	bl	80002b0 <__aeabi_uldivmod>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4613      	mov	r3, r2
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80078a4:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	0c1b      	lsrs	r3, r3, #16
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	3301      	adds	r3, #1
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80078b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80078be:	e002      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80078c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80078c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3740      	adds	r7, #64	@ 0x40
 80078cc:	46bd      	mov	sp, r7
 80078ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078d2:	bf00      	nop
 80078d4:	40023800 	.word	0x40023800
 80078d8:	00f42400 	.word	0x00f42400
 80078dc:	017d7840 	.word	0x017d7840

080078e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078e4:	4b03      	ldr	r3, [pc, #12]	@ (80078f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078e6:	681b      	ldr	r3, [r3, #0]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000004 	.word	0x20000004

080078f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078fc:	f7ff fff0 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 8007900:	4602      	mov	r2, r0
 8007902:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	0a9b      	lsrs	r3, r3, #10
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	4903      	ldr	r1, [pc, #12]	@ (800791c <HAL_RCC_GetPCLK1Freq+0x24>)
 800790e:	5ccb      	ldrb	r3, [r1, r3]
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007914:	4618      	mov	r0, r3
 8007916:	bd80      	pop	{r7, pc}
 8007918:	40023800 	.word	0x40023800
 800791c:	080250d8 	.word	0x080250d8

08007920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007924:	f7ff ffdc 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 8007928:	4602      	mov	r2, r0
 800792a:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	0b5b      	lsrs	r3, r3, #13
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	4903      	ldr	r1, [pc, #12]	@ (8007944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007936:	5ccb      	ldrb	r3, [r1, r3]
 8007938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800793c:	4618      	mov	r0, r3
 800793e:	bd80      	pop	{r7, pc}
 8007940:	40023800 	.word	0x40023800
 8007944:	080250d8 	.word	0x080250d8

08007948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d012      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007970:	4b69      	ldr	r3, [pc, #420]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	4a68      	ldr	r2, [pc, #416]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800797a:	6093      	str	r3, [r2, #8]
 800797c:	4b66      	ldr	r3, [pc, #408]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007984:	4964      	ldr	r1, [pc, #400]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007986:	4313      	orrs	r3, r2
 8007988:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007992:	2301      	movs	r3, #1
 8007994:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d017      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079a2:	4b5d      	ldr	r3, [pc, #372]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b0:	4959      	ldr	r1, [pc, #356]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c0:	d101      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80079ce:	2301      	movs	r3, #1
 80079d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d017      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079de:	4b4e      	ldr	r3, [pc, #312]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	494a      	ldr	r1, [pc, #296]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079fc:	d101      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079fe:	2301      	movs	r3, #1
 8007a00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 808b 	beq.w	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a30:	4a39      	ldr	r2, [pc, #228]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a38:	4b37      	ldr	r3, [pc, #220]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a44:	4b35      	ldr	r3, [pc, #212]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a34      	ldr	r2, [pc, #208]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a50:	f7fd f83e 	bl	8004ad0 <HAL_GetTick>
 8007a54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a58:	f7fd f83a 	bl	8004ad0 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b64      	cmp	r3, #100	@ 0x64
 8007a64:	d901      	bls.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e357      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a76:	4b28      	ldr	r3, [pc, #160]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d035      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d02e      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a94:	4b20      	ldr	r3, [pc, #128]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aa8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aae:	4a1a      	ldr	r2, [pc, #104]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ab4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007ab6:	4a18      	ldr	r2, [pc, #96]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007abc:	4b16      	ldr	r3, [pc, #88]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d114      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7fd f802 	bl	8004ad0 <HAL_GetTick>
 8007acc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ace:	e00a      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ad0:	f7fc fffe 	bl	8004ad0 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e319      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0ee      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007afe:	d111      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b00:	4b05      	ldr	r3, [pc, #20]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007b0c:	4b04      	ldr	r3, [pc, #16]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b0e:	400b      	ands	r3, r1
 8007b10:	4901      	ldr	r1, [pc, #4]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
 8007b16:	e00b      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	40007000 	.word	0x40007000
 8007b20:	0ffffcff 	.word	0x0ffffcff
 8007b24:	4baa      	ldr	r3, [pc, #680]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4aa9      	ldr	r2, [pc, #676]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b2a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b2e:	6093      	str	r3, [r2, #8]
 8007b30:	4ba7      	ldr	r3, [pc, #668]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b3c:	49a4      	ldr	r1, [pc, #656]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d010      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b4e:	4ba0      	ldr	r3, [pc, #640]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b54:	4a9e      	ldr	r2, [pc, #632]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b60:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b68:	4999      	ldr	r1, [pc, #612]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b7c:	4b94      	ldr	r3, [pc, #592]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b8a:	4991      	ldr	r1, [pc, #580]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b9e:	4b8c      	ldr	r3, [pc, #560]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bac:	4988      	ldr	r1, [pc, #544]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bc0:	4b83      	ldr	r3, [pc, #524]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bce:	4980      	ldr	r1, [pc, #512]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007be2:	4b7b      	ldr	r3, [pc, #492]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf0:	4977      	ldr	r1, [pc, #476]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c04:	4b72      	ldr	r3, [pc, #456]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0a:	f023 0203 	bic.w	r2, r3, #3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c12:	496f      	ldr	r1, [pc, #444]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c26:	4b6a      	ldr	r3, [pc, #424]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2c:	f023 020c 	bic.w	r2, r3, #12
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c34:	4966      	ldr	r1, [pc, #408]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c48:	4b61      	ldr	r3, [pc, #388]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c56:	495e      	ldr	r1, [pc, #376]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c6a:	4b59      	ldr	r3, [pc, #356]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c70:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	4955      	ldr	r1, [pc, #340]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c8c:	4b50      	ldr	r3, [pc, #320]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9a:	494d      	ldr	r1, [pc, #308]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007cae:	4b48      	ldr	r3, [pc, #288]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cbc:	4944      	ldr	r1, [pc, #272]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cde:	493c      	ldr	r1, [pc, #240]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007cf2:	4b37      	ldr	r3, [pc, #220]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d00:	4933      	ldr	r1, [pc, #204]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d14:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d1a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d22:	492b      	ldr	r1, [pc, #172]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d011      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d36:	4b26      	ldr	r3, [pc, #152]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d44:	4922      	ldr	r1, [pc, #136]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d54:	d101      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d56:	2301      	movs	r3, #1
 8007d58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d66:	2301      	movs	r3, #1
 8007d68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d76:	4b16      	ldr	r3, [pc, #88]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d84:	4912      	ldr	r1, [pc, #72]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d98:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da8:	4909      	ldr	r1, [pc, #36]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d006      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80d9 	beq.w	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007dc4:	4b02      	ldr	r3, [pc, #8]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a01      	ldr	r2, [pc, #4]	@ (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dce:	e001      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007dd0:	40023800 	.word	0x40023800
 8007dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd6:	f7fc fe7b 	bl	8004ad0 <HAL_GetTick>
 8007dda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ddc:	e008      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007dde:	f7fc fe77 	bl	8004ad0 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b64      	cmp	r3, #100	@ 0x64
 8007dea:	d901      	bls.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e194      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007df0:	4b6c      	ldr	r3, [pc, #432]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f0      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d021      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d11d      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e10:	4b64      	ldr	r3, [pc, #400]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e1e:	4b61      	ldr	r3, [pc, #388]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e24:	0e1b      	lsrs	r3, r3, #24
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	019a      	lsls	r2, r3, #6
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	041b      	lsls	r3, r3, #16
 8007e36:	431a      	orrs	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	061b      	lsls	r3, r3, #24
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	071b      	lsls	r3, r3, #28
 8007e44:	4957      	ldr	r1, [pc, #348]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e60:	d00a      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d02e      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e76:	d129      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e78:	4b4a      	ldr	r3, [pc, #296]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e7e:	0c1b      	lsrs	r3, r3, #16
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e86:	4b47      	ldr	r3, [pc, #284]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e8c:	0f1b      	lsrs	r3, r3, #28
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	019a      	lsls	r2, r3, #6
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	061b      	lsls	r3, r3, #24
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	071b      	lsls	r3, r3, #28
 8007eac:	493d      	ldr	r1, [pc, #244]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eba:	f023 021f 	bic.w	r2, r3, #31
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	4937      	ldr	r1, [pc, #220]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01d      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ed8:	4b32      	ldr	r3, [pc, #200]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ede:	0e1b      	lsrs	r3, r3, #24
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eec:	0f1b      	lsrs	r3, r3, #28
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	019a      	lsls	r2, r3, #6
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	041b      	lsls	r3, r3, #16
 8007f00:	431a      	orrs	r2, r3
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	061b      	lsls	r3, r3, #24
 8007f06:	431a      	orrs	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	071b      	lsls	r3, r3, #28
 8007f0c:	4925      	ldr	r1, [pc, #148]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d011      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	019a      	lsls	r2, r3, #6
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	061b      	lsls	r3, r3, #24
 8007f34:	431a      	orrs	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	071b      	lsls	r3, r3, #28
 8007f3c:	4919      	ldr	r1, [pc, #100]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f44:	4b17      	ldr	r3, [pc, #92]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a16      	ldr	r2, [pc, #88]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f50:	f7fc fdbe 	bl	8004ad0 <HAL_GetTick>
 8007f54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f56:	e008      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f58:	f7fc fdba 	bl	8004ad0 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b64      	cmp	r3, #100	@ 0x64
 8007f64:	d901      	bls.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e0d7      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f0      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	f040 80cd 	bne.w	8008118 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f7e:	4b09      	ldr	r3, [pc, #36]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a08      	ldr	r2, [pc, #32]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f8a:	f7fc fda1 	bl	8004ad0 <HAL_GetTick>
 8007f8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f90:	e00a      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f92:	f7fc fd9d 	bl	8004ad0 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b64      	cmp	r3, #100	@ 0x64
 8007f9e:	d903      	bls.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0ba      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007fa4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fa8:	4b5e      	ldr	r3, [pc, #376]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb4:	d0ed      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d02e      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d12a      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fde:	4b51      	ldr	r3, [pc, #324]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fec:	4b4d      	ldr	r3, [pc, #308]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff2:	0f1b      	lsrs	r3, r3, #28
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	019a      	lsls	r2, r3, #6
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	061b      	lsls	r3, r3, #24
 800800c:	431a      	orrs	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	071b      	lsls	r3, r3, #28
 8008012:	4944      	ldr	r1, [pc, #272]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008014:	4313      	orrs	r3, r2
 8008016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800801a:	4b42      	ldr	r3, [pc, #264]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800801c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008020:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	3b01      	subs	r3, #1
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	493d      	ldr	r1, [pc, #244]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800802e:	4313      	orrs	r3, r2
 8008030:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d022      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008048:	d11d      	bne.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800804a:	4b36      	ldr	r3, [pc, #216]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800804c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008050:	0e1b      	lsrs	r3, r3, #24
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008058:	4b32      	ldr	r3, [pc, #200]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800805a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800805e:	0f1b      	lsrs	r3, r3, #28
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	019a      	lsls	r2, r3, #6
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	041b      	lsls	r3, r3, #16
 8008072:	431a      	orrs	r2, r3
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	061b      	lsls	r3, r3, #24
 8008078:	431a      	orrs	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	071b      	lsls	r3, r3, #28
 800807e:	4929      	ldr	r1, [pc, #164]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008080:	4313      	orrs	r3, r2
 8008082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d028      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008092:	4b24      	ldr	r3, [pc, #144]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008098:	0e1b      	lsrs	r3, r3, #24
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080a0:	4b20      	ldr	r3, [pc, #128]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	f003 0303 	and.w	r3, r3, #3
 80080ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	019a      	lsls	r2, r3, #6
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	041b      	lsls	r3, r3, #16
 80080b8:	431a      	orrs	r2, r3
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	061b      	lsls	r3, r3, #24
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	071b      	lsls	r3, r3, #28
 80080c6:	4917      	ldr	r1, [pc, #92]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80080ce:	4b15      	ldr	r3, [pc, #84]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080dc:	4911      	ldr	r1, [pc, #68]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f0:	f7fc fcee 	bl	8004ad0 <HAL_GetTick>
 80080f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080f8:	f7fc fcea 	bl	8004ad0 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b64      	cmp	r3, #100	@ 0x64
 8008104:	d901      	bls.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e007      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800810a:	4b06      	ldr	r3, [pc, #24]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008116:	d1ef      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40023800 	.word	0x40023800

08008128 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e025      	b.n	8008188 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7f8 fbfb 	bl	800094c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f002 fda5 	bl	800acb8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	461a      	mov	r2, r3
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	f002 fdf9 	bl	800ad70 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80081a2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d101      	bne.n	80081ae <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80081aa:	2302      	movs	r3, #2
 80081ac:	e021      	b.n	80081f2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d002      	beq.n	80081ba <HAL_SDRAM_SendCommand+0x2a>
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d118      	bne.n	80081ec <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2202      	movs	r2, #2
 80081be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f002 fe3a 	bl	800ae44 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d104      	bne.n	80081e2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2205      	movs	r2, #5
 80081dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80081e0:	e006      	b.n	80081f0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80081ea:	e001      	b.n	80081f0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e000      	b.n	80081f2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d101      	bne.n	8008214 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008210:	2302      	movs	r3, #2
 8008212:	e016      	b.n	8008242 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	d10f      	bne.n	8008240 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f002 fe2c 	bl	800ae8c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	e000      	b.n	8008242 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e0c1      	b.n	80083e2 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008262:	2b00      	cmp	r3, #0
 8008264:	d108      	bne.n	8008278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800826e:	d009      	beq.n	8008284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	61da      	str	r2, [r3, #28]
 8008276:	e005      	b.n	8008284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d12a      	bne.n	80082ec <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a52      	ldr	r2, [pc, #328]	@ (80083ec <HAL_SPI_Init+0x1a0>)
 80082a2:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a52      	ldr	r2, [pc, #328]	@ (80083f0 <HAL_SPI_Init+0x1a4>)
 80082a8:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a51      	ldr	r2, [pc, #324]	@ (80083f4 <HAL_SPI_Init+0x1a8>)
 80082ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a51      	ldr	r2, [pc, #324]	@ (80083f8 <HAL_SPI_Init+0x1ac>)
 80082b4:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a50      	ldr	r2, [pc, #320]	@ (80083fc <HAL_SPI_Init+0x1b0>)
 80082ba:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a50      	ldr	r2, [pc, #320]	@ (8008400 <HAL_SPI_Init+0x1b4>)
 80082c0:	679a      	str	r2, [r3, #120]	@ 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a4f      	ldr	r2, [pc, #316]	@ (8008404 <HAL_SPI_Init+0x1b8>)
 80082c6:	67da      	str	r2, [r3, #124]	@ 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a4f      	ldr	r2, [pc, #316]	@ (8008408 <HAL_SPI_Init+0x1bc>)
 80082cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    if (hspi->MspInitCallback == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d103      	bne.n	80082e2 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a4b      	ldr	r2, [pc, #300]	@ (800840c <HAL_SPI_Init+0x1c0>)
 80082de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008302:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800830c:	d902      	bls.n	8008314 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e002      	b.n	800831a <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008318:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008322:	d007      	beq.n	8008334 <HAL_SPI_Init+0xe8>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800832c:	d002      	beq.n	8008334 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008376:	ea42 0103 	orr.w	r1, r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	f003 0204 	and.w	r2, r3, #4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80083b0:	ea42 0103 	orr.w	r1, r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	08008855 	.word	0x08008855
 80083f0:	08008869 	.word	0x08008869
 80083f4:	0800887d 	.word	0x0800887d
 80083f8:	08008891 	.word	0x08008891
 80083fc:	080088a5 	.word	0x080088a5
 8008400:	080088b9 	.word	0x080088b9
 8008404:	080088cd 	.word	0x080088cd
 8008408:	080088e1 	.word	0x080088e1
 800840c:	080014ed 	.word	0x080014ed

08008410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	@ 0x28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800841e:	2301      	movs	r3, #1
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_SPI_TransmitReceive+0x26>
 8008432:	2302      	movs	r3, #2
 8008434:	e20a      	b.n	800884c <HAL_SPI_TransmitReceive+0x43c>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800843e:	f7fc fb47 	bl	8004ad0 <HAL_GetTick>
 8008442:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800844a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008452:	887b      	ldrh	r3, [r7, #2]
 8008454:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008456:	887b      	ldrh	r3, [r7, #2]
 8008458:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800845a:	7efb      	ldrb	r3, [r7, #27]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d00e      	beq.n	800847e <HAL_SPI_TransmitReceive+0x6e>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008466:	d106      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x66>
 8008470:	7efb      	ldrb	r3, [r7, #27]
 8008472:	2b04      	cmp	r3, #4
 8008474:	d003      	beq.n	800847e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008476:	2302      	movs	r3, #2
 8008478:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800847c:	e1e0      	b.n	8008840 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <HAL_SPI_TransmitReceive+0x80>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_SPI_TransmitReceive+0x80>
 800848a:	887b      	ldrh	r3, [r7, #2]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008496:	e1d3      	b.n	8008840 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d003      	beq.n	80084ac <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2205      	movs	r2, #5
 80084a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	887a      	ldrh	r2, [r7, #2]
 80084bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	887a      	ldrh	r2, [r7, #2]
 80084c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	887a      	ldrh	r2, [r7, #2]
 80084d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	887a      	ldrh	r2, [r7, #2]
 80084d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084ee:	d802      	bhi.n	80084f6 <HAL_SPI_TransmitReceive+0xe6>
 80084f0:	8a3b      	ldrh	r3, [r7, #16]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d908      	bls.n	8008508 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008504:	605a      	str	r2, [r3, #4]
 8008506:	e007      	b.n	8008518 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008516:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008522:	2b40      	cmp	r3, #64	@ 0x40
 8008524:	d007      	beq.n	8008536 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800853e:	f240 8081 	bls.w	8008644 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_SPI_TransmitReceive+0x140>
 800854a:	8a7b      	ldrh	r3, [r7, #18]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d16d      	bne.n	800862c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008554:	881a      	ldrh	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008560:	1c9a      	adds	r2, r3, #2
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008574:	e05a      	b.n	800862c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b02      	cmp	r3, #2
 8008582:	d11b      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x1ac>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d016      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x1ac>
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	2b01      	cmp	r3, #1
 8008592:	d113      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	881a      	ldrh	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	1c9a      	adds	r2, r3, #2
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d11c      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x1f4>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d016      	beq.n	8008604 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e0:	b292      	uxth	r2, r2
 80085e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e8:	1c9a      	adds	r2, r3, #2
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008604:	f7fc fa64 	bl	8004ad0 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008610:	429a      	cmp	r2, r3
 8008612:	d80b      	bhi.n	800862c <HAL_SPI_TransmitReceive+0x21c>
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d007      	beq.n	800862c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800862a:	e109      	b.n	8008840 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008630:	b29b      	uxth	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d19f      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x166>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d199      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x166>
 8008642:	e0e3      	b.n	800880c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_SPI_TransmitReceive+0x244>
 800864c:	8a7b      	ldrh	r3, [r7, #18]
 800864e:	2b01      	cmp	r3, #1
 8008650:	f040 80cf 	bne.w	80087f2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d912      	bls.n	8008684 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008662:	881a      	ldrh	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866e:	1c9a      	adds	r2, r3, #2
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b02      	subs	r3, #2
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008682:	e0b6      	b.n	80087f2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086aa:	e0a2      	b.n	80087f2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d134      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x314>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d02f      	beq.n	8008724 <HAL_SPI_TransmitReceive+0x314>
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d12c      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d912      	bls.n	80086fa <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	881a      	ldrh	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	1c9a      	adds	r2, r3, #2
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b02      	subs	r3, #2
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086f8:	e012      	b.n	8008720 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	330c      	adds	r3, #12
 8008704:	7812      	ldrb	r2, [r2, #0]
 8008706:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008716:	b29b      	uxth	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b01      	cmp	r3, #1
 8008730:	d148      	bne.n	80087c4 <HAL_SPI_TransmitReceive+0x3b4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d042      	beq.n	80087c4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b01      	cmp	r3, #1
 8008748:	d923      	bls.n	8008792 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008754:	b292      	uxth	r2, r2
 8008756:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875c:	1c9a      	adds	r2, r3, #2
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b02      	subs	r3, #2
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b01      	cmp	r3, #1
 800877e:	d81f      	bhi.n	80087c0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800878e:	605a      	str	r2, [r3, #4]
 8008790:	e016      	b.n	80087c0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f103 020c 	add.w	r2, r3, #12
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879e:	7812      	ldrb	r2, [r2, #0]
 80087a0:	b2d2      	uxtb	r2, r2
 80087a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087c0:	2301      	movs	r3, #1
 80087c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087c4:	f7fc f984 	bl	8004ad0 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d803      	bhi.n	80087dc <HAL_SPI_TransmitReceive+0x3cc>
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d102      	bne.n	80087e2 <HAL_SPI_TransmitReceive+0x3d2>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d107      	bne.n	80087f2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80087f0:	e026      	b.n	8008840 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f47f af57 	bne.w	80086ac <HAL_SPI_TransmitReceive+0x29c>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	f47f af50 	bne.w	80086ac <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f98d 	bl	8008b30 <SPI_EndRxTxTransaction>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d005      	beq.n	8008828 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008836:	e003      	b.n	8008840 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008848:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800884c:	4618      	mov	r0, r3
 800884e:	3728      	adds	r7, #40	@ 0x28
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	4613      	mov	r3, r2
 8008902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008904:	f7fc f8e4 	bl	8004ad0 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4413      	add	r3, r2
 8008912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008914:	f7fc f8dc 	bl	8004ad0 <HAL_GetTick>
 8008918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800891a:	4b39      	ldr	r3, [pc, #228]	@ (8008a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	015b      	lsls	r3, r3, #5
 8008920:	0d1b      	lsrs	r3, r3, #20
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	fb02 f303 	mul.w	r3, r2, r3
 8008928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800892a:	e054      	b.n	80089d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d050      	beq.n	80089d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008934:	f7fc f8cc 	bl	8004ad0 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	429a      	cmp	r2, r3
 8008942:	d902      	bls.n	800894a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d13d      	bne.n	80089c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008962:	d111      	bne.n	8008988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800896c:	d004      	beq.n	8008978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008976:	d107      	bne.n	8008988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008990:	d10f      	bne.n	80089b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e017      	b.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4013      	ands	r3, r2
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	bf0c      	ite	eq
 80089e6:	2301      	moveq	r3, #1
 80089e8:	2300      	movne	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d19b      	bne.n	800892c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3720      	adds	r7, #32
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000004 	.word	0x20000004

08008a04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	@ 0x28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a16:	f7fc f85b 	bl	8004ad0 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	4413      	add	r3, r2
 8008a24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008a26:	f7fc f853 	bl	8004ad0 <HAL_GetTick>
 8008a2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	330c      	adds	r3, #12
 8008a32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a34:	4b3d      	ldr	r3, [pc, #244]	@ (8008b2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	00da      	lsls	r2, r3, #3
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	0d1b      	lsrs	r3, r3, #20
 8008a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a4c:	e060      	b.n	8008b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a54:	d107      	bne.n	8008a66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d050      	beq.n	8008b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a6e:	f7fc f82f 	bl	8004ad0 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d902      	bls.n	8008a84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d13d      	bne.n	8008b00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a9c:	d111      	bne.n	8008ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aa6:	d004      	beq.n	8008ab2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ab0:	d107      	bne.n	8008ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aca:	d10f      	bne.n	8008aec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008aea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e010      	b.n	8008b22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d196      	bne.n	8008a4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3728      	adds	r7, #40	@ 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000004 	.word	0x20000004

08008b30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff ff5b 	bl	8008a04 <SPI_WaitFifoStateUntilTimeout>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d007      	beq.n	8008b64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b58:	f043 0220 	orr.w	r2, r3, #32
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e046      	b.n	8008bf2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b64:	4b25      	ldr	r3, [pc, #148]	@ (8008bfc <SPI_EndRxTxTransaction+0xcc>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a25      	ldr	r2, [pc, #148]	@ (8008c00 <SPI_EndRxTxTransaction+0xd0>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	0d5b      	lsrs	r3, r3, #21
 8008b70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b74:	fb02 f303 	mul.w	r3, r2, r3
 8008b78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b82:	d112      	bne.n	8008baa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2180      	movs	r1, #128	@ 0x80
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff feb0 	bl	80088f4 <SPI_WaitFlagStateUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d016      	beq.n	8008bc8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b9e:	f043 0220 	orr.w	r2, r3, #32
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e023      	b.n	8008bf2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00a      	beq.n	8008bc6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc0:	2b80      	cmp	r3, #128	@ 0x80
 8008bc2:	d0f2      	beq.n	8008baa <SPI_EndRxTxTransaction+0x7a>
 8008bc4:	e000      	b.n	8008bc8 <SPI_EndRxTxTransaction+0x98>
        break;
 8008bc6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff ff15 	bl	8008a04 <SPI_WaitFifoStateUntilTimeout>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be4:	f043 0220 	orr.w	r2, r3, #32
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e000      	b.n	8008bf2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000004 	.word	0x20000004
 8008c00:	165e9f81 	.word	0x165e9f81

08008c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e054      	b.n	8008cc0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d111      	bne.n	8008c46 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fa08 	bl	800a040 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a23      	ldr	r2, [pc, #140]	@ (8008cc8 <HAL_TIM_Base_Init+0xc4>)
 8008c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f000 fe27 	bl	80098ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	08001945 	.word	0x08001945

08008ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e054      	b.n	8008d88 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d111      	bne.n	8008d0e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 f9a4 	bl	800a040 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a23      	ldr	r2, [pc, #140]	@ (8008d90 <HAL_TIM_PWM_Init+0xc4>)
 8008d04:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f000 fdc3 	bl	80098ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	08008d95 	.word	0x08008d95

08008d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d109      	bne.n	8008dd0 <HAL_TIM_PWM_Start_IT+0x28>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	bf14      	ite	ne
 8008dc8:	2301      	movne	r3, #1
 8008dca:	2300      	moveq	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	e03c      	b.n	8008e4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d109      	bne.n	8008dea <HAL_TIM_PWM_Start_IT+0x42>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	bf14      	ite	ne
 8008de2:	2301      	movne	r3, #1
 8008de4:	2300      	moveq	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	e02f      	b.n	8008e4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d109      	bne.n	8008e04 <HAL_TIM_PWM_Start_IT+0x5c>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	bf14      	ite	ne
 8008dfc:	2301      	movne	r3, #1
 8008dfe:	2300      	moveq	r3, #0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	e022      	b.n	8008e4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2b0c      	cmp	r3, #12
 8008e08:	d109      	bne.n	8008e1e <HAL_TIM_PWM_Start_IT+0x76>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	bf14      	ite	ne
 8008e16:	2301      	movne	r3, #1
 8008e18:	2300      	moveq	r3, #0
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	e015      	b.n	8008e4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	d109      	bne.n	8008e38 <HAL_TIM_PWM_Start_IT+0x90>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	bf14      	ite	ne
 8008e30:	2301      	movne	r3, #1
 8008e32:	2300      	moveq	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	e008      	b.n	8008e4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	bf14      	ite	ne
 8008e44:	2301      	movne	r3, #1
 8008e46:	2300      	moveq	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0dd      	b.n	800900e <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <HAL_TIM_PWM_Start_IT+0xba>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e60:	e023      	b.n	8008eaa <HAL_TIM_PWM_Start_IT+0x102>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d104      	bne.n	8008e72 <HAL_TIM_PWM_Start_IT+0xca>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e70:	e01b      	b.n	8008eaa <HAL_TIM_PWM_Start_IT+0x102>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_PWM_Start_IT+0xda>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e80:	e013      	b.n	8008eaa <HAL_TIM_PWM_Start_IT+0x102>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b0c      	cmp	r3, #12
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_PWM_Start_IT+0xea>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e90:	e00b      	b.n	8008eaa <HAL_TIM_PWM_Start_IT+0x102>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_PWM_Start_IT+0xfa>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ea0:	e003      	b.n	8008eaa <HAL_TIM_PWM_Start_IT+0x102>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b0c      	cmp	r3, #12
 8008eae:	d841      	bhi.n	8008f34 <HAL_TIM_PWM_Start_IT+0x18c>
 8008eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb8 <HAL_TIM_PWM_Start_IT+0x110>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008eed 	.word	0x08008eed
 8008ebc:	08008f35 	.word	0x08008f35
 8008ec0:	08008f35 	.word	0x08008f35
 8008ec4:	08008f35 	.word	0x08008f35
 8008ec8:	08008eff 	.word	0x08008eff
 8008ecc:	08008f35 	.word	0x08008f35
 8008ed0:	08008f35 	.word	0x08008f35
 8008ed4:	08008f35 	.word	0x08008f35
 8008ed8:	08008f11 	.word	0x08008f11
 8008edc:	08008f35 	.word	0x08008f35
 8008ee0:	08008f35 	.word	0x08008f35
 8008ee4:	08008f35 	.word	0x08008f35
 8008ee8:	08008f23 	.word	0x08008f23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0202 	orr.w	r2, r2, #2
 8008efa:	60da      	str	r2, [r3, #12]
      break;
 8008efc:	e01d      	b.n	8008f3a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0204 	orr.w	r2, r2, #4
 8008f0c:	60da      	str	r2, [r3, #12]
      break;
 8008f0e:	e014      	b.n	8008f3a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0208 	orr.w	r2, r2, #8
 8008f1e:	60da      	str	r2, [r3, #12]
      break;
 8008f20:	e00b      	b.n	8008f3a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0210 	orr.w	r2, r2, #16
 8008f30:	60da      	str	r2, [r3, #12]
      break;
 8008f32:	e002      	b.n	8008f3a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	73fb      	strb	r3, [r7, #15]
      break;
 8008f38:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d165      	bne.n	800900c <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2201      	movs	r2, #1
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 f853 	bl	8009ff4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a31      	ldr	r2, [pc, #196]	@ (8009018 <HAL_TIM_PWM_Start_IT+0x270>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d004      	beq.n	8008f62 <HAL_TIM_PWM_Start_IT+0x1ba>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800901c <HAL_TIM_PWM_Start_IT+0x274>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d101      	bne.n	8008f66 <HAL_TIM_PWM_Start_IT+0x1be>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e000      	b.n	8008f68 <HAL_TIM_PWM_Start_IT+0x1c0>
 8008f66:	2300      	movs	r3, #0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d007      	beq.n	8008f7c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a25      	ldr	r2, [pc, #148]	@ (8009018 <HAL_TIM_PWM_Start_IT+0x270>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d022      	beq.n	8008fcc <HAL_TIM_PWM_Start_IT+0x224>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f8e:	d01d      	beq.n	8008fcc <HAL_TIM_PWM_Start_IT+0x224>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a22      	ldr	r2, [pc, #136]	@ (8009020 <HAL_TIM_PWM_Start_IT+0x278>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d018      	beq.n	8008fcc <HAL_TIM_PWM_Start_IT+0x224>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a21      	ldr	r2, [pc, #132]	@ (8009024 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d013      	beq.n	8008fcc <HAL_TIM_PWM_Start_IT+0x224>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8009028 <HAL_TIM_PWM_Start_IT+0x280>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00e      	beq.n	8008fcc <HAL_TIM_PWM_Start_IT+0x224>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800901c <HAL_TIM_PWM_Start_IT+0x274>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d009      	beq.n	8008fcc <HAL_TIM_PWM_Start_IT+0x224>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800902c <HAL_TIM_PWM_Start_IT+0x284>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d004      	beq.n	8008fcc <HAL_TIM_PWM_Start_IT+0x224>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8009030 <HAL_TIM_PWM_Start_IT+0x288>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d115      	bne.n	8008ff8 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	4b18      	ldr	r3, [pc, #96]	@ (8009034 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b06      	cmp	r3, #6
 8008fdc:	d015      	beq.n	800900a <HAL_TIM_PWM_Start_IT+0x262>
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fe4:	d011      	beq.n	800900a <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0201 	orr.w	r2, r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff6:	e008      	b.n	800900a <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0201 	orr.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e000      	b.n	800900c <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800900a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	40010000 	.word	0x40010000
 800901c:	40010400 	.word	0x40010400
 8009020:	40000400 	.word	0x40000400
 8009024:	40000800 	.word	0x40000800
 8009028:	40000c00 	.word	0x40000c00
 800902c:	40014000 	.word	0x40014000
 8009030:	40001800 	.word	0x40001800
 8009034:	00010007 	.word	0x00010007

08009038 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b0c      	cmp	r3, #12
 800904a:	d841      	bhi.n	80090d0 <HAL_TIM_PWM_Stop_IT+0x98>
 800904c:	a201      	add	r2, pc, #4	@ (adr r2, 8009054 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800904e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009052:	bf00      	nop
 8009054:	08009089 	.word	0x08009089
 8009058:	080090d1 	.word	0x080090d1
 800905c:	080090d1 	.word	0x080090d1
 8009060:	080090d1 	.word	0x080090d1
 8009064:	0800909b 	.word	0x0800909b
 8009068:	080090d1 	.word	0x080090d1
 800906c:	080090d1 	.word	0x080090d1
 8009070:	080090d1 	.word	0x080090d1
 8009074:	080090ad 	.word	0x080090ad
 8009078:	080090d1 	.word	0x080090d1
 800907c:	080090d1 	.word	0x080090d1
 8009080:	080090d1 	.word	0x080090d1
 8009084:	080090bf 	.word	0x080090bf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0202 	bic.w	r2, r2, #2
 8009096:	60da      	str	r2, [r3, #12]
      break;
 8009098:	e01d      	b.n	80090d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0204 	bic.w	r2, r2, #4
 80090a8:	60da      	str	r2, [r3, #12]
      break;
 80090aa:	e014      	b.n	80090d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68da      	ldr	r2, [r3, #12]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0208 	bic.w	r2, r2, #8
 80090ba:	60da      	str	r2, [r3, #12]
      break;
 80090bc:	e00b      	b.n	80090d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0210 	bic.w	r2, r2, #16
 80090cc:	60da      	str	r2, [r3, #12]
      break;
 80090ce:	e002      	b.n	80090d6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
      break;
 80090d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d171      	bne.n	80091c0 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2200      	movs	r2, #0
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 ff85 	bl	8009ff4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a37      	ldr	r2, [pc, #220]	@ (80091cc <HAL_TIM_PWM_Stop_IT+0x194>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d004      	beq.n	80090fe <HAL_TIM_PWM_Stop_IT+0xc6>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a35      	ldr	r2, [pc, #212]	@ (80091d0 <HAL_TIM_PWM_Stop_IT+0x198>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d101      	bne.n	8009102 <HAL_TIM_PWM_Stop_IT+0xca>
 80090fe:	2301      	movs	r3, #1
 8009100:	e000      	b.n	8009104 <HAL_TIM_PWM_Stop_IT+0xcc>
 8009102:	2300      	movs	r3, #0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d017      	beq.n	8009138 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6a1a      	ldr	r2, [r3, #32]
 800910e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009112:	4013      	ands	r3, r2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10f      	bne.n	8009138 <HAL_TIM_PWM_Stop_IT+0x100>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6a1a      	ldr	r2, [r3, #32]
 800911e:	f240 4344 	movw	r3, #1092	@ 0x444
 8009122:	4013      	ands	r3, r2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d107      	bne.n	8009138 <HAL_TIM_PWM_Stop_IT+0x100>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009136:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6a1a      	ldr	r2, [r3, #32]
 800913e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009142:	4013      	ands	r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10f      	bne.n	8009168 <HAL_TIM_PWM_Stop_IT+0x130>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6a1a      	ldr	r2, [r3, #32]
 800914e:	f240 4344 	movw	r3, #1092	@ 0x444
 8009152:	4013      	ands	r3, r2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d107      	bne.n	8009168 <HAL_TIM_PWM_Stop_IT+0x130>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0201 	bic.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d104      	bne.n	8009178 <HAL_TIM_PWM_Stop_IT+0x140>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009176:	e023      	b.n	80091c0 <HAL_TIM_PWM_Stop_IT+0x188>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b04      	cmp	r3, #4
 800917c:	d104      	bne.n	8009188 <HAL_TIM_PWM_Stop_IT+0x150>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009186:	e01b      	b.n	80091c0 <HAL_TIM_PWM_Stop_IT+0x188>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b08      	cmp	r3, #8
 800918c:	d104      	bne.n	8009198 <HAL_TIM_PWM_Stop_IT+0x160>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009196:	e013      	b.n	80091c0 <HAL_TIM_PWM_Stop_IT+0x188>
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b0c      	cmp	r3, #12
 800919c:	d104      	bne.n	80091a8 <HAL_TIM_PWM_Stop_IT+0x170>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091a6:	e00b      	b.n	80091c0 <HAL_TIM_PWM_Stop_IT+0x188>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2b10      	cmp	r3, #16
 80091ac:	d104      	bne.n	80091b8 <HAL_TIM_PWM_Stop_IT+0x180>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091b6:	e003      	b.n	80091c0 <HAL_TIM_PWM_Stop_IT+0x188>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40010000 	.word	0x40010000
 80091d0:	40010400 	.word	0x40010400

080091d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d026      	beq.n	8009244 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f003 0302 	and.w	r3, r3, #2
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d021      	beq.n	8009244 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0202 	mvn.w	r2, #2
 8009208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
 8009228:	e009      	b.n	800923e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d026      	beq.n	800929c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d021      	beq.n	800929c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0204 	mvn.w	r2, #4
 8009260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
 8009280:	e009      	b.n	8009296 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d026      	beq.n	80092f4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d021      	beq.n	80092f4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0208 	mvn.w	r2, #8
 80092b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2204      	movs	r2, #4
 80092be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
 80092d8:	e009      	b.n	80092ee <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d026      	beq.n	800934c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	d021      	beq.n	800934c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0210 	mvn.w	r2, #16
 8009310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2208      	movs	r2, #8
 8009316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
 8009330:	e009      	b.n	8009346 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00e      	beq.n	8009374 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d009      	beq.n	8009374 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f06f 0201 	mvn.w	r2, #1
 8009368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937a:	2b00      	cmp	r3, #0
 800937c:	d104      	bne.n	8009388 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00e      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800939a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00e      	beq.n	80093ce <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80093c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00e      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00e      	beq.n	800941e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f06f 0220 	mvn.w	r2, #32
 8009412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009442:	2302      	movs	r3, #2
 8009444:	e0ff      	b.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b14      	cmp	r3, #20
 8009452:	f200 80f0 	bhi.w	8009636 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009456:	a201      	add	r2, pc, #4	@ (adr r2, 800945c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945c:	080094b1 	.word	0x080094b1
 8009460:	08009637 	.word	0x08009637
 8009464:	08009637 	.word	0x08009637
 8009468:	08009637 	.word	0x08009637
 800946c:	080094f1 	.word	0x080094f1
 8009470:	08009637 	.word	0x08009637
 8009474:	08009637 	.word	0x08009637
 8009478:	08009637 	.word	0x08009637
 800947c:	08009533 	.word	0x08009533
 8009480:	08009637 	.word	0x08009637
 8009484:	08009637 	.word	0x08009637
 8009488:	08009637 	.word	0x08009637
 800948c:	08009573 	.word	0x08009573
 8009490:	08009637 	.word	0x08009637
 8009494:	08009637 	.word	0x08009637
 8009498:	08009637 	.word	0x08009637
 800949c:	080095b5 	.word	0x080095b5
 80094a0:	08009637 	.word	0x08009637
 80094a4:	08009637 	.word	0x08009637
 80094a8:	08009637 	.word	0x08009637
 80094ac:	080095f5 	.word	0x080095f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 faa4 	bl	8009a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0208 	orr.w	r2, r2, #8
 80094ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0204 	bic.w	r2, r2, #4
 80094da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6999      	ldr	r1, [r3, #24]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	619a      	str	r2, [r3, #24]
      break;
 80094ee:	e0a5      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 faf6 	bl	8009ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800950a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800951a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6999      	ldr	r1, [r3, #24]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	021a      	lsls	r2, r3, #8
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	619a      	str	r2, [r3, #24]
      break;
 8009530:	e084      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fb4d 	bl	8009bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0208 	orr.w	r2, r2, #8
 800954c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69da      	ldr	r2, [r3, #28]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0204 	bic.w	r2, r2, #4
 800955c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69d9      	ldr	r1, [r3, #28]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	691a      	ldr	r2, [r3, #16]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	61da      	str	r2, [r3, #28]
      break;
 8009570:	e064      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fba3 	bl	8009cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69da      	ldr	r2, [r3, #28]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800958c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69da      	ldr	r2, [r3, #28]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800959c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69d9      	ldr	r1, [r3, #28]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	021a      	lsls	r2, r3, #8
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	61da      	str	r2, [r3, #28]
      break;
 80095b2:	e043      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68b9      	ldr	r1, [r7, #8]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fbda 	bl	8009d74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0208 	orr.w	r2, r2, #8
 80095ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0204 	bic.w	r2, r2, #4
 80095de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	691a      	ldr	r2, [r3, #16]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095f2:	e023      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68b9      	ldr	r1, [r7, #8]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fc0c 	bl	8009e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800960e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800961e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	021a      	lsls	r2, r3, #8
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009634:	e002      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	75fb      	strb	r3, [r7, #23]
      break;
 800963a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop

08009650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_TIM_ConfigClockSource+0x1c>
 8009668:	2302      	movs	r3, #2
 800966a:	e0b4      	b.n	80097d6 <HAL_TIM_ConfigClockSource+0x186>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	4b56      	ldr	r3, [pc, #344]	@ (80097e0 <HAL_TIM_ConfigClockSource+0x190>)
 8009688:	4013      	ands	r3, r2
 800968a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096a4:	d03e      	beq.n	8009724 <HAL_TIM_ConfigClockSource+0xd4>
 80096a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096aa:	f200 8087 	bhi.w	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b2:	f000 8086 	beq.w	80097c2 <HAL_TIM_ConfigClockSource+0x172>
 80096b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ba:	d87f      	bhi.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096bc:	2b70      	cmp	r3, #112	@ 0x70
 80096be:	d01a      	beq.n	80096f6 <HAL_TIM_ConfigClockSource+0xa6>
 80096c0:	2b70      	cmp	r3, #112	@ 0x70
 80096c2:	d87b      	bhi.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096c4:	2b60      	cmp	r3, #96	@ 0x60
 80096c6:	d050      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x11a>
 80096c8:	2b60      	cmp	r3, #96	@ 0x60
 80096ca:	d877      	bhi.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096cc:	2b50      	cmp	r3, #80	@ 0x50
 80096ce:	d03c      	beq.n	800974a <HAL_TIM_ConfigClockSource+0xfa>
 80096d0:	2b50      	cmp	r3, #80	@ 0x50
 80096d2:	d873      	bhi.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096d4:	2b40      	cmp	r3, #64	@ 0x40
 80096d6:	d058      	beq.n	800978a <HAL_TIM_ConfigClockSource+0x13a>
 80096d8:	2b40      	cmp	r3, #64	@ 0x40
 80096da:	d86f      	bhi.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096dc:	2b30      	cmp	r3, #48	@ 0x30
 80096de:	d064      	beq.n	80097aa <HAL_TIM_ConfigClockSource+0x15a>
 80096e0:	2b30      	cmp	r3, #48	@ 0x30
 80096e2:	d86b      	bhi.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096e4:	2b20      	cmp	r3, #32
 80096e6:	d060      	beq.n	80097aa <HAL_TIM_ConfigClockSource+0x15a>
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d867      	bhi.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d05c      	beq.n	80097aa <HAL_TIM_ConfigClockSource+0x15a>
 80096f0:	2b10      	cmp	r3, #16
 80096f2:	d05a      	beq.n	80097aa <HAL_TIM_ConfigClockSource+0x15a>
 80096f4:	e062      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009706:	f000 fc55 	bl	8009fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	609a      	str	r2, [r3, #8]
      break;
 8009722:	e04f      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009734:	f000 fc3e 	bl	8009fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009746:	609a      	str	r2, [r3, #8]
      break;
 8009748:	e03c      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009756:	461a      	mov	r2, r3
 8009758:	f000 fbb2 	bl	8009ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2150      	movs	r1, #80	@ 0x50
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fc0b 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 8009768:	e02c      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009776:	461a      	mov	r2, r3
 8009778:	f000 fbd1 	bl	8009f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2160      	movs	r1, #96	@ 0x60
 8009782:	4618      	mov	r0, r3
 8009784:	f000 fbfb 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 8009788:	e01c      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009796:	461a      	mov	r2, r3
 8009798:	f000 fb92 	bl	8009ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2140      	movs	r1, #64	@ 0x40
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fbeb 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 80097a8:	e00c      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f000 fbe2 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 80097ba:	e003      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	73fb      	strb	r3, [r7, #15]
      break;
 80097c0:	e000      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	fffeff88 	.word	0xfffeff88

080097e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a46      	ldr	r2, [pc, #280]	@ (80099d8 <TIM_Base_SetConfig+0x12c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d013      	beq.n	80098ec <TIM_Base_SetConfig+0x40>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ca:	d00f      	beq.n	80098ec <TIM_Base_SetConfig+0x40>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a43      	ldr	r2, [pc, #268]	@ (80099dc <TIM_Base_SetConfig+0x130>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00b      	beq.n	80098ec <TIM_Base_SetConfig+0x40>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a42      	ldr	r2, [pc, #264]	@ (80099e0 <TIM_Base_SetConfig+0x134>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d007      	beq.n	80098ec <TIM_Base_SetConfig+0x40>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a41      	ldr	r2, [pc, #260]	@ (80099e4 <TIM_Base_SetConfig+0x138>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d003      	beq.n	80098ec <TIM_Base_SetConfig+0x40>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a40      	ldr	r2, [pc, #256]	@ (80099e8 <TIM_Base_SetConfig+0x13c>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d108      	bne.n	80098fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a35      	ldr	r2, [pc, #212]	@ (80099d8 <TIM_Base_SetConfig+0x12c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d02b      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990c:	d027      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a32      	ldr	r2, [pc, #200]	@ (80099dc <TIM_Base_SetConfig+0x130>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d023      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a31      	ldr	r2, [pc, #196]	@ (80099e0 <TIM_Base_SetConfig+0x134>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d01f      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a30      	ldr	r2, [pc, #192]	@ (80099e4 <TIM_Base_SetConfig+0x138>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d01b      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a2f      	ldr	r2, [pc, #188]	@ (80099e8 <TIM_Base_SetConfig+0x13c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d017      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a2e      	ldr	r2, [pc, #184]	@ (80099ec <TIM_Base_SetConfig+0x140>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d013      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a2d      	ldr	r2, [pc, #180]	@ (80099f0 <TIM_Base_SetConfig+0x144>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d00f      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a2c      	ldr	r2, [pc, #176]	@ (80099f4 <TIM_Base_SetConfig+0x148>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00b      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a2b      	ldr	r2, [pc, #172]	@ (80099f8 <TIM_Base_SetConfig+0x14c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d007      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a2a      	ldr	r2, [pc, #168]	@ (80099fc <TIM_Base_SetConfig+0x150>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d003      	beq.n	800995e <TIM_Base_SetConfig+0xb2>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a29      	ldr	r2, [pc, #164]	@ (8009a00 <TIM_Base_SetConfig+0x154>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d108      	bne.n	8009970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	4313      	orrs	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a10      	ldr	r2, [pc, #64]	@ (80099d8 <TIM_Base_SetConfig+0x12c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d003      	beq.n	80099a4 <TIM_Base_SetConfig+0xf8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a12      	ldr	r2, [pc, #72]	@ (80099e8 <TIM_Base_SetConfig+0x13c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d103      	bne.n	80099ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	691a      	ldr	r2, [r3, #16]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d105      	bne.n	80099ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f023 0201 	bic.w	r2, r3, #1
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	611a      	str	r2, [r3, #16]
  }
}
 80099ca:	bf00      	nop
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	40010000 	.word	0x40010000
 80099dc:	40000400 	.word	0x40000400
 80099e0:	40000800 	.word	0x40000800
 80099e4:	40000c00 	.word	0x40000c00
 80099e8:	40010400 	.word	0x40010400
 80099ec:	40014000 	.word	0x40014000
 80099f0:	40014400 	.word	0x40014400
 80099f4:	40014800 	.word	0x40014800
 80099f8:	40001800 	.word	0x40001800
 80099fc:	40001c00 	.word	0x40001c00
 8009a00:	40002000 	.word	0x40002000

08009a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	f023 0201 	bic.w	r2, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8009adc <TIM_OC1_SetConfig+0xd8>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0303 	bic.w	r3, r3, #3
 8009a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f023 0302 	bic.w	r3, r3, #2
 8009a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a21      	ldr	r2, [pc, #132]	@ (8009ae0 <TIM_OC1_SetConfig+0xdc>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d003      	beq.n	8009a68 <TIM_OC1_SetConfig+0x64>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a20      	ldr	r2, [pc, #128]	@ (8009ae4 <TIM_OC1_SetConfig+0xe0>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d10c      	bne.n	8009a82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f023 0308 	bic.w	r3, r3, #8
 8009a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 0304 	bic.w	r3, r3, #4
 8009a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a16      	ldr	r2, [pc, #88]	@ (8009ae0 <TIM_OC1_SetConfig+0xdc>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d003      	beq.n	8009a92 <TIM_OC1_SetConfig+0x8e>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a15      	ldr	r2, [pc, #84]	@ (8009ae4 <TIM_OC1_SetConfig+0xe0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d111      	bne.n	8009ab6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	621a      	str	r2, [r3, #32]
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	fffeff8f 	.word	0xfffeff8f
 8009ae0:	40010000 	.word	0x40010000
 8009ae4:	40010400 	.word	0x40010400

08009ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	f023 0210 	bic.w	r2, r3, #16
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4b2e      	ldr	r3, [pc, #184]	@ (8009bcc <TIM_OC2_SetConfig+0xe4>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f023 0320 	bic.w	r3, r3, #32
 8009b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	011b      	lsls	r3, r3, #4
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a23      	ldr	r2, [pc, #140]	@ (8009bd0 <TIM_OC2_SetConfig+0xe8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d003      	beq.n	8009b50 <TIM_OC2_SetConfig+0x68>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a22      	ldr	r2, [pc, #136]	@ (8009bd4 <TIM_OC2_SetConfig+0xec>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d10d      	bne.n	8009b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a18      	ldr	r2, [pc, #96]	@ (8009bd0 <TIM_OC2_SetConfig+0xe8>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d003      	beq.n	8009b7c <TIM_OC2_SetConfig+0x94>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a17      	ldr	r2, [pc, #92]	@ (8009bd4 <TIM_OC2_SetConfig+0xec>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d113      	bne.n	8009ba4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	621a      	str	r2, [r3, #32]
}
 8009bbe:	bf00      	nop
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	feff8fff 	.word	0xfeff8fff
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	40010400 	.word	0x40010400

08009bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4b2d      	ldr	r3, [pc, #180]	@ (8009cb8 <TIM_OC3_SetConfig+0xe0>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a22      	ldr	r2, [pc, #136]	@ (8009cbc <TIM_OC3_SetConfig+0xe4>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d003      	beq.n	8009c3e <TIM_OC3_SetConfig+0x66>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a21      	ldr	r2, [pc, #132]	@ (8009cc0 <TIM_OC3_SetConfig+0xe8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d10d      	bne.n	8009c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a17      	ldr	r2, [pc, #92]	@ (8009cbc <TIM_OC3_SetConfig+0xe4>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_OC3_SetConfig+0x92>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a16      	ldr	r2, [pc, #88]	@ (8009cc0 <TIM_OC3_SetConfig+0xe8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d113      	bne.n	8009c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	621a      	str	r2, [r3, #32]
}
 8009cac:	bf00      	nop
 8009cae:	371c      	adds	r7, #28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	fffeff8f 	.word	0xfffeff8f
 8009cbc:	40010000 	.word	0x40010000
 8009cc0:	40010400 	.word	0x40010400

08009cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4b1e      	ldr	r3, [pc, #120]	@ (8009d68 <TIM_OC4_SetConfig+0xa4>)
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	021b      	lsls	r3, r3, #8
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	031b      	lsls	r3, r3, #12
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a13      	ldr	r2, [pc, #76]	@ (8009d6c <TIM_OC4_SetConfig+0xa8>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_OC4_SetConfig+0x68>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a12      	ldr	r2, [pc, #72]	@ (8009d70 <TIM_OC4_SetConfig+0xac>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d109      	bne.n	8009d40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	019b      	lsls	r3, r3, #6
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	621a      	str	r2, [r3, #32]
}
 8009d5a:	bf00      	nop
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	feff8fff 	.word	0xfeff8fff
 8009d6c:	40010000 	.word	0x40010000
 8009d70:	40010400 	.word	0x40010400

08009d74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a1b      	ldr	r3, [r3, #32]
 8009d88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8009e0c <TIM_OC5_SetConfig+0x98>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	041b      	lsls	r3, r3, #16
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a12      	ldr	r2, [pc, #72]	@ (8009e10 <TIM_OC5_SetConfig+0x9c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d003      	beq.n	8009dd2 <TIM_OC5_SetConfig+0x5e>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a11      	ldr	r2, [pc, #68]	@ (8009e14 <TIM_OC5_SetConfig+0xa0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d109      	bne.n	8009de6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	621a      	str	r2, [r3, #32]
}
 8009e00:	bf00      	nop
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	fffeff8f 	.word	0xfffeff8f
 8009e10:	40010000 	.word	0x40010000
 8009e14:	40010400 	.word	0x40010400

08009e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb4 <TIM_OC6_SetConfig+0x9c>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	051b      	lsls	r3, r3, #20
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a13      	ldr	r2, [pc, #76]	@ (8009eb8 <TIM_OC6_SetConfig+0xa0>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d003      	beq.n	8009e78 <TIM_OC6_SetConfig+0x60>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a12      	ldr	r2, [pc, #72]	@ (8009ebc <TIM_OC6_SetConfig+0xa4>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d109      	bne.n	8009e8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	029b      	lsls	r3, r3, #10
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	621a      	str	r2, [r3, #32]
}
 8009ea6:	bf00      	nop
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	feff8fff 	.word	0xfeff8fff
 8009eb8:	40010000 	.word	0x40010000
 8009ebc:	40010400 	.word	0x40010400

08009ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	f023 0201 	bic.w	r2, r3, #1
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	011b      	lsls	r3, r3, #4
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f023 030a 	bic.w	r3, r3, #10
 8009efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b087      	sub	sp, #28
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	60f8      	str	r0, [r7, #12]
 8009f26:	60b9      	str	r1, [r7, #8]
 8009f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	f023 0210 	bic.w	r2, r3, #16
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	031b      	lsls	r3, r3, #12
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b085      	sub	sp, #20
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	f043 0307 	orr.w	r3, r3, #7
 8009fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	609a      	str	r2, [r3, #8]
}
 8009fa8:	bf00      	nop
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	021a      	lsls	r2, r3, #8
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	609a      	str	r2, [r3, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	371c      	adds	r7, #28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f003 031f 	and.w	r3, r3, #31
 800a006:	2201      	movs	r2, #1
 800a008:	fa02 f303 	lsl.w	r3, r2, r3
 800a00c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a1a      	ldr	r2, [r3, #32]
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	43db      	mvns	r3, r3
 800a016:	401a      	ands	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a1a      	ldr	r2, [r3, #32]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f003 031f 	and.w	r3, r3, #31
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	fa01 f303 	lsl.w	r3, r1, r3
 800a02c:	431a      	orrs	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	621a      	str	r2, [r3, #32]
}
 800a032:	bf00      	nop
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
	...

0800a040 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a1e      	ldr	r2, [pc, #120]	@ (800a0c4 <TIM_ResetCallback+0x84>)
 800a04c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a1d      	ldr	r2, [pc, #116]	@ (800a0c8 <TIM_ResetCallback+0x88>)
 800a054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a1c      	ldr	r2, [pc, #112]	@ (800a0cc <TIM_ResetCallback+0x8c>)
 800a05c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a1b      	ldr	r2, [pc, #108]	@ (800a0d0 <TIM_ResetCallback+0x90>)
 800a064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0d4 <TIM_ResetCallback+0x94>)
 800a06c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a19      	ldr	r2, [pc, #100]	@ (800a0d8 <TIM_ResetCallback+0x98>)
 800a074:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a18      	ldr	r2, [pc, #96]	@ (800a0dc <TIM_ResetCallback+0x9c>)
 800a07c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a17      	ldr	r2, [pc, #92]	@ (800a0e0 <TIM_ResetCallback+0xa0>)
 800a084:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a16      	ldr	r2, [pc, #88]	@ (800a0e4 <TIM_ResetCallback+0xa4>)
 800a08c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a15      	ldr	r2, [pc, #84]	@ (800a0e8 <TIM_ResetCallback+0xa8>)
 800a094:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a14      	ldr	r2, [pc, #80]	@ (800a0ec <TIM_ResetCallback+0xac>)
 800a09c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a13      	ldr	r2, [pc, #76]	@ (800a0f0 <TIM_ResetCallback+0xb0>)
 800a0a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a12      	ldr	r2, [pc, #72]	@ (800a0f4 <TIM_ResetCallback+0xb4>)
 800a0ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a11      	ldr	r2, [pc, #68]	@ (800a0f8 <TIM_ResetCallback+0xb8>)
 800a0b4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	080097e5 	.word	0x080097e5
 800a0c8:	080097f9 	.word	0x080097f9
 800a0cc:	08009871 	.word	0x08009871
 800a0d0:	08009885 	.word	0x08009885
 800a0d4:	08009821 	.word	0x08009821
 800a0d8:	08009835 	.word	0x08009835
 800a0dc:	0800980d 	.word	0x0800980d
 800a0e0:	08009849 	.word	0x08009849
 800a0e4:	0800985d 	.word	0x0800985d
 800a0e8:	08009899 	.word	0x08009899
 800a0ec:	0800a219 	.word	0x0800a219
 800a0f0:	0800a22d 	.word	0x0800a22d
 800a0f4:	0800a241 	.word	0x0800a241
 800a0f8:	0800a255 	.word	0x0800a255

0800a0fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a110:	2302      	movs	r3, #2
 800a112:	e06d      	b.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a30      	ldr	r2, [pc, #192]	@ (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d004      	beq.n	800a148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a2f      	ldr	r2, [pc, #188]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d108      	bne.n	800a15a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a14e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4313      	orrs	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4313      	orrs	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a20      	ldr	r2, [pc, #128]	@ (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d022      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a186:	d01d      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a1d      	ldr	r2, [pc, #116]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d018      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a1c      	ldr	r2, [pc, #112]	@ (800a208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d013      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a20c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00e      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a15      	ldr	r2, [pc, #84]	@ (800a200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d009      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a16      	ldr	r2, [pc, #88]	@ (800a210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d004      	beq.n	800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a15      	ldr	r2, [pc, #84]	@ (800a214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d10c      	bne.n	800a1de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	40010000 	.word	0x40010000
 800a200:	40010400 	.word	0x40010400
 800a204:	40000400 	.word	0x40000400
 800a208:	40000800 	.word	0x40000800
 800a20c:	40000c00 	.word	0x40000c00
 800a210:	40014000 	.word	0x40014000
 800a214:	40001800 	.word	0x40001800

0800a218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e04e      	b.n	800a318 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d114      	bne.n	800a2ac <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f8a6 	bl	800a3dc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a296:	2b00      	cmp	r3, #0
 800a298:	d103      	bne.n	800a2a2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a20      	ldr	r2, [pc, #128]	@ (800a320 <HAL_UART_Init+0xb8>)
 800a29e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2224      	movs	r2, #36	@ 0x24
 800a2b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0201 	bic.w	r2, r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fb2a 	bl	800a924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f8c3 	bl	800a45c <UART_SetConfig>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d101      	bne.n	800a2e0 <HAL_UART_Init+0x78>
  {
    return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e01b      	b.n	800a318 <HAL_UART_Init+0xb0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689a      	ldr	r2, [r3, #8]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fba9 	bl	800aa68 <UART_CheckIdleState>
 800a316:	4603      	mov	r3, r0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	08001a59 	.word	0x08001a59

0800a324 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a14      	ldr	r2, [pc, #80]	@ (800a438 <UART_InitCallbacksToDefault+0x5c>)
 800a3e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a13      	ldr	r2, [pc, #76]	@ (800a43c <UART_InitCallbacksToDefault+0x60>)
 800a3f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a12      	ldr	r2, [pc, #72]	@ (800a440 <UART_InitCallbacksToDefault+0x64>)
 800a3f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a11      	ldr	r2, [pc, #68]	@ (800a444 <UART_InitCallbacksToDefault+0x68>)
 800a400:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a10      	ldr	r2, [pc, #64]	@ (800a448 <UART_InitCallbacksToDefault+0x6c>)
 800a408:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a0f      	ldr	r2, [pc, #60]	@ (800a44c <UART_InitCallbacksToDefault+0x70>)
 800a410:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a0e      	ldr	r2, [pc, #56]	@ (800a450 <UART_InitCallbacksToDefault+0x74>)
 800a418:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a0d      	ldr	r2, [pc, #52]	@ (800a454 <UART_InitCallbacksToDefault+0x78>)
 800a420:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a0c      	ldr	r2, [pc, #48]	@ (800a458 <UART_InitCallbacksToDefault+0x7c>)
 800a428:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	0800a339 	.word	0x0800a339
 800a43c:	0800a325 	.word	0x0800a325
 800a440:	0800a361 	.word	0x0800a361
 800a444:	0800a34d 	.word	0x0800a34d
 800a448:	0800a375 	.word	0x0800a375
 800a44c:	0800a389 	.word	0x0800a389
 800a450:	0800a39d 	.word	0x0800a39d
 800a454:	0800a3b1 	.word	0x0800a3b1
 800a458:	0800a3c5 	.word	0x0800a3c5

0800a45c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b088      	sub	sp, #32
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689a      	ldr	r2, [r3, #8]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	431a      	orrs	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	69db      	ldr	r3, [r3, #28]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	4ba6      	ldr	r3, [pc, #664]	@ (800a720 <UART_SetConfig+0x2c4>)
 800a488:	4013      	ands	r3, r2
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6812      	ldr	r2, [r2, #0]
 800a48e:	6979      	ldr	r1, [r7, #20]
 800a490:	430b      	orrs	r3, r1
 800a492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68da      	ldr	r2, [r3, #12]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a94      	ldr	r2, [pc, #592]	@ (800a724 <UART_SetConfig+0x2c8>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d120      	bne.n	800a51a <UART_SetConfig+0xbe>
 800a4d8:	4b93      	ldr	r3, [pc, #588]	@ (800a728 <UART_SetConfig+0x2cc>)
 800a4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4de:	f003 0303 	and.w	r3, r3, #3
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d816      	bhi.n	800a514 <UART_SetConfig+0xb8>
 800a4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <UART_SetConfig+0x90>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a4fd 	.word	0x0800a4fd
 800a4f0:	0800a509 	.word	0x0800a509
 800a4f4:	0800a503 	.word	0x0800a503
 800a4f8:	0800a50f 	.word	0x0800a50f
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	77fb      	strb	r3, [r7, #31]
 800a500:	e150      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a502:	2302      	movs	r3, #2
 800a504:	77fb      	strb	r3, [r7, #31]
 800a506:	e14d      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a508:	2304      	movs	r3, #4
 800a50a:	77fb      	strb	r3, [r7, #31]
 800a50c:	e14a      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a50e:	2308      	movs	r3, #8
 800a510:	77fb      	strb	r3, [r7, #31]
 800a512:	e147      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a514:	2310      	movs	r3, #16
 800a516:	77fb      	strb	r3, [r7, #31]
 800a518:	e144      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a83      	ldr	r2, [pc, #524]	@ (800a72c <UART_SetConfig+0x2d0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d132      	bne.n	800a58a <UART_SetConfig+0x12e>
 800a524:	4b80      	ldr	r3, [pc, #512]	@ (800a728 <UART_SetConfig+0x2cc>)
 800a526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52a:	f003 030c 	and.w	r3, r3, #12
 800a52e:	2b0c      	cmp	r3, #12
 800a530:	d828      	bhi.n	800a584 <UART_SetConfig+0x128>
 800a532:	a201      	add	r2, pc, #4	@ (adr r2, 800a538 <UART_SetConfig+0xdc>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a56d 	.word	0x0800a56d
 800a53c:	0800a585 	.word	0x0800a585
 800a540:	0800a585 	.word	0x0800a585
 800a544:	0800a585 	.word	0x0800a585
 800a548:	0800a579 	.word	0x0800a579
 800a54c:	0800a585 	.word	0x0800a585
 800a550:	0800a585 	.word	0x0800a585
 800a554:	0800a585 	.word	0x0800a585
 800a558:	0800a573 	.word	0x0800a573
 800a55c:	0800a585 	.word	0x0800a585
 800a560:	0800a585 	.word	0x0800a585
 800a564:	0800a585 	.word	0x0800a585
 800a568:	0800a57f 	.word	0x0800a57f
 800a56c:	2300      	movs	r3, #0
 800a56e:	77fb      	strb	r3, [r7, #31]
 800a570:	e118      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a572:	2302      	movs	r3, #2
 800a574:	77fb      	strb	r3, [r7, #31]
 800a576:	e115      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a578:	2304      	movs	r3, #4
 800a57a:	77fb      	strb	r3, [r7, #31]
 800a57c:	e112      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a57e:	2308      	movs	r3, #8
 800a580:	77fb      	strb	r3, [r7, #31]
 800a582:	e10f      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a584:	2310      	movs	r3, #16
 800a586:	77fb      	strb	r3, [r7, #31]
 800a588:	e10c      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a68      	ldr	r2, [pc, #416]	@ (800a730 <UART_SetConfig+0x2d4>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d120      	bne.n	800a5d6 <UART_SetConfig+0x17a>
 800a594:	4b64      	ldr	r3, [pc, #400]	@ (800a728 <UART_SetConfig+0x2cc>)
 800a596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a59a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a59e:	2b30      	cmp	r3, #48	@ 0x30
 800a5a0:	d013      	beq.n	800a5ca <UART_SetConfig+0x16e>
 800a5a2:	2b30      	cmp	r3, #48	@ 0x30
 800a5a4:	d814      	bhi.n	800a5d0 <UART_SetConfig+0x174>
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d009      	beq.n	800a5be <UART_SetConfig+0x162>
 800a5aa:	2b20      	cmp	r3, #32
 800a5ac:	d810      	bhi.n	800a5d0 <UART_SetConfig+0x174>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <UART_SetConfig+0x15c>
 800a5b2:	2b10      	cmp	r3, #16
 800a5b4:	d006      	beq.n	800a5c4 <UART_SetConfig+0x168>
 800a5b6:	e00b      	b.n	800a5d0 <UART_SetConfig+0x174>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e0f2      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a5be:	2302      	movs	r3, #2
 800a5c0:	77fb      	strb	r3, [r7, #31]
 800a5c2:	e0ef      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	77fb      	strb	r3, [r7, #31]
 800a5c8:	e0ec      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a5ca:	2308      	movs	r3, #8
 800a5cc:	77fb      	strb	r3, [r7, #31]
 800a5ce:	e0e9      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	77fb      	strb	r3, [r7, #31]
 800a5d4:	e0e6      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a56      	ldr	r2, [pc, #344]	@ (800a734 <UART_SetConfig+0x2d8>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d120      	bne.n	800a622 <UART_SetConfig+0x1c6>
 800a5e0:	4b51      	ldr	r3, [pc, #324]	@ (800a728 <UART_SetConfig+0x2cc>)
 800a5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a5ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5ec:	d013      	beq.n	800a616 <UART_SetConfig+0x1ba>
 800a5ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5f0:	d814      	bhi.n	800a61c <UART_SetConfig+0x1c0>
 800a5f2:	2b80      	cmp	r3, #128	@ 0x80
 800a5f4:	d009      	beq.n	800a60a <UART_SetConfig+0x1ae>
 800a5f6:	2b80      	cmp	r3, #128	@ 0x80
 800a5f8:	d810      	bhi.n	800a61c <UART_SetConfig+0x1c0>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <UART_SetConfig+0x1a8>
 800a5fe:	2b40      	cmp	r3, #64	@ 0x40
 800a600:	d006      	beq.n	800a610 <UART_SetConfig+0x1b4>
 800a602:	e00b      	b.n	800a61c <UART_SetConfig+0x1c0>
 800a604:	2300      	movs	r3, #0
 800a606:	77fb      	strb	r3, [r7, #31]
 800a608:	e0cc      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a60a:	2302      	movs	r3, #2
 800a60c:	77fb      	strb	r3, [r7, #31]
 800a60e:	e0c9      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a610:	2304      	movs	r3, #4
 800a612:	77fb      	strb	r3, [r7, #31]
 800a614:	e0c6      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a616:	2308      	movs	r3, #8
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e0c3      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a61c:	2310      	movs	r3, #16
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e0c0      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a44      	ldr	r2, [pc, #272]	@ (800a738 <UART_SetConfig+0x2dc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d125      	bne.n	800a678 <UART_SetConfig+0x21c>
 800a62c:	4b3e      	ldr	r3, [pc, #248]	@ (800a728 <UART_SetConfig+0x2cc>)
 800a62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a63a:	d017      	beq.n	800a66c <UART_SetConfig+0x210>
 800a63c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a640:	d817      	bhi.n	800a672 <UART_SetConfig+0x216>
 800a642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a646:	d00b      	beq.n	800a660 <UART_SetConfig+0x204>
 800a648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a64c:	d811      	bhi.n	800a672 <UART_SetConfig+0x216>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <UART_SetConfig+0x1fe>
 800a652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a656:	d006      	beq.n	800a666 <UART_SetConfig+0x20a>
 800a658:	e00b      	b.n	800a672 <UART_SetConfig+0x216>
 800a65a:	2300      	movs	r3, #0
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e0a1      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a660:	2302      	movs	r3, #2
 800a662:	77fb      	strb	r3, [r7, #31]
 800a664:	e09e      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a666:	2304      	movs	r3, #4
 800a668:	77fb      	strb	r3, [r7, #31]
 800a66a:	e09b      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a66c:	2308      	movs	r3, #8
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	e098      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a672:	2310      	movs	r3, #16
 800a674:	77fb      	strb	r3, [r7, #31]
 800a676:	e095      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a2f      	ldr	r2, [pc, #188]	@ (800a73c <UART_SetConfig+0x2e0>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d125      	bne.n	800a6ce <UART_SetConfig+0x272>
 800a682:	4b29      	ldr	r3, [pc, #164]	@ (800a728 <UART_SetConfig+0x2cc>)
 800a684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a68c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a690:	d017      	beq.n	800a6c2 <UART_SetConfig+0x266>
 800a692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a696:	d817      	bhi.n	800a6c8 <UART_SetConfig+0x26c>
 800a698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a69c:	d00b      	beq.n	800a6b6 <UART_SetConfig+0x25a>
 800a69e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6a2:	d811      	bhi.n	800a6c8 <UART_SetConfig+0x26c>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <UART_SetConfig+0x254>
 800a6a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ac:	d006      	beq.n	800a6bc <UART_SetConfig+0x260>
 800a6ae:	e00b      	b.n	800a6c8 <UART_SetConfig+0x26c>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	77fb      	strb	r3, [r7, #31]
 800a6b4:	e076      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	77fb      	strb	r3, [r7, #31]
 800a6ba:	e073      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a6bc:	2304      	movs	r3, #4
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	e070      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a6c2:	2308      	movs	r3, #8
 800a6c4:	77fb      	strb	r3, [r7, #31]
 800a6c6:	e06d      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a6c8:	2310      	movs	r3, #16
 800a6ca:	77fb      	strb	r3, [r7, #31]
 800a6cc:	e06a      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a1b      	ldr	r2, [pc, #108]	@ (800a740 <UART_SetConfig+0x2e4>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d138      	bne.n	800a74a <UART_SetConfig+0x2ee>
 800a6d8:	4b13      	ldr	r3, [pc, #76]	@ (800a728 <UART_SetConfig+0x2cc>)
 800a6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a6e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6e6:	d017      	beq.n	800a718 <UART_SetConfig+0x2bc>
 800a6e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6ec:	d82a      	bhi.n	800a744 <UART_SetConfig+0x2e8>
 800a6ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6f2:	d00b      	beq.n	800a70c <UART_SetConfig+0x2b0>
 800a6f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6f8:	d824      	bhi.n	800a744 <UART_SetConfig+0x2e8>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <UART_SetConfig+0x2aa>
 800a6fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a702:	d006      	beq.n	800a712 <UART_SetConfig+0x2b6>
 800a704:	e01e      	b.n	800a744 <UART_SetConfig+0x2e8>
 800a706:	2300      	movs	r3, #0
 800a708:	77fb      	strb	r3, [r7, #31]
 800a70a:	e04b      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a70c:	2302      	movs	r3, #2
 800a70e:	77fb      	strb	r3, [r7, #31]
 800a710:	e048      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a712:	2304      	movs	r3, #4
 800a714:	77fb      	strb	r3, [r7, #31]
 800a716:	e045      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a718:	2308      	movs	r3, #8
 800a71a:	77fb      	strb	r3, [r7, #31]
 800a71c:	e042      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a71e:	bf00      	nop
 800a720:	efff69f3 	.word	0xefff69f3
 800a724:	40011000 	.word	0x40011000
 800a728:	40023800 	.word	0x40023800
 800a72c:	40004400 	.word	0x40004400
 800a730:	40004800 	.word	0x40004800
 800a734:	40004c00 	.word	0x40004c00
 800a738:	40005000 	.word	0x40005000
 800a73c:	40011400 	.word	0x40011400
 800a740:	40007800 	.word	0x40007800
 800a744:	2310      	movs	r3, #16
 800a746:	77fb      	strb	r3, [r7, #31]
 800a748:	e02c      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a72      	ldr	r2, [pc, #456]	@ (800a918 <UART_SetConfig+0x4bc>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d125      	bne.n	800a7a0 <UART_SetConfig+0x344>
 800a754:	4b71      	ldr	r3, [pc, #452]	@ (800a91c <UART_SetConfig+0x4c0>)
 800a756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a75a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a75e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a762:	d017      	beq.n	800a794 <UART_SetConfig+0x338>
 800a764:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a768:	d817      	bhi.n	800a79a <UART_SetConfig+0x33e>
 800a76a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a76e:	d00b      	beq.n	800a788 <UART_SetConfig+0x32c>
 800a770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a774:	d811      	bhi.n	800a79a <UART_SetConfig+0x33e>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <UART_SetConfig+0x326>
 800a77a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a77e:	d006      	beq.n	800a78e <UART_SetConfig+0x332>
 800a780:	e00b      	b.n	800a79a <UART_SetConfig+0x33e>
 800a782:	2300      	movs	r3, #0
 800a784:	77fb      	strb	r3, [r7, #31]
 800a786:	e00d      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a788:	2302      	movs	r3, #2
 800a78a:	77fb      	strb	r3, [r7, #31]
 800a78c:	e00a      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a78e:	2304      	movs	r3, #4
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	e007      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a794:	2308      	movs	r3, #8
 800a796:	77fb      	strb	r3, [r7, #31]
 800a798:	e004      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a79a:	2310      	movs	r3, #16
 800a79c:	77fb      	strb	r3, [r7, #31]
 800a79e:	e001      	b.n	800a7a4 <UART_SetConfig+0x348>
 800a7a0:	2310      	movs	r3, #16
 800a7a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7ac:	d15b      	bne.n	800a866 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a7ae:	7ffb      	ldrb	r3, [r7, #31]
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d828      	bhi.n	800a806 <UART_SetConfig+0x3aa>
 800a7b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7bc <UART_SetConfig+0x360>)
 800a7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ba:	bf00      	nop
 800a7bc:	0800a7e1 	.word	0x0800a7e1
 800a7c0:	0800a7e9 	.word	0x0800a7e9
 800a7c4:	0800a7f1 	.word	0x0800a7f1
 800a7c8:	0800a807 	.word	0x0800a807
 800a7cc:	0800a7f7 	.word	0x0800a7f7
 800a7d0:	0800a807 	.word	0x0800a807
 800a7d4:	0800a807 	.word	0x0800a807
 800a7d8:	0800a807 	.word	0x0800a807
 800a7dc:	0800a7ff 	.word	0x0800a7ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7e0:	f7fd f88a 	bl	80078f8 <HAL_RCC_GetPCLK1Freq>
 800a7e4:	61b8      	str	r0, [r7, #24]
        break;
 800a7e6:	e013      	b.n	800a810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7e8:	f7fd f89a 	bl	8007920 <HAL_RCC_GetPCLK2Freq>
 800a7ec:	61b8      	str	r0, [r7, #24]
        break;
 800a7ee:	e00f      	b.n	800a810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7f0:	4b4b      	ldr	r3, [pc, #300]	@ (800a920 <UART_SetConfig+0x4c4>)
 800a7f2:	61bb      	str	r3, [r7, #24]
        break;
 800a7f4:	e00c      	b.n	800a810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7f6:	f7fc ffad 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800a7fa:	61b8      	str	r0, [r7, #24]
        break;
 800a7fc:	e008      	b.n	800a810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a802:	61bb      	str	r3, [r7, #24]
        break;
 800a804:	e004      	b.n	800a810 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	77bb      	strb	r3, [r7, #30]
        break;
 800a80e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d074      	beq.n	800a900 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	005a      	lsls	r2, r3, #1
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	085b      	lsrs	r3, r3, #1
 800a820:	441a      	add	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	fbb2 f3f3 	udiv	r3, r2, r3
 800a82a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b0f      	cmp	r3, #15
 800a830:	d916      	bls.n	800a860 <UART_SetConfig+0x404>
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a838:	d212      	bcs.n	800a860 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	f023 030f 	bic.w	r3, r3, #15
 800a842:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	085b      	lsrs	r3, r3, #1
 800a848:	b29b      	uxth	r3, r3
 800a84a:	f003 0307 	and.w	r3, r3, #7
 800a84e:	b29a      	uxth	r2, r3
 800a850:	89fb      	ldrh	r3, [r7, #14]
 800a852:	4313      	orrs	r3, r2
 800a854:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	89fa      	ldrh	r2, [r7, #14]
 800a85c:	60da      	str	r2, [r3, #12]
 800a85e:	e04f      	b.n	800a900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	77bb      	strb	r3, [r7, #30]
 800a864:	e04c      	b.n	800a900 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a866:	7ffb      	ldrb	r3, [r7, #31]
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d828      	bhi.n	800a8be <UART_SetConfig+0x462>
 800a86c:	a201      	add	r2, pc, #4	@ (adr r2, 800a874 <UART_SetConfig+0x418>)
 800a86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a872:	bf00      	nop
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8a1 	.word	0x0800a8a1
 800a87c:	0800a8a9 	.word	0x0800a8a9
 800a880:	0800a8bf 	.word	0x0800a8bf
 800a884:	0800a8af 	.word	0x0800a8af
 800a888:	0800a8bf 	.word	0x0800a8bf
 800a88c:	0800a8bf 	.word	0x0800a8bf
 800a890:	0800a8bf 	.word	0x0800a8bf
 800a894:	0800a8b7 	.word	0x0800a8b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a898:	f7fd f82e 	bl	80078f8 <HAL_RCC_GetPCLK1Freq>
 800a89c:	61b8      	str	r0, [r7, #24]
        break;
 800a89e:	e013      	b.n	800a8c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8a0:	f7fd f83e 	bl	8007920 <HAL_RCC_GetPCLK2Freq>
 800a8a4:	61b8      	str	r0, [r7, #24]
        break;
 800a8a6:	e00f      	b.n	800a8c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8a8:	4b1d      	ldr	r3, [pc, #116]	@ (800a920 <UART_SetConfig+0x4c4>)
 800a8aa:	61bb      	str	r3, [r7, #24]
        break;
 800a8ac:	e00c      	b.n	800a8c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8ae:	f7fc ff51 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800a8b2:	61b8      	str	r0, [r7, #24]
        break;
 800a8b4:	e008      	b.n	800a8c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8ba:	61bb      	str	r3, [r7, #24]
        break;
 800a8bc:	e004      	b.n	800a8c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	77bb      	strb	r3, [r7, #30]
        break;
 800a8c6:	bf00      	nop
    }

    if (pclk != 0U)
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d018      	beq.n	800a900 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	085a      	lsrs	r2, r3, #1
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	441a      	add	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2b0f      	cmp	r3, #15
 800a8e6:	d909      	bls.n	800a8fc <UART_SetConfig+0x4a0>
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ee:	d205      	bcs.n	800a8fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	60da      	str	r2, [r3, #12]
 800a8fa:	e001      	b.n	800a900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a90c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40007c00 	.word	0x40007c00
 800a91c:	40023800 	.word	0x40023800
 800a920:	00f42400 	.word	0x00f42400

0800a924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a930:	f003 0308 	and.w	r3, r3, #8
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00a      	beq.n	800a94e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	430a      	orrs	r2, r1
 800a94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	430a      	orrs	r2, r1
 800a96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00a      	beq.n	800a992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a996:	f003 0304 	and.w	r3, r3, #4
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00a      	beq.n	800a9b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b8:	f003 0310 	and.w	r3, r3, #16
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00a      	beq.n	800a9d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00a      	beq.n	800a9f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	430a      	orrs	r2, r1
 800a9f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d01a      	beq.n	800aa3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	430a      	orrs	r2, r1
 800aa18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa22:	d10a      	bne.n	800aa3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	605a      	str	r2, [r3, #4]
  }
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	@ 0x30
 800aa6c:	af02      	add	r7, sp, #8
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa78:	f7fa f82a 	bl	8004ad0 <HAL_GetTick>
 800aa7c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0308 	and.w	r3, r3, #8
 800aa88:	2b08      	cmp	r3, #8
 800aa8a:	d12e      	bne.n	800aaea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	2200      	movs	r2, #0
 800aa96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f83b 	bl	800ab16 <UART_WaitOnFlagUntilTimeout>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d021      	beq.n	800aaea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	e853 3f00 	ldrex	r3, [r3]
 800aab2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaba:	623b      	str	r3, [r7, #32]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	61fb      	str	r3, [r7, #28]
 800aac6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac8:	69b9      	ldr	r1, [r7, #24]
 800aaca:	69fa      	ldr	r2, [r7, #28]
 800aacc:	e841 2300 	strex	r3, r2, [r1]
 800aad0:	617b      	str	r3, [r7, #20]
   return(result);
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e6      	bne.n	800aaa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2220      	movs	r2, #32
 800aadc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e011      	b.n	800ab0e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2220      	movs	r2, #32
 800aaee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2220      	movs	r2, #32
 800aaf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3728      	adds	r7, #40	@ 0x28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	603b      	str	r3, [r7, #0]
 800ab22:	4613      	mov	r3, r2
 800ab24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab26:	e04f      	b.n	800abc8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2e:	d04b      	beq.n	800abc8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab30:	f7f9 ffce 	bl	8004ad0 <HAL_GetTick>
 800ab34:	4602      	mov	r2, r0
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d302      	bcc.n	800ab46 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e04e      	b.n	800abe8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0304 	and.w	r3, r3, #4
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d037      	beq.n	800abc8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2b80      	cmp	r3, #128	@ 0x80
 800ab5c:	d034      	beq.n	800abc8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b40      	cmp	r3, #64	@ 0x40
 800ab62:	d031      	beq.n	800abc8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	f003 0308 	and.w	r3, r3, #8
 800ab6e:	2b08      	cmp	r3, #8
 800ab70:	d110      	bne.n	800ab94 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2208      	movs	r2, #8
 800ab78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 f838 	bl	800abf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2208      	movs	r2, #8
 800ab84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e029      	b.n	800abe8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aba2:	d111      	bne.n	800abc8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 f81e 	bl	800abf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e00f      	b.n	800abe8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	69da      	ldr	r2, [r3, #28]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4013      	ands	r3, r2
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	bf0c      	ite	eq
 800abd8:	2301      	moveq	r3, #1
 800abda:	2300      	movne	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	461a      	mov	r2, r3
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d0a0      	beq.n	800ab28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b095      	sub	sp, #84	@ 0x54
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e6      	bne.n	800abf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac52:	e841 2300 	strex	r3, r2, [r1]
 800ac56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1e5      	bne.n	800ac2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d118      	bne.n	800ac98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f023 0310 	bic.w	r3, r3, #16
 800ac7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac84:	61bb      	str	r3, [r7, #24]
 800ac86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	6979      	ldr	r1, [r7, #20]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	e841 2300 	strex	r3, r2, [r1]
 800ac90:	613b      	str	r3, [r7, #16]
   return(result);
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e6      	bne.n	800ac66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800acac:	bf00      	nop
 800acae:	3754      	adds	r7, #84	@ 0x54
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d121      	bne.n	800ad0e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	4b27      	ldr	r3, [pc, #156]	@ (800ad6c <FMC_SDRAM_Init+0xb4>)
 800acd0:	4013      	ands	r3, r2
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	6851      	ldr	r1, [r2, #4]
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	6892      	ldr	r2, [r2, #8]
 800acda:	4311      	orrs	r1, r2
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	68d2      	ldr	r2, [r2, #12]
 800ace0:	4311      	orrs	r1, r2
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	6912      	ldr	r2, [r2, #16]
 800ace6:	4311      	orrs	r1, r2
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	6952      	ldr	r2, [r2, #20]
 800acec:	4311      	orrs	r1, r2
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	6992      	ldr	r2, [r2, #24]
 800acf2:	4311      	orrs	r1, r2
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	69d2      	ldr	r2, [r2, #28]
 800acf8:	4311      	orrs	r1, r2
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	6a12      	ldr	r2, [r2, #32]
 800acfe:	4311      	orrs	r1, r2
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ad04:	430a      	orrs	r2, r1
 800ad06:	431a      	orrs	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	e026      	b.n	800ad5c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	69d9      	ldr	r1, [r3, #28]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	4319      	orrs	r1, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad24:	430b      	orrs	r3, r1
 800ad26:	431a      	orrs	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	4b0e      	ldr	r3, [pc, #56]	@ (800ad6c <FMC_SDRAM_Init+0xb4>)
 800ad32:	4013      	ands	r3, r2
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	6851      	ldr	r1, [r2, #4]
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	6892      	ldr	r2, [r2, #8]
 800ad3c:	4311      	orrs	r1, r2
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	68d2      	ldr	r2, [r2, #12]
 800ad42:	4311      	orrs	r1, r2
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	6912      	ldr	r2, [r2, #16]
 800ad48:	4311      	orrs	r1, r2
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	6952      	ldr	r2, [r2, #20]
 800ad4e:	4311      	orrs	r1, r2
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	6992      	ldr	r2, [r2, #24]
 800ad54:	430a      	orrs	r2, r1
 800ad56:	431a      	orrs	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	ffff8000 	.word	0xffff8000

0800ad70 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d128      	bne.n	800add4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	1e59      	subs	r1, r3, #1
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	011b      	lsls	r3, r3, #4
 800ad98:	4319      	orrs	r1, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	4319      	orrs	r1, r3
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	031b      	lsls	r3, r3, #12
 800adac:	4319      	orrs	r1, r3
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	041b      	lsls	r3, r3, #16
 800adb6:	4319      	orrs	r1, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	051b      	lsls	r3, r3, #20
 800adc0:	4319      	orrs	r1, r3
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	061b      	lsls	r3, r3, #24
 800adca:	430b      	orrs	r3, r1
 800adcc:	431a      	orrs	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	609a      	str	r2, [r3, #8]
 800add2:	e02d      	b.n	800ae30 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	4b19      	ldr	r3, [pc, #100]	@ (800ae40 <FMC_SDRAM_Timing_Init+0xd0>)
 800adda:	4013      	ands	r3, r2
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	68d2      	ldr	r2, [r2, #12]
 800ade0:	3a01      	subs	r2, #1
 800ade2:	0311      	lsls	r1, r2, #12
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	6952      	ldr	r2, [r2, #20]
 800ade8:	3a01      	subs	r2, #1
 800adea:	0512      	lsls	r2, r2, #20
 800adec:	430a      	orrs	r2, r1
 800adee:	431a      	orrs	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	1e59      	subs	r1, r3, #1
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	4319      	orrs	r1, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	021b      	lsls	r3, r3, #8
 800ae14:	4319      	orrs	r1, r3
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	041b      	lsls	r3, r3, #16
 800ae1e:	4319      	orrs	r1, r3
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	061b      	lsls	r3, r3, #24
 800ae28:	430b      	orrs	r3, r1
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	ff0f0fff 	.word	0xff0f0fff

0800ae44 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	691a      	ldr	r2, [r3, #16]
 800ae54:	4b0c      	ldr	r3, [pc, #48]	@ (800ae88 <FMC_SDRAM_SendCommand+0x44>)
 800ae56:	4013      	ands	r3, r2
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	6811      	ldr	r1, [r2, #0]
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	6852      	ldr	r2, [r2, #4]
 800ae60:	4311      	orrs	r1, r2
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	6892      	ldr	r2, [r2, #8]
 800ae66:	3a01      	subs	r2, #1
 800ae68:	0152      	lsls	r2, r2, #5
 800ae6a:	4311      	orrs	r1, r2
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	68d2      	ldr	r2, [r2, #12]
 800ae70:	0252      	lsls	r2, r2, #9
 800ae72:	430a      	orrs	r2, r1
 800ae74:	431a      	orrs	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	ffc00000 	.word	0xffc00000

0800ae8c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695a      	ldr	r2, [r3, #20]
 800ae9a:	4b07      	ldr	r3, [pc, #28]	@ (800aeb8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	0052      	lsls	r2, r2, #1
 800aea2:	431a      	orrs	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	ffffc001 	.word	0xffffc001

0800aebc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800aec0:	f004 fbe6 	bl	800f690 <touchgfx_components_init>
    touchgfx_init();
 800aec4:	f004 fbba 	bl	800f63c <touchgfx_init>
}
 800aec8:	bf00      	nop
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800aed0:	f004 fbe6 	bl	800f6a0 <touchgfx_taskEntry>
}
 800aed4:	bf00      	nop
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
    {
 800aee0:	4a04      	ldr	r2, [pc, #16]	@ (800aef4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	601a      	str	r2, [r3, #0]
    }
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	080250fc 	.word	0x080250fc

0800aef8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
    }
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff ffe9 	bl	800aed8 <_ZN8touchgfx12FontProviderD1Ev>
 800af06:	2104      	movs	r1, #4
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f018 fc4e 	bl	80237aa <_ZdlPvj>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800af24:	887b      	ldrh	r3, [r7, #2]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d010      	beq.n	800af4c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	dc13      	bgt.n	800af56 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800af32:	2b01      	cmp	r3, #1
 800af34:	d005      	beq.n	800af42 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800af36:	e00e      	b.n	800af56 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800af38:	f002 fe14 	bl	800db64 <_ZN17TypedTextDatabase8getFontsEv>
 800af3c:	4603      	mov	r3, r0
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	e00a      	b.n	800af58 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800af42:	f002 fe0f 	bl	800db64 <_ZN17TypedTextDatabase8getFontsEv>
 800af46:	4603      	mov	r3, r0
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	e005      	b.n	800af58 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800af4c:	f002 fe0a 	bl	800db64 <_ZN17TypedTextDatabase8getFontsEv>
 800af50:	4603      	mov	r3, r0
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	e000      	b.n	800af58 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800af56:	2300      	movs	r3, #0
    }
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	4a05      	ldr	r2, [pc, #20]	@ (800af80 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff ffb1 	bl	800aed8 <_ZN8touchgfx12FontProviderD1Ev>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	080250e8 	.word	0x080250e8

0800af84 <_ZN23ApplicationFontProviderD0Ev>:
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff ffe7 	bl	800af60 <_ZN23ApplicationFontProviderD1Ev>
 800af92:	2104      	movs	r1, #4
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f018 fc08 	bl	80237aa <_ZdlPvj>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
    {
 800afac:	4a04      	ldr	r2, [pc, #16]	@ (800afc0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	601a      	str	r2, [r3, #0]
    }
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	0802567c 	.word	0x0802567c

0800afc4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
    }
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff ffe9 	bl	800afa4 <_ZN8touchgfx4FontD1Ev>
 800afd2:	2114      	movs	r1, #20
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f018 fbe8 	bl	80237aa <_ZdlPvj>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800afe4:	b590      	push	{r4, r7, lr}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800aff0:	887b      	ldrh	r3, [r7, #2]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	e010      	b.n	800b01c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3308      	adds	r3, #8
 800b008:	681c      	ldr	r4, [r3, #0]
 800b00a:	f107 030f 	add.w	r3, r7, #15
 800b00e:	f107 0210 	add.w	r2, r7, #16
 800b012:	8879      	ldrh	r1, [r7, #2]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	47a0      	blx	r4
 800b018:	6178      	str	r0, [r7, #20]
        return glyph;
 800b01a:	697b      	ldr	r3, [r7, #20]
    }
 800b01c:	4618      	mov	r0, r3
 800b01e:	371c      	adds	r7, #28
 800b020:	46bd      	mov	sp, r7
 800b022:	bd90      	pop	{r4, r7, pc}

0800b024 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	89db      	ldrh	r3, [r3, #14]
    }
 800b030:	4618      	mov	r0, r3
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	8a1b      	ldrh	r3, [r3, #16]
    }
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	88db      	ldrh	r3, [r3, #6]
    }
 800b060:	4618      	mov	r0, r3
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	889b      	ldrh	r3, [r3, #4]
    }
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	7a9b      	ldrb	r3, [r3, #10]
 800b090:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800b094:	b2db      	uxtb	r3, r3
    }
 800b096:	4618      	mov	r0, r3
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800b0a2:	b480      	push	{r7}
 800b0a4:	b083      	sub	sp, #12
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	7a9b      	ldrb	r3, [r3, #10]
 800b0ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b0b2:	b2db      	uxtb	r3, r3
    }
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
    {
        return false;
 800b0c8:	2300      	movs	r3, #0
    }
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800b0d6:	b480      	push	{r7}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b0de:	f04f 0300 	mov.w	r3, #0
 800b0e2:	ee07 3a90 	vmov	s15, r3
    }
 800b0e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	4a05      	ldr	r2, [pc, #20]	@ (800b114 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff ff4d 	bl	800afa4 <_ZN8touchgfx4FontD1Ev>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	08025fdc 	.word	0x08025fdc

0800b118 <_ZN8touchgfx9ConstFontD0Ev>:
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff ffe7 	bl	800b0f4 <_ZN8touchgfx9ConstFontD1Ev>
 800b126:	211c      	movs	r1, #28
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f018 fb3e 	bl	80237aa <_ZdlPvj>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4618      	mov	r0, r3
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	4a05      	ldr	r2, [pc, #20]	@ (800b158 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff ffd3 	bl	800b0f4 <_ZN8touchgfx9ConstFontD1Ev>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4618      	mov	r0, r3
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	08025110 	.word	0x08025110

0800b15c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff ffe7 	bl	800b138 <_ZN8touchgfx13GeneratedFontD1Ev>
 800b16a:	212c      	movs	r1, #44	@ 0x2c
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f018 fb1c 	bl	80237aa <_ZdlPvj>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08e      	sub	sp, #56	@ 0x38
 800b1b0:	af0a      	add	r7, sp, #40	@ 0x28
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	80fb      	strh	r3, [r7, #6]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	88b9      	ldrh	r1, [r7, #4]
 800b1c6:	88fa      	ldrh	r2, [r7, #6]
 800b1c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b1cc:	9308      	str	r3, [sp, #32]
 800b1ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b1d0:	9307      	str	r3, [sp, #28]
 800b1d2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800b1d6:	9306      	str	r3, [sp, #24]
 800b1d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b1e8:	9303      	str	r3, [sp, #12]
 800b1ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1ee:	9302      	str	r3, [sp, #8]
 800b1f0:	7f3b      	ldrb	r3, [r7, #28]
 800b1f2:	9301      	str	r3, [sp, #4]
 800b1f4:	8b3b      	ldrh	r3, [r7, #24]
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	68b9      	ldr	r1, [r7, #8]
 800b1fc:	f008 fc6e 	bl	8013adc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800b200:	4a09      	ldr	r2, [pc, #36]	@ (800b228 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b20a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b210:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b216:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b21c:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	08025110 	.word	0x08025110

0800b22c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	889b      	ldrh	r3, [r3, #4]
 800b240:	0adb      	lsrs	r3, r3, #11
 800b242:	b29b      	uxth	r3, r3
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	4413      	add	r3, r2
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4413      	add	r3, r2
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800b25e:	b480      	push	{r7}
 800b260:	b089      	sub	sp, #36	@ 0x24
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	460b      	mov	r3, r1
 800b268:	607a      	str	r2, [r7, #4]
 800b26a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	7b1b      	ldrb	r3, [r3, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e031      	b.n	800b2e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a1a      	ldr	r2, [r3, #32]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	7b5b      	ldrb	r3, [r3, #13]
 800b28a:	021b      	lsls	r3, r3, #8
 800b28c:	b21b      	sxth	r3, r3
 800b28e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b292:	b219      	sxth	r1, r3
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	7adb      	ldrb	r3, [r3, #11]
 800b298:	b21b      	sxth	r3, r3
 800b29a:	430b      	orrs	r3, r1
 800b29c:	b21b      	sxth	r3, r3
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	7b1b      	ldrb	r3, [r3, #12]
 800b2aa:	837b      	strh	r3, [r7, #26]
 800b2ac:	e013      	b.n	800b2d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	897a      	ldrh	r2, [r7, #10]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d103      	bne.n	800b2c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b2be:	e010      	b.n	800b2e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	897a      	ldrh	r2, [r7, #10]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d309      	bcc.n	800b2de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800b2ca:	8b7b      	ldrh	r3, [r7, #26]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	837b      	strh	r3, [r7, #26]
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	8b7b      	ldrh	r3, [r7, #26]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e8      	bne.n	800b2ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800b2dc:	e000      	b.n	800b2e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800b2de:	bf00      	nop
        }
    }
    return 0;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3724      	adds	r7, #36	@ 0x24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	4801      	ldr	r0, [pc, #4]	@ (800b2fc <__tcf_0+0xc>)
 800b2f6:	f7ff ff1f 	bl	800b138 <_ZN8touchgfx13GeneratedFontD1Ev>
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20000a5c 	.word	0x20000a5c

0800b300 <_Z23getFont_verdana_10_4bppv>:
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08e      	sub	sp, #56	@ 0x38
 800b304:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800b306:	4b21      	ldr	r3, [pc, #132]	@ (800b38c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f3bf 8f5b 	dmb	ish
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	2b00      	cmp	r3, #0
 800b314:	bf0c      	ite	eq
 800b316:	2301      	moveq	r3, #1
 800b318:	2300      	movne	r3, #0
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d030      	beq.n	800b382 <_Z23getFont_verdana_10_4bppv+0x82>
 800b320:	481a      	ldr	r0, [pc, #104]	@ (800b38c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800b322:	f018 fa44 	bl	80237ae <__cxa_guard_acquire>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bf14      	ite	ne
 800b32c:	2301      	movne	r3, #1
 800b32e:	2300      	moveq	r3, #0
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d025      	beq.n	800b382 <_Z23getFont_verdana_10_4bppv+0x82>
 800b336:	2300      	movs	r3, #0
 800b338:	930c      	str	r3, [sp, #48]	@ 0x30
 800b33a:	2300      	movs	r3, #0
 800b33c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b33e:	2300      	movs	r3, #0
 800b340:	930a      	str	r3, [sp, #40]	@ 0x28
 800b342:	233f      	movs	r3, #63	@ 0x3f
 800b344:	9309      	str	r3, [sp, #36]	@ 0x24
 800b346:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <_Z23getFont_verdana_10_4bppv+0x90>)
 800b348:	9308      	str	r3, [sp, #32]
 800b34a:	4b12      	ldr	r3, [pc, #72]	@ (800b394 <_Z23getFont_verdana_10_4bppv+0x94>)
 800b34c:	9307      	str	r3, [sp, #28]
 800b34e:	2300      	movs	r3, #0
 800b350:	9306      	str	r3, [sp, #24]
 800b352:	2300      	movs	r3, #0
 800b354:	9305      	str	r3, [sp, #20]
 800b356:	2301      	movs	r3, #1
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	2304      	movs	r3, #4
 800b35c:	9303      	str	r3, [sp, #12]
 800b35e:	2300      	movs	r3, #0
 800b360:	9302      	str	r3, [sp, #8]
 800b362:	2300      	movs	r3, #0
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	230a      	movs	r3, #10
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	230a      	movs	r3, #10
 800b36c:	2201      	movs	r2, #1
 800b36e:	490a      	ldr	r1, [pc, #40]	@ (800b398 <_Z23getFont_verdana_10_4bppv+0x98>)
 800b370:	480a      	ldr	r0, [pc, #40]	@ (800b39c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800b372:	f7ff ff1b 	bl	800b1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800b376:	480a      	ldr	r0, [pc, #40]	@ (800b3a0 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800b378:	f018 fa64 	bl	8023844 <atexit>
 800b37c:	4803      	ldr	r0, [pc, #12]	@ (800b38c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800b37e:	f018 fa22 	bl	80237c6 <__cxa_guard_release>
    return verdana_10_4bpp;
 800b382:	4b06      	ldr	r3, [pc, #24]	@ (800b39c <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800b384:	4618      	mov	r0, r3
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000a88 	.word	0x20000a88
 800b390:	080265bc 	.word	0x080265bc
 800b394:	080265c8 	.word	0x080265c8
 800b398:	0802658c 	.word	0x0802658c
 800b39c:	20000a5c 	.word	0x20000a5c
 800b3a0:	0800b2f1 	.word	0x0800b2f1

0800b3a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	4801      	ldr	r0, [pc, #4]	@ (800b3b0 <__tcf_0+0xc>)
 800b3aa:	f7ff fec5 	bl	800b138 <_ZN8touchgfx13GeneratedFontD1Ev>
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	20000a8c 	.word	0x20000a8c

0800b3b4 <_Z23getFont_verdana_20_4bppv>:
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08e      	sub	sp, #56	@ 0x38
 800b3b8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800b3ba:	4b21      	ldr	r3, [pc, #132]	@ (800b440 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f3bf 8f5b 	dmb	ish
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bf0c      	ite	eq
 800b3ca:	2301      	moveq	r3, #1
 800b3cc:	2300      	movne	r3, #0
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d030      	beq.n	800b436 <_Z23getFont_verdana_20_4bppv+0x82>
 800b3d4:	481a      	ldr	r0, [pc, #104]	@ (800b440 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800b3d6:	f018 f9ea 	bl	80237ae <__cxa_guard_acquire>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bf14      	ite	ne
 800b3e0:	2301      	movne	r3, #1
 800b3e2:	2300      	moveq	r3, #0
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d025      	beq.n	800b436 <_Z23getFont_verdana_20_4bppv+0x82>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3f6:	233f      	movs	r3, #63	@ 0x3f
 800b3f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3fa:	4b12      	ldr	r3, [pc, #72]	@ (800b444 <_Z23getFont_verdana_20_4bppv+0x90>)
 800b3fc:	9308      	str	r3, [sp, #32]
 800b3fe:	4b12      	ldr	r3, [pc, #72]	@ (800b448 <_Z23getFont_verdana_20_4bppv+0x94>)
 800b400:	9307      	str	r3, [sp, #28]
 800b402:	2300      	movs	r3, #0
 800b404:	9306      	str	r3, [sp, #24]
 800b406:	2300      	movs	r3, #0
 800b408:	9305      	str	r3, [sp, #20]
 800b40a:	2301      	movs	r3, #1
 800b40c:	9304      	str	r3, [sp, #16]
 800b40e:	2304      	movs	r3, #4
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	2300      	movs	r3, #0
 800b414:	9302      	str	r3, [sp, #8]
 800b416:	2300      	movs	r3, #0
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	2314      	movs	r3, #20
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	2314      	movs	r3, #20
 800b420:	2201      	movs	r2, #1
 800b422:	490a      	ldr	r1, [pc, #40]	@ (800b44c <_Z23getFont_verdana_20_4bppv+0x98>)
 800b424:	480a      	ldr	r0, [pc, #40]	@ (800b450 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800b426:	f7ff fec1 	bl	800b1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800b42a:	480a      	ldr	r0, [pc, #40]	@ (800b454 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800b42c:	f018 fa0a 	bl	8023844 <atexit>
 800b430:	4803      	ldr	r0, [pc, #12]	@ (800b440 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800b432:	f018 f9c8 	bl	80237c6 <__cxa_guard_release>
    return verdana_20_4bpp;
 800b436:	4b06      	ldr	r3, [pc, #24]	@ (800b450 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800b438:	4618      	mov	r0, r3
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20000ab8 	.word	0x20000ab8
 800b444:	080265c0 	.word	0x080265c0
 800b448:	080265cc 	.word	0x080265cc
 800b44c:	0802659c 	.word	0x0802659c
 800b450:	20000a8c 	.word	0x20000a8c
 800b454:	0800b3a5 	.word	0x0800b3a5

0800b458 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	4801      	ldr	r0, [pc, #4]	@ (800b464 <__tcf_0+0xc>)
 800b45e:	f7ff fe6b 	bl	800b138 <_ZN8touchgfx13GeneratedFontD1Ev>
 800b462:	bd80      	pop	{r7, pc}
 800b464:	20000abc 	.word	0x20000abc

0800b468 <_Z23getFont_verdana_40_4bppv>:
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	@ 0x38
 800b46c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800b46e:	4b21      	ldr	r3, [pc, #132]	@ (800b4f4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f3bf 8f5b 	dmb	ish
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	bf0c      	ite	eq
 800b47e:	2301      	moveq	r3, #1
 800b480:	2300      	movne	r3, #0
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	d030      	beq.n	800b4ea <_Z23getFont_verdana_40_4bppv+0x82>
 800b488:	481a      	ldr	r0, [pc, #104]	@ (800b4f4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800b48a:	f018 f990 	bl	80237ae <__cxa_guard_acquire>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	bf14      	ite	ne
 800b494:	2301      	movne	r3, #1
 800b496:	2300      	moveq	r3, #0
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d025      	beq.n	800b4ea <_Z23getFont_verdana_40_4bppv+0x82>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4aa:	233f      	movs	r3, #63	@ 0x3f
 800b4ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ae:	4b12      	ldr	r3, [pc, #72]	@ (800b4f8 <_Z23getFont_verdana_40_4bppv+0x90>)
 800b4b0:	9308      	str	r3, [sp, #32]
 800b4b2:	4b12      	ldr	r3, [pc, #72]	@ (800b4fc <_Z23getFont_verdana_40_4bppv+0x94>)
 800b4b4:	9307      	str	r3, [sp, #28]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9306      	str	r3, [sp, #24]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9305      	str	r3, [sp, #20]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	2304      	movs	r3, #4
 800b4c4:	9303      	str	r3, [sp, #12]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	9302      	str	r3, [sp, #8]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	2328      	movs	r3, #40	@ 0x28
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	2328      	movs	r3, #40	@ 0x28
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	490a      	ldr	r1, [pc, #40]	@ (800b500 <_Z23getFont_verdana_40_4bppv+0x98>)
 800b4d8:	480a      	ldr	r0, [pc, #40]	@ (800b504 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800b4da:	f7ff fe67 	bl	800b1ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800b4de:	480a      	ldr	r0, [pc, #40]	@ (800b508 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800b4e0:	f018 f9b0 	bl	8023844 <atexit>
 800b4e4:	4803      	ldr	r0, [pc, #12]	@ (800b4f4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800b4e6:	f018 f96e 	bl	80237c6 <__cxa_guard_release>
    return verdana_40_4bpp;
 800b4ea:	4b06      	ldr	r3, [pc, #24]	@ (800b504 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000ae8 	.word	0x20000ae8
 800b4f8:	080265c4 	.word	0x080265c4
 800b4fc:	080265d0 	.word	0x080265d0
 800b500:	080265ac 	.word	0x080265ac
 800b504:	20000abc 	.word	0x20000abc
 800b508:	0800b459 	.word	0x0800b459

0800b50c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800b52e:	bf00      	nop
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800b572:	bf00      	nop
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
    {
    }
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
    {
    }
 800b59a:	bf00      	nop
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
    {
 800b5b0:	4a04      	ldr	r2, [pc, #16]	@ (800b5c4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	601a      	str	r2, [r3, #0]
    }
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	08025298 	.word	0x08025298

0800b5c8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
    }
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7ff ffe9 	bl	800b5a8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800b5d6:	2104      	movs	r1, #4
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f018 f8e6 	bl	80237aa <_ZdlPvj>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
    {
    }
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800b626:	6810      	ldr	r0, [r2, #0]
 800b628:	6851      	ldr	r1, [r2, #4]
 800b62a:	c303      	stmia	r3!, {r0, r1}
    }
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	3304      	adds	r3, #4
 800b644:	4618      	mov	r0, r3
 800b646:	f007 f948 	bl	80128da <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
    {
 800b65c:	4a04      	ldr	r2, [pc, #16]	@ (800b670 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	601a      	str	r2, [r3, #0]
    }
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	08025280 	.word	0x08025280

0800b674 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
    }
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff ffe9 	bl	800b654 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800b682:	2104      	movs	r1, #4
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f018 f890 	bl	80237aa <_ZdlPvj>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800b694:	b480      	push	{r7}
 800b696:	af00      	add	r7, sp, #0
    {
        return instance;
 800b698:	4b03      	ldr	r3, [pc, #12]	@ (800b6a8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800b69a:	681b      	ldr	r3, [r3, #0]
    }
 800b69c:	4618      	mov	r0, r3
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	20001df4 	.word	0x20001df4

0800b6ac <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800b6ac:	b480      	push	{r7}
 800b6ae:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800b6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <_ZN8touchgfx3HAL3lcdEv+0x22>
 800b6bc:	4b08      	ldr	r3, [pc, #32]	@ (800b6e0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800b6c6:	4b06      	ldr	r3, [pc, #24]	@ (800b6e0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6cc:	e002      	b.n	800b6d4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800b6ce:	4b04      	ldr	r3, [pc, #16]	@ (800b6e0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
    }
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20001df4 	.word	0x20001df4

0800b6e4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800b6ec:	4a07      	ldr	r2, [pc, #28]	@ (800b70c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	605a      	str	r2, [r3, #4]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	721a      	strb	r2, [r3, #8]
    {
    }
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	0802525c 	.word	0x0802525c

0800b710 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
    {
 800b718:	4a04      	ldr	r2, [pc, #16]	@ (800b72c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	601a      	str	r2, [r3, #0]
    }
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4618      	mov	r0, r3
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	0802525c 	.word	0x0802525c

0800b730 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
    }
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff ffe9 	bl	800b710 <_ZN8touchgfx10TransitionD1Ev>
 800b73e:	210c      	movs	r1, #12
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f018 f832 	bl	80237aa <_ZdlPvj>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
    {
    }
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
    {
    }
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
    {
    }
 800b780:	bf00      	nop
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800b794:	f007 f87c 	bl	8012890 <_ZN8touchgfx11Application11getInstanceEv>
 800b798:	4603      	mov	r3, r0
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	323c      	adds	r2, #60	@ 0x3c
 800b79e:	6812      	ldr	r2, [r2, #0]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	4790      	blx	r2
    }
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	605a      	str	r2, [r3, #4]
    }
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	4a05      	ldr	r2, [pc, #20]	@ (800b7e8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	601a      	str	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff fee5 	bl	800b5a8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	08025f20 	.word	0x08025f20

0800b7ec <_ZN8touchgfx11ApplicationD0Ev>:
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff ffe7 	bl	800b7c8 <_ZN8touchgfx11ApplicationD1Ev>
 800b7fa:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f017 ffd3 	bl	80237aa <_ZdlPvj>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4618      	mov	r0, r3
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f007 f8fe 	bl	8012a1c <_ZN8touchgfx11ApplicationC1Ev>
 800b820:	4a09      	ldr	r2, [pc, #36]	@ (800b848 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a04      	ldr	r2, [pc, #16]	@ (800b84c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800b83a:	6013      	str	r3, [r2, #0]
    }
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	08025208 	.word	0x08025208
 800b84c:	20001e40 	.word	0x20001e40

0800b850 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f804 	bl	800b866 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800b866:	b580      	push	{r7, lr}
 800b868:	b082      	sub	sp, #8
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00f      	beq.n	800b898 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	330c      	adds	r3, #12
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4610      	mov	r0, r2
 800b88c:	4798      	blx	r3
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800b894:	2301      	movs	r3, #1
 800b896:	e000      	b.n	800b89a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800b898:	2300      	movs	r3, #0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00e      	beq.n	800b8bc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	601a      	str	r2, [r3, #0]
    }
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	4a05      	ldr	r2, [pc, #20]	@ (800b900 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	601a      	str	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff ff69 	bl	800b7c8 <_ZN8touchgfx11ApplicationD1Ev>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	08025208 	.word	0x08025208

0800b904 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff ffe7 	bl	800b8e0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800b912:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f017 ff47 	bl	80237aa <_ZdlPvj>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4618      	mov	r0, r3
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	4a08      	ldr	r2, [pc, #32]	@ (800b954 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	601a      	str	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 fad1 	bl	800bee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff ffcb 	bl	800b8e0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	0802519c 	.word	0x0802519c

0800b958 <_ZN23FrontendApplicationBaseD0Ev>:
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7ff ffe1 	bl	800b928 <_ZN23FrontendApplicationBaseD1Ev>
 800b966:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f017 ff1d 	bl	80237aa <_ZdlPvj>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f886 	bl	800ba94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800b988:	bf00      	nop
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	721a      	strb	r2, [r3, #8]
    }
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	605a      	str	r2, [r3, #4]
    }
 800b9ba:	bf00      	nop
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
	...

0800b9c8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff ff1a 	bl	800b810 <_ZN8touchgfx14MVPApplicationC1Ev>
 800b9dc:	4a18      	ldr	r2, [pc, #96]	@ (800ba40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 f8a9 	bl	800bb40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800b9fe:	f7ff fe49 	bl	800b694 <_ZN8touchgfx3HAL11getInstanceEv>
 800ba02:	4603      	mov	r3, r0
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	3208      	adds	r2, #8
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ba10:	f7ff fe4c 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 800ba14:	4603      	mov	r3, r0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f010 fb27 	bl	801c06a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800ba1c:	f7ff fe46 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 800ba20:	4603      	mov	r3, r0
 800ba22:	4618      	mov	r0, r3
 800ba24:	f010 fb9c 	bl	801c160 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800ba28:	f7ff fe40 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f010 fba2 	bl	801c178 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	0802519c 	.word	0x0802519c

0800ba44 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff ffe9 	bl	800ba44 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	605a      	str	r2, [r3, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	3308      	adds	r3, #8
 800ba80:	3208      	adds	r2, #8
 800ba82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba86:	e883 0003 	stmia.w	r3, {r0, r1}
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800ba94:	b590      	push	{r4, r7, lr}
 800ba96:	b089      	sub	sp, #36	@ 0x24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800baa2:	4b10      	ldr	r3, [pc, #64]	@ (800bae4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800baa4:	61bb      	str	r3, [r7, #24]
 800baa6:	2300      	movs	r3, #0
 800baa8:	61fb      	str	r3, [r7, #28]
 800baaa:	f107 0008 	add.w	r0, r7, #8
 800baae:	f107 0318 	add.w	r3, r7, #24
 800bab2:	cb0c      	ldmia	r3, {r2, r3}
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	f000 f85f 	bl	800bb78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800baba:	f107 0308 	add.w	r3, r7, #8
 800babe:	4619      	mov	r1, r3
 800bac0:	4620      	mov	r0, r4
 800bac2:	f7ff ffcb 	bl	800ba5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800bac6:	f107 0308 	add.w	r3, r7, #8
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fa0a 	bl	800bee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800badc:	bf00      	nop
 800bade:	3724      	adds	r7, #36	@ 0x24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd90      	pop	{r4, r7, pc}
 800bae4:	0800bae9 	.word	0x0800bae9

0800bae8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af02      	add	r7, sp, #8
 800baee:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800bafc:	461a      	mov	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	4b04      	ldr	r3, [pc, #16]	@ (800bb18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800bb08:	4804      	ldr	r0, [pc, #16]	@ (800bb1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800bb0a:	f000 f867 	bl	800bbdc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800bb0e:	bf00      	nop
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	20001e34 	.word	0x20001e34
 800bb1c:	20001e30 	.word	0x20001e30

0800bb20 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	4a04      	ldr	r2, [pc, #16]	@ (800bb3c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4618      	mov	r0, r3
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	08025280 	.word	0x08025280

0800bb40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff ffe8 	bl	800bb20 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800bb50:	4a08      	ldr	r2, [pc, #32]	@ (800bb74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	605a      	str	r2, [r3, #4]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	609a      	str	r2, [r3, #8]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	60da      	str	r2, [r3, #12]
    {
    }
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	080251f0 	.word	0x080251f0

0800bb78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	4639      	mov	r1, r7
 800bb84:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7ff ffc8 	bl	800bb20 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800bb90:	4a08      	ldr	r2, [pc, #32]	@ (800bbb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	605a      	str	r2, [r3, #4]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	3308      	adds	r3, #8
 800bba0:	463a      	mov	r2, r7
 800bba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bba6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	080251f0 	.word	0x080251f0

0800bbb8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fd8e 	bl	800b6e4 <_ZN8touchgfx10TransitionC1Ev>
 800bbc8:	4a03      	ldr	r2, [pc, #12]	@ (800bbd8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	08025178 	.word	0x08025178

0800bbdc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800bbdc:	b590      	push	{r4, r7, lr}
 800bbde:	b08f      	sub	sp, #60	@ 0x3c
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3320      	adds	r3, #32
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	4798      	blx	r3
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	f5b3 7f1d 	cmp.w	r3, #628	@ 0x274
 800bc02:	d205      	bcs.n	800bc10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800bc04:	4b7d      	ldr	r3, [pc, #500]	@ (800bdfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800bc06:	4a7e      	ldr	r2, [pc, #504]	@ (800be00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bc08:	21a3      	movs	r1, #163	@ 0xa3
 800bc0a:	487e      	ldr	r0, [pc, #504]	@ (800be04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bc0c:	f017 fdfc 	bl	8023808 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685a      	ldr	r2, [r3, #4]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3320      	adds	r3, #32
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4610      	mov	r0, r2
 800bc20:	4798      	blx	r3
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b0f      	cmp	r3, #15
 800bc26:	d805      	bhi.n	800bc34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800bc28:	4b77      	ldr	r3, [pc, #476]	@ (800be08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800bc2a:	4a75      	ldr	r2, [pc, #468]	@ (800be00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bc2c:	21a4      	movs	r1, #164	@ 0xa4
 800bc2e:	4875      	ldr	r0, [pc, #468]	@ (800be04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bc30:	f017 fdea 	bl	8023808 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3320      	adds	r3, #32
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4610      	mov	r0, r2
 800bc44:	4798      	blx	r3
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b0b      	cmp	r3, #11
 800bc4a:	d805      	bhi.n	800bc58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800bc4c:	4b6f      	ldr	r3, [pc, #444]	@ (800be0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800bc4e:	4a6c      	ldr	r2, [pc, #432]	@ (800be00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800bc50:	21a5      	movs	r1, #165	@ 0xa5
 800bc52:	486c      	ldr	r0, [pc, #432]	@ (800be04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800bc54:	f017 fdd8 	bl	8023808 <__assert_func>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800bc64:	f006 fe14 	bl	8012890 <_ZN8touchgfx11Application11getInstanceEv>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff fce4 	bl	800b638 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d008      	beq.n	800bc8a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	330c      	adds	r3, #12
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4610      	mov	r0, r2
 800bc88:	4798      	blx	r3
    if (*currentTrans)
 800bc8a:	6a3b      	ldr	r3, [r7, #32]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d007      	beq.n	800bca2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800bc92:	6a3b      	ldr	r3, [r7, #32]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4610      	mov	r0, r2
 800bca0:	4798      	blx	r3
    if (*currentScreen)
 800bca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d008      	beq.n	800bcbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800bcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3314      	adds	r3, #20
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4610      	mov	r0, r2
 800bcba:	4798      	blx	r3
    if (*currentPresenter)
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d008      	beq.n	800bcd6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3304      	adds	r3, #4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4798      	blx	r3
    if (*currentScreen)
 800bcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d007      	beq.n	800bcee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800bcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4610      	mov	r0, r2
 800bcec:	4798      	blx	r3
    if (*currentPresenter)
 800bcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d008      	beq.n	800bd08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3308      	adds	r3, #8
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
}
 800bd08:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	2100      	movs	r1, #0
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 f87d 	bl	800be10 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800bd16:	4603      	mov	r3, r0
 800bd18:	4619      	mov	r1, r3
 800bd1a:	200c      	movs	r0, #12
 800bd1c:	f7ff fbf6 	bl	800b50c <_ZnwjPv>
 800bd20:	4604      	mov	r4, r0
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7ff ff48 	bl	800bbb8 <_ZN8touchgfx12NoTransitionC1Ev>
 800bd28:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 f880 	bl	800be36 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800bd36:	4603      	mov	r3, r0
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800bd3e:	f7ff fbe5 	bl	800b50c <_ZnwjPv>
 800bd42:	4604      	mov	r4, r0
 800bd44:	4620      	mov	r0, r4
 800bd46:	f002 f8a9 	bl	800de9c <_ZN11Screen1ViewC1Ev>
 800bd4a:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2100      	movs	r1, #0
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 f882 	bl	800be5c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	2010      	movs	r0, #16
 800bd5e:	f7ff fbd5 	bl	800b50c <_ZnwjPv>
 800bd62:	4604      	mov	r4, r0
 800bd64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd66:	4620      	mov	r0, r4
 800bd68:	f002 f840 	bl	800ddec <_ZN16Screen1PresenterC1ER11Screen1View>
 800bd6c:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd72:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd78:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd7e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800bd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800bd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd88:	3304      	adds	r3, #4
 800bd8a:	e000      	b.n	800bd8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800bd92:	f7ff fd97 	bl	800b8c4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800bd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd98:	3304      	adds	r3, #4
 800bd9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff fe04 	bl	800b9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800bda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 f86b 	bl	800be82 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800bdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdae:	61fb      	str	r3, [r7, #28]
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	61bb      	str	r3, [r7, #24]
 800bdb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	69f8      	ldr	r0, [r7, #28]
 800bdc2:	4798      	blx	r3
    newPresenter->activate();
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	69b8      	ldr	r0, [r7, #24]
 800bdcc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800bdce:	6979      	ldr	r1, [r7, #20]
 800bdd0:	69f8      	ldr	r0, [r7, #28]
 800bdd2:	f008 fa21 	bl	8014218 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3310      	adds	r3, #16
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6978      	ldr	r0, [r7, #20]
 800bde0:	4798      	blx	r3
    newTransition->invalidate();
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3314      	adds	r3, #20
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6978      	ldr	r0, [r7, #20]
 800bdec:	4798      	blx	r3
}
 800bdee:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800bdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	373c      	adds	r7, #60	@ 0x3c
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd90      	pop	{r4, r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	08024844 	.word	0x08024844
 800be00:	080248d4 	.word	0x080248d4
 800be04:	080249a8 	.word	0x080249a8
 800be08:	080249ec 	.word	0x080249ec
 800be0c:	08024a90 	.word	0x08024a90

0800be10 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3324      	adds	r3, #36	@ 0x24
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	887a      	ldrh	r2, [r7, #2]
 800be26:	4611      	mov	r1, r2
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	4798      	blx	r3
 800be2c:	4603      	mov	r3, r0
    }
 800be2e:	4618      	mov	r0, r3
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	460b      	mov	r3, r1
 800be40:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3324      	adds	r3, #36	@ 0x24
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	887a      	ldrh	r2, [r7, #2]
 800be4c:	4611      	mov	r1, r2
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	4798      	blx	r3
 800be52:	4603      	mov	r3, r0
    }
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3324      	adds	r3, #36	@ 0x24
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	887a      	ldrh	r2, [r7, #2]
 800be72:	4611      	mov	r1, r2
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	4798      	blx	r3
 800be78:	4603      	mov	r3, r0
    }
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800be92:	bf00      	nop
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
	...

0800bea0 <_ZN8touchgfx12NoTransitionD1Ev>:
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	4a05      	ldr	r2, [pc, #20]	@ (800bec0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff fc2d 	bl	800b710 <_ZN8touchgfx10TransitionD1Ev>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	08025178 	.word	0x08025178

0800bec4 <_ZN8touchgfx12NoTransitionD0Ev>:
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ffe7 	bl	800bea0 <_ZN8touchgfx12NoTransitionD1Ev>
 800bed2:	210c      	movs	r1, #12
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f017 fc68 	bl	80237aa <_ZdlPvj>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	4a05      	ldr	r2, [pc, #20]	@ (800bf04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff fbad 	bl	800b654 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	080251f0 	.word	0x080251f0

0800bf08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff ffe7 	bl	800bee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800bf16:	2110      	movs	r1, #16
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f017 fc46 	bl	80237aa <_ZdlPvj>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	68d2      	ldr	r2, [r2, #12]
 800bf38:	1052      	asrs	r2, r2, #1
 800bf3a:	1899      	adds	r1, r3, r2
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d102      	bne.n	800bf4e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	e00a      	b.n	800bf64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	68d2      	ldr	r2, [r2, #12]
 800bf56:	1052      	asrs	r2, r2, #1
 800bf58:	4413      	add	r3, r2
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	6892      	ldr	r2, [r2, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4608      	mov	r0, r1
 800bf66:	4798      	blx	r3
    }
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d010      	beq.n	800bfa2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d107      	bne.n	800bf98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800bf94:	2301      	movs	r3, #1
 800bf96:	e000      	b.n	800bf9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d001      	beq.n	800bfa2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e000      	b.n	800bfa4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800bfa2:	2300      	movs	r3, #0
    }
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
        : color(0)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
    {
    }
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
        : color(col)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	601a      	str	r2, [r3, #0]
    {
    }
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	370c      	adds	r7, #12
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800bfea:	b480      	push	{r7}
 800bfec:	b083      	sub	sp, #12
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	801a      	strh	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	805a      	strh	r2, [r3, #2]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	809a      	strh	r2, [r3, #4]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	80da      	strh	r2, [r3, #6]
    {
    }
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	887a      	ldrh	r2, [r7, #2]
 800c028:	801a      	strh	r2, [r3, #0]
    {
    }
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4618      	mov	r0, r3
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	791b      	ldrb	r3, [r3, #4]
    }
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800c058:	4a14      	ldr	r2, [pc, #80]	@ (800c0ac <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	601a      	str	r2, [r3, #0]
        : rect(),
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff ffc1 	bl	800bfea <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	330c      	adds	r3, #12
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff ffbc 	bl	800bfea <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08025f74 	.word	0x08025f74

0800c0b0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
    {
 800c0b8:	4a04      	ldr	r2, [pc, #16]	@ (800c0cc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]
    }
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	08025f74 	.word	0x08025f74

0800c0d0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
    }
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff ffe9 	bl	800c0b0 <_ZN8touchgfx8DrawableD1Ev>
 800c0de:	2128      	movs	r1, #40	@ 0x28
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f017 fb62 	bl	80237aa <_ZdlPvj>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d005      	beq.n	800c10e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3314      	adds	r3, #20
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
        }
    }
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800c11e:	2300      	movs	r3, #0
    }
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	4608      	mov	r0, r1
 800c136:	4611      	mov	r1, r2
 800c138:	461a      	mov	r2, r3
 800c13a:	4603      	mov	r3, r0
 800c13c:	817b      	strh	r3, [r7, #10]
 800c13e:	460b      	mov	r3, r1
 800c140:	813b      	strh	r3, [r7, #8]
 800c142:	4613      	mov	r3, r2
 800c144:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c146:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c14a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c14e:	4619      	mov	r1, r3
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f000 f844 	bl	800c1de <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800c156:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c15a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c15e:	4619      	mov	r1, r3
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f000 f898 	bl	800c296 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800c166:	bf00      	nop
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800c196:	4618      	mov	r0, r3
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c1a2:	b480      	push	{r7}
 800c1a4:	b083      	sub	sp, #12
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	887a      	ldrh	r2, [r7, #2]
 800c1b2:	809a      	strh	r2, [r3, #4]
    }
 800c1b4:	bf00      	nop
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	887a      	ldrh	r2, [r7, #2]
 800c1d0:	80da      	strh	r2, [r3, #6]
    }
 800c1d2:	bf00      	nop
 800c1d4:	370c      	adds	r7, #12
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	807b      	strh	r3, [r7, #2]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3330      	adds	r3, #48	@ 0x30
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	4798      	blx	r3
        setY(y);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3334      	adds	r3, #52	@ 0x34
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c20c:	4611      	mov	r1, r2
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	4798      	blx	r3
    }
 800c212:	bf00      	nop
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
 800c222:	460b      	mov	r3, r1
 800c224:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	887a      	ldrh	r2, [r7, #2]
 800c22a:	811a      	strh	r2, [r3, #8]
    }
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	887a      	ldrh	r2, [r7, #2]
 800c248:	815a      	strh	r2, [r3, #10]
    }
 800c24a:	bf00      	nop
 800c24c:	370c      	adds	r7, #12
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800c256:	b480      	push	{r7}
 800c258:	b083      	sub	sp, #12
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
    {
    }
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c28a:	bf00      	nop
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800c296:	b580      	push	{r7, lr}
 800c298:	b082      	sub	sp, #8
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	807b      	strh	r3, [r7, #2]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3338      	adds	r3, #56	@ 0x38
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	4798      	blx	r3
        setHeight(height);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	333c      	adds	r3, #60	@ 0x3c
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	4798      	blx	r3
    }
 800c2ca:	bf00      	nop
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
    {
    }
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	78fa      	ldrb	r2, [r7, #3]
 800c30c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800c32a:	4618      	mov	r0, r3
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800c344:	4618      	mov	r0, r3
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	807b      	strh	r3, [r7, #2]
 800c35c:	4613      	mov	r3, r2
 800c35e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3354      	adds	r3, #84	@ 0x54
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	8879      	ldrh	r1, [r7, #2]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c370:	b292      	uxth	r2, r2
 800c372:	1a8a      	subs	r2, r1, r2
 800c374:	b292      	uxth	r2, r2
 800c376:	b210      	sxth	r0, r2
 800c378:	8839      	ldrh	r1, [r7, #0]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c380:	b292      	uxth	r2, r2
 800c382:	1a8a      	subs	r2, r1, r2
 800c384:	b292      	uxth	r2, r2
 800c386:	b212      	sxth	r2, r2
 800c388:	4601      	mov	r1, r0
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	4798      	blx	r3
    }
 800c38e:	bf00      	nop
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c396:	b480      	push	{r7}
 800c398:	b083      	sub	sp, #12
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c3a4:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c3ac:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c3b4:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800c3b6:	bf00      	nop
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7ff ffe1 	bl	800c396 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	601a      	str	r2, [r3, #0]
    }
 800c3e2:	bf00      	nop
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	607b      	str	r3, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	817b      	strh	r3, [r7, #10]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff ff8c 	bl	800c31c <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d008      	beq.n	800c41c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff ff92 	bl	800c336 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c418:	2301      	movs	r3, #1
 800c41a:	e000      	b.n	800c41e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800c41c:	2300      	movs	r3, #0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d002      	beq.n	800c428 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	601a      	str	r2, [r3, #0]
        }
    }
 800c428:	bf00      	nop
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff fe08 	bl	800c050 <_ZN8touchgfx8DrawableC1Ev>
 800c440:	4a05      	ldr	r2, [pc, #20]	@ (800c458 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	08025b20 	.word	0x08025b20

0800c45c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
    {
 800c47c:	4a06      	ldr	r2, [pc, #24]	@ (800c498 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
    }
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3304      	adds	r3, #4
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f944 	bl	800c714 <_ZN8touchgfx9ContainerD1Ev>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	08026080 	.word	0x08026080

0800c49c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
    }
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff ffe5 	bl	800c474 <_ZN8touchgfx6ScreenD1Ev>
 800c4aa:	213c      	movs	r1, #60	@ 0x3c
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f017 f97c 	bl	80237aa <_ZdlPvj>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
    {
    }
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
    {
    }
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
    {
    }
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
    {
    }
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	460b      	mov	r3, r1
 800c516:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800c518:	bf00      	nop
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3304      	adds	r3, #4
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	f003 fd01 	bl	800ff3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff fd7e 	bl	800c050 <_ZN8touchgfx8DrawableC1Ev>
 800c554:	4a03      	ldr	r2, [pc, #12]	@ (800c564 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	080255d8 	.word	0x080255d8

0800c568 <_ZN8touchgfx6WidgetD1Ev>:
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	4a05      	ldr	r2, [pc, #20]	@ (800c588 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff fd99 	bl	800c0b0 <_ZN8touchgfx8DrawableD1Ev>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	080255d8 	.word	0x080255d8

0800c58c <_ZN8touchgfx6WidgetD0Ev>:
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ffe7 	bl	800c568 <_ZN8touchgfx6WidgetD1Ev>
 800c59a:	2128      	movs	r1, #40	@ 0x28
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f017 f904 	bl	80237aa <_ZdlPvj>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	2326      	movs	r3, #38	@ 0x26
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	2100      	movs	r1, #0
 800c5be:	f017 fb2a 	bl	8023c16 <memset>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff ffbd 	bl	800c544 <_ZN8touchgfx6WidgetC1Ev>
 800c5ca:	4a09      	ldr	r2, [pc, #36]	@ (800c5f0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	22ff      	movs	r2, #255	@ 0xff
 800c5d4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3328      	adds	r3, #40	@ 0x28
 800c5dc:	2100      	movs	r1, #0
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff fcf4 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08025d08 	.word	0x08025d08

0800c5f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	78fa      	ldrb	r2, [r7, #3]
 800c620:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4618      	mov	r0, r3
 800c63e:	2326      	movs	r3, #38	@ 0x26
 800c640:	461a      	mov	r2, r3
 800c642:	2100      	movs	r1, #0
 800c644:	f017 fae7 	bl	8023c16 <memset>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7ff ff7a 	bl	800c544 <_ZN8touchgfx6WidgetC1Ev>
 800c650:	4a09      	ldr	r2, [pc, #36]	@ (800c678 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	8812      	ldrh	r2, [r2, #0]
 800c65c:	84da      	strh	r2, [r3, #38]	@ 0x26
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	22ff      	movs	r2, #255	@ 0xff
 800c662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f005 f874 	bl	8011756 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	08025e5c 	.word	0x08025e5c

0800c67c <_ZN8touchgfx5Image8setAlphaEh>:
     *
     * @see getAlpha
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	78fa      	ldrb	r2, [r7, #3]
 800c68c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }
 800c690:	bf00      	nop
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	4a05      	ldr	r2, [pc, #20]	@ (800c6bc <_ZN8touchgfx5ImageD1Ev+0x20>)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff ff5b 	bl	800c568 <_ZN8touchgfx6WidgetD1Ev>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	08025e5c 	.word	0x08025e5c

0800c6c0 <_ZN8touchgfx5ImageD0Ev>:
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff ffe7 	bl	800c69c <_ZN8touchgfx5ImageD1Ev>
 800c6ce:	212c      	movs	r1, #44	@ 0x2c
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f017 f86a 	bl	80237aa <_ZdlPvj>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    TiledImage(const Bitmap& bmp = Bitmap())
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
        : Image(bmp), xOffset(0), yOffset(0)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff ff9e 	bl	800c630 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800c6f4:	4a06      	ldr	r2, [pc, #24]	@ (800c710 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE+0x30>)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	859a      	strh	r2, [r3, #44]	@ 0x2c
    {
    }
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	08025d70 	.word	0x08025d70

0800c714 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	4a05      	ldr	r2, [pc, #20]	@ (800c734 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	f7ff fcc3 	bl	800c0b0 <_ZN8touchgfx8DrawableD1Ev>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4618      	mov	r0, r3
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	08025b20 	.word	0x08025b20

0800c738 <_ZN8touchgfx9ContainerD0Ev>:
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff ffe7 	bl	800c714 <_ZN8touchgfx9ContainerD1Ev>
 800c746:	212c      	movs	r1, #44	@ 0x2c
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f017 f82e 	bl	80237aa <_ZdlPvj>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4618      	mov	r0, r3
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fe64 	bl	800c430 <_ZN8touchgfx9ContainerC1Ev>
 800c768:	4a0b      	ldr	r2, [pc, #44]	@ (800c798 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	601a      	str	r2, [r3, #0]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	22ff      	movs	r2, #255	@ 0xff
 800c77a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	631a      	str	r2, [r3, #48]	@ 0x30
    {
        setTouchable(true);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2101      	movs	r1, #1
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff fdb7 	bl	800c2fc <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	0802553c 	.word	0x0802553c

0800c79c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	78fa      	ldrb	r2, [r7, #3]
 800c7ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        handlePressedUpdated();
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	338c      	adds	r3, #140	@ 0x8c
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	4798      	blx	r3
    }
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <_ZNK8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed() const
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    }
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800c7de:	b480      	push	{r7}
 800c7e0:	b083      	sub	sp, #12
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    }
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800c808:	bf00      	nop
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00d      	beq.n	800c840 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	330c      	adds	r3, #12
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4610      	mov	r0, r2
 800c834:	4798      	blx	r3
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800c83c:	2301      	movs	r3, #1
 800c83e:	e000      	b.n	800c842 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 800c840:	2300      	movs	r3, #0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d009      	beq.n	800c85a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3308      	adds	r3, #8
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6879      	ldr	r1, [r7, #4]
 800c856:	4610      	mov	r0, r2
 800c858:	4798      	blx	r3
        }
    }
 800c85a:	bf00      	nop
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 800c862:	b480      	push	{r7}
 800c864:	b083      	sub	sp, #12
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
    {
    }
 800c86a:	bf00      	nop
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800c876:	b480      	push	{r7}
 800c878:	b083      	sub	sp, #12
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
    {
    }
 800c87e:	bf00      	nop
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
	...

0800c88c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	4a05      	ldr	r2, [pc, #20]	@ (800c8ac <_ZN8touchgfx3BoxD1Ev+0x20>)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff fe63 	bl	800c568 <_ZN8touchgfx6WidgetD1Ev>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	08025d08 	.word	0x08025d08

0800c8b0 <_ZN8touchgfx3BoxD0Ev>:
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7ff ffe7 	bl	800c88c <_ZN8touchgfx3BoxD1Ev>
 800c8be:	212c      	movs	r1, #44	@ 0x2c
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f016 ff72 	bl	80237aa <_ZdlPvj>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff fe66 	bl	800c5ac <_ZN8touchgfx3BoxC1Ev>
 800c8e0:	4a08      	ldr	r2, [pc, #32]	@ (800c904 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	332c      	adds	r3, #44	@ 0x2c
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff fb6d 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	861a      	strh	r2, [r3, #48]	@ 0x30
    {
    }
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	08025df4 	.word	0x08025df4

0800c908 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	887a      	ldrh	r2, [r7, #2]
 800c934:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 800c936:	bf00      	nop
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff ff38 	bl	800c7c4 <_ZNK8touchgfx23AbstractButtonContainer10getPressedEv>
 800c954:	4603      	mov	r3, r0
 800c956:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800c958:	6838      	ldr	r0, [r7, #0]
 800c95a:	f7ff fb6d 	bl	800c038 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	bf0c      	ite	eq
 800c964:	2301      	moveq	r3, #1
 800c966:	2300      	movne	r3, #0
 800c968:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800c96a:	7bbb      	ldrb	r3, [r7, #14]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d005      	beq.n	800c97c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	f083 0301 	eor.w	r3, r3, #1
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d108      	bne.n	800c98e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	f083 0301 	eor.w	r3, r3, #1
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00f      	beq.n	800c9a8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00c      	beq.n	800c9a8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	7bba      	ldrb	r2, [r7, #14]
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff ff01 	bl	800c79c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3314      	adds	r3, #20
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d007      	beq.n	800c9be <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800c9ae:	6838      	ldr	r0, [r7, #0]
 800c9b0:	f7ff fb42 	bl	800c038 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d101      	bne.n	800c9be <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d006      	beq.n	800c9d2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	3388      	adds	r3, #136	@ 0x88
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	4798      	blx	r3
        }
    }
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	4a05      	ldr	r2, [pc, #20]	@ (800c9fc <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff fe91 	bl	800c714 <_ZN8touchgfx9ContainerD1Ev>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	0802553c 	.word	0x0802553c

0800ca00 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7ff ffe7 	bl	800c9dc <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800ca0e:	2134      	movs	r1, #52	@ 0x34
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f016 feca 	bl	80237aa <_ZdlPvj>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <_ZN15Screen1ViewBase9leftArrowEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void leftArrow()
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <_ZN15Screen1ViewBase10rightArrowEv>:
    virtual void rightArrow()
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <_ZN15Screen1ViewBase4stopEv>:
    virtual void stop()
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	4a05      	ldr	r2, [pc, #20]	@ (800ca7c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	601a      	str	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff fd01 	bl	800c474 <_ZN8touchgfx6ScreenD1Ev>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	08025454 	.word	0x08025454

0800ca80 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff ffe7 	bl	800ca5c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800ca8e:	2140      	movs	r1, #64	@ 0x40
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f016 fe8a 	bl	80237aa <_ZdlPvj>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	b0a4      	sub	sp, #144	@ 0x90
 800caa6:	af02      	add	r7, sp, #8
 800caa8:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4618      	mov	r0, r3
 800caae:	f000 fb57 	bl	800d160 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800cab2:	4ae5      	ldr	r2, [pc, #916]	@ (800ce48 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	3340      	adds	r3, #64	@ 0x40
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff fd75 	bl	800c5ac <_ZN8touchgfx3BoxC1Ev>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800cac8:	f107 030c 	add.w	r3, r7, #12
 800cacc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff faa1 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800cad6:	f107 030c 	add.w	r3, r7, #12
 800cada:	4619      	mov	r1, r3
 800cadc:	4620      	mov	r0, r4
 800cade:	f7ff fdff 	bl	800c6e0 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	339c      	adds	r3, #156	@ 0x9c
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fbbc 	bl	800d264 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 fbb6 	bl	800d264 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fbfa 	bl	800d2f8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f503 7019 	add.w	r0, r3, #612	@ 0x264
 800cb0a:	4bd0      	ldr	r3, [pc, #832]	@ (800ce4c <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
 800cb0c:	613b      	str	r3, [r7, #16]
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]
 800cb12:	f107 0310 	add.w	r3, r7, #16
 800cb16:	cb0c      	ldmia	r3, {r2, r3}
 800cb18:	6879      	ldr	r1, [r7, #4]
 800cb1a:	f000 fc3d 	bl	800d398 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800cb24:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2100      	movs	r1, #0
 800cb32:	f7ff fafb 	bl	800c12c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 800cb42:	2300      	movs	r3, #0
 800cb44:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800cb4e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800cb52:	041a      	lsls	r2, r3, #16
 800cb54:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800cb58:	021b      	lsls	r3, r3, #8
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800cb60:	4313      	orrs	r3, r2
 800cb62:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cb66:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff fa2d 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cb72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb74:	4619      	mov	r1, r3
 800cb76:	4620      	mov	r0, r4
 800cb78:	f7ff fd3c 	bl	800c5f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3340      	adds	r3, #64	@ 0x40
 800cb82:	4619      	mov	r1, r3
 800cb84:	4610      	mov	r0, r2
 800cb86:	f7ff fccd 	bl	800c524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_PUZZLE_ID));
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800cb90:	f107 0318 	add.w	r3, r7, #24
 800cb94:	2100      	movs	r1, #0
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7ff fa3e 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800cb9c:	f107 0318 	add.w	r3, r7, #24
 800cba0:	4619      	mov	r1, r3
 800cba2:	4620      	mov	r0, r4
 800cba4:	f004 fb9b 	bl	80112de <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800cbae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2100      	movs	r1, #0
 800cbbc:	f7ff fab6 	bl	800c12c <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	336c      	adds	r3, #108	@ 0x6c
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f004 fb67 	bl	801129c <_ZN8touchgfx10TiledImage9setOffsetEss>
    add(tiledImage1);
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	336c      	adds	r3, #108	@ 0x6c
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	f7ff fca4 	bl	800c524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    flexButton1.setBoxWithBorderPosition(0, 0, 48, 49);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 800cbe2:	2331      	movs	r3, #49	@ 0x31
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	2330      	movs	r3, #48	@ 0x30
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2100      	movs	r1, #0
 800cbec:	f000 fbf4 	bl	800d3d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton1.setBorderSize(5);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	339c      	adds	r3, #156	@ 0x9c
 800cbf4:	2105      	movs	r1, #5
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fc0e 	bl	800d418 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 800cc02:	2300      	movs	r3, #0
 800cc04:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800cc08:	2366      	movs	r3, #102	@ 0x66
 800cc0a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800cc0e:	2399      	movs	r3, #153	@ 0x99
 800cc10:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800cc14:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800cc18:	041a      	lsls	r2, r3, #16
 800cc1a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800cc1e:	021b      	lsls	r3, r3, #8
 800cc20:	431a      	orrs	r2, r3
 800cc22:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cc26:	4313      	orrs	r3, r2
 800cc28:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cc2c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff f9ca 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cc38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc3a:	461d      	mov	r5, r3
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 800cc42:	2399      	movs	r3, #153	@ 0x99
 800cc44:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800cc48:	23cc      	movs	r3, #204	@ 0xcc
 800cc4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc4e:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800cc52:	041a      	lsls	r2, r3, #16
 800cc54:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800cc58:	021b      	lsls	r3, r3, #8
 800cc5a:	431a      	orrs	r2, r3
 800cc5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc60:	4313      	orrs	r3, r2
 800cc62:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cc66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff f9ad 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cc72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc74:	461e      	mov	r6, r3
 800cc76:	2300      	movs	r3, #0
 800cc78:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800cc7c:	2333      	movs	r3, #51	@ 0x33
 800cc7e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800cc82:	2366      	movs	r3, #102	@ 0x66
 800cc84:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 800cc88:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800cc8c:	041a      	lsls	r2, r3, #16
 800cc8e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800cc92:	021b      	lsls	r3, r3, #8
 800cc94:	431a      	orrs	r2, r3
 800cc96:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cca0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff f990 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800ccac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccae:	4698      	mov	r8, r3
 800ccb0:	2333      	movs	r3, #51	@ 0x33
 800ccb2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800ccb6:	2366      	movs	r3, #102	@ 0x66
 800ccb8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800ccbc:	2399      	movs	r3, #153	@ 0x99
 800ccbe:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 800ccc2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ccc6:	041a      	lsls	r2, r3, #16
 800ccc8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800cccc:	021b      	lsls	r3, r3, #8
 800ccce:	431a      	orrs	r2, r3
 800ccd0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ccda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ccde:	4611      	mov	r1, r2
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7ff f973 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	4643      	mov	r3, r8
 800ccec:	4632      	mov	r2, r6
 800ccee:	4629      	mov	r1, r5
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 fba3 	bl	800d43c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_E8F6FB_SVG_ID));
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 800ccfc:	f107 031c 	add.w	r3, r7, #28
 800cd00:	2102      	movs	r1, #2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff f988 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800cd08:	f107 0320 	add.w	r3, r7, #32
 800cd0c:	2102      	movs	r1, #2
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff f982 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800cd14:	f107 0220 	add.w	r2, r7, #32
 800cd18:	f107 031c 	add.w	r3, r7, #28
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 fba9 	bl	800d476 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    flexButton1.setIconXY(0, 0);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	339c      	adds	r3, #156	@ 0x9c
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 fbf4 	bl	800d51a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    flexButton1.setAction(flexButtonCallback);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4610      	mov	r0, r2
 800cd42:	f7ff fd59 	bl	800c7f8 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    flexButton1.setPosition(355, 112, 48, 49);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 800cd4c:	2331      	movs	r3, #49	@ 0x31
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	2330      	movs	r3, #48	@ 0x30
 800cd52:	2270      	movs	r2, #112	@ 0x70
 800cd54:	f240 1163 	movw	r1, #355	@ 0x163
 800cd58:	f7ff f9e8 	bl	800c12c <_ZN8touchgfx8Drawable11setPositionEssss>
    add(flexButton1);
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	339c      	adds	r3, #156	@ 0x9c
 800cd62:	4619      	mov	r1, r3
 800cd64:	4610      	mov	r0, r2
 800cd66:	f7ff fbdd 	bl	800c524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    flexButton1_1.setBoxWithBorderPosition(0, 0, 48, 49);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800cd70:	2331      	movs	r3, #49	@ 0x31
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	2330      	movs	r3, #48	@ 0x30
 800cd76:	2200      	movs	r2, #0
 800cd78:	2100      	movs	r1, #0
 800cd7a:	f000 fb2d 	bl	800d3d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton1_1.setBorderSize(5);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800cd84:	2105      	movs	r1, #5
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 fb46 	bl	800d418 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton1_1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800cd92:	2300      	movs	r3, #0
 800cd94:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 800cd98:	2366      	movs	r3, #102	@ 0x66
 800cd9a:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 800cd9e:	2399      	movs	r3, #153	@ 0x99
 800cda0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 800cda4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800cda8:	041a      	lsls	r2, r3, #16
 800cdaa:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800cdae:	021b      	lsls	r3, r3, #8
 800cdb0:	431a      	orrs	r2, r3
 800cdb2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cdbc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7ff f902 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cdc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdca:	461d      	mov	r5, r3
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800cdd2:	2399      	movs	r3, #153	@ 0x99
 800cdd4:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800cdd8:	23cc      	movs	r3, #204	@ 0xcc
 800cdda:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800cdde:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800cde2:	041a      	lsls	r2, r3, #16
 800cde4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800cde8:	021b      	lsls	r3, r3, #8
 800cdea:	431a      	orrs	r2, r3
 800cdec:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cdf6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7ff f8e5 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800ce02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce04:	461e      	mov	r6, r3
 800ce06:	2300      	movs	r3, #0
 800ce08:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 800ce0c:	2333      	movs	r3, #51	@ 0x33
 800ce0e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ce12:	2366      	movs	r3, #102	@ 0x66
 800ce14:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800ce18:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800ce1c:	041a      	lsls	r2, r3, #16
 800ce1e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ce22:	021b      	lsls	r3, r3, #8
 800ce24:	431a      	orrs	r2, r3
 800ce26:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ce30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ce34:	4611      	mov	r1, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7ff f8c8 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800ce3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce3e:	4698      	mov	r8, r3
 800ce40:	2333      	movs	r3, #51	@ 0x33
 800ce42:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800ce46:	e003      	b.n	800ce50 <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 800ce48:	080252c0 	.word	0x080252c0
 800ce4c:	0800d107 	.word	0x0800d107
 800ce50:	2366      	movs	r3, #102	@ 0x66
 800ce52:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800ce56:	2399      	movs	r3, #153	@ 0x99
 800ce58:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 800ce5c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800ce60:	041a      	lsls	r2, r3, #16
 800ce62:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	431a      	orrs	r2, r3
 800ce6a:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ce74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff f8a6 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800ce80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	4643      	mov	r3, r8
 800ce86:	4632      	mov	r2, r6
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 fad6 	bl	800d43c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton1_1.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_50_50_E8F6FB_SVG_ID));
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800ce96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff f8bb 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800cea2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cea6:	2101      	movs	r1, #1
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff f8b5 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800ceae:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ceb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f000 fadc 	bl	800d476 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    flexButton1_1.setIconXY(0, 0);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800cec4:	2200      	movs	r2, #0
 800cec6:	2100      	movs	r1, #0
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 fb26 	bl	800d51a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    flexButton1_1.setAction(flexButtonCallback);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ceda:	4619      	mov	r1, r3
 800cedc:	4610      	mov	r0, r2
 800cede:	f7ff fc8b 	bl	800c7f8 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    flexButton1_1.setPosition(75, 112, 48, 49);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 800cee8:	2331      	movs	r3, #49	@ 0x31
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	2330      	movs	r3, #48	@ 0x30
 800ceee:	2270      	movs	r2, #112	@ 0x70
 800cef0:	214b      	movs	r1, #75	@ 0x4b
 800cef2:	f7ff f91b 	bl	800c12c <_ZN8touchgfx8Drawable11setPositionEssss>
    add(flexButton1_1);
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7ff fb0f 	bl	800c524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    flexButton2.setBoxWithBorderPosition(0, 0, 98, 50);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f503 70f6 	add.w	r0, r3, #492	@ 0x1ec
 800cf0c:	2332      	movs	r3, #50	@ 0x32
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	2362      	movs	r3, #98	@ 0x62
 800cf12:	2200      	movs	r2, #0
 800cf14:	2100      	movs	r1, #0
 800cf16:	f000 fa5f 	bl	800d3d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton2.setBorderSize(5);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cf20:	2105      	movs	r1, #5
 800cf22:	4618      	mov	r0, r3
 800cf24:	f000 fa78 	bl	800d418 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton2.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(153, 0, 0), touchgfx::Color::getColorFromRGB(255, 0, 4), touchgfx::Color::getColorFromRGB(102, 0, 0), touchgfx::Color::getColorFromRGB(250, 12, 12));
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f503 74f6 	add.w	r4, r3, #492	@ 0x1ec
 800cf2e:	2399      	movs	r3, #153	@ 0x99
 800cf30:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800cf34:	2300      	movs	r3, #0
 800cf36:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 800cf40:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800cf44:	041a      	lsls	r2, r3, #16
 800cf46:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800cf4a:	021b      	lsls	r3, r3, #8
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800cf52:	4313      	orrs	r3, r2
 800cf54:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cf58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff f834 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf66:	461d      	mov	r5, r3
 800cf68:	23ff      	movs	r3, #255	@ 0xff
 800cf6a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 800cf74:	2304      	movs	r3, #4
 800cf76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800cf7a:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800cf7e:	041a      	lsls	r2, r3, #16
 800cf80:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800cf84:	021b      	lsls	r3, r3, #8
 800cf86:	431a      	orrs	r2, r3
 800cf88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cf92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff f817 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cf9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa0:	461e      	mov	r6, r3
 800cfa2:	2366      	movs	r3, #102	@ 0x66
 800cfa4:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800cfb4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800cfb8:	041a      	lsls	r2, r3, #16
 800cfba:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cfbe:	021b      	lsls	r3, r3, #8
 800cfc0:	431a      	orrs	r2, r3
 800cfc2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800cfcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fffa 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800cfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfda:	4698      	mov	r8, r3
 800cfdc:	23fa      	movs	r3, #250	@ 0xfa
 800cfde:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800cfe2:	230c      	movs	r3, #12
 800cfe4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800cfe8:	230c      	movs	r3, #12
 800cfea:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 800cfee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cff2:	041a      	lsls	r2, r3, #16
 800cff4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800cff8:	021b      	lsls	r3, r3, #8
 800cffa:	431a      	orrs	r2, r3
 800cffc:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d000:	4313      	orrs	r3, r2
 800d002:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800d006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d00a:	4611      	mov	r1, r2
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fe ffdd 	bl	800bfcc <_ZN8touchgfx9colortypeC1Em>
 800d012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	4643      	mov	r3, r8
 800d018:	4632      	mov	r2, r6
 800d01a:	4629      	mov	r1, r5
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fa0d 	bl	800d43c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton2.setAction(flexButtonCallback);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d02e:	4619      	mov	r1, r3
 800d030:	4610      	mov	r0, r2
 800d032:	f7ff fbe1 	bl	800c7f8 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>
    flexButton2.setPosition(191, 111, 98, 50);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f503 70f6 	add.w	r0, r3, #492	@ 0x1ec
 800d03c:	2332      	movs	r3, #50	@ 0x32
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	2362      	movs	r3, #98	@ 0x62
 800d042:	226f      	movs	r2, #111	@ 0x6f
 800d044:	21bf      	movs	r1, #191	@ 0xbf
 800d046:	f7ff f871 	bl	800c12c <_ZN8touchgfx8Drawable11setPositionEssss>
    add(flexButton2);
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d052:	4619      	mov	r1, r3
 800d054:	4610      	mov	r0, r2
 800d056:	f7ff fa65 	bl	800c524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4618      	mov	r0, r3
 800d05e:	3788      	adds	r7, #136	@ 0x88
 800d060:	46bd      	mov	sp, r7
 800d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d066:	bf00      	nop

0800d068 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	4a16      	ldr	r2, [pc, #88]	@ (800d0cc <_ZN15Screen1ViewBaseD1Ev+0x64>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
{

}
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 fafb 	bl	800d678 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 f8c3 	bl	800d214 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800d094:	4618      	mov	r0, r3
 800d096:	f000 fb11 	bl	800d6bc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	339c      	adds	r3, #156	@ 0x9c
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fb0c 	bl	800d6bc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	336c      	adds	r3, #108	@ 0x6c
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 fb2f 	bl	800d70c <_ZN8touchgfx10TiledImageD1Ev>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3340      	adds	r3, #64	@ 0x40
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7ff fbea 	bl	800c88c <_ZN8touchgfx3BoxD1Ev>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7ff fcce 	bl	800ca5c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	080252c0 	.word	0x080252c0

0800d0d0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
}
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff ffc5 	bl	800d068 <_ZN15Screen1ViewBaseD1Ev>
 800d0de:	f44f 711d 	mov.w	r1, #628	@ 0x274
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f016 fb61 	bl	80237aa <_ZdlPvj>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b083      	sub	sp, #12
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]

}
 800d0fa:	bf00      	nop
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
    if (&src == &flexButton1)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	339c      	adds	r3, #156	@ 0x9c
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	429a      	cmp	r2, r3
 800d118:	d105      	bne.n	800d126 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>
    {
        //leftArrow
        //When flexButton1 clicked call virtual function
        //Call leftArrow
        leftArrow();
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	332c      	adds	r3, #44	@ 0x2c
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	4798      	blx	r3
    }
    if (&src == &flexButton1_1)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d105      	bne.n	800d13e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x38>
    {
        //rightArrow
        //When flexButton1_1 clicked call virtual function
        //Call rightArrow
        rightArrow();
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3330      	adds	r3, #48	@ 0x30
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	4798      	blx	r3
    }
    if (&src == &flexButton2)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d105      	bne.n	800d156 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x50>
    {
        //stop
        //When flexButton2 clicked call virtual function
        //Call stop
        stop();
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3334      	adds	r3, #52	@ 0x34
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	4798      	blx	r3
    }
}
 800d156:	bf00      	nop
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f006 fea8 	bl	8013ec0 <_ZN8touchgfx6ScreenC1Ev>
 800d170:	4a05      	ldr	r2, [pc, #20]	@ (800d188 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4618      	mov	r0, r3
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	08025454 	.word	0x08025454

0800d18c <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	4a05      	ldr	r2, [pc, #20]	@ (800d1ac <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fc1d 	bl	800c9dc <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	08025488 	.word	0x08025488

0800d1b0 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ffe7 	bl	800d18c <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800d1be:	2134      	movs	r1, #52	@ 0x34
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f016 faf2 	bl	80237aa <_ZdlPvj>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	4a05      	ldr	r2, [pc, #20]	@ (800d1f0 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff fb53 	bl	800c88c <_ZN8touchgfx3BoxD1Ev>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	08025df4 	.word	0x08025df4

0800d1f4 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff ffe7 	bl	800d1d0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800d202:	2134      	movs	r1, #52	@ 0x34
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f016 fad0 	bl	80237aa <_ZdlPvj>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4618      	mov	r0, r3
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	4a08      	ldr	r2, [pc, #32]	@ (800d240 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3334      	adds	r3, #52	@ 0x34
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff ffd2 	bl	800d1d0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4618      	mov	r0, r3
 800d230:	f7ff ffac 	bl	800d18c <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4618      	mov	r0, r3
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	080253b8 	.word	0x080253b8

0800d244 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff ffe1 	bl	800d214 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800d252:	2178      	movs	r1, #120	@ 0x78
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f016 faa8 	bl	80237aa <_ZdlPvj>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4618      	mov	r0, r3
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
 */
template <class T>
class IconButtonStyle : public T
{
public:
    IconButtonStyle()
 800d264:	b590      	push	{r4, r7, lr}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
        : T()
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 f842 	bl	800d2f8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800d274:	4a16      	ldr	r2, [pc, #88]	@ (800d2d0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x6c>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3378      	adds	r3, #120	@ 0x78
 800d27e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d282:	4618      	mov	r0, r3
 800d284:	f7fe fec8 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	337a      	adds	r3, #122	@ 0x7a
 800d28c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe fec1 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800d29c:	f107 030c 	add.w	r3, r7, #12
 800d2a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fe feb7 	bl	800c018 <_ZN8touchgfx6BitmapC1Et>
 800d2aa:	f107 030c 	add.w	r3, r7, #12
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f7ff f9bd 	bl	800c630 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    {
        T::add(iconImage);
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	337c      	adds	r3, #124	@ 0x7c
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f002 fe3c 	bl	800ff3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd90      	pop	{r4, r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	08025318 	.word	0x08025318

0800d2d4 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fa3a 	bl	800c758 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800d2e4:	4a03      	ldr	r2, [pc, #12]	@ (800d2f4 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	08025488 	.word	0x08025488

0800d2f8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
{
public:
    BoxWithBorderButtonStyle()
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4618      	mov	r0, r3
 800d304:	2334      	movs	r3, #52	@ 0x34
 800d306:	461a      	mov	r2, r3
 800d308:	2100      	movs	r1, #0
 800d30a:	f016 fc84 	bl	8023c16 <memset>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff ffdf 	bl	800d2d4 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 800d316:	4a17      	ldr	r2, [pc, #92]	@ (800d374 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	3334      	adds	r3, #52	@ 0x34
 800d320:	4618      	mov	r0, r3
 800d322:	f7ff fad5 	bl	800c8d0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3368      	adds	r3, #104	@ 0x68
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe fe40 	bl	800bfb0 <_ZN8touchgfx9colortypeC1Ev>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	336c      	adds	r3, #108	@ 0x6c
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe fe3b 	bl	800bfb0 <_ZN8touchgfx9colortypeC1Ev>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3370      	adds	r3, #112	@ 0x70
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fe fe36 	bl	800bfb0 <_ZN8touchgfx9colortypeC1Ev>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	3374      	adds	r3, #116	@ 0x74
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe fe31 	bl	800bfb0 <_ZN8touchgfx9colortypeC1Ev>
    {
        borderBox.setXY(0, 0);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	3334      	adds	r3, #52	@ 0x34
 800d352:	2200      	movs	r2, #0
 800d354:	2100      	movs	r1, #0
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe ff41 	bl	800c1de <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3334      	adds	r3, #52	@ 0x34
 800d362:	4619      	mov	r1, r3
 800d364:	4610      	mov	r0, r2
 800d366:	f002 fde9 	bl	800ff3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	080253b8 	.word	0x080253b8

0800d378 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	4a04      	ldr	r2, [pc, #16]	@ (800d394 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4618      	mov	r0, r3
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	08025524 	.word	0x08025524

0800d398 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7ff ffe4 	bl	800d378 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 800d3b0:	4a08      	ldr	r2, [pc, #32]	@ (800d3d4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	605a      	str	r2, [r3, #4]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3308      	adds	r3, #8
 800d3c0:	463a      	mov	r2, r7
 800d3c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	08025300 	.word	0x08025300

0800d3d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d3d8:	b590      	push	{r4, r7, lr}
 800d3da:	b087      	sub	sp, #28
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	4608      	mov	r0, r1
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	817b      	strh	r3, [r7, #10]
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	813b      	strh	r3, [r7, #8]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800d3f8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800d3fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d400:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	4623      	mov	r3, r4
 800d40c:	f7fe fe8e 	bl	800c12c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800d410:	bf00      	nop
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	bd90      	pop	{r4, r7, pc}

0800d418 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3334      	adds	r3, #52	@ 0x34
 800d428:	78fa      	ldrb	r2, [r7, #3]
 800d42a:	b292      	uxth	r2, r2
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fa78 	bl	800c924 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 800d434:	bf00      	nop
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	669a      	str	r2, [r3, #104]	@ 0x68
        down = colorPressed;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	66da      	str	r2, [r3, #108]	@ 0x6c
        borderUp = borderColorReleased;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	683a      	ldr	r2, [r7, #0]
 800d45a:	671a      	str	r2, [r3, #112]	@ 0x70
        borderDown = borderColorPressed;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	69ba      	ldr	r2, [r7, #24]
 800d460:	675a      	str	r2, [r3, #116]	@ 0x74
        handlePressedUpdated();
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	338c      	adds	r3, #140	@ 0x8c
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	4798      	blx	r3
    }
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
     * Sets icon bitmaps.
     *
     * @param  newIconReleased The new icon released.
     * @param  newIconPressed  The new icon pressed.
     */
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 800d476:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d478:	b085      	sub	sp, #20
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	60f8      	str	r0, [r7, #12]
 800d47e:	60b9      	str	r1, [r7, #8]
 800d480:	607a      	str	r2, [r7, #4]
    {
        iconReleased = newIconReleased;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	8812      	ldrh	r2, [r2, #0]
 800d488:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
        iconPressed = newIconPressed;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	8812      	ldrh	r2, [r2, #0]
 800d492:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f103 057c 	add.w	r5, r3, #124	@ 0x7c
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fe fe65 	bl	800c16e <_ZNK8touchgfx8Drawable8getWidthEv>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	da00      	bge.n	800d4ac <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	105b      	asrs	r3, r3, #1
 800d4ae:	b21b      	sxth	r3, r3
 800d4b0:	b29c      	uxth	r4, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f007 fe92 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	da00      	bge.n	800d4c0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x4a>
 800d4be:	3301      	adds	r3, #1
 800d4c0:	105b      	asrs	r3, r3, #1
 800d4c2:	b21b      	sxth	r3, r3
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	1ae3      	subs	r3, r4, r3
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	b21e      	sxth	r6, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7fe fe5a 	bl	800c188 <_ZNK8touchgfx8Drawable9getHeightEv>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da00      	bge.n	800d4dc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x66>
 800d4da:	3301      	adds	r3, #1
 800d4dc:	105b      	asrs	r3, r3, #1
 800d4de:	b21b      	sxth	r3, r3
 800d4e0:	b29c      	uxth	r4, r3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f007 feae 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	da00      	bge.n	800d4f0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x7a>
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	105b      	asrs	r3, r3, #1
 800d4f2:	b21b      	sxth	r3, r3
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	1ae3      	subs	r3, r4, r3
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	b21b      	sxth	r3, r3
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	4631      	mov	r1, r6
 800d500:	4628      	mov	r0, r5
 800d502:	f7fe fe6c 	bl	800c1de <_ZN8touchgfx8Drawable5setXYEss>

        handlePressedUpdated();
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	338c      	adds	r3, #140	@ 0x8c
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	4798      	blx	r3
    }
 800d512:	bf00      	nop
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d51a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>:
     * Sets the position of the icon.
     *
     * @param  x The x coordinate.
     * @param  y The y coordinate.
     */
    void setIconXY(int16_t x, int16_t y)
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b082      	sub	sp, #8
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	460b      	mov	r3, r1
 800d524:	807b      	strh	r3, [r7, #2]
 800d526:	4613      	mov	r3, r2
 800d528:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800d52a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 f87c 	bl	800d62e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 800d536:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f888 	bl	800d652 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>
    }
 800d542:	bf00      	nop
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
    }
 800d554:	4a04      	ldr	r2, [pc, #16]	@ (800d568 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	601a      	str	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4618      	mov	r0, r3
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	08025524 	.word	0x08025524

0800d56c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
    }
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff ffe9 	bl	800d54c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800d57a:	2104      	movs	r1, #4
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f016 f914 	bl	80237aa <_ZdlPvj>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800d58c:	b590      	push	{r4, r7, lr}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff f911 	bl	800c7c4 <_ZNK8touchgfx23AbstractButtonContainer10getPressedEv>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	336c      	adds	r3, #108	@ 0x6c
 800d5ac:	e001      	b.n	800d5b2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3368      	adds	r3, #104	@ 0x68
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f7ff f81d 	bl	800c5f4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff f8fe 	bl	800c7c4 <_ZNK8touchgfx23AbstractButtonContainer10getPressedEv>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3374      	adds	r3, #116	@ 0x74
 800d5d2:	e001      	b.n	800d5d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3370      	adds	r3, #112	@ 0x70
 800d5d8:	6819      	ldr	r1, [r3, #0]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f7ff f994 	bl	800c908 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff f93d 	bl	800c862 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800d5e8:	bf00      	nop
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd90      	pop	{r4, r7, pc}

0800d5f0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    Bitmap iconReleased; ///< Icon to display when button is not pressed.
    Bitmap iconPressed;  ///< Icon to display when button is pressed.
    Image iconImage;     ///< The icon image

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800d5f0:	b590      	push	{r4, r7, lr}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
    {
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff f8df 	bl	800c7c4 <_ZNK8touchgfx23AbstractButtonContainer10getPressedEv>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	337a      	adds	r3, #122	@ 0x7a
 800d610:	e001      	b.n	800d616 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	3378      	adds	r3, #120	@ 0x78
 800d616:	4619      	mov	r1, r3
 800d618:	4620      	mov	r0, r4
 800d61a:	f004 f89c 	bl	8011756 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff ffb3 	bl	800d58c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 800d626:	bf00      	nop
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd90      	pop	{r4, r7, pc}

0800d62e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	460b      	mov	r3, r1
 800d638:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	337c      	adds	r3, #124	@ 0x7c
 800d63e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d642:	4611      	mov	r1, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe fdac 	bl	800c1a2 <_ZN8touchgfx8Drawable4setXEs>
    }
 800d64a:	bf00      	nop
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 800d652:	b580      	push	{r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	460b      	mov	r3, r1
 800d65c:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	337c      	adds	r3, #124	@ 0x7c
 800d662:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d666:	4611      	mov	r1, r2
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fe fda9 	bl	800c1c0 <_ZN8touchgfx8Drawable4setYEs>
    }
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
	...

0800d678 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	4a05      	ldr	r2, [pc, #20]	@ (800d698 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff ff5f 	bl	800d54c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4618      	mov	r0, r3
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	08025300 	.word	0x08025300

0800d69c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7ff ffe7 	bl	800d678 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800d6aa:	2110      	movs	r1, #16
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f016 f87c 	bl	80237aa <_ZdlPvj>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
class IconButtonStyle : public T
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	4a08      	ldr	r2, [pc, #32]	@ (800d6e8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	601a      	str	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	337c      	adds	r3, #124	@ 0x7c
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fe ffe4 	bl	800c69c <_ZN8touchgfx5ImageD1Ev>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fd9c 	bl	800d214 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	08025318 	.word	0x08025318

0800d6ec <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7ff ffe1 	bl	800d6bc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 800d6fa:	21a8      	movs	r1, #168	@ 0xa8
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f016 f854 	bl	80237aa <_ZdlPvj>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	4a05      	ldr	r2, [pc, #20]	@ (800d72c <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	601a      	str	r2, [r3, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe ffbd 	bl	800c69c <_ZN8touchgfx5ImageD1Ev>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	08025d70 	.word	0x08025d70

0800d730 <_ZN8touchgfx10TiledImageD0Ev>:
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff ffe7 	bl	800d70c <_ZN8touchgfx10TiledImageD1Ev>
 800d73e:	2130      	movs	r1, #48	@ 0x30
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f016 f832 	bl	80237aa <_ZdlPvj>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	68d2      	ldr	r2, [r2, #12]
 800d762:	1052      	asrs	r2, r2, #1
 800d764:	1898      	adds	r0, r3, r2
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	f003 0301 	and.w	r3, r3, #1
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d102      	bne.n	800d778 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	e00a      	b.n	800d78e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	68d2      	ldr	r2, [r2, #12]
 800d780:	1052      	asrs	r2, r2, #1
 800d782:	4413      	add	r3, r2
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	6892      	ldr	r2, [r2, #8]
 800d78a:	4413      	add	r3, r2
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	4798      	blx	r3
    }
 800d792:	bf00      	nop
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 800d79a:	b480      	push	{r7}
 800d79c:	b083      	sub	sp, #12
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d010      	beq.n	800d7cc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d107      	bne.n	800d7c2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	f003 0301 	and.w	r3, r3, #1
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e000      	b.n	800d7c4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d001      	beq.n	800d7cc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e000      	b.n	800d7ce <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 800d7cc:	2300      	movs	r3, #0
    }
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800d7da:	b590      	push	{r4, r7, lr}
 800d7dc:	b083      	sub	sp, #12
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
    {
        iconImage.setAlpha(T::getAlpha());
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe fff7 	bl	800c7de <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f7fe ff41 	bl	800c67c <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 f804 	bl	800d80a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 800d802:	bf00      	nop
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	bd90      	pop	{r4, r7, pc}

0800d80a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800d80a:	b590      	push	{r4, r7, lr}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fe ffdf 	bl	800c7de <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800d820:	4603      	mov	r3, r0
 800d822:	4619      	mov	r1, r3
 800d824:	4620      	mov	r0, r4
 800d826:	f7fe fef3 	bl	800c610 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff f822 	bl	800c876 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800d832:	bf00      	nop
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	bd90      	pop	{r4, r7, pc}
	...

0800d83c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800d840:	4b02      	ldr	r3, [pc, #8]	@ (800d84c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800d842:	4618      	mov	r0, r3
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	08025638 	.word	0x08025638

0800d850 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800d850:	b480      	push	{r7}
 800d852:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800d854:	2303      	movs	r3, #3
}
 800d856:	4618      	mov	r0, r3
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800d860:	b480      	push	{r7}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	460b      	mov	r3, r1
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	817b      	strh	r3, [r7, #10]
        return 0;
 800d86e:	2300      	movs	r3, #0
    }
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
        return 0;
 800d884:	2300      	movs	r3, #0
    }
 800d886:	4618      	mov	r0, r3
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d892:	b480      	push	{r7}
 800d894:	b083      	sub	sp, #12
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
        return 0;
 800d89a:	2300      	movs	r3, #0
    }
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800d8b6:	4a07      	ldr	r2, [pc, #28]	@ (800d8d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6013      	str	r3, [r2, #0]
        fonts = f;
 800d8bc:	4a06      	ldr	r2, [pc, #24]	@ (800d8d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800d8c2:	4a06      	ldr	r2, [pc, #24]	@ (800d8dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800d8c4:	88fb      	ldrh	r3, [r7, #6]
 800d8c6:	8013      	strh	r3, [r2, #0]
    }
 800d8c8:	bf00      	nop
 800d8ca:	3714      	adds	r7, #20
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr
 800d8d4:	20001e44 	.word	0x20001e44
 800d8d8:	20001e4c 	.word	0x20001e4c
 800d8dc:	20001e48 	.word	0x20001e48

0800d8e0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d8e0:	b40e      	push	{r1, r2, r3}
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b085      	sub	sp, #20
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800d8ea:	f107 0320 	add.w	r3, r7, #32
 800d8ee:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	69fa      	ldr	r2, [r7, #28]
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f005 ff18 	bl	801372c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d900:	89fb      	ldrh	r3, [r7, #14]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d90c:	b003      	add	sp, #12
 800d90e:	4770      	bx	lr

0800d910 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d910:	b40c      	push	{r2, r3}
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800d91e:	f107 031c 	add.w	r3, r7, #28
 800d922:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800d924:	78f9      	ldrb	r1, [r7, #3]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	69ba      	ldr	r2, [r7, #24]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f005 fefe 	bl	801372c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d930:	4603      	mov	r3, r0
 800d932:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d934:	89fb      	ldrh	r3, [r7, #14]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d940:	b002      	add	sp, #8
 800d942:	4770      	bx	lr

0800d944 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08a      	sub	sp, #40	@ 0x28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d954:	2b00      	cmp	r3, #0
 800d956:	d016      	beq.n	800d986 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3322      	adds	r3, #34	@ 0x22
 800d95c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	8adb      	ldrh	r3, [r3, #22]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d105      	bne.n	800d972 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800d966:	4b43      	ldr	r3, [pc, #268]	@ (800da74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800d968:	4a43      	ldr	r2, [pc, #268]	@ (800da78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800d96a:	21c5      	movs	r1, #197	@ 0xc5
 800d96c:	4843      	ldr	r0, [pc, #268]	@ (800da7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d96e:	f015 ff4b 	bl	8023808 <__assert_func>
            return buffer[pos];
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	8a9b      	ldrh	r3, [r3, #20]
 800d976:	461a      	mov	r2, r3
 800d978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d982:	2301      	movs	r3, #1
 800d984:	e000      	b.n	800d988 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800d986:	2300      	movs	r3, #0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d06a      	beq.n	800da62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f007 f93d 	bl	8014c0c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3322      	adds	r3, #34	@ 0x22
 800d996:	623b      	str	r3, [r7, #32]
 800d998:	2301      	movs	r3, #1
 800d99a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	8adb      	ldrh	r3, [r3, #22]
 800d9a0:	8bfa      	ldrh	r2, [r7, #30]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d305      	bcc.n	800d9b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800d9a6:	4b36      	ldr	r3, [pc, #216]	@ (800da80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800d9a8:	4a36      	ldr	r2, [pc, #216]	@ (800da84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800d9aa:	21cb      	movs	r1, #203	@ 0xcb
 800d9ac:	4833      	ldr	r0, [pc, #204]	@ (800da7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d9ae:	f015 ff2b 	bl	8023808 <__assert_func>
            const uint16_t index = pos + offset;
 800d9b2:	6a3b      	ldr	r3, [r7, #32]
 800d9b4:	8a9a      	ldrh	r2, [r3, #20]
 800d9b6:	8bfb      	ldrh	r3, [r7, #30]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800d9bc:	8bbb      	ldrh	r3, [r7, #28]
 800d9be:	2b09      	cmp	r3, #9
 800d9c0:	d801      	bhi.n	800d9c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800d9c2:	8bbb      	ldrh	r3, [r7, #28]
 800d9c4:	e001      	b.n	800d9ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800d9c6:	8bbb      	ldrh	r3, [r7, #28]
 800d9c8:	3b0a      	subs	r3, #10
 800d9ca:	6a3a      	ldr	r2, [r7, #32]
 800d9cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9d0:	f640 123f 	movw	r2, #2367	@ 0x93f
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	bf0c      	ite	eq
 800d9d8:	2301      	moveq	r3, #1
 800d9da:	2300      	movne	r3, #0
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d03f      	beq.n	800da62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3322      	adds	r3, #34	@ 0x22
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	3222      	adds	r2, #34	@ 0x22
 800d9ea:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	8ad2      	ldrh	r2, [r2, #22]
 800d9f0:	2a00      	cmp	r2, #0
 800d9f2:	d105      	bne.n	800da00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800d9f4:	4b1f      	ldr	r3, [pc, #124]	@ (800da74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800d9f6:	4a20      	ldr	r2, [pc, #128]	@ (800da78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800d9f8:	21c5      	movs	r1, #197	@ 0xc5
 800d9fa:	4820      	ldr	r0, [pc, #128]	@ (800da7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d9fc:	f015 ff04 	bl	8023808 <__assert_func>
            return buffer[pos];
 800da00:	68ba      	ldr	r2, [r7, #8]
 800da02:	8a92      	ldrh	r2, [r2, #20]
 800da04:	4611      	mov	r1, r2
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	4613      	mov	r3, r2
 800da10:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	8adb      	ldrh	r3, [r3, #22]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d806      	bhi.n	800da28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800da1a:	4b1b      	ldr	r3, [pc, #108]	@ (800da88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800da1c:	4a1b      	ldr	r2, [pc, #108]	@ (800da8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800da1e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800da22:	4816      	ldr	r0, [pc, #88]	@ (800da7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800da24:	f015 fef0 	bl	8023808 <__assert_func>
            const uint16_t index = pos + 1;
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	8a9b      	ldrh	r3, [r3, #20]
 800da2c:	3301      	adds	r3, #1
 800da2e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800da30:	89bb      	ldrh	r3, [r7, #12]
 800da32:	2b09      	cmp	r3, #9
 800da34:	d801      	bhi.n	800da3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800da36:	89bb      	ldrh	r3, [r7, #12]
 800da38:	e000      	b.n	800da3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800da3a:	2300      	movs	r3, #0
 800da3c:	693a      	ldr	r2, [r7, #16]
 800da3e:	89f9      	ldrh	r1, [r7, #14]
 800da40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800da44:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	3322      	adds	r3, #34	@ 0x22
 800da4a:	61bb      	str	r3, [r7, #24]
 800da4c:	f640 133f 	movw	r3, #2367	@ 0x93f
 800da50:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	8a9b      	ldrh	r3, [r3, #20]
 800da56:	4619      	mov	r1, r3
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	8afa      	ldrh	r2, [r7, #22]
 800da5c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800da60:	bf00      	nop
        }
    }
    return getNextChar();
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f006 ffd4 	bl	8014a10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800da68:	4603      	mov	r3, r0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3728      	adds	r7, #40	@ 0x28
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	08024b34 	.word	0x08024b34
 800da78:	08024b40 	.word	0x08024b40
 800da7c:	08024bec 	.word	0x08024bec
 800da80:	08024c34 	.word	0x08024c34
 800da84:	08024c44 	.word	0x08024c44
 800da88:	08024d18 	.word	0x08024d18
 800da8c:	08024d24 	.word	0x08024d24

0800da90 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f006 ff82 	bl	80149a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800da9e:	bf00      	nop
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
	...

0800daa8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	4603      	mov	r3, r0
 800dab0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800dab6:	88fb      	ldrh	r3, [r7, #6]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d127      	bne.n	800db0c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800dabc:	88fb      	ldrh	r3, [r7, #6]
 800dabe:	4a1e      	ldr	r2, [pc, #120]	@ (800db38 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800dac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d016      	beq.n	800daf6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800dac8:	88fb      	ldrh	r3, [r7, #6]
 800daca:	4a1b      	ldr	r2, [pc, #108]	@ (800db38 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800dacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dad0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	4413      	add	r3, r2
 800dada:	4a18      	ldr	r2, [pc, #96]	@ (800db3c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800dadc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	4413      	add	r3, r2
 800dae6:	4a16      	ldr	r2, [pc, #88]	@ (800db40 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800dae8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	4413      	add	r3, r2
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	e00a      	b.n	800db0c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800daf6:	4b11      	ldr	r3, [pc, #68]	@ (800db3c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800daf8:	4a12      	ldr	r2, [pc, #72]	@ (800db44 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800dafa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800dafc:	4a12      	ldr	r2, [pc, #72]	@ (800db48 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800dafe:	4b10      	ldr	r3, [pc, #64]	@ (800db40 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800db00:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800db02:	88fb      	ldrh	r3, [r7, #6]
 800db04:	4a11      	ldr	r2, [pc, #68]	@ (800db4c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800db06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db0a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00d      	beq.n	800db2e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800db12:	4a0f      	ldr	r2, [pc, #60]	@ (800db50 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800db14:	88fb      	ldrh	r3, [r7, #6]
 800db16:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800db18:	f000 f824 	bl	800db64 <_ZN17TypedTextDatabase8getFontsEv>
 800db1c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800db1e:	f000 f819 	bl	800db54 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800db22:	4603      	mov	r3, r0
 800db24:	461a      	mov	r2, r3
 800db26:	4621      	mov	r1, r4
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f7ff febd 	bl	800d8a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800db2e:	bf00      	nop
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	bd90      	pop	{r4, r7, pc}
 800db36:	bf00      	nop
 800db38:	20000aec 	.word	0x20000aec
 800db3c:	20000af4 	.word	0x20000af4
 800db40:	20000af8 	.word	0x20000af8
 800db44:	080265d8 	.word	0x080265d8
 800db48:	080265d4 	.word	0x080265d4
 800db4c:	080265e0 	.word	0x080265e0
 800db50:	20000af0 	.word	0x20000af0

0800db54 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800db54:	b480      	push	{r7}
 800db56:	af00      	add	r7, sp, #0
    return 0;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800db64:	b480      	push	{r7}
 800db66:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800db68:	4b02      	ldr	r3, [pc, #8]	@ (800db74 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr
 800db74:	20000afc 	.word	0x20000afc

0800db78 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d113      	bne.n	800dbb0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db8e:	4293      	cmp	r3, r2
 800db90:	d10e      	bne.n	800dbb0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800db92:	f7fd fc0f 	bl	800b3b4 <_Z23getFont_verdana_20_4bppv>
 800db96:	4603      	mov	r3, r0
};
 800db98:	4a07      	ldr	r2, [pc, #28]	@ (800dbb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800db9a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800db9c:	f7fd fc64 	bl	800b468 <_Z23getFont_verdana_40_4bppv>
 800dba0:	4603      	mov	r3, r0
};
 800dba2:	4a05      	ldr	r2, [pc, #20]	@ (800dbb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800dba4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800dba6:	f7fd fbab 	bl	800b300 <_Z23getFont_verdana_10_4bppv>
 800dbaa:	4603      	mov	r3, r0
};
 800dbac:	4a02      	ldr	r2, [pc, #8]	@ (800dbb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800dbae:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800dbb0:	bf00      	nop
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20000afc 	.word	0x20000afc

0800dbbc <_GLOBAL__sub_I_touchgfx_fonts>:
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800dbc4:	2001      	movs	r0, #1
 800dbc6:	f7ff ffd7 	bl	800db78 <_Z41__static_initialization_and_destruction_0ii>
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	4a05      	ldr	r2, [pc, #20]	@ (800dbec <_ZN19FrontendApplicationD1Ev+0x20>)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fd fea3 	bl	800b928 <_ZN23FrontendApplicationBaseD1Ev>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	080256e0 	.word	0x080256e0

0800dbf0 <_ZN19FrontendApplicationD0Ev>:
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff ffe7 	bl	800dbcc <_ZN19FrontendApplicationD1Ev>
 800dbfe:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f015 fdd1 	bl	80237aa <_ZdlPvj>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b082      	sub	sp, #8
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800dc20:	4618      	mov	r0, r3
 800dc22:	f000 f82d 	bl	800dc80 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f004 feb3 	bl	8012994 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800dc2e:	bf00      	nop
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
	...

0800dc38 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	68b9      	ldr	r1, [r7, #8]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fd febc 	bl	800b9c8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800dc50:	4a03      	ldr	r2, [pc, #12]	@ (800dc60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	601a      	str	r2, [r3, #0]
{

}
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	080256e0 	.word	0x080256e0

0800dc64 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	601a      	str	r2, [r3, #0]
{

}
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4618      	mov	r0, r3
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <_ZN5Model4tickEv>:

void Model::tick()
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]

}
 800dc88:	bf00      	nop
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
    {
    }
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
    {
    }
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
    {
 800dcc4:	4a04      	ldr	r2, [pc, #16]	@ (800dcd8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	601a      	str	r2, [r3, #0]
    }
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4618      	mov	r0, r3
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	0802576c 	.word	0x0802576c

0800dcdc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
    }
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff ffe9 	bl	800dcbc <_ZN8touchgfx9PresenterD1Ev>
 800dcea:	2104      	movs	r1, #4
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f015 fd5c 	bl	80237aa <_ZdlPvj>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
    {
 800dd04:	4a04      	ldr	r2, [pc, #16]	@ (800dd18 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	601a      	str	r2, [r3, #0]
    }
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	0802576c 	.word	0x0802576c

0800dd1c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	4a06      	ldr	r2, [pc, #24]	@ (800dd40 <_ZN13ModelListenerC1Ev+0x24>)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	601a      	str	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	605a      	str	r2, [r3, #4]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4618      	mov	r0, r3
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	0802575c 	.word	0x0802575c

0800dd44 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	4a04      	ldr	r2, [pc, #16]	@ (800dd60 <_ZN13ModelListenerD1Ev+0x1c>)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4618      	mov	r0, r3
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	0802575c 	.word	0x0802575c

0800dd64 <_ZN13ModelListenerD0Ev>:
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff ffe9 	bl	800dd44 <_ZN13ModelListenerD1Ev>
 800dd72:	2108      	movs	r1, #8
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f015 fd18 	bl	80237aa <_ZdlPvj>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	4a09      	ldr	r2, [pc, #36]	@ (800ddb4 <_ZN16Screen1PresenterD1Ev+0x30>)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	4a09      	ldr	r2, [pc, #36]	@ (800ddb8 <_ZN16Screen1PresenterD1Ev+0x34>)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	605a      	str	r2, [r3, #4]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff ffd1 	bl	800dd44 <_ZN13ModelListenerD1Ev>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7ff ff89 	bl	800dcbc <_ZN8touchgfx9PresenterD1Ev>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	08025734 	.word	0x08025734
 800ddb8:	0802574c 	.word	0x0802574c

0800ddbc <_ZThn4_N16Screen1PresenterD1Ev>:
 800ddbc:	f1a0 0004 	sub.w	r0, r0, #4
 800ddc0:	e7e0      	b.n	800dd84 <_ZN16Screen1PresenterD1Ev>
 800ddc2:	bf00      	nop

0800ddc4 <_ZN16Screen1PresenterD0Ev>:
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff ffd9 	bl	800dd84 <_ZN16Screen1PresenterD1Ev>
 800ddd2:	2110      	movs	r1, #16
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f015 fce8 	bl	80237aa <_ZdlPvj>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZThn4_N16Screen1PresenterD0Ev>:
 800dde4:	f1a0 0004 	sub.w	r0, r0, #4
 800dde8:	e7ec      	b.n	800ddc4 <_ZN16Screen1PresenterD0Ev>
	...

0800ddec <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
    : view(v)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7ff ff7f 	bl	800dcfc <_ZN8touchgfx9PresenterC1Ev>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	3304      	adds	r3, #4
 800de02:	4618      	mov	r0, r3
 800de04:	f7ff ff8a 	bl	800dd1c <_ZN13ModelListenerC1Ev>
 800de08:	4a06      	ldr	r2, [pc, #24]	@ (800de24 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	4a06      	ldr	r2, [pc, #24]	@ (800de28 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	605a      	str	r2, [r3, #4]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	60da      	str	r2, [r3, #12]
{

}
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	08025734 	.word	0x08025734
 800de28:	0802574c 	.word	0x0802574c

0800de2c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]

}
 800de34:	bf00      	nop
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]

}
 800de48:	bf00      	nop
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	4a05      	ldr	r2, [pc, #20]	@ (800de74 <_ZN11Screen1ViewD1Ev+0x20>)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4618      	mov	r0, r3
 800de66:	f7ff f8ff 	bl	800d068 <_ZN15Screen1ViewBaseD1Ev>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4618      	mov	r0, r3
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	08025784 	.word	0x08025784

0800de78 <_ZN11Screen1ViewD0Ev>:
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7ff ffe7 	bl	800de54 <_ZN11Screen1ViewD1Ev>
 800de86:	f44f 711d 	mov.w	r1, #628	@ 0x274
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f015 fc8d 	bl	80237aa <_ZdlPvj>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4618      	mov	r0, r3
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
	...

0800de9c <_ZN11Screen1ViewC1Ev>:

#define bool LIBRARY_bool
#include "x_nucleo_ihmxx.h"
#undef bool

Screen1View::Screen1View()
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fe fdfa 	bl	800caa0 <_ZN15Screen1ViewBaseC1Ev>
 800deac:	4a03      	ldr	r2, [pc, #12]	@ (800debc <_ZN11Screen1ViewC1Ev+0x20>)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	601a      	str	r2, [r3, #0]
{

}
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	08025784 	.word	0x08025784

0800dec0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff f911 	bl	800d0f2 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800ded0:	bf00      	nop
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fe fafe 	bl	800c4e4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800dee8:	bf00      	nop
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_ZN11Screen1View9leftArrowEv>:

void Screen1View::leftArrow()
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	// Override and implement this function in Screen1
	BSP_MotorControl_Move(0, BACKWARD, 1600);
 800def8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800defc:	2100      	movs	r1, #0
 800defe:	2000      	movs	r0, #0
 800df00:	f7f6 fc70 	bl	80047e4 <BSP_MotorControl_Move>
}
 800df04:	bf00      	nop
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <_ZN11Screen1View10rightArrowEv>:
void Screen1View::rightArrow()
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
	// Override and implement this function in Screen1
	BSP_MotorControl_Move(0, FORWARD, 1600);
 800df14:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800df18:	2101      	movs	r1, #1
 800df1a:	2000      	movs	r0, #0
 800df1c:	f7f6 fc62 	bl	80047e4 <BSP_MotorControl_Move>
}
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <_ZN11Screen1View4stopEv>:
void Screen1View::stop()
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
	// Override and implement this function in Screen1
	BSP_MotorControl_CmdSoftHiZ(0);
 800df30:	2000      	movs	r0, #0
 800df32:	f7f6 fcc3 	bl	80048bc <BSP_MotorControl_CmdSoftHiZ>
}
 800df36:	bf00      	nop
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
    {
 800df48:	4a04      	ldr	r2, [pc, #16]	@ (800df5c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
    }
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4618      	mov	r0, r3
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	080257dc 	.word	0x080257dc

0800df60 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
    }
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7ff ffe9 	bl	800df40 <_ZN8touchgfx15TouchControllerD1Ev>
 800df6e:	2104      	movs	r1, #4
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f015 fc1a 	bl	80237aa <_ZdlPvj>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800df88:	4b05      	ldr	r3, [pc, #20]	@ (800dfa0 <_ZN20STM32TouchController4initEv+0x20>)
 800df8a:	4a06      	ldr	r2, [pc, #24]	@ (800dfa4 <_ZN20STM32TouchController4initEv+0x24>)
 800df8c:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(FT5336_I2C_SLAVE_ADDRESS);
 800df8e:	4b04      	ldr	r3, [pc, #16]	@ (800dfa0 <_ZN20STM32TouchController4initEv+0x20>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	2070      	movs	r0, #112	@ 0x70
 800df96:	4798      	blx	r3
}
 800df98:	bf00      	nop
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	20000b08 	.word	0x20000b08
 800dfa4:	20000008 	.word	0x20000008

0800dfa8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 800dfb4:	4b14      	ldr	r3, [pc, #80]	@ (800e008 <_ZN20STM32TouchController11sampleTouchERlS0_+0x60>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d01f      	beq.n	800dffc <_ZN20STM32TouchController11sampleTouchERlS0_+0x54>
	{
		if (tsDriver->DetectTouch(FT5336_I2C_SLAVE_ADDRESS))
 800dfbc:	4b12      	ldr	r3, [pc, #72]	@ (800e008 <_ZN20STM32TouchController11sampleTouchERlS0_+0x60>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	2070      	movs	r0, #112	@ 0x70
 800dfc4:	4798      	blx	r3
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	bf14      	ite	ne
 800dfcc:	2301      	movne	r3, #1
 800dfce:	2300      	moveq	r3, #0
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d012      	beq.n	800dffc <_ZN20STM32TouchController11sampleTouchERlS0_+0x54>
		{
			/* Get each touch coordinates */
			uint16_t _x, _y;
			tsDriver->GetXY(FT5336_I2C_SLAVE_ADDRESS, &_y, &_x);
 800dfd6:	4b0c      	ldr	r3, [pc, #48]	@ (800e008 <_ZN20STM32TouchController11sampleTouchERlS0_+0x60>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	f107 0216 	add.w	r2, r7, #22
 800dfe0:	f107 0114 	add.w	r1, r7, #20
 800dfe4:	2070      	movs	r0, #112	@ 0x70
 800dfe6:	4798      	blx	r3
			x = (int32_t)_x;
 800dfe8:	8afb      	ldrh	r3, [r7, #22]
 800dfea:	461a      	mov	r2, r3
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	601a      	str	r2, [r3, #0]
			y = (int32_t)_y;
 800dff0:	8abb      	ldrh	r3, [r7, #20]
 800dff2:	461a      	mov	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	601a      	str	r2, [r3, #0]
			return true;
 800dff8:	2301      	movs	r3, #1
 800dffa:	e000      	b.n	800dffe <_ZN20STM32TouchController11sampleTouchERlS0_+0x56>
		}
	}
	return false;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20000b08 	.word	0x20000b08

0800e00c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	4a05      	ldr	r2, [pc, #20]	@ (800e02c <_ZN20STM32TouchControllerD1Ev+0x20>)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7ff ff8f 	bl	800df40 <_ZN8touchgfx15TouchControllerD1Ev>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4618      	mov	r0, r3
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	080257c4 	.word	0x080257c4

0800e030 <_ZN20STM32TouchControllerD0Ev>:
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7ff ffe7 	bl	800e00c <_ZN20STM32TouchControllerD1Ev>
 800e03e:	2104      	movs	r1, #4
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f015 fbb2 	bl	80237aa <_ZdlPvj>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4618      	mov	r0, r3
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800e050:	b480      	push	{r7}
 800e052:	af00      	add	r7, sp, #0

}
 800e054:	bf00      	nop
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
	...

0800e060 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	4603      	mov	r3, r0
 800e068:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e06a:	79fb      	ldrb	r3, [r7, #7]
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	d80c      	bhi.n	800e08a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800e070:	a201      	add	r2, pc, #4	@ (adr r2, 800e078 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800e072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e076:	bf00      	nop
 800e078:	0800e089 	.word	0x0800e089
 800e07c:	0800e089 	.word	0x0800e089
 800e080:	0800e089 	.word	0x0800e089
 800e084:	0800e089 	.word	0x0800e089
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800e088:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800e08a:	bf00      	nop
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop

0800e098 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	4603      	mov	r3, r0
 800e0a0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	2b03      	cmp	r3, #3
 800e0a6:	d80c      	bhi.n	800e0c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800e0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e0c1 	.word	0x0800e0c1
 800e0b4:	0800e0c1 	.word	0x0800e0c1
 800e0b8:	0800e0c1 	.word	0x0800e0c1
 800e0bc:	0800e0c1 	.word	0x0800e0c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800e0c0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800e0c2:	bf00      	nop
 800e0c4:	370c      	adds	r7, #12
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop

0800e0d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e0da:	79fb      	ldrb	r3, [r7, #7]
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d80c      	bhi.n	800e0fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800e0e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e0e8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800e0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e6:	bf00      	nop
 800e0e8:	0800e0f9 	.word	0x0800e0f9
 800e0ec:	0800e0f9 	.word	0x0800e0f9
 800e0f0:	0800e0f9 	.word	0x0800e0f9
 800e0f4:	0800e0f9 	.word	0x0800e0f9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800e0f8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800e0fa:	bf00      	nop
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop

0800e108 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
    {
 800e110:	4a04      	ldr	r2, [pc, #16]	@ (800e124 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	601a      	str	r2, [r3, #0]
    }
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4618      	mov	r0, r3
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	08025bbc 	.word	0x08025bbc

0800e128 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
    }
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff ffe9 	bl	800e108 <_ZN8touchgfx3HALD1Ev>
 800e136:	217c      	movs	r1, #124	@ 0x7c
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f015 fb36 	bl	80237aa <_ZdlPvj>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	460b      	mov	r3, r1
 800e152:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	78fa      	ldrb	r2, [r7, #3]
 800e158:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	807b      	strh	r3, [r7, #2]
 800e17c:	4613      	mov	r3, r2
 800e17e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800e180:	4b0c      	ldr	r3, [pc, #48]	@ (800e1b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	887a      	ldrh	r2, [r7, #2]
 800e186:	429a      	cmp	r2, r3
 800e188:	d304      	bcc.n	800e194 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800e18a:	4b0b      	ldr	r3, [pc, #44]	@ (800e1b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	883a      	ldrh	r2, [r7, #0]
 800e190:	429a      	cmp	r2, r3
 800e192:	d205      	bcs.n	800e1a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800e194:	4b09      	ldr	r3, [pc, #36]	@ (800e1bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800e196:	4a0a      	ldr	r2, [pc, #40]	@ (800e1c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800e198:	219e      	movs	r1, #158	@ 0x9e
 800e19a:	480a      	ldr	r0, [pc, #40]	@ (800e1c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800e19c:	f015 fb34 	bl	8023808 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800e1a0:	4a09      	ldr	r2, [pc, #36]	@ (800e1c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800e1a2:	887b      	ldrh	r3, [r7, #2]
 800e1a4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800e1a6:	4a09      	ldr	r2, [pc, #36]	@ (800e1cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800e1a8:	883b      	ldrh	r3, [r7, #0]
 800e1aa:	8013      	strh	r3, [r2, #0]
    }
 800e1ac:	bf00      	nop
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20001de8 	.word	0x20001de8
 800e1b8:	20001dea 	.word	0x20001dea
 800e1bc:	08024dd8 	.word	0x08024dd8
 800e1c0:	08024e3c 	.word	0x08024e3c
 800e1c4:	08024e80 	.word	0x08024e80
 800e1c8:	20001dee 	.word	0x20001dee
 800e1cc:	20001df0 	.word	0x20001df0

0800e1d0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d009      	beq.n	800e1f6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685a      	ldr	r2, [r3, #4]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	4798      	blx	r3
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	e000      	b.n	800e1f8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800e1f6:	2300      	movs	r3, #0
    }
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f002 fec7 	bl	8010f9c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	33ac      	adds	r3, #172	@ 0xac
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	4798      	blx	r3
    }
 800e21a:	bf00      	nop
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800e222:	b480      	push	{r7}
 800e224:	b083      	sub	sp, #12
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800e22c:	2300      	movs	r3, #0
    }
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
	...

0800e23c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d106      	bne.n	800e25e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800e250:	4b0f      	ldr	r3, [pc, #60]	@ (800e290 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800e252:	4a10      	ldr	r2, [pc, #64]	@ (800e294 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800e254:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800e258:	480f      	ldr	r0, [pc, #60]	@ (800e298 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800e25a:	f015 fad5 	bl	8023808 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	bf14      	ite	ne
 800e270:	2301      	movne	r3, #1
 800e272:	2300      	moveq	r3, #0
 800e274:	b2da      	uxtb	r2, r3
 800e276:	4b09      	ldr	r3, [pc, #36]	@ (800e29c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800e278:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	338c      	adds	r3, #140	@ 0x8c
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	6839      	ldr	r1, [r7, #0]
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	4798      	blx	r3
    }
 800e288:	bf00      	nop
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	08024ec4 	.word	0x08024ec4
 800e294:	08024efc 	.word	0x08024efc
 800e298:	08024e80 	.word	0x08024e80
 800e29c:	20001df2 	.word	0x20001df2

0800e2a0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	bf14      	ite	ne
 800e2b6:	2301      	movne	r3, #1
 800e2b8:	2300      	moveq	r3, #0
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	4b03      	ldr	r3, [pc, #12]	@ (800e2cc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800e2be:	701a      	strb	r2, [r3, #0]
    }
 800e2c0:	bf00      	nop
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	20001df3 	.word	0x20001df3

0800e2d0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e2d8:	2300      	movs	r3, #0
    }
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b082      	sub	sp, #8
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d004      	beq.n	800e304 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2fe:	887a      	ldrh	r2, [r7, #2]
 800e300:	4610      	mov	r0, r2
 800e302:	4798      	blx	r3
        }
    }
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800e314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 800e318:	4618      	mov	r0, r3
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	3318      	adds	r3, #24
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4610      	mov	r0, r2
 800e33c:	4798      	blx	r3
 800e33e:	4603      	mov	r3, r0
    }
 800e340:	4618      	mov	r0, r3
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d011      	beq.n	800e384 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800e360:	4b14      	ldr	r3, [pc, #80]	@ (800e3b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d11e      	bne.n	800e3a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800e368:	4b13      	ldr	r3, [pc, #76]	@ (800e3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e36a:	881b      	ldrh	r3, [r3, #0]
 800e36c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800e36e:	4b13      	ldr	r3, [pc, #76]	@ (800e3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e370:	881a      	ldrh	r2, [r3, #0]
 800e372:	4b11      	ldr	r3, [pc, #68]	@ (800e3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e374:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800e376:	4a11      	ldr	r2, [pc, #68]	@ (800e3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e378:	89bb      	ldrh	r3, [r7, #12]
 800e37a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800e37c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e37e:	2201      	movs	r2, #1
 800e380:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800e382:	e010      	b.n	800e3a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800e384:	4b0b      	ldr	r3, [pc, #44]	@ (800e3b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00c      	beq.n	800e3a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800e38c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e38e:	881b      	ldrh	r3, [r3, #0]
 800e390:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800e392:	4b0a      	ldr	r3, [pc, #40]	@ (800e3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e394:	881a      	ldrh	r2, [r3, #0]
 800e396:	4b08      	ldr	r3, [pc, #32]	@ (800e3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e398:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800e39a:	4a08      	ldr	r2, [pc, #32]	@ (800e3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e39c:	89fb      	ldrh	r3, [r7, #14]
 800e39e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800e3a0:	4b04      	ldr	r3, [pc, #16]	@ (800e3b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	701a      	strb	r2, [r3, #0]
    }
 800e3a6:	bf00      	nop
 800e3a8:	3714      	adds	r7, #20
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	20001dec 	.word	0x20001dec
 800e3b8:	20001dea 	.word	0x20001dea
 800e3bc:	20001de8 	.word	0x20001de8

0800e3c0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f002 f844 	bl	8010458 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800e3d0:	bf00      	nop
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	4a05      	ldr	r2, [pc, #20]	@ (800e3f8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7ff fe8d 	bl	800e108 <_ZN8touchgfx3HALD1Ev>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	08025a14 	.word	0x08025a14

0800e3fc <_ZN20TouchGFXGeneratedHALD0Ev>:
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff ffe7 	bl	800e3d8 <_ZN20TouchGFXGeneratedHALD1Ev>
 800e40a:	217c      	movs	r1, #124	@ 0x7c
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f015 f9cc 	bl	80237aa <_ZdlPvj>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4618      	mov	r0, r3
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff ffca 	bl	800e3c0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800e42c:	bf00      	nop
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4618      	mov	r0, r3
 800e440:	f001 fbe0 	bl	800fc04 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800e444:	bf00      	nop
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4618      	mov	r0, r3
 800e458:	f001 fc7a 	bl	800fd50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800e45c:	4603      	mov	r3, r0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b082      	sub	sp, #8
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
 800e46e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	4618      	mov	r0, r3
 800e476:	f001 fc79 	bl	800fd6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b082      	sub	sp, #8
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6839      	ldr	r1, [r7, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f001 fc81 	bl	800fd98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800e496:	bf00      	nop
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b084      	sub	sp, #16
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	60f8      	str	r0, [r7, #12]
 800e4a6:	60b9      	str	r1, [r7, #8]
 800e4a8:	607a      	str	r2, [r7, #4]
 800e4aa:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800e4ac:	68f8      	ldr	r0, [r7, #12]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	68b9      	ldr	r1, [r7, #8]
 800e4b4:	f001 fc7e 	bl	800fdb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800e4b8:	4603      	mov	r3, r0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b082      	sub	sp, #8
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f001 fbc9 	bl	800fc64 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800e4d2:	bf00      	nop
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f001 fbcd 	bl	800fc84 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800e4ea:	bf00      	nop
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b082      	sub	sp, #8
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f001 fbcf 	bl	800fca0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800e502:	bf00      	nop
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	f001 fbd1 	bl	800fcbc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b082      	sub	sp, #8
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f001 fbf3 	bl	800fd18 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800e532:	4603      	mov	r3, r0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4618      	mov	r0, r3
 800e548:	f001 fbf3 	bl	800fd32 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	4a05      	ldr	r2, [pc, #20]	@ (800e574 <_ZN11TouchGFXHALD1Ev+0x20>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff ff37 	bl	800e3d8 <_ZN20TouchGFXGeneratedHALD1Ev>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	080257f4 	.word	0x080257f4

0800e578 <_ZN11TouchGFXHALD0Ev>:
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ffe7 	bl	800e554 <_ZN11TouchGFXHALD1Ev>
 800e586:	217c      	movs	r1, #124	@ 0x7c
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f015 f90e 	bl	80237aa <_ZdlPvj>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800e598:	b480      	push	{r7}
 800e59a:	af00      	add	r7, sp, #0
    fb_sem = 0;
 800e59c:	4b05      	ldr	r3, [pc, #20]	@ (800e5b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 800e59e:	2200      	movs	r2, #0
 800e5a0:	601a      	str	r2, [r3, #0]
    vsync_sem = 0;
 800e5a2:	4b05      	ldr	r3, [pc, #20]	@ (800e5b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x20>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	601a      	str	r2, [r3, #0]
}
 800e5a8:	bf00      	nop
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	20000b0c 	.word	0x20000b0c
 800e5b8:	20000b10 	.word	0x20000b10

0800e5bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800e5bc:	b480      	push	{r7}
 800e5be:	af00      	add	r7, sp, #0
    while (fb_sem);
 800e5c0:	bf00      	nop
 800e5c2:	4b08      	ldr	r3, [pc, #32]	@ (800e5e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bf14      	ite	ne
 800e5ca:	2301      	movne	r3, #1
 800e5cc:	2300      	moveq	r3, #0
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1f6      	bne.n	800e5c2 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x6>
    fb_sem = 1;
 800e5d4:	4b03      	ldr	r3, [pc, #12]	@ (800e5e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	601a      	str	r2, [r3, #0]
}
 800e5da:	bf00      	nop
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr
 800e5e4:	20000b0c 	.word	0x20000b0c

0800e5e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	af00      	add	r7, sp, #0
    fb_sem = 0;
 800e5ec:	4b03      	ldr	r3, [pc, #12]	@ (800e5fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	601a      	str	r2, [r3, #0]
}
 800e5f2:	bf00      	nop
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20000b0c 	.word	0x20000b0c

0800e600 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800e600:	b480      	push	{r7}
 800e602:	af00      	add	r7, sp, #0
    fb_sem = 1;
 800e604:	4b03      	ldr	r3, [pc, #12]	@ (800e614 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800e606:	2201      	movs	r2, #1
 800e608:	601a      	str	r2, [r3, #0]
}
 800e60a:	bf00      	nop
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	20000b0c 	.word	0x20000b0c

0800e618 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800e618:	b480      	push	{r7}
 800e61a:	af00      	add	r7, sp, #0
    fb_sem = 0;
 800e61c:	4b03      	ldr	r3, [pc, #12]	@ (800e62c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800e61e:	2200      	movs	r2, #0
 800e620:	601a      	str	r2, [r3, #0]
}
 800e622:	bf00      	nop
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	20000b0c 	.word	0x20000b0c

0800e630 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800e630:	b480      	push	{r7}
 800e632:	af00      	add	r7, sp, #0
    vsync_sem = 1;
 800e634:	4b03      	ldr	r3, [pc, #12]	@ (800e644 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800e636:	2201      	movs	r2, #1
 800e638:	601a      	str	r2, [r3, #0]
}
 800e63a:	bf00      	nop
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	20000b10 	.word	0x20000b10

0800e648 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>:
/*
  * Signal that the rendering of the frame has completed. Used by
  * some systems to avoid using any previous vsync.
  */
void OSWrappers::signalRenderingDone()
{
 800e648:	b480      	push	{r7}
 800e64a:	af00      	add	r7, sp, #0
    vsync_sem = 0;
 800e64c:	4b03      	ldr	r3, [pc, #12]	@ (800e65c <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv+0x14>)
 800e64e:	2200      	movs	r2, #0
 800e650:	601a      	str	r2, [r3, #0]
}
 800e652:	bf00      	nop
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	20000b10 	.word	0x20000b10

0800e660 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 * @note signalRenderingDone is typically used together with this function.
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
 800e660:	b480      	push	{r7}
 800e662:	af00      	add	r7, sp, #0
    return vsync_sem;
 800e664:	4b05      	ldr	r3, [pc, #20]	@ (800e67c <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0x1c>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	bf14      	ite	ne
 800e66c:	2301      	movne	r3, #1
 800e66e:	2300      	moveq	r3, #0
 800e670:	b2db      	uxtb	r3, r3
}
 800e672:	4618      	mov	r0, r3
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	20000b10 	.word	0x20000b10

0800e680 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
    if (vsync_sem)
 800e684:	4b0a      	ldr	r3, [pc, #40]	@ (800e6b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	bf14      	ite	ne
 800e68c:	2301      	movne	r3, #1
 800e68e:	2300      	moveq	r3, #0
 800e690:	b2db      	uxtb	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00a      	beq.n	800e6ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        vsync_sem = 0;
 800e696:	4b06      	ldr	r3, [pc, #24]	@ (800e6b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800e698:	2200      	movs	r2, #0
 800e69a:	601a      	str	r2, [r3, #0]
        HAL::getInstance()->backPorchExited();
 800e69c:	f7fc fffa 	bl	800b694 <_ZN8touchgfx3HAL11getInstanceEv>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	3270      	adds	r2, #112	@ 0x70
 800e6a6:	6812      	ldr	r2, [r2, #0]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	4790      	blx	r2
    }
}
 800e6ac:	bf00      	nop
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	20000b10 	.word	0x20000b10

0800e6b4 <__NVIC_EnableIRQ>:
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e6be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	db0b      	blt.n	800e6de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	f003 021f 	and.w	r2, r3, #31
 800e6cc:	4907      	ldr	r1, [pc, #28]	@ (800e6ec <__NVIC_EnableIRQ+0x38>)
 800e6ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6d2:	095b      	lsrs	r3, r3, #5
 800e6d4:	2001      	movs	r0, #1
 800e6d6:	fa00 f202 	lsl.w	r2, r0, r2
 800e6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e6de:	bf00      	nop
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	e000e100 	.word	0xe000e100

0800e6f0 <__NVIC_DisableIRQ>:
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e6fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	db12      	blt.n	800e728 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e702:	79fb      	ldrb	r3, [r7, #7]
 800e704:	f003 021f 	and.w	r2, r3, #31
 800e708:	490a      	ldr	r1, [pc, #40]	@ (800e734 <__NVIC_DisableIRQ+0x44>)
 800e70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e70e:	095b      	lsrs	r3, r3, #5
 800e710:	2001      	movs	r0, #1
 800e712:	fa00 f202 	lsl.w	r2, r0, r2
 800e716:	3320      	adds	r3, #32
 800e718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e71c:	f3bf 8f4f 	dsb	sy
}
 800e720:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e722:	f3bf 8f6f 	isb	sy
}
 800e726:	bf00      	nop
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	e000e100 	.word	0xe000e100

0800e738 <SCB_CleanDCache_by_Addr>:
{
 800e738:	b480      	push	{r7}
 800e73a:	b087      	sub	sp, #28
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800e74a:	2320      	movs	r3, #32
 800e74c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e74e:	f3bf 8f4f 	dsb	sy
}
 800e752:	bf00      	nop
    while (op_size > 0) {
 800e754:	e00b      	b.n	800e76e <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 800e756:	4a0d      	ldr	r2, [pc, #52]	@ (800e78c <SCB_CleanDCache_by_Addr+0x54>)
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	4413      	add	r3, r2
 800e764:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	dcf0      	bgt.n	800e756 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800e774:	f3bf 8f4f 	dsb	sy
}
 800e778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e77a:	f3bf 8f6f 	isb	sy
}
 800e77e:	bf00      	nop
}
 800e780:	bf00      	nop
 800e782:	371c      	adds	r7, #28
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr
 800e78c:	e000ed00 	.word	0xe000ed00

0800e790 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
        return color;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
    }
 800e79c:	4618      	mov	r0, r3
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
    {
 800e7b0:	4a04      	ldr	r2, [pc, #16]	@ (800e7c4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	601a      	str	r2, [r3, #0]
    }
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr
 800e7c4:	0802591c 	.word	0x0802591c

0800e7c8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
    }
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7ff ffe9 	bl	800e7a8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800e7d6:	2104      	movs	r1, #4
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f014 ffe6 	bl	80237aa <_ZdlPvj>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	3344      	adds	r3, #68	@ 0x44
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	4798      	blx	r3
    }
 800e7fc:	bf00      	nop
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
    {
 800e80c:	4a04      	ldr	r2, [pc, #16]	@ (800e820 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	601a      	str	r2, [r3, #0]
    }
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4618      	mov	r0, r3
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	08025c94 	.word	0x08025c94

0800e824 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
    }
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff ffe9 	bl	800e804 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800e832:	210c      	movs	r1, #12
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f014 ffb8 	bl	80237aa <_ZdlPvj>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4618      	mov	r0, r3
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800e84e:	4a09      	ldr	r2, [pc, #36]	@ (800e874 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	605a      	str	r2, [r3, #4]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	721a      	strb	r2, [r3, #8]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	725a      	strb	r2, [r3, #9]
    {
    }
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	08025c94 	.word	0x08025c94

0800e878 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800e880:	2301      	movs	r3, #1
    }
 800e882:	4618      	mov	r0, r3
 800e884:	370c      	adds	r7, #12
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800e88e:	b580      	push	{r7, lr}
 800e890:	b082      	sub	sp, #8
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	3328      	adds	r3, #40	@ 0x28
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4610      	mov	r0, r2
 800e8a2:	4798      	blx	r3
    }
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685a      	ldr	r2, [r3, #4]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3314      	adds	r3, #20
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4610      	mov	r0, r2
 800e8c4:	4798      	blx	r3
    }
 800e8c6:	bf00      	nop
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b082      	sub	sp, #8
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800e8d6:	f7fc fedd 	bl	800b694 <_ZN8touchgfx3HAL11getInstanceEv>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff ffe5 	bl	800e8ac <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800e8e2:	bf00      	nop
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 800e8ea:	b480      	push	{r7}
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 800e8f2:	bf00      	nop
 800e8f4:	e7fd      	b.n	800e8f2 <DMA2D_XferErrorCallback+0x8>

0800e8f6 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b082      	sub	sp, #8
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	330c      	adds	r3, #12
 800e902:	4618      	mov	r0, r3
 800e904:	f7fd fb54 	bl	800bfb0 <_ZN8touchgfx9colortypeC1Ev>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
	...

0800e914 <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 800e914:	b5b0      	push	{r4, r5, r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	330c      	adds	r3, #12
 800e922:	4619      	mov	r1, r3
 800e924:	4610      	mov	r0, r2
 800e926:	f7ff ff8d 	bl	800e844 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800e92a:	4a0e      	ldr	r2, [pc, #56]	@ (800e964 <_ZN8STM32DMAC1Ev+0x50>)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f103 000c 	add.w	r0, r3, #12
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	3320      	adds	r3, #32
 800e93a:	2260      	movs	r2, #96	@ 0x60
 800e93c:	4619      	mov	r1, r3
 800e93e:	f002 fc67 	bl	8011210 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	3320      	adds	r3, #32
 800e946:	245f      	movs	r4, #95	@ 0x5f
 800e948:	461d      	mov	r5, r3
 800e94a:	e004      	b.n	800e956 <_ZN8STM32DMAC1Ev+0x42>
 800e94c:	4628      	mov	r0, r5
 800e94e:	f7ff ffd2 	bl	800e8f6 <_ZN8touchgfx6BlitOpC1Ev>
 800e952:	3c01      	subs	r4, #1
 800e954:	3524      	adds	r5, #36	@ 0x24
 800e956:	2c00      	cmp	r4, #0
 800e958:	daf8      	bge.n	800e94c <_ZN8STM32DMAC1Ev+0x38>
{
}
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4618      	mov	r0, r3
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bdb0      	pop	{r4, r5, r7, pc}
 800e964:	080258cc 	.word	0x080258cc

0800e968 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	4a09      	ldr	r2, [pc, #36]	@ (800e998 <_ZN8STM32DMAD1Ev+0x30>)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800e976:	205a      	movs	r0, #90	@ 0x5a
 800e978:	f7ff feba 	bl	800e6f0 <__NVIC_DisableIRQ>
}
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	330c      	adds	r3, #12
 800e980:	4618      	mov	r0, r3
 800e982:	f000 fb7d 	bl	800f080 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4618      	mov	r0, r3
 800e98a:	f7ff ff3b 	bl	800e804 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4618      	mov	r0, r3
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	080258cc 	.word	0x080258cc

0800e99c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
}
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ffdf 	bl	800e968 <_ZN8STM32DMAD1Ev>
 800e9aa:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f014 fefb 	bl	80237aa <_ZdlPvj>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
	...

0800e9c0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e9c8:	4b12      	ldr	r3, [pc, #72]	@ (800ea14 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9cc:	4a11      	ldr	r2, [pc, #68]	@ (800ea14 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e9d2:	6313      	str	r3, [r2, #48]	@ 0x30
 800e9d4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea14 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e9dc:	60fb      	str	r3, [r7, #12]
 800e9de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800e9e0:	4b0c      	ldr	r3, [pc, #48]	@ (800ea14 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9e2:	691b      	ldr	r3, [r3, #16]
 800e9e4:	4a0b      	ldr	r2, [pc, #44]	@ (800ea14 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e9ea:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800e9ec:	4b09      	ldr	r3, [pc, #36]	@ (800ea14 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	4a08      	ldr	r2, [pc, #32]	@ (800ea14 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e9f6:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800e9f8:	4b07      	ldr	r3, [pc, #28]	@ (800ea18 <_ZN8STM32DMA10initializeEv+0x58>)
 800e9fa:	4a08      	ldr	r2, [pc, #32]	@ (800ea1c <_ZN8STM32DMA10initializeEv+0x5c>)
 800e9fc:	611a      	str	r2, [r3, #16]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800e9fe:	4b06      	ldr	r3, [pc, #24]	@ (800ea18 <_ZN8STM32DMA10initializeEv+0x58>)
 800ea00:	4a07      	ldr	r2, [pc, #28]	@ (800ea20 <_ZN8STM32DMA10initializeEv+0x60>)
 800ea02:	615a      	str	r2, [r3, #20]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800ea04:	205a      	movs	r0, #90	@ 0x5a
 800ea06:	f7ff fe55 	bl	800e6b4 <__NVIC_EnableIRQ>
}
 800ea0a:	bf00      	nop
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	40023800 	.word	0x40023800
 800ea18:	200004c0 	.word	0x200004c0
 800ea1c:	0800e8cf 	.word	0x0800e8cf
 800ea20:	0800e8eb 	.word	0x0800e8eb

0800ea24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800ea30:	2300      	movs	r3, #0
 800ea32:	60fb      	str	r3, [r7, #12]

    switch (format)
 800ea34:	78fb      	ldrb	r3, [r7, #3]
 800ea36:	2b0b      	cmp	r3, #11
 800ea38:	d826      	bhi.n	800ea88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800ea3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea40 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800ea3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea40:	0800ea7d 	.word	0x0800ea7d
 800ea44:	0800ea77 	.word	0x0800ea77
 800ea48:	0800ea71 	.word	0x0800ea71
 800ea4c:	0800ea89 	.word	0x0800ea89
 800ea50:	0800ea89 	.word	0x0800ea89
 800ea54:	0800ea89 	.word	0x0800ea89
 800ea58:	0800ea89 	.word	0x0800ea89
 800ea5c:	0800ea83 	.word	0x0800ea83
 800ea60:	0800ea83 	.word	0x0800ea83
 800ea64:	0800ea83 	.word	0x0800ea83
 800ea68:	0800ea83 	.word	0x0800ea83
 800ea6c:	0800ea83 	.word	0x0800ea83
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800ea70:	2300      	movs	r3, #0
 800ea72:	60fb      	str	r3, [r7, #12]
        break;
 800ea74:	e00e      	b.n	800ea94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800ea76:	2301      	movs	r3, #1
 800ea78:	60fb      	str	r3, [r7, #12]
        break;
 800ea7a:	e00b      	b.n	800ea94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	60fb      	str	r3, [r7, #12]
        break;
 800ea80:	e008      	b.n	800ea94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800ea82:	2305      	movs	r3, #5
 800ea84:	60fb      	str	r3, [r7, #12]
        break;
 800ea86:	e005      	b.n	800ea94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800ea88:	4b05      	ldr	r3, [pc, #20]	@ (800eaa0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800ea8a:	4a06      	ldr	r2, [pc, #24]	@ (800eaa4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800ea8c:	216f      	movs	r1, #111	@ 0x6f
 800ea8e:	4806      	ldr	r0, [pc, #24]	@ (800eaa8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800ea90:	f014 feba 	bl	8023808 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800ea94:	68fb      	ldr	r3, [r7, #12]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	08024f4c 	.word	0x08024f4c
 800eaa4:	08024f68 	.word	0x08024f68
 800eaa8:	08024fb4 	.word	0x08024fb4

0800eaac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800eab8:	2300      	movs	r3, #0
 800eaba:	60fb      	str	r3, [r7, #12]

    switch (format)
 800eabc:	78fb      	ldrb	r3, [r7, #3]
 800eabe:	2b0a      	cmp	r3, #10
 800eac0:	d821      	bhi.n	800eb06 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800eac2:	a201      	add	r2, pc, #4	@ (adr r2, 800eac8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800eac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac8:	0800eb01 	.word	0x0800eb01
 800eacc:	0800eafb 	.word	0x0800eafb
 800ead0:	0800eaf5 	.word	0x0800eaf5
 800ead4:	0800eb07 	.word	0x0800eb07
 800ead8:	0800eb07 	.word	0x0800eb07
 800eadc:	0800eb07 	.word	0x0800eb07
 800eae0:	0800eb07 	.word	0x0800eb07
 800eae4:	0800eafb 	.word	0x0800eafb
 800eae8:	0800eafb 	.word	0x0800eafb
 800eaec:	0800eafb 	.word	0x0800eafb
 800eaf0:	0800eafb 	.word	0x0800eafb
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60fb      	str	r3, [r7, #12]
        break;
 800eaf8:	e00b      	b.n	800eb12 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800eafa:	2301      	movs	r3, #1
 800eafc:	60fb      	str	r3, [r7, #12]
        break;
 800eafe:	e008      	b.n	800eb12 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800eb00:	2302      	movs	r3, #2
 800eb02:	60fb      	str	r3, [r7, #12]
        break;
 800eb04:	e005      	b.n	800eb12 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800eb06:	4b05      	ldr	r3, [pc, #20]	@ (800eb1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800eb08:	4a05      	ldr	r2, [pc, #20]	@ (800eb20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800eb0a:	2190      	movs	r1, #144	@ 0x90
 800eb0c:	4805      	ldr	r0, [pc, #20]	@ (800eb24 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800eb0e:	f014 fe7b 	bl	8023808 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800eb12:	68fb      	ldr	r3, [r7, #12]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	08024f4c 	.word	0x08024f4c
 800eb20:	08024fe0 	.word	0x08024fe0
 800eb24:	08024fb4 	.word	0x08024fb4

0800eb28 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800eb30:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800eb40:	b590      	push	{r4, r7, lr}
 800eb42:	b089      	sub	sp, #36	@ 0x24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	7f5b      	ldrb	r3, [r3, #29]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff ff67 	bl	800ea24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eb56:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	7f9b      	ldrb	r3, [r3, #30]
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7ff ff60 	bl	800ea24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eb64:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	7f9b      	ldrb	r3, [r3, #30]
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7ff ff9d 	bl	800eaac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eb72:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	8b5b      	ldrh	r3, [r3, #26]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	8a9b      	ldrh	r3, [r3, #20]
 800eb7e:	1ad2      	subs	r2, r2, r3
 800eb80:	4b93      	ldr	r3, [pc, #588]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800eb82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	8b5b      	ldrh	r3, [r3, #26]
 800eb88:	461a      	mov	r2, r3
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	8a9b      	ldrh	r3, [r3, #20]
 800eb8e:	1ad2      	subs	r2, r2, r3
 800eb90:	4b8f      	ldr	r3, [pc, #572]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800eb92:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	8b1b      	ldrh	r3, [r3, #24]
 800eb98:	461a      	mov	r2, r3
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	8a9b      	ldrh	r3, [r3, #20]
 800eb9e:	1ad2      	subs	r2, r2, r3
 800eba0:	4b8b      	ldr	r3, [pc, #556]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800eba2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800eba4:	4a8a      	ldr	r2, [pc, #552]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	8adb      	ldrh	r3, [r3, #22]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	8a9b      	ldrh	r3, [r3, #20]
 800ebb4:	041b      	lsls	r3, r3, #16
 800ebb6:	431a      	orrs	r2, r3
 800ebb8:	4b85      	ldr	r3, [pc, #532]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ebba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	691a      	ldr	r2, [r3, #16]
 800ebc0:	4b83      	ldr	r3, [pc, #524]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ebc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	4b81      	ldr	r3, [pc, #516]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ebca:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebd4:	d035      	beq.n	800ec42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 800ebd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebda:	f200 80dd 	bhi.w	800ed98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800ebde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ebe2:	d014      	beq.n	800ec0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 800ebe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ebe8:	f200 80d6 	bhi.w	800ed98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800ebec:	2b80      	cmp	r3, #128	@ 0x80
 800ebee:	d056      	beq.n	800ec9e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 800ebf0:	2b80      	cmp	r3, #128	@ 0x80
 800ebf2:	f200 80d1 	bhi.w	800ed98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800ebf6:	2b40      	cmp	r3, #64	@ 0x40
 800ebf8:	f000 80ba 	beq.w	800ed70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 800ebfc:	2b40      	cmp	r3, #64	@ 0x40
 800ebfe:	f200 80cb 	bhi.w	800ed98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 800ec02:	2b04      	cmp	r3, #4
 800ec04:	d037      	beq.n	800ec76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 800ec06:	2b20      	cmp	r3, #32
 800ec08:	f000 80b2 	beq.w	800ed70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 800ec0c:	e0c4      	b.n	800ed98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	7f1b      	ldrb	r3, [r3, #28]
 800ec12:	061a      	lsls	r2, r3, #24
 800ec14:	496e      	ldr	r1, [pc, #440]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec16:	4b6f      	ldr	r3, [pc, #444]	@ (800edd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	330c      	adds	r3, #12
 800ec20:	4c6b      	ldr	r4, [pc, #428]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff fdb4 	bl	800e790 <_ZNK8touchgfx9colortypecvmEv>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ec2c:	4a68      	ldr	r2, [pc, #416]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	691a      	ldr	r2, [r3, #16]
 800ec36:	4b66      	ldr	r3, [pc, #408]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec38:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800ec3a:	4b65      	ldr	r3, [pc, #404]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec3c:	4a66      	ldr	r2, [pc, #408]	@ (800edd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ec3e:	601a      	str	r2, [r3, #0]
        break;
 800ec40:	e0c2      	b.n	800edc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	7f1b      	ldrb	r3, [r3, #28]
 800ec46:	061a      	lsls	r2, r3, #24
 800ec48:	4961      	ldr	r1, [pc, #388]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec4a:	4b64      	ldr	r3, [pc, #400]	@ (800eddc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	330c      	adds	r3, #12
 800ec54:	4c5e      	ldr	r4, [pc, #376]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff fd9a 	bl	800e790 <_ZNK8touchgfx9colortypecvmEv>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ec60:	4a5b      	ldr	r2, [pc, #364]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	691a      	ldr	r2, [r3, #16]
 800ec6a:	4b59      	ldr	r3, [pc, #356]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec6c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800ec6e:	4b58      	ldr	r3, [pc, #352]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec70:	4a59      	ldr	r2, [pc, #356]	@ (800edd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ec72:	601a      	str	r2, [r3, #0]
        break;
 800ec74:	e0a8      	b.n	800edc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	7f1b      	ldrb	r3, [r3, #28]
 800ec7a:	061a      	lsls	r2, r3, #24
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	4a53      	ldr	r2, [pc, #332]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec86:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ec88:	4a51      	ldr	r2, [pc, #324]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	691a      	ldr	r2, [r3, #16]
 800ec92:	4b4f      	ldr	r3, [pc, #316]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec94:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800ec96:	4b4e      	ldr	r3, [pc, #312]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec98:	4a4f      	ldr	r2, [pc, #316]	@ (800edd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ec9a:	601a      	str	r2, [r3, #0]
        break;
 800ec9c:	e094      	b.n	800edc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	1d1a      	adds	r2, r3, #4
 800ecac:	4b48      	ldr	r3, [pc, #288]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ecae:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	7f1b      	ldrb	r3, [r3, #28]
 800ecb4:	061a      	lsls	r2, r3, #24
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	4a45      	ldr	r2, [pc, #276]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ecbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ecc0:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ecc2:	4a43      	ldr	r2, [pc, #268]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	691a      	ldr	r2, [r3, #16]
 800eccc:	4b40      	ldr	r3, [pc, #256]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ecce:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	881b      	ldrh	r3, [r3, #0]
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d002      	beq.n	800ece0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d00d      	beq.n	800ecfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ba>
 800ecde:	e020      	b.n	800ed22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800ece0:	4b3b      	ldr	r3, [pc, #236]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ece2:	69da      	ldr	r2, [r3, #28]
 800ece4:	4b3e      	ldr	r3, [pc, #248]	@ (800ede0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800ece6:	4013      	ands	r3, r2
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	8852      	ldrh	r2, [r2, #2]
 800ecec:	3a01      	subs	r2, #1
 800ecee:	0212      	lsls	r2, r2, #8
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	4a37      	ldr	r2, [pc, #220]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ecf4:	430b      	orrs	r3, r1
 800ecf6:	61d3      	str	r3, [r2, #28]
                break;
 800ecf8:	e01a      	b.n	800ed30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	7f1b      	ldrb	r3, [r3, #28]
 800ecfe:	2bff      	cmp	r3, #255	@ 0xff
 800ed00:	d101      	bne.n	800ed06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c6>
                {
                    blend = false;
 800ed02:	2300      	movs	r3, #0
 800ed04:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800ed06:	4b32      	ldr	r3, [pc, #200]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed08:	69da      	ldr	r2, [r3, #28]
 800ed0a:	4b35      	ldr	r3, [pc, #212]	@ (800ede0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800ed0c:	4013      	ands	r3, r2
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	8852      	ldrh	r2, [r2, #2]
 800ed12:	3a01      	subs	r2, #1
 800ed14:	0212      	lsls	r2, r2, #8
 800ed16:	4313      	orrs	r3, r2
 800ed18:	4a2d      	ldr	r2, [pc, #180]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed1a:	f043 0310 	orr.w	r3, r3, #16
 800ed1e:	61d3      	str	r3, [r2, #28]
                break;
 800ed20:	e006      	b.n	800ed30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800ed22:	4b30      	ldr	r3, [pc, #192]	@ (800ede4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800ed24:	4a30      	ldr	r2, [pc, #192]	@ (800ede8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800ed26:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800ed2a:	4830      	ldr	r0, [pc, #192]	@ (800edec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800ed2c:	f014 fd6c 	bl	8023808 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800ed30:	4b27      	ldr	r3, [pc, #156]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed32:	69db      	ldr	r3, [r3, #28]
 800ed34:	4a26      	ldr	r2, [pc, #152]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed36:	f043 0320 	orr.w	r3, r3, #32
 800ed3a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800ed3c:	bf00      	nop
 800ed3e:	4b24      	ldr	r3, [pc, #144]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed40:	69db      	ldr	r3, [r3, #28]
 800ed42:	f003 0320 	and.w	r3, r3, #32
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	bf14      	ite	ne
 800ed4a:	2301      	movne	r3, #1
 800ed4c:	2300      	moveq	r3, #0
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1f4      	bne.n	800ed3e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800ed54:	4b1e      	ldr	r3, [pc, #120]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed56:	2210      	movs	r2, #16
 800ed58:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800ed5a:	7ffb      	ldrb	r3, [r7, #31]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d003      	beq.n	800ed68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800ed60:	4b1b      	ldr	r3, [pc, #108]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed62:	4a1d      	ldr	r2, [pc, #116]	@ (800edd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ed64:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 800ed66:	e02f      	b.n	800edc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800ed68:	4b19      	ldr	r3, [pc, #100]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed6a:	4a21      	ldr	r2, [pc, #132]	@ (800edf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800ed6c:	601a      	str	r2, [r3, #0]
        break;
 800ed6e:	e02b      	b.n	800edc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	7f1b      	ldrb	r3, [r3, #28]
 800ed74:	061a      	lsls	r2, r3, #24
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	4a15      	ldr	r2, [pc, #84]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed80:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ed82:	4a13      	ldr	r2, [pc, #76]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	691a      	ldr	r2, [r3, #16]
 800ed8c:	4b10      	ldr	r3, [pc, #64]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed8e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800ed90:	4b0f      	ldr	r3, [pc, #60]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ed92:	4a11      	ldr	r2, [pc, #68]	@ (800edd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ed94:	601a      	str	r2, [r3, #0]
        break;
 800ed96:	e017      	b.n	800edc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	7f1b      	ldrb	r3, [r3, #28]
 800ed9c:	061a      	lsls	r2, r3, #24
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	4313      	orrs	r3, r2
 800eda2:	4a0b      	ldr	r2, [pc, #44]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800eda4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eda8:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	7f5a      	ldrb	r2, [r3, #29]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	7f9b      	ldrb	r3, [r3, #30]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d003      	beq.n	800edbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800edb6:	4b06      	ldr	r3, [pc, #24]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800edb8:	4a0d      	ldr	r2, [pc, #52]	@ (800edf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800edba:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 800edbc:	e003      	b.n	800edc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800edbe:	4b04      	ldr	r3, [pc, #16]	@ (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800edc0:	f242 3201 	movw	r2, #8961	@ 0x2301
 800edc4:	601a      	str	r2, [r3, #0]
        break;
 800edc6:	bf00      	nop
    }
}
 800edc8:	bf00      	nop
 800edca:	3724      	adds	r7, #36	@ 0x24
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd90      	pop	{r4, r7, pc}
 800edd0:	4002b000 	.word	0x4002b000
 800edd4:	0002000a 	.word	0x0002000a
 800edd8:	00022301 	.word	0x00022301
 800eddc:	00020009 	.word	0x00020009
 800ede0:	ffff00ef 	.word	0xffff00ef
 800ede4:	0802502c 	.word	0x0802502c
 800ede8:	08025048 	.word	0x08025048
 800edec:	08024fb4 	.word	0x08024fb4
 800edf0:	00012301 	.word	0x00012301

0800edf4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800edf4:	b590      	push	{r4, r7, lr}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	7f9b      	ldrb	r3, [r3, #30]
 800ee02:	4619      	mov	r1, r3
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7ff fe51 	bl	800eaac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ee0a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800ee0c:	4a3a      	ldr	r2, [pc, #232]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	8adb      	ldrh	r3, [r3, #22]
 800ee16:	461a      	mov	r2, r3
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	8a9b      	ldrh	r3, [r3, #20]
 800ee1c:	041b      	lsls	r3, r3, #16
 800ee1e:	431a      	orrs	r2, r3
 800ee20:	4b35      	ldr	r3, [pc, #212]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	691a      	ldr	r2, [r3, #16]
 800ee28:	4b33      	ldr	r3, [pc, #204]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	8b5b      	ldrh	r3, [r3, #26]
 800ee30:	461a      	mov	r2, r3
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	8a9b      	ldrh	r3, [r3, #20]
 800ee36:	1ad2      	subs	r2, r2, r3
 800ee38:	4b2f      	ldr	r3, [pc, #188]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee3a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	d12d      	bne.n	800eea0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	8b5b      	ldrh	r3, [r3, #26]
 800ee48:	461a      	mov	r2, r3
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	8a9b      	ldrh	r3, [r3, #20]
 800ee4e:	1ad2      	subs	r2, r2, r3
 800ee50:	4b29      	ldr	r3, [pc, #164]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee52:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	8b5b      	ldrh	r3, [r3, #26]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	8a9b      	ldrh	r3, [r3, #20]
 800ee5e:	1ad2      	subs	r2, r2, r3
 800ee60:	4b25      	ldr	r3, [pc, #148]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee62:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ee64:	4a24      	ldr	r2, [pc, #144]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	7f1b      	ldrb	r3, [r3, #28]
 800ee6e:	061a      	lsls	r2, r3, #24
 800ee70:	4921      	ldr	r1, [pc, #132]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee72:	4b22      	ldr	r3, [pc, #136]	@ (800eefc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800ee74:	4313      	orrs	r3, r2
 800ee76:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	330c      	adds	r3, #12
 800ee7c:	4c1e      	ldr	r4, [pc, #120]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff fc86 	bl	800e790 <_ZNK8touchgfx9colortypecvmEv>
 800ee84:	4603      	mov	r3, r0
 800ee86:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	691a      	ldr	r2, [r3, #16]
 800ee8c:	4b1a      	ldr	r3, [pc, #104]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee8e:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	691a      	ldr	r2, [r3, #16]
 800ee94:	4b18      	ldr	r3, [pc, #96]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee96:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 800ee98:	4b17      	ldr	r3, [pc, #92]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800ee9a:	4a19      	ldr	r2, [pc, #100]	@ (800ef00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 800ee9c:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 800ee9e:	e027      	b.n	800eef0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800eea0:	4a15      	ldr	r2, [pc, #84]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800eea6:	4b14      	ldr	r3, [pc, #80]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	330c      	adds	r3, #12
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fc6d 	bl	800e790 <_ZNK8touchgfx9colortypecvmEv>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	0a1b      	lsrs	r3, r3, #8
 800eeba:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	330c      	adds	r3, #12
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fc64 	bl	800e790 <_ZNK8touchgfx9colortypecvmEv>
 800eec8:	4603      	mov	r3, r0
 800eeca:	095b      	lsrs	r3, r3, #5
 800eecc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800eed0:	431c      	orrs	r4, r3
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	330c      	adds	r3, #12
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7ff fc5a 	bl	800e790 <_ZNK8touchgfx9colortypecvmEv>
 800eedc:	4603      	mov	r3, r0
 800eede:	08db      	lsrs	r3, r3, #3
 800eee0:	f003 031f 	and.w	r3, r3, #31
 800eee4:	4a04      	ldr	r2, [pc, #16]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800eee6:	4323      	orrs	r3, r4
 800eee8:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 800eeea:	4b03      	ldr	r3, [pc, #12]	@ (800eef8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800eeec:	4a05      	ldr	r2, [pc, #20]	@ (800ef04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800eeee:	601a      	str	r2, [r3, #0]
}
 800eef0:	bf00      	nop
 800eef2:	3714      	adds	r7, #20
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd90      	pop	{r4, r7, pc}
 800eef8:	4002b000 	.word	0x4002b000
 800eefc:	00010009 	.word	0x00010009
 800ef00:	00022301 	.word	0x00022301
 800ef04:	00032301 	.word	0x00032301

0800ef08 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 800ef08:	b480      	push	{r7}
 800ef0a:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800ef0c:	bf00      	nop
 800ef0e:	4b09      	ldr	r3, [pc, #36]	@ (800ef34 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	bf14      	ite	ne
 800ef1a:	2301      	movne	r3, #1
 800ef1c:	2300      	moveq	r3, #0
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1f4      	bne.n	800ef0e <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ef24:	4b03      	ldr	r3, [pc, #12]	@ (800ef34 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 800ef26:	2223      	movs	r2, #35	@ 0x23
 800ef28:	609a      	str	r2, [r3, #8]
}
 800ef2a:	bf00      	nop
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	4002b000 	.word	0x4002b000

0800ef38 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800ef42:	4b09      	ldr	r3, [pc, #36]	@ (800ef68 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	bf14      	ite	ne
 800ef4e:	2301      	movne	r3, #1
 800ef50:	2300      	moveq	r3, #0
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d003      	beq.n	800ef60 <_ZN8touchgfx5paint9flushLineEPmi+0x28>
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
 800ef58:	6839      	ldr	r1, [r7, #0]
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f7ff fbec 	bl	800e738 <SCB_CleanDCache_by_Addr>
    }
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	e000ed00 	.word	0xe000ed00

0800ef6c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	607a      	str	r2, [r7, #4]
 800ef78:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800ef7a:	bf00      	nop
 800ef7c:	4b1f      	ldr	r3, [pc, #124]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	bf14      	ite	ne
 800ef88:	2301      	movne	r3, #1
 800ef8a:	2300      	moveq	r3, #0
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1f4      	bne.n	800ef7c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ef92:	4b1a      	ldr	r3, [pc, #104]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800ef94:	2223      	movs	r2, #35	@ 0x23
 800ef96:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 800ef98:	4b18      	ldr	r3, [pc, #96]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800ef9a:	2202      	movs	r2, #2
 800ef9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	041b      	lsls	r3, r3, #16
 800efa2:	4a16      	ldr	r2, [pc, #88]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efa4:	f043 0301 	orr.w	r3, r3, #1
 800efa8:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800efaa:	4a14      	ldr	r2, [pc, #80]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800efb0:	4a12      	ldr	r2, [pc, #72]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 800efb6:	78fb      	ldrb	r3, [r7, #3]
 800efb8:	2bff      	cmp	r3, #255	@ 0xff
 800efba:	d00f      	beq.n	800efdc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800efbc:	78fb      	ldrb	r3, [r7, #3]
 800efbe:	061b      	lsls	r3, r3, #24
 800efc0:	4a0e      	ldr	r2, [pc, #56]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efc2:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 800efc6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800efc8:	4b0c      	ldr	r3, [pc, #48]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efca:	2202      	movs	r2, #2
 800efcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800efce:	4a0b      	ldr	r2, [pc, #44]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800efd4:	4b09      	ldr	r3, [pc, #36]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efd6:	4a0a      	ldr	r2, [pc, #40]	@ (800f000 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 800efd8:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 800efda:	e008      	b.n	800efee <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800efdc:	78fb      	ldrb	r3, [r7, #3]
 800efde:	061b      	lsls	r3, r3, #24
 800efe0:	4a06      	ldr	r2, [pc, #24]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efe2:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 800efe6:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 800efe8:	4b04      	ldr	r3, [pc, #16]	@ (800effc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 800efea:	2201      	movs	r2, #1
 800efec:	601a      	str	r2, [r3, #0]
}
 800efee:	bf00      	nop
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	4002b000 	.word	0x4002b000
 800f000:	00020001 	.word	0x00020001

0800f004 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800f012:	bf00      	nop
 800f014:	4b18      	ldr	r3, [pc, #96]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	bf14      	ite	ne
 800f020:	2301      	movne	r3, #1
 800f022:	2300      	moveq	r3, #0
 800f024:	b2db      	uxtb	r3, r3
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1f4      	bne.n	800f014 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800f02a:	4b13      	ldr	r3, [pc, #76]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f02c:	2223      	movs	r2, #35	@ 0x23
 800f02e:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 800f030:	4b11      	ldr	r3, [pc, #68]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f032:	2202      	movs	r2, #2
 800f034:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	041b      	lsls	r3, r3, #16
 800f03a:	4a0f      	ldr	r2, [pc, #60]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f03c:	f043 0301 	orr.w	r3, r3, #1
 800f040:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800f042:	4a0d      	ldr	r2, [pc, #52]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800f048:	4a0b      	ldr	r2, [pc, #44]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800f04e:	78fb      	ldrb	r3, [r7, #3]
 800f050:	061b      	lsls	r3, r3, #24
 800f052:	4a09      	ldr	r2, [pc, #36]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f058:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800f05a:	4b07      	ldr	r3, [pc, #28]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f05c:	2202      	movs	r2, #2
 800f05e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800f060:	4a05      	ldr	r2, [pc, #20]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800f066:	4b04      	ldr	r3, [pc, #16]	@ (800f078 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 800f068:	4a04      	ldr	r2, [pc, #16]	@ (800f07c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 800f06a:	601a      	str	r2, [r3, #0]
}
 800f06c:	bf00      	nop
 800f06e:	3714      	adds	r7, #20
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	4002b000 	.word	0x4002b000
 800f07c:	00020001 	.word	0x00020001

0800f080 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	4a05      	ldr	r2, [pc, #20]	@ (800f0a0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff fb89 	bl	800e7a8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4618      	mov	r0, r3
 800f09a:	3708      	adds	r7, #8
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	08025ce4 	.word	0x08025ce4

0800f0a4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7ff ffe7 	bl	800f080 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800f0b2:	2114      	movs	r1, #20
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f014 fb78 	bl	80237aa <_ZdlPvj>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800f0cc:	4a04      	ldr	r2, [pc, #16]	@ (800f0e0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6013      	str	r3, [r2, #0]
    }
 800f0d2:	bf00      	nop
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	20001e50 	.word	0x20001e50

0800f0e4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
 800f0f0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800f0f2:	4a0b      	ldr	r2, [pc, #44]	@ (800f120 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	611a      	str	r2, [r3, #16]
    {
    }
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	4618      	mov	r0, r3
 800f114:	3714      	adds	r7, #20
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	08025a04 	.word	0x08025a04

0800f124 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
    {
 800f12c:	4a04      	ldr	r2, [pc, #16]	@ (800f140 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	601a      	str	r2, [r3, #0]
    }
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4618      	mov	r0, r3
 800f136:	370c      	adds	r7, #12
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr
 800f140:	08025a04 	.word	0x08025a04

0800f144 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
    }
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7ff ffe9 	bl	800f124 <_ZN8touchgfx7MVPHeapD1Ev>
 800f152:	2114      	movs	r1, #20
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f014 fb28 	bl	80237aa <_ZdlPvj>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4618      	mov	r0, r3
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
    {
 800f16c:	4a04      	ldr	r2, [pc, #16]	@ (800f180 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	601a      	str	r2, [r3, #0]
    }
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4618      	mov	r0, r3
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr
 800f180:	08025ec8 	.word	0x08025ec8

0800f184 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
    }
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7ff ffe9 	bl	800f164 <_ZN8touchgfx3LCDD1Ev>
 800f192:	210c      	movs	r1, #12
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f014 fb08 	bl	80237aa <_ZdlPvj>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4618      	mov	r0, r3
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
            : startX(0),
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	801a      	strh	r2, [r3, #0]
              startY(0),
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	805a      	strh	r2, [r3, #2]
              downX(0),
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	809a      	strh	r2, [r3, #4]
              downY(0),
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	739a      	strb	r2, [r3, #14]
        {
        }
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff ffd5 	bl	800f1a4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	611a      	str	r2, [r3, #16]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	829a      	strh	r2, [r3, #20]
    {
    }
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800f21e:	4a55      	ldr	r2, [pc, #340]	@ (800f374 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2200      	movs	r2, #0
 800f240:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2200      	movs	r2, #0
 800f246:	619a      	str	r2, [r3, #24]
          gestures(),
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	331c      	adds	r3, #28
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7ff ffcc 	bl	800f1ea <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2200      	movs	r2, #0
 800f25e:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2200      	movs	r2, #0
 800f264:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2200      	movs	r2, #0
 800f26a:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2200      	movs	r2, #0
 800f270:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2200      	movs	r2, #0
 800f276:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2201      	movs	r2, #1
 800f27e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2200      	movs	r2, #0
 800f296:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	3350      	adds	r3, #80	@ 0x50
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fc fea4 	bl	800bfea <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2201      	movs	r2, #1
 800f31e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2201      	movs	r2, #1
 800f326:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 800f32a:	4a13      	ldr	r2, [pc, #76]	@ (800f378 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800f330:	4a12      	ldr	r2, [pc, #72]	@ (800f37c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800f332:	8b3b      	ldrh	r3, [r7, #24]
 800f334:	8013      	strh	r3, [r2, #0]
 800f336:	4b11      	ldr	r3, [pc, #68]	@ (800f37c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800f338:	881a      	ldrh	r2, [r3, #0]
 800f33a:	4b11      	ldr	r3, [pc, #68]	@ (800f380 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800f33c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800f33e:	4a11      	ldr	r2, [pc, #68]	@ (800f384 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800f340:	8bbb      	ldrh	r3, [r7, #28]
 800f342:	8013      	strh	r3, [r2, #0]
 800f344:	4b0f      	ldr	r3, [pc, #60]	@ (800f384 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800f346:	881a      	ldrh	r2, [r3, #0]
 800f348:	4b0f      	ldr	r3, [pc, #60]	@ (800f388 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800f34a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800f34c:	4b0f      	ldr	r3, [pc, #60]	@ (800f38c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800f34e:	2200      	movs	r2, #0
 800f350:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800f352:	8b3a      	ldrh	r2, [r7, #24]
 800f354:	8bbb      	ldrh	r3, [r7, #28]
 800f356:	429a      	cmp	r2, r3
 800f358:	bf34      	ite	cc
 800f35a:	2301      	movcc	r3, #1
 800f35c:	2300      	movcs	r3, #0
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	461a      	mov	r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	4618      	mov	r0, r3
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	08025bbc 	.word	0x08025bbc
 800f378:	20001df4 	.word	0x20001df4
 800f37c:	20001de8 	.word	0x20001de8
 800f380:	20001dee 	.word	0x20001dee
 800f384:	20001dea 	.word	0x20001dea
 800f388:	20001df0 	.word	0x20001df0
 800f38c:	20001dec 	.word	0x20001dec

0800f390 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fc fb79 	bl	800ba94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800f3a2:	bf00      	nop
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
	...

0800f3ac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af02      	add	r7, sp, #8
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	68b9      	ldr	r1, [r7, #8]
 800f3c6:	f7ff fe8d 	bl	800f0e4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800f3ca:	4a04      	ldr	r2, [pc, #16]	@ (800f3dc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	601a      	str	r2, [r3, #0]
    {

    }
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	080259f0 	.word	0x080259f0

0800f3e0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	4801      	ldr	r0, [pc, #4]	@ (800f3ec <__tcf_0+0xc>)
 800f3e6:	f000 f969 	bl	800f6bc <_ZN12FrontendHeapD1Ev>
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	20000b14 	.word	0x20000b14

0800f3f0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800f3f4:	4b11      	ldr	r3, [pc, #68]	@ (800f43c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f3bf 8f5b 	dmb	ish
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	2b00      	cmp	r3, #0
 800f402:	bf0c      	ite	eq
 800f404:	2301      	moveq	r3, #1
 800f406:	2300      	movne	r3, #0
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d013      	beq.n	800f436 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800f40e:	480b      	ldr	r0, [pc, #44]	@ (800f43c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800f410:	f014 f9cd 	bl	80237ae <__cxa_guard_acquire>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	bf14      	ite	ne
 800f41a:	2301      	movne	r3, #1
 800f41c:	2300      	moveq	r3, #0
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d008      	beq.n	800f436 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800f424:	4806      	ldr	r0, [pc, #24]	@ (800f440 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800f426:	f000 f867 	bl	800f4f8 <_ZN12FrontendHeapC1Ev>
 800f42a:	4806      	ldr	r0, [pc, #24]	@ (800f444 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800f42c:	f014 fa0a 	bl	8023844 <atexit>
 800f430:	4802      	ldr	r0, [pc, #8]	@ (800f43c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800f432:	f014 f9c8 	bl	80237c6 <__cxa_guard_release>
        return instance;
 800f436:	4b02      	ldr	r3, [pc, #8]	@ (800f440 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800f438:	4618      	mov	r0, r3
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	20000f30 	.word	0x20000f30
 800f440:	20000b14 	.word	0x20000b14
 800f444:	0800f3e1 	.word	0x0800f3e1

0800f448 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	4a05      	ldr	r2, [pc, #20]	@ (800f468 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4618      	mov	r0, r3
 800f45a:	f7ff fe63 	bl	800f124 <_ZN8touchgfx7MVPHeapD1Ev>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	080259f0 	.word	0x080259f0

0800f46c <_ZN16FrontendHeapBaseD0Ev>:
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff ffe7 	bl	800f448 <_ZN16FrontendHeapBaseD1Ev>
 800f47a:	2114      	movs	r1, #20
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f014 f994 	bl	80237aa <_ZdlPvj>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4618      	mov	r0, r3
 800f498:	f000 fd3e 	bl	800ff18 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f49c:	4a03      	ldr	r2, [pc, #12]	@ (800f4ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	080259bc 	.word	0x080259bc

0800f4b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fd2c 	bl	800ff18 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f4c0:	4a03      	ldr	r2, [pc, #12]	@ (800f4d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	08025988 	.word	0x08025988

0800f4d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f000 fd1a 	bl	800ff18 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f4e4:	4a03      	ldr	r2, [pc, #12]	@ (800f4f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	08025954 	.word	0x08025954

0800f4f8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800f4f8:	b590      	push	{r4, r7, lr}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af02      	add	r7, sp, #8
 800f4fe:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f103 0114 	add.w	r1, r3, #20
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f503 742a 	add.w	r4, r3, #680	@ 0x2a8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
                     app(model, *this)
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	4623      	mov	r3, r4
 800f51e:	f7ff ff45 	bl	800f3ac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800f522:	4a18      	ldr	r2, [pc, #96]	@ (800f584 <_ZN12FrontendHeapC1Ev+0x8c>)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	601a      	str	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3314      	adds	r3, #20
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7ff ffad 	bl	800f48c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	332c      	adds	r3, #44	@ 0x2c
 800f536:	4618      	mov	r0, r3
 800f538:	f7ff ffba 	bl	800f4b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800f542:	4618      	mov	r0, r3
 800f544:	f7ff ffc6 	bl	800f4d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fe fb88 	bl	800dc64 <_ZN5ModelC1Ev>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f503 7030 	add.w	r0, r3, #704	@ 0x2c0
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	4619      	mov	r1, r3
 800f564:	f7fe fb68 	bl	800dc38 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800f570:	4619      	mov	r1, r3
 800f572:	4610      	mov	r0, r2
 800f574:	f7ff ff0c 	bl	800f390 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4618      	mov	r0, r3
 800f57c:	370c      	adds	r7, #12
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd90      	pop	{r4, r7, pc}
 800f582:	bf00      	nop
 800f584:	08025940 	.word	0x08025940

0800f588 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af02      	add	r7, sp, #8
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	8bbb      	ldrh	r3, [r7, #28]
 800f59a:	9301      	str	r3, [sp, #4]
 800f59c:	8b3b      	ldrh	r3, [r7, #24]
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	68b9      	ldr	r1, [r7, #8]
 800f5a6:	f7ff fe33 	bl	800f210 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800f5aa:	4a04      	ldr	r2, [pc, #16]	@ (800f5bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	601a      	str	r2, [r3, #0]
    }
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	08025a14 	.word	0x08025a14

0800f5c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af02      	add	r7, sp, #8
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
 800f5cc:	603b      	str	r3, [r7, #0]
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	8bbb      	ldrh	r3, [r7, #28]
 800f5d2:	9301      	str	r3, [sp, #4]
 800f5d4:	8b3b      	ldrh	r3, [r7, #24]
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	f7ff ffd3 	bl	800f588 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f5e2:	4a04      	ldr	r2, [pc, #16]	@ (800f5f4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	601a      	str	r2, [r3, #0]
    }
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	080257f4 	.word	0x080257f4

0800f5f8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	4a04      	ldr	r2, [pc, #16]	@ (800f614 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	601a      	str	r2, [r3, #0]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4618      	mov	r0, r3
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr
 800f614:	080257dc 	.word	0x080257dc

0800f618 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4618      	mov	r0, r3
 800f624:	f7ff ffe8 	bl	800f5f8 <_ZN8touchgfx15TouchControllerC1Ev>
 800f628:	4a03      	ldr	r2, [pc, #12]	@ (800f638 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	601a      	str	r2, [r3, #0]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	080257c4 	.word	0x080257c4

0800f63c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800f63c:	b590      	push	{r4, r7, lr}
 800f63e:	b085      	sub	sp, #20
 800f640:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800f642:	f7fe f8fb 	bl	800d83c <_ZN14BitmapDatabase11getInstanceEv>
 800f646:	4604      	mov	r4, r0
 800f648:	f7fe f902 	bl	800d850 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800f64c:	4603      	mov	r3, r0
 800f64e:	4619      	mov	r1, r3
 800f650:	2300      	movs	r3, #0
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	2300      	movs	r3, #0
 800f656:	2200      	movs	r2, #0
 800f658:	4620      	mov	r0, r4
 800f65a:	f005 fdab 	bl	80151b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800f65e:	4809      	ldr	r0, [pc, #36]	@ (800f684 <touchgfx_init+0x48>)
 800f660:	f7ff fd30 	bl	800f0c4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800f664:	2000      	movs	r0, #0
 800f666:	f7fe fa1f 	bl	800daa8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800f66a:	4807      	ldr	r0, [pc, #28]	@ (800f688 <touchgfx_init+0x4c>)
 800f66c:	f005 fd0a 	bl	8015084 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800f670:	f7ff febe 	bl	800f3f0 <_ZN12FrontendHeap11getInstanceEv>
 800f674:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800f676:	4805      	ldr	r0, [pc, #20]	@ (800f68c <touchgfx_init+0x50>)
 800f678:	f7fe fedc 	bl	800e434 <_ZN11TouchGFXHAL10initializeEv>
}
 800f67c:	bf00      	nop
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	bd90      	pop	{r4, r7, pc}
 800f684:	20001d64 	.word	0x20001d64
 800f688:	2000019c 	.word	0x2000019c
 800f68c:	20001d68 	.word	0x20001d68

0800f690 <touchgfx_components_init>:

void touchgfx_components_init()
{
 800f690:	b480      	push	{r7}
 800f692:	af00      	add	r7, sp, #0
}
 800f694:	bf00      	nop
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
	...

0800f6a0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	af00      	add	r7, sp, #0
    /*
     * Main event loop will check for VSYNC signal, and then process next frame.
     *
     * Note This function returns immediately if there is no VSYNC signal.
     */
    if (OSWrappers::isVSyncAvailable())
 800f6a4:	f7fe ffdc 	bl	800e660 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <touchgfx_taskEntry+0x14>
    {
        hal.backPorchExited();
 800f6ae:	4802      	ldr	r0, [pc, #8]	@ (800f6b8 <touchgfx_taskEntry+0x18>)
 800f6b0:	f7fe fda6 	bl	800e200 <_ZN8touchgfx3HAL15backPorchExitedEv>
    }
}
 800f6b4:	bf00      	nop
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	20001d68 	.word	0x20001d68

0800f6bc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	4a10      	ldr	r2, [pc, #64]	@ (800f708 <_ZN12FrontendHeapD1Ev+0x4c>)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	601a      	str	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fe fa7b 	bl	800dbcc <_ZN19FrontendApplicationD1Ev>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f000 f827 	bl	800f730 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	332c      	adds	r3, #44	@ 0x2c
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f000 f844 	bl	800f774 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	3314      	adds	r3, #20
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 f863 	bl	800f7bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7ff fea5 	bl	800f448 <_ZN16FrontendHeapBaseD1Ev>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4618      	mov	r0, r3
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	08025940 	.word	0x08025940

0800f70c <_ZN12FrontendHeapD0Ev>:
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff ffd1 	bl	800f6bc <_ZN12FrontendHeapD1Ev>
 800f71a:	f240 411c 	movw	r1, #1052	@ 0x41c
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f014 f843 	bl	80237aa <_ZdlPvj>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4618      	mov	r0, r3
 800f728:	3708      	adds	r7, #8
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
	...

0800f730 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	4a05      	ldr	r2, [pc, #20]	@ (800f750 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	601a      	str	r2, [r3, #0]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fbe8 	bl	800ff16 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4618      	mov	r0, r3
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	08025954 	.word	0x08025954

0800f754 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f7ff ffe7 	bl	800f730 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f762:	2114      	movs	r1, #20
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f014 f820 	bl	80237aa <_ZdlPvj>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	4618      	mov	r0, r3
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	4a05      	ldr	r2, [pc, #20]	@ (800f794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4618      	mov	r0, r3
 800f786:	f000 fbc6 	bl	800ff16 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4618      	mov	r0, r3
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	08025988 	.word	0x08025988

0800f798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7ff ffe7 	bl	800f774 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f7a6:	f44f 711f 	mov.w	r1, #636	@ 0x27c
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f013 fffd 	bl	80237aa <_ZdlPvj>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
	...

0800f7bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	4a05      	ldr	r2, [pc, #20]	@ (800f7dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	601a      	str	r2, [r3, #0]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f000 fba2 	bl	800ff16 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	080259bc 	.word	0x080259bc

0800f7e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7ff ffe7 	bl	800f7bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f7ee:	2118      	movs	r1, #24
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f013 ffda 	bl	80237aa <_ZdlPvj>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	4a05      	ldr	r2, [pc, #20]	@ (800f820 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff fca7 	bl	800f164 <_ZN8touchgfx3LCDD1Ev>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	08026350 	.word	0x08026350

0800f824 <_ZN8touchgfx8LCD16bppD0Ev>:
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ffe7 	bl	800f800 <_ZN8touchgfx8LCD16bppD1Ev>
 800f832:	218c      	movs	r1, #140	@ 0x8c
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f013 ffb8 	bl	80237aa <_ZdlPvj>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <_Z41__static_initialization_and_destruction_0ii>:
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af02      	add	r7, sp, #8
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d119      	bne.n	800f888 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d114      	bne.n	800f888 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800f85e:	4818      	ldr	r0, [pc, #96]	@ (800f8c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f860:	f7ff feda 	bl	800f618 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800f864:	4817      	ldr	r0, [pc, #92]	@ (800f8c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f866:	f7ff f855 	bl	800e914 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800f86a:	4817      	ldr	r0, [pc, #92]	@ (800f8c8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f86c:	f00a fdaa 	bl	801a3c4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800f870:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f874:	9301      	str	r3, [sp, #4]
 800f876:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	4b10      	ldr	r3, [pc, #64]	@ (800f8c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f87e:	4a12      	ldr	r2, [pc, #72]	@ (800f8c8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f880:	4910      	ldr	r1, [pc, #64]	@ (800f8c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f882:	4812      	ldr	r0, [pc, #72]	@ (800f8cc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f884:	f7ff fe9c 	bl	800f5c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d113      	bne.n	800f8b6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f894:	4293      	cmp	r3, r2
 800f896:	d10e      	bne.n	800f8b6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f898:	480c      	ldr	r0, [pc, #48]	@ (800f8cc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f89a:	f7fe fe5b 	bl	800e554 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800f89e:	480c      	ldr	r0, [pc, #48]	@ (800f8d0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800f8a0:	f7fb fb5e 	bl	800af60 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800f8a4:	4808      	ldr	r0, [pc, #32]	@ (800f8c8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f8a6:	f7ff ffab 	bl	800f800 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800f8aa:	4806      	ldr	r0, [pc, #24]	@ (800f8c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f8ac:	f7ff f85c 	bl	800e968 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800f8b0:	4803      	ldr	r0, [pc, #12]	@ (800f8c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f8b2:	f7fe fbab 	bl	800e00c <_ZN20STM32TouchControllerD1Ev>
}
 800f8b6:	bf00      	nop
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	20000f34 	.word	0x20000f34
 800f8c4:	20000f38 	.word	0x20000f38
 800f8c8:	20001cd8 	.word	0x20001cd8
 800f8cc:	20001d68 	.word	0x20001d68
 800f8d0:	2000019c 	.word	0x2000019c

0800f8d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800f8dc:	2301      	movs	r3, #1
    }
 800f8de:	4618      	mov	r0, r3
 800f8e0:	370c      	adds	r7, #12
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800f8ea:	b480      	push	{r7}
 800f8ec:	b083      	sub	sp, #12
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800f8f2:	230c      	movs	r3, #12
    }
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	460b      	mov	r3, r1
 800f90a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800f90c:	887a      	ldrh	r2, [r7, #2]
 800f90e:	4613      	mov	r3, r2
 800f910:	005b      	lsls	r3, r3, #1
 800f912:	4413      	add	r3, r2
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	3308      	adds	r3, #8
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	4413      	add	r3, r2
    }
 800f91c:	4618      	mov	r0, r3
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	460b      	mov	r3, r1
 800f932:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800f934:	887a      	ldrh	r2, [r7, #2]
 800f936:	4613      	mov	r3, r2
 800f938:	005b      	lsls	r3, r3, #1
 800f93a:	4413      	add	r3, r2
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	3308      	adds	r3, #8
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	4413      	add	r3, r2
    }
 800f944:	4618      	mov	r0, r3
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800f958:	2301      	movs	r3, #1
    }
 800f95a:	4618      	mov	r0, r3
 800f95c:	370c      	adds	r7, #12
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr

0800f966 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800f966:	b480      	push	{r7}
 800f968:	b083      	sub	sp, #12
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800f96e:	f44f 731d 	mov.w	r3, #628	@ 0x274
    }
 800f972:	4618      	mov	r0, r3
 800f974:	370c      	adds	r7, #12
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr

0800f97e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800f97e:	b480      	push	{r7}
 800f980:	b083      	sub	sp, #12
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	460b      	mov	r3, r1
 800f988:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800f98a:	887b      	ldrh	r3, [r7, #2]
 800f98c:	f44f 721d 	mov.w	r2, #628	@ 0x274
 800f990:	fb02 f303 	mul.w	r3, r2, r3
 800f994:	3308      	adds	r3, #8
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	4413      	add	r3, r2
    }
 800f99a:	4618      	mov	r0, r3
 800f99c:	370c      	adds	r7, #12
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr

0800f9a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800f9b2:	887b      	ldrh	r3, [r7, #2]
 800f9b4:	f44f 721d 	mov.w	r2, #628	@ 0x274
 800f9b8:	fb02 f303 	mul.w	r3, r2, r3
 800f9bc:	3308      	adds	r3, #8
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	4413      	add	r3, r2
    }
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	370c      	adds	r7, #12
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr

0800f9ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800f9ce:	b480      	push	{r7}
 800f9d0:	b083      	sub	sp, #12
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800f9d6:	2301      	movs	r3, #1
    }
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800f9ec:	2310      	movs	r3, #16
    }
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	370c      	adds	r7, #12
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800f9fa:	b480      	push	{r7}
 800f9fc:	b083      	sub	sp, #12
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
 800fa02:	460b      	mov	r3, r1
 800fa04:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800fa06:	887b      	ldrh	r3, [r7, #2]
 800fa08:	011b      	lsls	r3, r3, #4
 800fa0a:	3308      	adds	r3, #8
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	4413      	add	r3, r2
    }
 800fa10:	4618      	mov	r0, r3
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	460b      	mov	r3, r1
 800fa26:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800fa28:	887b      	ldrh	r3, [r7, #2]
 800fa2a:	011b      	lsls	r3, r3, #4
 800fa2c:	3308      	adds	r3, #8
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	4413      	add	r3, r2
    }
 800fa32:	4618      	mov	r0, r3
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <_GLOBAL__sub_I_touchgfx_init>:
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fa46:	2001      	movs	r0, #1
 800fa48:	f7ff fefc 	bl	800f844 <_Z41__static_initialization_and_destruction_0ii>
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <_GLOBAL__sub_D_touchgfx_init>:
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fa56:	2000      	movs	r0, #0
 800fa58:	f7ff fef4 	bl	800f844 <_Z41__static_initialization_and_destruction_0ii>
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b082      	sub	sp, #8
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	3320      	adds	r3, #32
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	4798      	blx	r3
    }
 800fa72:	bf00      	nop
 800fa74:	3708      	adds	r7, #8
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}

0800fa7a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800fa7a:	b480      	push	{r7}
 800fa7c:	b083      	sub	sp, #12
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800fa88:	3301      	adds	r3, #1
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 800fa92:	bf00      	nop
 800fa94:	370c      	adds	r7, #12
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
	...

0800faa0 <__NVIC_EnableIRQ>:
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800faaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	db0b      	blt.n	800faca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fab2:	79fb      	ldrb	r3, [r7, #7]
 800fab4:	f003 021f 	and.w	r2, r3, #31
 800fab8:	4907      	ldr	r1, [pc, #28]	@ (800fad8 <__NVIC_EnableIRQ+0x38>)
 800faba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fabe:	095b      	lsrs	r3, r3, #5
 800fac0:	2001      	movs	r0, #1
 800fac2:	fa00 f202 	lsl.w	r2, r0, r2
 800fac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800faca:	bf00      	nop
 800facc:	370c      	adds	r7, #12
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop
 800fad8:	e000e100 	.word	0xe000e100

0800fadc <__NVIC_DisableIRQ>:
{
 800fadc:	b480      	push	{r7}
 800fade:	b083      	sub	sp, #12
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	4603      	mov	r3, r0
 800fae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800faea:	2b00      	cmp	r3, #0
 800faec:	db12      	blt.n	800fb14 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800faee:	79fb      	ldrb	r3, [r7, #7]
 800faf0:	f003 021f 	and.w	r2, r3, #31
 800faf4:	490a      	ldr	r1, [pc, #40]	@ (800fb20 <__NVIC_DisableIRQ+0x44>)
 800faf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fafa:	095b      	lsrs	r3, r3, #5
 800fafc:	2001      	movs	r0, #1
 800fafe:	fa00 f202 	lsl.w	r2, r0, r2
 800fb02:	3320      	adds	r3, #32
 800fb04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800fb08:	f3bf 8f4f 	dsb	sy
}
 800fb0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fb0e:	f3bf 8f6f 	isb	sy
}
 800fb12:	bf00      	nop
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	e000e100 	.word	0xe000e100

0800fb24 <__NVIC_SetPriority>:
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	6039      	str	r1, [r7, #0]
 800fb2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fb30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	db0a      	blt.n	800fb4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	490c      	ldr	r1, [pc, #48]	@ (800fb70 <__NVIC_SetPriority+0x4c>)
 800fb3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb42:	0112      	lsls	r2, r2, #4
 800fb44:	b2d2      	uxtb	r2, r2
 800fb46:	440b      	add	r3, r1
 800fb48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fb4c:	e00a      	b.n	800fb64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	4908      	ldr	r1, [pc, #32]	@ (800fb74 <__NVIC_SetPriority+0x50>)
 800fb54:	79fb      	ldrb	r3, [r7, #7]
 800fb56:	f003 030f 	and.w	r3, r3, #15
 800fb5a:	3b04      	subs	r3, #4
 800fb5c:	0112      	lsls	r2, r2, #4
 800fb5e:	b2d2      	uxtb	r2, r2
 800fb60:	440b      	add	r3, r1
 800fb62:	761a      	strb	r2, [r3, #24]
}
 800fb64:	bf00      	nop
 800fb66:	370c      	adds	r7, #12
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	e000e100 	.word	0xe000e100
 800fb74:	e000ed00 	.word	0xe000ed00

0800fb78 <SCB_CleanInvalidateDCache>:
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800fb7e:	4b20      	ldr	r3, [pc, #128]	@ (800fc00 <SCB_CleanInvalidateDCache+0x88>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800fb86:	f3bf 8f4f 	dsb	sy
}
 800fb8a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800fb8c:	4b1c      	ldr	r3, [pc, #112]	@ (800fc00 <SCB_CleanInvalidateDCache+0x88>)
 800fb8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb92:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	0b5b      	lsrs	r3, r3, #13
 800fb98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800fb9c:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	08db      	lsrs	r3, r3, #3
 800fba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fba6:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	015a      	lsls	r2, r3, #5
 800fbac:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800fbb0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800fbb2:	68ba      	ldr	r2, [r7, #8]
 800fbb4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800fbb6:	4912      	ldr	r1, [pc, #72]	@ (800fc00 <SCB_CleanInvalidateDCache+0x88>)
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	1e5a      	subs	r2, r3, #1
 800fbc2:	60ba      	str	r2, [r7, #8]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	bf14      	ite	ne
 800fbc8:	2301      	movne	r3, #1
 800fbca:	2300      	moveq	r3, #0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1ea      	bne.n	800fba8 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	1e5a      	subs	r2, r3, #1
 800fbd6:	60fa      	str	r2, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	bf14      	ite	ne
 800fbdc:	2301      	movne	r3, #1
 800fbde:	2300      	moveq	r3, #0
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d1db      	bne.n	800fb9e <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800fbe6:	f3bf 8f4f 	dsb	sy
}
 800fbea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fbec:	f3bf 8f6f 	isb	sy
}
 800fbf0:	bf00      	nop
}
 800fbf2:	bf00      	nop
 800fbf4:	3714      	adds	r7, #20
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	e000ed00 	.word	0xe000ed00

0800fc04 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800fc04:	b5b0      	push	{r4, r5, r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f000 fc77 	bl	8010502 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800fc14:	687d      	ldr	r5, [r7, #4]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3364      	adds	r3, #100	@ 0x64
 800fc1c:	681c      	ldr	r4, [r3, #0]
 800fc1e:	f002 fe37 	bl	8012890 <_ZN8touchgfx11Application11getInstanceEv>
 800fc22:	4603      	mov	r3, r0
 800fc24:	4619      	mov	r1, r3
 800fc26:	4628      	mov	r0, r5
 800fc28:	47a0      	blx	r4
    enableLCDControllerInterrupt();
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3380      	adds	r3, #128	@ 0x80
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	4798      	blx	r3
    enableInterrupts();
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3378      	adds	r3, #120	@ 0x78
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	4798      	blx	r3
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3388      	adds	r3, #136	@ 0x88
 800fc4a:	681c      	ldr	r4, [r3, #0]
 800fc4c:	4a03      	ldr	r2, [pc, #12]	@ (800fc5c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 800fc4e:	2300      	movs	r3, #0
 800fc50:	4903      	ldr	r1, [pc, #12]	@ (800fc60 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 800fc52:	47a0      	blx	r4
}
 800fc54:	bf00      	nop
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc5c:	c003fc00 	.word	0xc003fc00
 800fc60:	c0000000 	.word	0xc0000000

0800fc64 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800fc6c:	2109      	movs	r1, #9
 800fc6e:	205a      	movs	r0, #90	@ 0x5a
 800fc70:	f7ff ff58 	bl	800fb24 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800fc74:	2109      	movs	r1, #9
 800fc76:	2058      	movs	r0, #88	@ 0x58
 800fc78:	f7ff ff54 	bl	800fb24 <__NVIC_SetPriority>
}
 800fc7c:	bf00      	nop
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800fc8c:	205a      	movs	r0, #90	@ 0x5a
 800fc8e:	f7ff ff07 	bl	800faa0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800fc92:	2058      	movs	r0, #88	@ 0x58
 800fc94:	f7ff ff04 	bl	800faa0 <__NVIC_EnableIRQ>
}
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800fca8:	205a      	movs	r0, #90	@ 0x5a
 800fcaa:	f7ff ff17 	bl	800fadc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800fcae:	2058      	movs	r0, #88	@ 0x58
 800fcb0:	f7ff ff14 	bl	800fadc <__NVIC_DisableIRQ>
}
 800fcb4:	bf00      	nop
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800fcc4:	4b11      	ldr	r3, [pc, #68]	@ (800fd0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	4b0e      	ldr	r3, [pc, #56]	@ (800fd10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800fcd6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800fcd8:	4b0c      	ldr	r3, [pc, #48]	@ (800fd0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	3b01      	subs	r3, #1
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	4b0a      	ldr	r3, [pc, #40]	@ (800fd14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800fcea:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800fcec:	4b08      	ldr	r3, [pc, #32]	@ (800fd10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800fcee:	881a      	ldrh	r2, [r3, #0]
 800fcf0:	4b06      	ldr	r3, [pc, #24]	@ (800fd0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fcf2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800fcf4:	4b05      	ldr	r3, [pc, #20]	@ (800fd0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fcf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcf8:	4a04      	ldr	r2, [pc, #16]	@ (800fd0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fcfa:	f043 0301 	orr.w	r3, r3, #1
 800fcfe:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800fd00:	bf00      	nop
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	40016800 	.word	0x40016800
 800fd10:	20001de4 	.word	0x20001de4
 800fd14:	20001de6 	.word	0x20001de6

0800fd18 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 fbd4 	bl	80104d0 <_ZN8touchgfx3HAL10beginFrameEv>
 800fd28:	4603      	mov	r3, r0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b082      	sub	sp, #8
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f000 fbd3 	bl	80104e8 <_ZN8touchgfx3HAL8endFrameEv>
    touchgfx::OSWrappers::signalRenderingDone();
 800fd42:	f7fe fc81 	bl	800e648 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 800fd46:	bf00      	nop
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
	...

0800fd50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800fd58:	4b03      	ldr	r3, [pc, #12]	@ (800fd68 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800fd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	370c      	adds	r7, #12
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr
 800fd68:	40016884 	.word	0x40016884

0800fd6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800fd76:	4a06      	ldr	r2, [pc, #24]	@ (800fd90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800fd7c:	4b05      	ldr	r3, [pc, #20]	@ (800fd94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800fd7e:	2201      	movs	r2, #1
 800fd80:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800fd82:	bf00      	nop
 800fd84:	370c      	adds	r7, #12
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop
 800fd90:	40016884 	.word	0x40016884
 800fd94:	40016800 	.word	0x40016800

0800fd98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6839      	ldr	r1, [r7, #0]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 fb5c 	bl	8010464 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800fdac:	bf00      	nop
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
 800fdc0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	68b9      	ldr	r1, [r7, #8]
 800fdca:	f000 fcbc 	bl	8010746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800fdce:	4603      	mov	r3, r0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800fde0:	4b08      	ldr	r3, [pc, #32]	@ (800fe04 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	bf14      	ite	ne
 800fdec:	2301      	movne	r3, #1
 800fdee:	2300      	moveq	r3, #0
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800fdf6:	f7ff febf 	bl	800fb78 <SCB_CleanInvalidateDCache>
    }
}
 800fdfa:	bf00      	nop
 800fdfc:	3708      	adds	r7, #8
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	e000ed00 	.word	0xe000ed00

0800fe08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800fe10:	4b08      	ldr	r3, [pc, #32]	@ (800fe34 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800fe12:	695b      	ldr	r3, [r3, #20]
 800fe14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	bf14      	ite	ne
 800fe1c:	2301      	movne	r3, #1
 800fe1e:	2300      	moveq	r3, #0
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800fe26:	f7ff fea7 	bl	800fb78 <SCB_CleanInvalidateDCache>
    }
}
 800fe2a:	bf00      	nop
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	e000ed00 	.word	0xe000ed00

0800fe38 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 800fe40:	f7fb fc28 	bl	800b694 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe44:	4603      	mov	r3, r0
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	bf0c      	ite	eq
 800fe4a:	2301      	moveq	r3, #1
 800fe4c:	2300      	movne	r3, #0
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d132      	bne.n	800feba <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800fe54:	4b1b      	ldr	r3, [pc, #108]	@ (800fec4 <HAL_LTDC_LineEventCallback+0x8c>)
 800fe56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe58:	4a1b      	ldr	r2, [pc, #108]	@ (800fec8 <HAL_LTDC_LineEventCallback+0x90>)
 800fe5a:	8812      	ldrh	r2, [r2, #0]
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	bf0c      	ite	eq
 800fe60:	2301      	moveq	r3, #1
 800fe62:	2300      	movne	r3, #0
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d017      	beq.n	800fe9a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800fe6a:	4b18      	ldr	r3, [pc, #96]	@ (800fecc <HAL_LTDC_LineEventCallback+0x94>)
 800fe6c:	881b      	ldrh	r3, [r3, #0]
 800fe6e:	4619      	mov	r1, r3
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f7f6 fdfb 	bl	8006a6c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800fe76:	f7fb fc0d 	bl	800b694 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff fdfc 	bl	800fa7a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800fe82:	f7fe fbd5 	bl	800e630 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800fe86:	f7fb fc05 	bl	800b694 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f001 f885 	bl	8010f9c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800fe92:	2000      	movs	r0, #0
 800fe94:	f7fe f8e4 	bl	800e060 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fe98:	e010      	b.n	800febc <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800fe9a:	4b0b      	ldr	r3, [pc, #44]	@ (800fec8 <HAL_LTDC_LineEventCallback+0x90>)
 800fe9c:	881b      	ldrh	r3, [r3, #0]
 800fe9e:	4619      	mov	r1, r3
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7f6 fde3 	bl	8006a6c <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800fea6:	f7fb fbf5 	bl	800b694 <_ZN8touchgfx3HAL11getInstanceEv>
 800feaa:	4603      	mov	r3, r0
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fdd6 	bl	800fa5e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800feb2:	2000      	movs	r0, #0
 800feb4:	f7fe f8f0 	bl	800e098 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800feb8:	e000      	b.n	800febc <HAL_LTDC_LineEventCallback+0x84>
            return;
 800feba:	bf00      	nop
        }
    }
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	40016800 	.word	0x40016800
 800fec8:	20001de4 	.word	0x20001de4
 800fecc:	20001de6 	.word	0x20001de6

0800fed0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800fed0:	8880      	ldrh	r0, [r0, #4]
 800fed2:	4770      	bx	lr

0800fed4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	6803      	ldr	r3, [r0, #0]
 800fed8:	460c      	mov	r4, r1
 800feda:	2100      	movs	r1, #0
 800fedc:	4605      	mov	r5, r0
 800fede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fee0:	4798      	blx	r3
 800fee2:	4606      	mov	r6, r0
 800fee4:	682b      	ldr	r3, [r5, #0]
 800fee6:	4628      	mov	r0, r5
 800fee8:	1ba4      	subs	r4, r4, r6
 800feea:	6a1b      	ldr	r3, [r3, #32]
 800feec:	b2a4      	uxth	r4, r4
 800feee:	4798      	blx	r3
 800fef0:	fbb4 f0f0 	udiv	r0, r4, r0
 800fef4:	bd70      	pop	{r4, r5, r6, pc}

0800fef6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800fef6:	2300      	movs	r3, #0
 800fef8:	8083      	strh	r3, [r0, #4]
 800fefa:	4770      	bx	lr

0800fefc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800fefc:	b510      	push	{r4, lr}
 800fefe:	6803      	ldr	r3, [r0, #0]
 800ff00:	4604      	mov	r4, r0
 800ff02:	8881      	ldrh	r1, [r0, #4]
 800ff04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff06:	4798      	blx	r3
 800ff08:	88a3      	ldrh	r3, [r4, #4]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	80a3      	strh	r3, [r4, #4]
 800ff0e:	bd10      	pop	{r4, pc}

0800ff10 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800ff10:	6803      	ldr	r3, [r0, #0]
 800ff12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff14:	4718      	bx	r3

0800ff16 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800ff16:	4770      	bx	lr

0800ff18 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ff18:	4a02      	ldr	r2, [pc, #8]	@ (800ff24 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ff1a:	6002      	str	r2, [r0, #0]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	8082      	strh	r2, [r0, #4]
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	08025aec 	.word	0x08025aec

0800ff28 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ff28:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	b12b      	cbz	r3, 800ff3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ff2e:	b920      	cbnz	r0, 800ff3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ff30:	1a5a      	subs	r2, r3, r1
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	4250      	negs	r0, r2
 800ff36:	4150      	adcs	r0, r2
 800ff38:	e7f8      	b.n	800ff2c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ff3a:	4770      	bx	lr

0800ff3c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	6148      	str	r0, [r1, #20]
 800ff40:	618b      	str	r3, [r1, #24]
 800ff42:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ff44:	b913      	cbnz	r3, 800ff4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ff46:	6281      	str	r1, [r0, #40]	@ 0x28
 800ff48:	4770      	bx	lr
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	699a      	ldr	r2, [r3, #24]
 800ff4e:	2a00      	cmp	r2, #0
 800ff50:	d1fb      	bne.n	800ff4a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ff52:	6199      	str	r1, [r3, #24]
 800ff54:	4770      	bx	lr

0800ff56 <_ZN8touchgfx9Container9removeAllEv>:
 800ff56:	2200      	movs	r2, #0
 800ff58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ff5a:	b123      	cbz	r3, 800ff66 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ff5c:	6999      	ldr	r1, [r3, #24]
 800ff5e:	6281      	str	r1, [r0, #40]	@ 0x28
 800ff60:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ff64:	e7f8      	b.n	800ff58 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ff66:	4770      	bx	lr

0800ff68 <_ZN8touchgfx9Container6unlinkEv>:
 800ff68:	2300      	movs	r3, #0
 800ff6a:	6283      	str	r3, [r0, #40]	@ 0x28
 800ff6c:	4770      	bx	lr

0800ff6e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ff6e:	2200      	movs	r2, #0
 800ff70:	8002      	strh	r2, [r0, #0]
 800ff72:	8042      	strh	r2, [r0, #2]
 800ff74:	8082      	strh	r2, [r0, #4]
 800ff76:	80c2      	strh	r2, [r0, #6]
 800ff78:	4770      	bx	lr

0800ff7a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ff7a:	b570      	push	{r4, r5, r6, lr}
 800ff7c:	460d      	mov	r5, r1
 800ff7e:	4616      	mov	r6, r2
 800ff80:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ff82:	b13c      	cbz	r4, 800ff94 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	4620      	mov	r0, r4
 800ff88:	4632      	mov	r2, r6
 800ff8a:	4629      	mov	r1, r5
 800ff8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff8e:	4798      	blx	r3
 800ff90:	69a4      	ldr	r4, [r4, #24]
 800ff92:	e7f6      	b.n	800ff82 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ff94:	bd70      	pop	{r4, r5, r6, pc}

0800ff96 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ff96:	b538      	push	{r3, r4, r5, lr}
 800ff98:	460d      	mov	r5, r1
 800ff9a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ff9c:	b134      	cbz	r4, 800ffac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ff9e:	682b      	ldr	r3, [r5, #0]
 800ffa0:	4621      	mov	r1, r4
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	4798      	blx	r3
 800ffa8:	69a4      	ldr	r4, [r4, #24]
 800ffaa:	e7f7      	b.n	800ff9c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ffac:	bd38      	pop	{r3, r4, r5, pc}

0800ffae <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ffae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ffb0:	b19b      	cbz	r3, 800ffda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ffb2:	428b      	cmp	r3, r1
 800ffb4:	d109      	bne.n	800ffca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ffb6:	699a      	ldr	r2, [r3, #24]
 800ffb8:	2100      	movs	r1, #0
 800ffba:	6159      	str	r1, [r3, #20]
 800ffbc:	6282      	str	r2, [r0, #40]	@ 0x28
 800ffbe:	b902      	cbnz	r2, 800ffc2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ffc0:	4770      	bx	lr
 800ffc2:	6199      	str	r1, [r3, #24]
 800ffc4:	4770      	bx	lr
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	b13a      	cbz	r2, 800ffda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ffca:	699a      	ldr	r2, [r3, #24]
 800ffcc:	428a      	cmp	r2, r1
 800ffce:	d1fa      	bne.n	800ffc6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ffd0:	698a      	ldr	r2, [r1, #24]
 800ffd2:	619a      	str	r2, [r3, #24]
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ffda:	4770      	bx	lr

0800ffdc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ffdc:	b410      	push	{r4}
 800ffde:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	b92b      	cbnz	r3, 800fff0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ffe4:	6803      	ldr	r3, [r0, #0]
 800ffe6:	4611      	mov	r1, r2
 800ffe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ffee:	4718      	bx	r3
 800fff0:	b941      	cbnz	r1, 8010004 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800fff2:	6193      	str	r3, [r2, #24]
 800fff4:	6282      	str	r2, [r0, #40]	@ 0x28
 800fff6:	6154      	str	r4, [r2, #20]
 800fff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fffc:	4770      	bx	lr
 800fffe:	4603      	mov	r3, r0
 8010000:	2800      	cmp	r0, #0
 8010002:	d0f9      	beq.n	800fff8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010004:	4299      	cmp	r1, r3
 8010006:	6998      	ldr	r0, [r3, #24]
 8010008:	d1f9      	bne.n	800fffe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801000a:	6190      	str	r0, [r2, #24]
 801000c:	618a      	str	r2, [r1, #24]
 801000e:	e7f2      	b.n	800fff6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010014:	461f      	mov	r7, r3
 8010016:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801001a:	460d      	mov	r5, r1
 801001c:	4616      	mov	r6, r2
 801001e:	b103      	cbz	r3, 8010022 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010020:	6038      	str	r0, [r7, #0]
 8010022:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010024:	b314      	cbz	r4, 801006c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8010026:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801002a:	b1eb      	cbz	r3, 8010068 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801002c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010030:	428d      	cmp	r5, r1
 8010032:	db19      	blt.n	8010068 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010034:	b289      	uxth	r1, r1
 8010036:	8923      	ldrh	r3, [r4, #8]
 8010038:	440b      	add	r3, r1
 801003a:	b21b      	sxth	r3, r3
 801003c:	429d      	cmp	r5, r3
 801003e:	da13      	bge.n	8010068 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010040:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010044:	4296      	cmp	r6, r2
 8010046:	db0f      	blt.n	8010068 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010048:	b292      	uxth	r2, r2
 801004a:	8963      	ldrh	r3, [r4, #10]
 801004c:	4413      	add	r3, r2
 801004e:	b21b      	sxth	r3, r3
 8010050:	429e      	cmp	r6, r3
 8010052:	da09      	bge.n	8010068 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010054:	6823      	ldr	r3, [r4, #0]
 8010056:	1ab2      	subs	r2, r6, r2
 8010058:	1a69      	subs	r1, r5, r1
 801005a:	4620      	mov	r0, r4
 801005c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8010060:	b212      	sxth	r2, r2
 8010062:	463b      	mov	r3, r7
 8010064:	b209      	sxth	r1, r1
 8010066:	47c0      	blx	r8
 8010068:	69a4      	ldr	r4, [r4, #24]
 801006a:	e7db      	b.n	8010024 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801006c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010070 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	4c6d      	ldr	r4, [pc, #436]	@ (801022c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010076:	b0a1      	sub	sp, #132	@ 0x84
 8010078:	4606      	mov	r6, r0
 801007a:	6824      	ldr	r4, [r4, #0]
 801007c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801007e:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8010082:	2400      	movs	r4, #0
 8010084:	9303      	str	r3, [sp, #12]
 8010086:	802c      	strh	r4, [r5, #0]
 8010088:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 801008a:	802c      	strh	r4, [r5, #0]
 801008c:	601c      	str	r4, [r3, #0]
 801008e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010092:	f7ff ffbd 	bl	8010010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010096:	f1b9 0f03 	cmp.w	r9, #3
 801009a:	f340 80c1 	ble.w	8010220 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801009e:	4631      	mov	r1, r6
 80100a0:	a80c      	add	r0, sp, #48	@ 0x30
 80100a2:	f003 fd09 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80100a6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80100aa:	9306      	str	r3, [sp, #24]
 80100ac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80100b0:	9307      	str	r3, [sp, #28]
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	f8d3 a000 	ldr.w	sl, [r3]
 80100b8:	f1ba 0f00 	cmp.w	sl, #0
 80100bc:	f000 80b3 	beq.w	8010226 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80100c0:	4651      	mov	r1, sl
 80100c2:	a810      	add	r0, sp, #64	@ 0x40
 80100c4:	f003 fcf8 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80100c8:	2002      	movs	r0, #2
 80100ca:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80100ce:	9b01      	ldr	r3, [sp, #4]
 80100d0:	9a06      	ldr	r2, [sp, #24]
 80100d2:	fb91 f1f0 	sdiv	r1, r1, r0
 80100d6:	189d      	adds	r5, r3, r2
 80100d8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80100dc:	9a07      	ldr	r2, [sp, #28]
 80100de:	4419      	add	r1, r3
 80100e0:	9b02      	ldr	r3, [sp, #8]
 80100e2:	4413      	add	r3, r2
 80100e4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80100e8:	1a6d      	subs	r5, r5, r1
 80100ea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80100ee:	fb92 f2f0 	sdiv	r2, r2, r0
 80100f2:	440a      	add	r2, r1
 80100f4:	1a9b      	subs	r3, r3, r2
 80100f6:	435b      	muls	r3, r3
 80100f8:	fb05 3505 	mla	r5, r5, r5, r3
 80100fc:	4f4c      	ldr	r7, [pc, #304]	@ (8010230 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80100fe:	ac10      	add	r4, sp, #64	@ 0x40
 8010100:	f1b9 0f0c 	cmp.w	r9, #12
 8010104:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010108:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801010a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801010c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801010e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010110:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010118:	f04f 0303 	mov.w	r3, #3
 801011c:	bfd8      	it	le
 801011e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010122:	f04f 0400 	mov.w	r4, #0
 8010126:	f8cd 9000 	str.w	r9, [sp]
 801012a:	bfcc      	ite	gt
 801012c:	4698      	movgt	r8, r3
 801012e:	fb92 f8f3 	sdivle	r8, r2, r3
 8010132:	1c63      	adds	r3, r4, #1
 8010134:	aa10      	add	r2, sp, #64	@ 0x40
 8010136:	f004 0401 	and.w	r4, r4, #1
 801013a:	f04f 0b00 	mov.w	fp, #0
 801013e:	9308      	str	r3, [sp, #32]
 8010140:	9b00      	ldr	r3, [sp, #0]
 8010142:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8010146:	fb93 f3f8 	sdiv	r3, r3, r8
 801014a:	3404      	adds	r4, #4
 801014c:	b29b      	uxth	r3, r3
 801014e:	9304      	str	r3, [sp, #16]
 8010150:	9a04      	ldr	r2, [sp, #16]
 8010152:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010156:	fb13 f302 	smulbb	r3, r3, r2
 801015a:	9a01      	ldr	r2, [sp, #4]
 801015c:	b29b      	uxth	r3, r3
 801015e:	1899      	adds	r1, r3, r2
 8010160:	9305      	str	r3, [sp, #20]
 8010162:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010166:	b209      	sxth	r1, r1
 8010168:	4299      	cmp	r1, r3
 801016a:	db4d      	blt.n	8010208 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801016c:	8932      	ldrh	r2, [r6, #8]
 801016e:	4413      	add	r3, r2
 8010170:	b21b      	sxth	r3, r3
 8010172:	4299      	cmp	r1, r3
 8010174:	da48      	bge.n	8010208 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010176:	9b04      	ldr	r3, [sp, #16]
 8010178:	6827      	ldr	r7, [r4, #0]
 801017a:	fb17 f703 	smulbb	r7, r7, r3
 801017e:	9b02      	ldr	r3, [sp, #8]
 8010180:	b2bf      	uxth	r7, r7
 8010182:	18fa      	adds	r2, r7, r3
 8010184:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010188:	b212      	sxth	r2, r2
 801018a:	429a      	cmp	r2, r3
 801018c:	db3c      	blt.n	8010208 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801018e:	8970      	ldrh	r0, [r6, #10]
 8010190:	4403      	add	r3, r0
 8010192:	b21b      	sxth	r3, r3
 8010194:	429a      	cmp	r2, r3
 8010196:	da37      	bge.n	8010208 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010198:	2300      	movs	r3, #0
 801019a:	4630      	mov	r0, r6
 801019c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801019e:	ab0b      	add	r3, sp, #44	@ 0x2c
 80101a0:	f7ff ff36 	bl	8010010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80101a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80101a6:	b37a      	cbz	r2, 8010208 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101a8:	4552      	cmp	r2, sl
 80101aa:	d02d      	beq.n	8010208 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80101ac:	4611      	mov	r1, r2
 80101ae:	a80e      	add	r0, sp, #56	@ 0x38
 80101b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80101b2:	f003 fc81 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80101b6:	f04f 0e02 	mov.w	lr, #2
 80101ba:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80101be:	9a06      	ldr	r2, [sp, #24]
 80101c0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80101c4:	9b01      	ldr	r3, [sp, #4]
 80101c6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80101ca:	4413      	add	r3, r2
 80101cc:	9a07      	ldr	r2, [sp, #28]
 80101ce:	fb91 f1fe 	sdiv	r1, r1, lr
 80101d2:	fb9c fcfe 	sdiv	ip, ip, lr
 80101d6:	4401      	add	r1, r0
 80101d8:	1a58      	subs	r0, r3, r1
 80101da:	9b02      	ldr	r3, [sp, #8]
 80101dc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80101e0:	4413      	add	r3, r2
 80101e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101e4:	448c      	add	ip, r1
 80101e6:	eba3 030c 	sub.w	r3, r3, ip
 80101ea:	435b      	muls	r3, r3
 80101ec:	fb00 3300 	mla	r3, r0, r0, r3
 80101f0:	42ab      	cmp	r3, r5
 80101f2:	d208      	bcs.n	8010206 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80101f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101f6:	461d      	mov	r5, r3
 80101f8:	9803      	ldr	r0, [sp, #12]
 80101fa:	6001      	str	r1, [r0, #0]
 80101fc:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80101fe:	9805      	ldr	r0, [sp, #20]
 8010200:	8008      	strh	r0, [r1, #0]
 8010202:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8010204:	800f      	strh	r7, [r1, #0]
 8010206:	4692      	mov	sl, r2
 8010208:	f10b 0b01 	add.w	fp, fp, #1
 801020c:	3408      	adds	r4, #8
 801020e:	f1bb 0f04 	cmp.w	fp, #4
 8010212:	d19d      	bne.n	8010150 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010214:	9b00      	ldr	r3, [sp, #0]
 8010216:	9c08      	ldr	r4, [sp, #32]
 8010218:	444b      	add	r3, r9
 801021a:	4544      	cmp	r4, r8
 801021c:	9300      	str	r3, [sp, #0]
 801021e:	d188      	bne.n	8010132 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8010220:	b021      	add	sp, #132	@ 0x84
 8010222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010226:	f04f 35ff 	mov.w	r5, #4294967295
 801022a:	e767      	b.n	80100fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801022c:	20001df4 	.word	0x20001df4
 8010230:	08025088 	.word	0x08025088

08010234 <_ZN8touchgfx4RectaNERKS0_>:
 8010234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010238:	f9b1 7000 	ldrsh.w	r7, [r1]
 801023c:	888c      	ldrh	r4, [r1, #4]
 801023e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010242:	443c      	add	r4, r7
 8010244:	b2a4      	uxth	r4, r4
 8010246:	fa0f f884 	sxth.w	r8, r4
 801024a:	45c1      	cmp	r9, r8
 801024c:	da2f      	bge.n	80102ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801024e:	8882      	ldrh	r2, [r0, #4]
 8010250:	444a      	add	r2, r9
 8010252:	b292      	uxth	r2, r2
 8010254:	fa0f fe82 	sxth.w	lr, r2
 8010258:	4577      	cmp	r7, lr
 801025a:	da28      	bge.n	80102ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801025c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010260:	88cb      	ldrh	r3, [r1, #6]
 8010262:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010266:	442b      	add	r3, r5
 8010268:	b21b      	sxth	r3, r3
 801026a:	429e      	cmp	r6, r3
 801026c:	da1f      	bge.n	80102ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801026e:	88c3      	ldrh	r3, [r0, #6]
 8010270:	4433      	add	r3, r6
 8010272:	b29b      	uxth	r3, r3
 8010274:	fa0f fc83 	sxth.w	ip, r3
 8010278:	4565      	cmp	r5, ip
 801027a:	da18      	bge.n	80102ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801027c:	454f      	cmp	r7, r9
 801027e:	bfb8      	it	lt
 8010280:	464f      	movlt	r7, r9
 8010282:	42b5      	cmp	r5, r6
 8010284:	bfb8      	it	lt
 8010286:	4635      	movlt	r5, r6
 8010288:	45f0      	cmp	r8, lr
 801028a:	bfd8      	it	le
 801028c:	4622      	movle	r2, r4
 801028e:	1bd2      	subs	r2, r2, r7
 8010290:	8082      	strh	r2, [r0, #4]
 8010292:	884a      	ldrh	r2, [r1, #2]
 8010294:	88c9      	ldrh	r1, [r1, #6]
 8010296:	8007      	strh	r7, [r0, #0]
 8010298:	440a      	add	r2, r1
 801029a:	8045      	strh	r5, [r0, #2]
 801029c:	b292      	uxth	r2, r2
 801029e:	b211      	sxth	r1, r2
 80102a0:	458c      	cmp	ip, r1
 80102a2:	bfa8      	it	ge
 80102a4:	4613      	movge	r3, r2
 80102a6:	1b5b      	subs	r3, r3, r5
 80102a8:	80c3      	strh	r3, [r0, #6]
 80102aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102ae:	2300      	movs	r3, #0
 80102b0:	8003      	strh	r3, [r0, #0]
 80102b2:	8043      	strh	r3, [r0, #2]
 80102b4:	8083      	strh	r3, [r0, #4]
 80102b6:	80c3      	strh	r3, [r0, #6]
 80102b8:	e7f7      	b.n	80102aa <_ZN8touchgfx4RectaNERKS0_+0x76>

080102ba <_ZNK8touchgfx4Rect7isEmptyEv>:
 80102ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	dd06      	ble.n	80102d0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80102c2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80102c6:	2800      	cmp	r0, #0
 80102c8:	bfcc      	ite	gt
 80102ca:	2000      	movgt	r0, #0
 80102cc:	2001      	movle	r0, #1
 80102ce:	4770      	bx	lr
 80102d0:	2001      	movs	r0, #1
 80102d2:	4770      	bx	lr

080102d4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80102d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d8:	2300      	movs	r3, #0
 80102da:	4604      	mov	r4, r0
 80102dc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80102de:	8003      	strh	r3, [r0, #0]
 80102e0:	8043      	strh	r3, [r0, #2]
 80102e2:	8083      	strh	r3, [r0, #4]
 80102e4:	80c3      	strh	r3, [r0, #6]
 80102e6:	2d00      	cmp	r5, #0
 80102e8:	d040      	beq.n	801036c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80102ea:	1d28      	adds	r0, r5, #4
 80102ec:	f7ff ffe5 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80102f0:	b988      	cbnz	r0, 8010316 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80102f2:	4620      	mov	r0, r4
 80102f4:	f7ff ffe1 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80102f8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80102fc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010300:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010304:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010308:	b138      	cbz	r0, 801031a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801030a:	8022      	strh	r2, [r4, #0]
 801030c:	8063      	strh	r3, [r4, #2]
 801030e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010312:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010316:	69ad      	ldr	r5, [r5, #24]
 8010318:	e7e5      	b.n	80102e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801031a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801031e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010322:	4290      	cmp	r0, r2
 8010324:	4607      	mov	r7, r0
 8010326:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801032a:	460e      	mov	r6, r1
 801032c:	bfa8      	it	ge
 801032e:	4617      	movge	r7, r2
 8010330:	4299      	cmp	r1, r3
 8010332:	4472      	add	r2, lr
 8010334:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010338:	bfa8      	it	ge
 801033a:	461e      	movge	r6, r3
 801033c:	4440      	add	r0, r8
 801033e:	4471      	add	r1, lr
 8010340:	4463      	add	r3, ip
 8010342:	b200      	sxth	r0, r0
 8010344:	8027      	strh	r7, [r4, #0]
 8010346:	b212      	sxth	r2, r2
 8010348:	8066      	strh	r6, [r4, #2]
 801034a:	b209      	sxth	r1, r1
 801034c:	b21b      	sxth	r3, r3
 801034e:	4290      	cmp	r0, r2
 8010350:	bfac      	ite	ge
 8010352:	ebc7 0200 	rsbge	r2, r7, r0
 8010356:	ebc7 0202 	rsblt	r2, r7, r2
 801035a:	4299      	cmp	r1, r3
 801035c:	bfac      	ite	ge
 801035e:	ebc6 0301 	rsbge	r3, r6, r1
 8010362:	ebc6 0303 	rsblt	r3, r6, r3
 8010366:	80a2      	strh	r2, [r4, #4]
 8010368:	80e3      	strh	r3, [r4, #6]
 801036a:	e7d4      	b.n	8010316 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801036c:	4620      	mov	r0, r4
 801036e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010372 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010372:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010376:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801037a:	b383      	cbz	r3, 80103de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801037c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801037e:	b374      	cbz	r4, 80103de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010380:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010384:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010388:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801038c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010390:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010394:	b303      	cbz	r3, 80103d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010396:	4668      	mov	r0, sp
 8010398:	1d21      	adds	r1, r4, #4
 801039a:	f8ad 5000 	strh.w	r5, [sp]
 801039e:	f8ad 6002 	strh.w	r6, [sp, #2]
 80103a2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80103a6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80103aa:	f7ff ff43 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 80103ae:	4668      	mov	r0, sp
 80103b0:	f7ff ff83 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80103b4:	b980      	cbnz	r0, 80103d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80103b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80103ba:	4669      	mov	r1, sp
 80103bc:	88a2      	ldrh	r2, [r4, #4]
 80103be:	4620      	mov	r0, r4
 80103c0:	1a9b      	subs	r3, r3, r2
 80103c2:	88e2      	ldrh	r2, [r4, #6]
 80103c4:	f8ad 3000 	strh.w	r3, [sp]
 80103c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80103cc:	1a9b      	subs	r3, r3, r2
 80103ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 80103d2:	6823      	ldr	r3, [r4, #0]
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	4798      	blx	r3
 80103d8:	69a4      	ldr	r4, [r4, #24]
 80103da:	2c00      	cmp	r4, #0
 80103dc:	d1d8      	bne.n	8010390 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80103de:	b002      	add	sp, #8
 80103e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80103e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103e6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80103ea:	460d      	mov	r5, r1
 80103ec:	4616      	mov	r6, r2
 80103ee:	b323      	cbz	r3, 801043a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80103f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80103f2:	b314      	cbz	r4, 801043a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80103f4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80103f8:	b1eb      	cbz	r3, 8010436 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80103fa:	6828      	ldr	r0, [r5, #0]
 80103fc:	466b      	mov	r3, sp
 80103fe:	6869      	ldr	r1, [r5, #4]
 8010400:	c303      	stmia	r3!, {r0, r1}
 8010402:	4668      	mov	r0, sp
 8010404:	1d21      	adds	r1, r4, #4
 8010406:	f7ff ff15 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 801040a:	4668      	mov	r0, sp
 801040c:	f7ff ff55 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8010410:	b988      	cbnz	r0, 8010436 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010412:	f8bd 3000 	ldrh.w	r3, [sp]
 8010416:	4669      	mov	r1, sp
 8010418:	88a2      	ldrh	r2, [r4, #4]
 801041a:	4620      	mov	r0, r4
 801041c:	1a9b      	subs	r3, r3, r2
 801041e:	88e2      	ldrh	r2, [r4, #6]
 8010420:	f8ad 3000 	strh.w	r3, [sp]
 8010424:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010428:	1a9b      	subs	r3, r3, r2
 801042a:	4632      	mov	r2, r6
 801042c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010434:	4798      	blx	r3
 8010436:	69a4      	ldr	r4, [r4, #24]
 8010438:	e7db      	b.n	80103f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801043a:	b002      	add	sp, #8
 801043c:	bd70      	pop	{r4, r5, r6, pc}

0801043e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801043e:	4770      	bx	lr

08010440 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8010440:	4770      	bx	lr

08010442 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010442:	6803      	ldr	r3, [r0, #0]
 8010444:	b513      	push	{r0, r1, r4, lr}
 8010446:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 801044a:	2300      	movs	r3, #0
 801044c:	e9cd 3300 	strd	r3, r3, [sp]
 8010450:	466b      	mov	r3, sp
 8010452:	47a0      	blx	r4
 8010454:	b002      	add	sp, #8
 8010456:	bd10      	pop	{r4, pc}

08010458 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010458:	2301      	movs	r3, #1
 801045a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801045e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010462:	4770      	bx	lr

08010464 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010464:	2301      	movs	r3, #1
 8010466:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801046a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801046e:	4770      	bx	lr

08010470 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010470:	6843      	ldr	r3, [r0, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	725a      	strb	r2, [r3, #9]
 8010476:	6840      	ldr	r0, [r0, #4]
 8010478:	6803      	ldr	r3, [r0, #0]
 801047a:	691b      	ldr	r3, [r3, #16]
 801047c:	4718      	bx	r3

0801047e <_ZN8touchgfx3HAL8flushDMAEv>:
 801047e:	6840      	ldr	r0, [r0, #4]
 8010480:	6803      	ldr	r3, [r0, #0]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	4718      	bx	r3

08010486 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010486:	b530      	push	{r4, r5, lr}
 8010488:	b08b      	sub	sp, #44	@ 0x2c
 801048a:	6804      	ldr	r4, [r0, #0]
 801048c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8010490:	9509      	str	r5, [sp, #36]	@ 0x24
 8010492:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8010496:	9508      	str	r5, [sp, #32]
 8010498:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 801049c:	9507      	str	r5, [sp, #28]
 801049e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80104a2:	9506      	str	r5, [sp, #24]
 80104a4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80104a8:	9505      	str	r5, [sp, #20]
 80104aa:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80104ae:	9504      	str	r5, [sp, #16]
 80104b0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80104b4:	9503      	str	r5, [sp, #12]
 80104b6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80104ba:	9502      	str	r5, [sp, #8]
 80104bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80104c0:	e9cd 3500 	strd	r3, r5, [sp]
 80104c4:	4613      	mov	r3, r2
 80104c6:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80104c8:	2200      	movs	r2, #0
 80104ca:	47a0      	blx	r4
 80104cc:	b00b      	add	sp, #44	@ 0x2c
 80104ce:	bd30      	pop	{r4, r5, pc}

080104d0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80104d0:	4b04      	ldr	r3, [pc, #16]	@ (80104e4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	b123      	cbz	r3, 80104e0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80104d6:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80104da:	f080 0001 	eor.w	r0, r0, #1
 80104de:	4770      	bx	lr
 80104e0:	2001      	movs	r0, #1
 80104e2:	4770      	bx	lr
 80104e4:	20001df2 	.word	0x20001df2

080104e8 <_ZN8touchgfx3HAL8endFrameEv>:
 80104e8:	b510      	push	{r4, lr}
 80104ea:	4604      	mov	r4, r0
 80104ec:	6840      	ldr	r0, [r0, #4]
 80104ee:	6803      	ldr	r3, [r0, #0]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	4798      	blx	r3
 80104f4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80104f8:	b113      	cbz	r3, 8010500 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80104fa:	2301      	movs	r3, #1
 80104fc:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010500:	bd10      	pop	{r4, pc}

08010502 <_ZN8touchgfx3HAL10initializeEv>:
 8010502:	b510      	push	{r4, lr}
 8010504:	4604      	mov	r4, r0
 8010506:	f7fe f847 	bl	800e598 <_ZN8touchgfx10OSWrappers10initializeEv>
 801050a:	f7fd fda1 	bl	800e050 <_ZN8touchgfx4GPIO4initEv>
 801050e:	6860      	ldr	r0, [r4, #4]
 8010510:	6803      	ldr	r3, [r0, #0]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	4798      	blx	r3
 8010516:	68e0      	ldr	r0, [r4, #12]
 8010518:	6803      	ldr	r3, [r0, #0]
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	4798      	blx	r3
 801051e:	6823      	ldr	r3, [r4, #0]
 8010520:	4620      	mov	r0, r4
 8010522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010528:	4718      	bx	r3

0801052a <_ZN8touchgfx3HAL9taskEntryEv>:
 801052a:	b508      	push	{r3, lr}
 801052c:	6803      	ldr	r3, [r0, #0]
 801052e:	4604      	mov	r4, r0
 8010530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010534:	4798      	blx	r3
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801053a:	4620      	mov	r0, r4
 801053c:	4798      	blx	r3
 801053e:	f7fe f89f 	bl	800e680 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8010542:	6823      	ldr	r3, [r4, #0]
 8010544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010546:	e7f8      	b.n	801053a <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08010548 <_ZN8touchgfx3HAL4tickEv>:
 8010548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801054a:	6803      	ldr	r3, [r0, #0]
 801054c:	4604      	mov	r4, r0
 801054e:	4d5b      	ldr	r5, [pc, #364]	@ (80106bc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010554:	4798      	blx	r3
 8010556:	2800      	cmp	r0, #0
 8010558:	f000 8095 	beq.w	8010686 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801055c:	2001      	movs	r0, #1
 801055e:	2600      	movs	r6, #0
 8010560:	f7fd fd7e 	bl	800e060 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010564:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8010568:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 801056c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010570:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010574:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8010578:	b133      	cbz	r3, 8010588 <_ZN8touchgfx3HAL4tickEv+0x40>
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	4620      	mov	r0, r4
 801057e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010582:	4798      	blx	r3
 8010584:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010588:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 801058c:	2601      	movs	r6, #1
 801058e:	6862      	ldr	r2, [r4, #4]
 8010590:	f083 0301 	eor.w	r3, r3, #1
 8010594:	702e      	strb	r6, [r5, #0]
 8010596:	7253      	strb	r3, [r2, #9]
 8010598:	f002 f97a 	bl	8012890 <_ZN8touchgfx11Application11getInstanceEv>
 801059c:	6803      	ldr	r3, [r0, #0]
 801059e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105a0:	4798      	blx	r3
 80105a2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80105a6:	b90b      	cbnz	r3, 80105ac <_ZN8touchgfx3HAL4tickEv+0x64>
 80105a8:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80105ac:	f002 f970 	bl	8012890 <_ZN8touchgfx11Application11getInstanceEv>
 80105b0:	6803      	ldr	r3, [r0, #0]
 80105b2:	695b      	ldr	r3, [r3, #20]
 80105b4:	4798      	blx	r3
 80105b6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80105b8:	6803      	ldr	r3, [r0, #0]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	4798      	blx	r3
 80105be:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80105c2:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80105c6:	3b01      	subs	r3, #1
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80105ce:	b10a      	cbz	r2, 80105d4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d1eb      	bne.n	80105ac <_ZN8touchgfx3HAL4tickEv+0x64>
 80105d4:	4a3a      	ldr	r2, [pc, #232]	@ (80106c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80105d6:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80105da:	7813      	ldrb	r3, [r2, #0]
 80105dc:	3301      	adds	r3, #1
 80105de:	b25b      	sxtb	r3, r3
 80105e0:	4299      	cmp	r1, r3
 80105e2:	7013      	strb	r3, [r2, #0]
 80105e4:	dc10      	bgt.n	8010608 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80105e6:	2300      	movs	r3, #0
 80105e8:	68e0      	ldr	r0, [r4, #12]
 80105ea:	a902      	add	r1, sp, #8
 80105ec:	7013      	strb	r3, [r2, #0]
 80105ee:	aa03      	add	r2, sp, #12
 80105f0:	6803      	ldr	r3, [r0, #0]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	4798      	blx	r3
 80105f6:	6823      	ldr	r3, [r4, #0]
 80105f8:	2800      	cmp	r0, #0
 80105fa:	d050      	beq.n	801069e <_ZN8touchgfx3HAL4tickEv+0x156>
 80105fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010600:	4620      	mov	r0, r4
 8010602:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010606:	4798      	blx	r3
 8010608:	2300      	movs	r3, #0
 801060a:	6960      	ldr	r0, [r4, #20]
 801060c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010610:	b158      	cbz	r0, 801062a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010612:	6803      	ldr	r3, [r0, #0]
 8010614:	f10d 0107 	add.w	r1, sp, #7
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	4798      	blx	r3
 801061c:	b128      	cbz	r0, 801062a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801061e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010620:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010624:	6803      	ldr	r3, [r0, #0]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	4798      	blx	r3
 801062a:	f104 001c 	add.w	r0, r4, #28
 801062e:	f013 f807 	bl	8023640 <_ZN8touchgfx8Gestures4tickEv>
 8010632:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8010636:	b30b      	cbz	r3, 801067c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010638:	6920      	ldr	r0, [r4, #16]
 801063a:	6803      	ldr	r3, [r0, #0]
 801063c:	691b      	ldr	r3, [r3, #16]
 801063e:	4798      	blx	r3
 8010640:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010642:	4606      	mov	r6, r0
 8010644:	b903      	cbnz	r3, 8010648 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010646:	6760      	str	r0, [r4, #116]	@ 0x74
 8010648:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801064a:	4a1e      	ldr	r2, [pc, #120]	@ (80106c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801064c:	1af3      	subs	r3, r6, r3
 801064e:	4293      	cmp	r3, r2
 8010650:	d914      	bls.n	801067c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010652:	6920      	ldr	r0, [r4, #16]
 8010654:	6803      	ldr	r3, [r0, #0]
 8010656:	699b      	ldr	r3, [r3, #24]
 8010658:	4798      	blx	r3
 801065a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801065c:	2264      	movs	r2, #100	@ 0x64
 801065e:	1af3      	subs	r3, r6, r3
 8010660:	fbb3 f3f2 	udiv	r3, r3, r2
 8010664:	fbb0 f0f3 	udiv	r0, r0, r3
 8010668:	2800      	cmp	r0, #0
 801066a:	dc1d      	bgt.n	80106a8 <_ZN8touchgfx3HAL4tickEv+0x160>
 801066c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8010670:	6920      	ldr	r0, [r4, #16]
 8010672:	2100      	movs	r1, #0
 8010674:	6803      	ldr	r3, [r0, #0]
 8010676:	69db      	ldr	r3, [r3, #28]
 8010678:	4798      	blx	r3
 801067a:	6766      	str	r6, [r4, #116]	@ 0x74
 801067c:	f002 f908 	bl	8012890 <_ZN8touchgfx11Application11getInstanceEv>
 8010680:	6803      	ldr	r3, [r0, #0]
 8010682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010684:	4798      	blx	r3
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	4620      	mov	r0, r4
 801068a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801068e:	4798      	blx	r3
 8010690:	2001      	movs	r0, #1
 8010692:	f7fd fd01 	bl	800e098 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010696:	2300      	movs	r3, #0
 8010698:	702b      	strb	r3, [r5, #0]
 801069a:	b004      	add	sp, #16
 801069c:	bd70      	pop	{r4, r5, r6, pc}
 801069e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80106a2:	4620      	mov	r0, r4
 80106a4:	4798      	blx	r3
 80106a6:	e7af      	b.n	8010608 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80106a8:	2863      	cmp	r0, #99	@ 0x63
 80106aa:	bfcb      	itete	gt
 80106ac:	2300      	movgt	r3, #0
 80106ae:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80106b2:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 80106b6:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 80106ba:	e7d9      	b.n	8010670 <_ZN8touchgfx3HAL4tickEv+0x128>
 80106bc:	20001df8 	.word	0x20001df8
 80106c0:	20001df9 	.word	0x20001df9
 80106c4:	05f5e100 	.word	0x05f5e100

080106c8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80106c8:	b510      	push	{r4, lr}
 80106ca:	4604      	mov	r4, r0
 80106cc:	f7fd ff8c 	bl	800e5e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80106d0:	2200      	movs	r2, #0
 80106d2:	6863      	ldr	r3, [r4, #4]
 80106d4:	729a      	strb	r2, [r3, #10]
 80106d6:	bd10      	pop	{r4, pc}

080106d8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80106d8:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80106da:	301c      	adds	r0, #28
 80106dc:	f012 bfae 	b.w	802363c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080106e0 <_ZN8touchgfx3HAL5touchEll>:
 80106e0:	b530      	push	{r4, r5, lr}
 80106e2:	b087      	sub	sp, #28
 80106e4:	4604      	mov	r4, r0
 80106e6:	a804      	add	r0, sp, #16
 80106e8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80106ec:	f001 fec2 	bl	8012474 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80106f0:	9b04      	ldr	r3, [sp, #16]
 80106f2:	a906      	add	r1, sp, #24
 80106f4:	a803      	add	r0, sp, #12
 80106f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80106fa:	9b05      	ldr	r3, [sp, #20]
 80106fc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010700:	f001 ff0a 	bl	8012518 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010704:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8010708:	f104 001c 	add.w	r0, r4, #28
 801070c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010710:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010714:	b189      	cbz	r1, 801073a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8010716:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	4613      	mov	r3, r2
 801071e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8010722:	462a      	mov	r2, r5
 8010724:	f012 ff9a 	bl	802365c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010728:	b128      	cbz	r0, 8010736 <_ZN8touchgfx3HAL5touchEll+0x56>
 801072a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801072e:	6623      	str	r3, [r4, #96]	@ 0x60
 8010730:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010734:	6663      	str	r3, [r4, #100]	@ 0x64
 8010736:	b007      	add	sp, #28
 8010738:	bd30      	pop	{r4, r5, pc}
 801073a:	f012 ffcf 	bl	80236dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801073e:	2301      	movs	r3, #1
 8010740:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010744:	e7f1      	b.n	801072a <_ZN8touchgfx3HAL5touchEll+0x4a>

08010746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010746:	b510      	push	{r4, lr}
 8010748:	2b00      	cmp	r3, #0
 801074a:	d046      	beq.n	80107da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801074c:	ea81 0002 	eor.w	r0, r1, r2
 8010750:	07c4      	lsls	r4, r0, #31
 8010752:	d508      	bpl.n	8010766 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010754:	440b      	add	r3, r1
 8010756:	3a01      	subs	r2, #1
 8010758:	428b      	cmp	r3, r1
 801075a:	d93e      	bls.n	80107da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801075c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010760:	f801 0b01 	strb.w	r0, [r1], #1
 8010764:	e7f8      	b.n	8010758 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010766:	07d0      	lsls	r0, r2, #31
 8010768:	bf42      	ittt	mi
 801076a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801076e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010772:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010776:	2b01      	cmp	r3, #1
 8010778:	d911      	bls.n	801079e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801077a:	ea81 0402 	eor.w	r4, r1, r2
 801077e:	4610      	mov	r0, r2
 8010780:	07a4      	lsls	r4, r4, #30
 8010782:	d022      	beq.n	80107ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010784:	f023 0401 	bic.w	r4, r3, #1
 8010788:	440c      	add	r4, r1
 801078a:	428c      	cmp	r4, r1
 801078c:	4602      	mov	r2, r0
 801078e:	d904      	bls.n	801079a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010790:	8812      	ldrh	r2, [r2, #0]
 8010792:	3002      	adds	r0, #2
 8010794:	f821 2b02 	strh.w	r2, [r1], #2
 8010798:	e7f7      	b.n	801078a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801079a:	f003 0301 	and.w	r3, r3, #1
 801079e:	f023 0003 	bic.w	r0, r3, #3
 80107a2:	4408      	add	r0, r1
 80107a4:	4288      	cmp	r0, r1
 80107a6:	4614      	mov	r4, r2
 80107a8:	d904      	bls.n	80107b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80107aa:	6824      	ldr	r4, [r4, #0]
 80107ac:	3204      	adds	r2, #4
 80107ae:	f841 4b04 	str.w	r4, [r1], #4
 80107b2:	e7f7      	b.n	80107a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80107b4:	f003 0303 	and.w	r3, r3, #3
 80107b8:	3a01      	subs	r2, #1
 80107ba:	440b      	add	r3, r1
 80107bc:	428b      	cmp	r3, r1
 80107be:	d90c      	bls.n	80107da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80107c0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80107c4:	f801 0b01 	strb.w	r0, [r1], #1
 80107c8:	e7f8      	b.n	80107bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80107ca:	0790      	lsls	r0, r2, #30
 80107cc:	d0e7      	beq.n	801079e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80107ce:	f832 0b02 	ldrh.w	r0, [r2], #2
 80107d2:	3b02      	subs	r3, #2
 80107d4:	f821 0b02 	strh.w	r0, [r1], #2
 80107d8:	e7e1      	b.n	801079e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80107da:	2001      	movs	r0, #1
 80107dc:	bd10      	pop	{r4, pc}

080107de <_ZN8touchgfx3HAL7noTouchEv>:
 80107de:	b510      	push	{r4, lr}
 80107e0:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80107e4:	4604      	mov	r4, r0
 80107e6:	b153      	cbz	r3, 80107fe <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80107e8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80107ec:	2101      	movs	r1, #1
 80107ee:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80107f2:	301c      	adds	r0, #28
 80107f4:	f012 ff72 	bl	80236dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80107f8:	2300      	movs	r3, #0
 80107fa:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80107fe:	bd10      	pop	{r4, pc}

08010800 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8010800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010804:	b085      	sub	sp, #20
 8010806:	4604      	mov	r4, r0
 8010808:	2000      	movs	r0, #0
 801080a:	4699      	mov	r9, r3
 801080c:	ad04      	add	r5, sp, #16
 801080e:	460f      	mov	r7, r1
 8010810:	4690      	mov	r8, r2
 8010812:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010816:	69a0      	ldr	r0, [r4, #24]
 8010818:	6806      	ldr	r6, [r0, #0]
 801081a:	9501      	str	r5, [sp, #4]
 801081c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8010820:	9500      	str	r5, [sp, #0]
 8010822:	6835      	ldr	r5, [r6, #0]
 8010824:	47a8      	blx	r5
 8010826:	4d10      	ldr	r5, [pc, #64]	@ (8010868 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010828:	4606      	mov	r6, r0
 801082a:	f8a5 9000 	strh.w	r9, [r5]
 801082e:	f7fa ff3d 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8010832:	6803      	ldr	r3, [r0, #0]
 8010834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010836:	4798      	blx	r3
 8010838:	b128      	cbz	r0, 8010846 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801083a:	2801      	cmp	r0, #1
 801083c:	d00b      	beq.n	8010856 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801083e:	4630      	mov	r0, r6
 8010840:	b005      	add	sp, #20
 8010842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010846:	882b      	ldrh	r3, [r5, #0]
 8010848:	fb08 7203 	mla	r2, r8, r3, r7
 801084c:	9b03      	ldr	r3, [sp, #12]
 801084e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010852:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010854:	e7f3      	b.n	801083e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010856:	882a      	ldrh	r2, [r5, #0]
 8010858:	9b03      	ldr	r3, [sp, #12]
 801085a:	fb08 7202 	mla	r2, r8, r2, r7
 801085e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010862:	1a9a      	subs	r2, r3, r2
 8010864:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8010866:	e7ea      	b.n	801083e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010868:	20001dee 	.word	0x20001dee

0801086c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801086e:	b08b      	sub	sp, #44	@ 0x2c
 8010870:	4617      	mov	r7, r2
 8010872:	4604      	mov	r4, r0
 8010874:	460e      	mov	r6, r1
 8010876:	461d      	mov	r5, r3
 8010878:	f7fa ff18 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 801087c:	6803      	ldr	r3, [r0, #0]
 801087e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010880:	4798      	blx	r3
 8010882:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010886:	9007      	str	r0, [sp, #28]
 8010888:	4631      	mov	r1, r6
 801088a:	6822      	ldr	r2, [r4, #0]
 801088c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010890:	4b0c      	ldr	r3, [pc, #48]	@ (80108c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010892:	4620      	mov	r0, r4
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	9306      	str	r3, [sp, #24]
 8010898:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801089c:	9305      	str	r3, [sp, #20]
 801089e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80108a2:	9304      	str	r3, [sp, #16]
 80108a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80108a8:	9303      	str	r3, [sp, #12]
 80108aa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80108ae:	9302      	str	r3, [sp, #8]
 80108b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80108b4:	e9cd 5300 	strd	r5, r3, [sp]
 80108b8:	463b      	mov	r3, r7
 80108ba:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80108bc:	2200      	movs	r2, #0
 80108be:	47a8      	blx	r5
 80108c0:	b00b      	add	sp, #44	@ 0x2c
 80108c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108c4:	20001dee 	.word	0x20001dee

080108c8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80108c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108cc:	4698      	mov	r8, r3
 80108ce:	6803      	ldr	r3, [r0, #0]
 80108d0:	b08b      	sub	sp, #44	@ 0x2c
 80108d2:	4617      	mov	r7, r2
 80108d4:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80108d6:	460e      	mov	r6, r1
 80108d8:	4b13      	ldr	r3, [pc, #76]	@ (8010928 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80108da:	4604      	mov	r4, r0
 80108dc:	f8b3 9000 	ldrh.w	r9, [r3]
 80108e0:	f7fa fee4 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 80108e4:	6803      	ldr	r3, [r0, #0]
 80108e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108e8:	4798      	blx	r3
 80108ea:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80108ee:	2200      	movs	r2, #0
 80108f0:	4631      	mov	r1, r6
 80108f2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80108f6:	2302      	movs	r3, #2
 80108f8:	4620      	mov	r0, r4
 80108fa:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80108fe:	2301      	movs	r3, #1
 8010900:	9305      	str	r3, [sp, #20]
 8010902:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010906:	9304      	str	r3, [sp, #16]
 8010908:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801090c:	9303      	str	r3, [sp, #12]
 801090e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010912:	9302      	str	r3, [sp, #8]
 8010914:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010918:	e9cd 8300 	strd	r8, r3, [sp]
 801091c:	463b      	mov	r3, r7
 801091e:	47a8      	blx	r5
 8010920:	b00b      	add	sp, #44	@ 0x2c
 8010922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010926:	bf00      	nop
 8010928:	20001dee 	.word	0x20001dee

0801092c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801092c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010930:	4698      	mov	r8, r3
 8010932:	6803      	ldr	r3, [r0, #0]
 8010934:	b087      	sub	sp, #28
 8010936:	460e      	mov	r6, r1
 8010938:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 801093a:	4617      	mov	r7, r2
 801093c:	4b0f      	ldr	r3, [pc, #60]	@ (801097c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801093e:	4604      	mov	r4, r0
 8010940:	f8b3 9000 	ldrh.w	r9, [r3]
 8010944:	f7fa feb2 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8010948:	6803      	ldr	r3, [r0, #0]
 801094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801094c:	4798      	blx	r3
 801094e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8010952:	463a      	mov	r2, r7
 8010954:	4631      	mov	r1, r6
 8010956:	f8cd 900c 	str.w	r9, [sp, #12]
 801095a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801095e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8010962:	4620      	mov	r0, r4
 8010964:	9302      	str	r3, [sp, #8]
 8010966:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801096a:	9301      	str	r3, [sp, #4]
 801096c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	4643      	mov	r3, r8
 8010974:	47a8      	blx	r5
 8010976:	b007      	add	sp, #28
 8010978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801097c:	20001dee 	.word	0x20001dee

08010980 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8010980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	4604      	mov	r4, r0
 8010986:	b08f      	sub	sp, #60	@ 0x3c
 8010988:	4610      	mov	r0, r2
 801098a:	460d      	mov	r5, r1
 801098c:	4691      	mov	r9, r2
 801098e:	461e      	mov	r6, r3
 8010990:	f004 fb90 	bl	80150b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010994:	2800      	cmp	r0, #0
 8010996:	f000 809d 	beq.w	8010ad4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	4620      	mov	r0, r4
 801099e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8010b38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80109a2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80109a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109a8:	4798      	blx	r3
 80109aa:	6823      	ldr	r3, [r4, #0]
 80109ac:	4620      	mov	r0, r4
 80109ae:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8010b3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80109b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109b4:	4798      	blx	r3
 80109b6:	f8bb 3000 	ldrh.w	r3, [fp]
 80109ba:	4f5c      	ldr	r7, [pc, #368]	@ (8010b2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80109bc:	9301      	str	r3, [sp, #4]
 80109be:	f8ba 3000 	ldrh.w	r3, [sl]
 80109c2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80109c6:	4640      	mov	r0, r8
 80109c8:	9302      	str	r3, [sp, #8]
 80109ca:	883b      	ldrh	r3, [r7, #0]
 80109cc:	9303      	str	r3, [sp, #12]
 80109ce:	4b58      	ldr	r3, [pc, #352]	@ (8010b30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80109d0:	881a      	ldrh	r2, [r3, #0]
 80109d2:	9305      	str	r3, [sp, #20]
 80109d4:	9204      	str	r2, [sp, #16]
 80109d6:	f004 fc01 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80109da:	8038      	strh	r0, [r7, #0]
 80109dc:	4640      	mov	r0, r8
 80109de:	f004 fc31 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80109e2:	9b05      	ldr	r3, [sp, #20]
 80109e4:	b280      	uxth	r0, r0
 80109e6:	8018      	strh	r0, [r3, #0]
 80109e8:	4b52      	ldr	r3, [pc, #328]	@ (8010b34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d174      	bne.n	8010ada <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80109f0:	883b      	ldrh	r3, [r7, #0]
 80109f2:	f8aa 0000 	strh.w	r0, [sl]
 80109f6:	f8ab 3000 	strh.w	r3, [fp]
 80109fa:	4648      	mov	r0, r9
 80109fc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8010a00:	f004 fb58 	bl	80150b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010a04:	2200      	movs	r2, #0
 8010a06:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8010a12:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8010a16:	f7fb fbe2 	bl	800c1de <_ZN8touchgfx8Drawable5setXYEss>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8010a20:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010a24:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	dd5c      	ble.n	8010ae6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010a2c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	dd58      	ble.n	8010ae6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010a34:	462a      	mov	r2, r5
 8010a36:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a38:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010a3c:	6851      	ldr	r1, [r2, #4]
 8010a3e:	c303      	stmia	r3!, {r0, r1}
 8010a40:	4631      	mov	r1, r6
 8010a42:	a80a      	add	r0, sp, #40	@ 0x28
 8010a44:	f7ff fbf6 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8010a48:	4b38      	ldr	r3, [pc, #224]	@ (8010b2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010a50:	4b37      	ldr	r3, [pc, #220]	@ (8010b30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010a52:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8010a56:	aa0a      	add	r2, sp, #40	@ 0x28
 8010a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a5c:	910c      	str	r1, [sp, #48]	@ 0x30
 8010a5e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010a62:	ab08      	add	r3, sp, #32
 8010a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a68:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	a90c      	add	r1, sp, #48	@ 0x30
 8010a70:	f7ff fbe0 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8010a74:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d13c      	bne.n	8010af4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8010a80:	2600      	movs	r6, #0
 8010a82:	696b      	ldr	r3, [r5, #20]
 8010a84:	a908      	add	r1, sp, #32
 8010a86:	682a      	ldr	r2, [r5, #0]
 8010a88:	4628      	mov	r0, r5
 8010a8a:	9305      	str	r3, [sp, #20]
 8010a8c:	616e      	str	r6, [r5, #20]
 8010a8e:	6892      	ldr	r2, [r2, #8]
 8010a90:	4790      	blx	r2
 8010a92:	9b05      	ldr	r3, [sp, #20]
 8010a94:	4652      	mov	r2, sl
 8010a96:	4649      	mov	r1, r9
 8010a98:	616b      	str	r3, [r5, #20]
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8010aa0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8010aa4:	f7fb fb9b 	bl	800c1de <_ZN8touchgfx8Drawable5setXYEss>
 8010aa8:	9a01      	ldr	r2, [sp, #4]
 8010aaa:	4b23      	ldr	r3, [pc, #140]	@ (8010b38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8010aac:	4620      	mov	r0, r4
 8010aae:	801a      	strh	r2, [r3, #0]
 8010ab0:	9a02      	ldr	r2, [sp, #8]
 8010ab2:	4b22      	ldr	r3, [pc, #136]	@ (8010b3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8010ab4:	801a      	strh	r2, [r3, #0]
 8010ab6:	9a03      	ldr	r2, [sp, #12]
 8010ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8010b2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010aba:	801a      	strh	r2, [r3, #0]
 8010abc:	4b1c      	ldr	r3, [pc, #112]	@ (8010b30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010abe:	9a04      	ldr	r2, [sp, #16]
 8010ac0:	801a      	strh	r2, [r3, #0]
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8010ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aca:	4798      	blx	r3
 8010acc:	6823      	ldr	r3, [r4, #0]
 8010ace:	4620      	mov	r0, r4
 8010ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad2:	4798      	blx	r3
 8010ad4:	b00f      	add	sp, #60	@ 0x3c
 8010ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ada:	883b      	ldrh	r3, [r7, #0]
 8010adc:	f8ab 0000 	strh.w	r0, [fp]
 8010ae0:	f8aa 3000 	strh.w	r3, [sl]
 8010ae4:	e789      	b.n	80109fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8010ae6:	462a      	mov	r2, r5
 8010ae8:	ab0a      	add	r3, sp, #40	@ 0x28
 8010aea:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010aee:	6851      	ldr	r1, [r2, #4]
 8010af0:	c303      	stmia	r3!, {r0, r1}
 8010af2:	e7a9      	b.n	8010a48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8010af4:	a807      	add	r0, sp, #28
 8010af6:	f004 fce7 	bl	80154c8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010afa:	4606      	mov	r6, r0
 8010afc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8010afe:	6803      	ldr	r3, [r0, #0]
 8010b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b02:	4798      	blx	r3
 8010b04:	4286      	cmp	r6, r0
 8010b06:	d1b8      	bne.n	8010a7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8010b08:	f7fa fdd0 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8010b0c:	6803      	ldr	r3, [r0, #0]
 8010b0e:	4606      	mov	r6, r0
 8010b10:	a807      	add	r0, sp, #28
 8010b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b14:	9305      	str	r3, [sp, #20]
 8010b16:	f004 fcd7 	bl	80154c8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010b1a:	9b05      	ldr	r3, [sp, #20]
 8010b1c:	4601      	mov	r1, r0
 8010b1e:	4630      	mov	r0, r6
 8010b20:	4798      	blx	r3
 8010b22:	f080 0001 	eor.w	r0, r0, #1
 8010b26:	b2c0      	uxtb	r0, r0
 8010b28:	e7a8      	b.n	8010a7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8010b2a:	bf00      	nop
 8010b2c:	20001de8 	.word	0x20001de8
 8010b30:	20001dea 	.word	0x20001dea
 8010b34:	20001dec 	.word	0x20001dec
 8010b38:	20001dee 	.word	0x20001dee
 8010b3c:	20001df0 	.word	0x20001df0

08010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010b40:	4b07      	ldr	r3, [pc, #28]	@ (8010b60 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010b42:	b510      	push	{r4, lr}
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	4604      	mov	r4, r0
 8010b48:	b13b      	cbz	r3, 8010b5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010b4a:	6803      	ldr	r3, [r0, #0]
 8010b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b4e:	4798      	blx	r3
 8010b50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010b52:	4283      	cmp	r3, r0
 8010b54:	d101      	bne.n	8010b5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010b56:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8010b58:	bd10      	pop	{r4, pc}
 8010b5a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010b5c:	e7fc      	b.n	8010b58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010b5e:	bf00      	nop
 8010b60:	20001df2 	.word	0x20001df2

08010b64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b68:	461d      	mov	r5, r3
 8010b6a:	b08a      	sub	sp, #40	@ 0x28
 8010b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b70:	4690      	mov	r8, r2
 8010b72:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8010b76:	2400      	movs	r4, #0
 8010b78:	4607      	mov	r7, r0
 8010b7a:	fb06 8505 	mla	r5, r6, r5, r8
 8010b7e:	9404      	str	r4, [sp, #16]
 8010b80:	f88d 4020 	strb.w	r4, [sp, #32]
 8010b84:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010b88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010b8c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010b90:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010b94:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010b98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010b9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010ba0:	f7ff ffce 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010ba4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010bae:	a901      	add	r1, sp, #4
 8010bb0:	9505      	str	r5, [sp, #20]
 8010bb2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010bb6:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8010bba:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8010bbe:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8010bc2:	6803      	ldr	r3, [r0, #0]
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	4798      	blx	r3
 8010bc8:	b00a      	add	sp, #40	@ 0x28
 8010bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010bce <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8010bce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bd2:	b08b      	sub	sp, #44	@ 0x2c
 8010bd4:	2400      	movs	r4, #0
 8010bd6:	4691      	mov	r9, r2
 8010bd8:	461d      	mov	r5, r3
 8010bda:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8010bde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010be2:	4688      	mov	r8, r1
 8010be4:	4607      	mov	r7, r0
 8010be6:	9404      	str	r4, [sp, #16]
 8010be8:	fb06 9505 	mla	r5, r6, r5, r9
 8010bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010bf0:	f7ff ffa6 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010bf4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010bf8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c02:	a901      	add	r1, sp, #4
 8010c04:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010c08:	9505      	str	r5, [sp, #20]
 8010c0a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010c0e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010c12:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010c16:	f8cd 8010 	str.w	r8, [sp, #16]
 8010c1a:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010c1e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010c22:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8010c26:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8010c2a:	6803      	ldr	r3, [r0, #0]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	4798      	blx	r3
 8010c30:	b00b      	add	sp, #44	@ 0x2c
 8010c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010c38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8010c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c3c:	b08a      	sub	sp, #40	@ 0x28
 8010c3e:	4698      	mov	r8, r3
 8010c40:	2300      	movs	r3, #0
 8010c42:	4606      	mov	r6, r0
 8010c44:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8010c48:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8010c4c:	2d0b      	cmp	r5, #11
 8010c4e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8010c52:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8010c56:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8010c5a:	9304      	str	r3, [sp, #16]
 8010c5c:	d137      	bne.n	8010cce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010c5e:	2380      	movs	r3, #128	@ 0x80
 8010c60:	f88d 0020 	strb.w	r0, [sp, #32]
 8010c64:	4630      	mov	r0, r6
 8010c66:	9203      	str	r2, [sp, #12]
 8010c68:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010c6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010c70:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010c78:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010c7c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010c80:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010c84:	f7ff ff5c 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c88:	2c0b      	cmp	r4, #11
 8010c8a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010c8e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010c92:	bf94      	ite	ls
 8010c94:	4b19      	ldrls	r3, [pc, #100]	@ (8010cfc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010c96:	2100      	movhi	r1, #0
 8010c98:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8010c9c:	bf98      	it	ls
 8010c9e:	5d19      	ldrbls	r1, [r3, r4]
 8010ca0:	fb02 8307 	mla	r3, r2, r7, r8
 8010ca4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010ca8:	10c9      	asrs	r1, r1, #3
 8010caa:	fb01 0003 	mla	r0, r1, r3, r0
 8010cae:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010cb2:	a901      	add	r1, sp, #4
 8010cb4:	9005      	str	r0, [sp, #20]
 8010cb6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010cba:	2300      	movs	r3, #0
 8010cbc:	6870      	ldr	r0, [r6, #4]
 8010cbe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010cc2:	6803      	ldr	r3, [r0, #0]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	4798      	blx	r3
 8010cc8:	b00a      	add	sp, #40	@ 0x28
 8010cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cce:	2d02      	cmp	r5, #2
 8010cd0:	d109      	bne.n	8010ce6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010cd2:	28ff      	cmp	r0, #255	@ 0xff
 8010cd4:	d105      	bne.n	8010ce2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010cd6:	f1bc 0f00 	cmp.w	ip, #0
 8010cda:	bf14      	ite	ne
 8010cdc:	2340      	movne	r3, #64	@ 0x40
 8010cde:	2320      	moveq	r3, #32
 8010ce0:	e7be      	b.n	8010c60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010ce2:	2340      	movs	r3, #64	@ 0x40
 8010ce4:	e7bc      	b.n	8010c60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010ce6:	28ff      	cmp	r0, #255	@ 0xff
 8010ce8:	d105      	bne.n	8010cf6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8010cea:	f1bc 0f00 	cmp.w	ip, #0
 8010cee:	bf14      	ite	ne
 8010cf0:	2304      	movne	r3, #4
 8010cf2:	2301      	moveq	r3, #1
 8010cf4:	e7b4      	b.n	8010c60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010cf6:	2304      	movs	r3, #4
 8010cf8:	e7b2      	b.n	8010c60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010cfa:	bf00      	nop
 8010cfc:	08025ba8 	.word	0x08025ba8

08010d00 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	b08b      	sub	sp, #44	@ 0x2c
 8010d06:	461d      	mov	r5, r3
 8010d08:	2400      	movs	r4, #0
 8010d0a:	4688      	mov	r8, r1
 8010d0c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8010d10:	4693      	mov	fp, r2
 8010d12:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8010d16:	4607      	mov	r7, r0
 8010d18:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010d1c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8010d20:	9404      	str	r4, [sp, #16]
 8010d22:	bf14      	ite	ne
 8010d24:	2308      	movne	r3, #8
 8010d26:	2302      	moveq	r3, #2
 8010d28:	fb05 b50a 	mla	r5, r5, sl, fp
 8010d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d30:	f7ff ff06 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010d34:	2e0b      	cmp	r6, #11
 8010d36:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010d3a:	a901      	add	r1, sp, #4
 8010d3c:	bf98      	it	ls
 8010d3e:	4b13      	ldrls	r3, [pc, #76]	@ (8010d8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010d40:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010d44:	bf98      	it	ls
 8010d46:	5d9c      	ldrbls	r4, [r3, r6]
 8010d48:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010d4c:	10e4      	asrs	r4, r4, #3
 8010d4e:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d52:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010d56:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010d5a:	fb04 0405 	mla	r4, r4, r5, r0
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010d64:	2300      	movs	r3, #0
 8010d66:	9405      	str	r4, [sp, #20]
 8010d68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010d6c:	f88d 9020 	strb.w	r9, [sp, #32]
 8010d70:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8010d74:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010d78:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8010d7c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8010d80:	6803      	ldr	r3, [r0, #0]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	4798      	blx	r3
 8010d86:	b00b      	add	sp, #44	@ 0x2c
 8010d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8c:	08025ba8 	.word	0x08025ba8

08010d90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d94:	461e      	mov	r6, r3
 8010d96:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010d98:	460f      	mov	r7, r1
 8010d9a:	4690      	mov	r8, r2
 8010d9c:	881d      	ldrh	r5, [r3, #0]
 8010d9e:	f7fa fc85 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8010da2:	6803      	ldr	r3, [r0, #0]
 8010da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010da6:	4798      	blx	r3
 8010da8:	280b      	cmp	r0, #11
 8010daa:	bf96      	itet	ls
 8010dac:	4b05      	ldrls	r3, [pc, #20]	@ (8010dc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010dae:	2400      	movhi	r4, #0
 8010db0:	5c1c      	ldrbls	r4, [r3, r0]
 8010db2:	fb08 7005 	mla	r0, r8, r5, r7
 8010db6:	10e4      	asrs	r4, r4, #3
 8010db8:	fb04 6000 	mla	r0, r4, r0, r6
 8010dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc0:	20001dee 	.word	0x20001dee
 8010dc4:	08025ba8 	.word	0x08025ba8

08010dc8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dca:	b08b      	sub	sp, #44	@ 0x2c
 8010dcc:	461f      	mov	r7, r3
 8010dce:	4604      	mov	r4, r0
 8010dd0:	4616      	mov	r6, r2
 8010dd2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010dd6:	2500      	movs	r5, #0
 8010dd8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010ddc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010de0:	9504      	str	r5, [sp, #16]
 8010de2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010de6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010dea:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010dee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010df2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010df6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010dfa:	f88d 3020 	strb.w	r3, [sp, #32]
 8010dfe:	f7ff fe9f 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010e02:	463a      	mov	r2, r7
 8010e04:	4631      	mov	r1, r6
 8010e06:	4603      	mov	r3, r0
 8010e08:	4620      	mov	r0, r4
 8010e0a:	f7ff ffc1 	bl	8010d90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010e10:	9005      	str	r0, [sp, #20]
 8010e12:	881b      	ldrh	r3, [r3, #0]
 8010e14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010e18:	f7fa fc48 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8010e1c:	6803      	ldr	r3, [r0, #0]
 8010e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e20:	4798      	blx	r3
 8010e22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010e24:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8010e28:	a901      	add	r1, sp, #4
 8010e2a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8010e2e:	9304      	str	r3, [sp, #16]
 8010e30:	6860      	ldr	r0, [r4, #4]
 8010e32:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010e36:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010e3a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010e3e:	6803      	ldr	r3, [r0, #0]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	4798      	blx	r3
 8010e44:	b00b      	add	sp, #44	@ 0x2c
 8010e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e48:	20001dee 	.word	0x20001dee

08010e4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e4e:	b08d      	sub	sp, #52	@ 0x34
 8010e50:	2501      	movs	r5, #1
 8010e52:	4604      	mov	r4, r0
 8010e54:	466b      	mov	r3, sp
 8010e56:	9503      	str	r5, [sp, #12]
 8010e58:	e883 0006 	stmia.w	r3, {r1, r2}
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f8bd 6000 	ldrh.w	r6, [sp]
 8010e62:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010e66:	9306      	str	r3, [sp, #24]
 8010e68:	6803      	ldr	r3, [r0, #0]
 8010e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e6c:	4798      	blx	r3
 8010e6e:	463a      	mov	r2, r7
 8010e70:	4631      	mov	r1, r6
 8010e72:	4603      	mov	r3, r0
 8010e74:	4620      	mov	r0, r4
 8010e76:	f7ff ff8b 	bl	8010d90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010e7c:	9004      	str	r0, [sp, #16]
 8010e7e:	9307      	str	r3, [sp, #28]
 8010e80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010e84:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010e88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010e8c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010e90:	4b0e      	ldr	r3, [pc, #56]	@ (8010ecc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010e98:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010e9c:	f7fa fc06 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8010ea0:	6803      	ldr	r3, [r0, #0]
 8010ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ea4:	4798      	blx	r3
 8010ea6:	23ff      	movs	r3, #255	@ 0xff
 8010ea8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010eac:	a903      	add	r1, sp, #12
 8010eae:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010eb2:	6860      	ldr	r0, [r4, #4]
 8010eb4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010eb8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010ebc:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010ec0:	6803      	ldr	r3, [r0, #0]
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	4798      	blx	r3
 8010ec6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8010ec8:	b00d      	add	sp, #52	@ 0x34
 8010eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ecc:	20001dee 	.word	0x20001dee

08010ed0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed4:	b08c      	sub	sp, #48	@ 0x30
 8010ed6:	461e      	mov	r6, r3
 8010ed8:	2300      	movs	r3, #0
 8010eda:	4604      	mov	r4, r0
 8010edc:	466d      	mov	r5, sp
 8010ede:	9306      	str	r3, [sp, #24]
 8010ee0:	6803      	ldr	r3, [r0, #0]
 8010ee2:	e885 0006 	stmia.w	r5, {r1, r2}
 8010ee6:	2501      	movs	r5, #1
 8010ee8:	f8bd 7000 	ldrh.w	r7, [sp]
 8010eec:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010ef0:	9503      	str	r5, [sp, #12]
 8010ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ef4:	4798      	blx	r3
 8010ef6:	4642      	mov	r2, r8
 8010ef8:	4639      	mov	r1, r7
 8010efa:	4603      	mov	r3, r0
 8010efc:	4620      	mov	r0, r4
 8010efe:	f7ff ff47 	bl	8010d90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010f02:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010f06:	9004      	str	r0, [sp, #16]
 8010f08:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010f0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010f10:	9607      	str	r6, [sp, #28]
 8010f12:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010f16:	4b10      	ldr	r3, [pc, #64]	@ (8010f58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010f1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010f20:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010f24:	f7fa fbc2 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8010f28:	6803      	ldr	r3, [r0, #0]
 8010f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f2c:	4798      	blx	r3
 8010f2e:	23ff      	movs	r3, #255	@ 0xff
 8010f30:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010f34:	a903      	add	r1, sp, #12
 8010f36:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010f3a:	6860      	ldr	r0, [r4, #4]
 8010f3c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010f40:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010f44:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010f48:	6803      	ldr	r3, [r0, #0]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	4798      	blx	r3
 8010f4e:	4630      	mov	r0, r6
 8010f50:	b00c      	add	sp, #48	@ 0x30
 8010f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f56:	bf00      	nop
 8010f58:	20001dee 	.word	0x20001dee

08010f5c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f5e:	b085      	sub	sp, #20
 8010f60:	4605      	mov	r5, r0
 8010f62:	ac02      	add	r4, sp, #8
 8010f64:	e884 0006 	stmia.w	r4, {r1, r2}
 8010f68:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010f6c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010f70:	f7ff fde6 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010f74:	4631      	mov	r1, r6
 8010f76:	4603      	mov	r3, r0
 8010f78:	463a      	mov	r2, r7
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	f7ff ff08 	bl	8010d90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010f80:	4a05      	ldr	r2, [pc, #20]	@ (8010f98 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010f82:	682b      	ldr	r3, [r5, #0]
 8010f84:	8812      	ldrh	r2, [r2, #0]
 8010f86:	9200      	str	r2, [sp, #0]
 8010f88:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010f92:	47b0      	blx	r6
 8010f94:	b005      	add	sp, #20
 8010f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f98:	20001dee 	.word	0x20001dee

08010f9c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	b19b      	cbz	r3, 8010fce <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010fa6:	2002      	movs	r0, #2
 8010fa8:	f7fd f892 	bl	800e0d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010fac:	2300      	movs	r3, #0
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010fb4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8010fb8:	6823      	ldr	r3, [r4, #0]
 8010fba:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8010fbe:	f7ff fdbf 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010fc2:	4601      	mov	r1, r0
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	462b      	mov	r3, r5
 8010fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fcc:	4718      	bx	r3
 8010fce:	bd70      	pop	{r4, r5, r6, pc}

08010fd0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010fd0:	b538      	push	{r3, r4, r5, lr}
 8010fd2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	460d      	mov	r5, r1
 8010fda:	428b      	cmp	r3, r1
 8010fdc:	d006      	beq.n	8010fec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010fde:	6803      	ldr	r3, [r0, #0]
 8010fe0:	b929      	cbnz	r1, 8010fee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010fe2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010fe6:	4798      	blx	r3
 8010fe8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8010fec:	bd38      	pop	{r3, r4, r5, pc}
 8010fee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010ff2:	e7f8      	b.n	8010fe6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010ff4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010ff4:	4b0d      	ldr	r3, [pc, #52]	@ (801102c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010ff6:	b510      	push	{r4, lr}
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	b95b      	cbnz	r3, 8011016 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010ffe:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8011002:	2b02      	cmp	r3, #2
 8011004:	d007      	beq.n	8011016 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011006:	6840      	ldr	r0, [r0, #4]
 8011008:	f000 f90e 	bl	8011228 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801100c:	b118      	cbz	r0, 8011016 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801100e:	6862      	ldr	r2, [r4, #4]
 8011010:	7a53      	ldrb	r3, [r2, #9]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d0fc      	beq.n	8011010 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011016:	f7fd fad1 	bl	800e5bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801101a:	4620      	mov	r0, r4
 801101c:	2100      	movs	r1, #0
 801101e:	f7ff ffd7 	bl	8010fd0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011022:	4620      	mov	r0, r4
 8011024:	f7ff fd8c 	bl	8010b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011028:	bd10      	pop	{r4, pc}
 801102a:	bf00      	nop
 801102c:	20001df2 	.word	0x20001df2

08011030 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8011030:	4770      	bx	lr

08011032 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8011032:	2000      	movs	r0, #0
 8011034:	4770      	bx	lr

08011036 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011036:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801103a:	1a13      	subs	r3, r2, r0
 801103c:	4258      	negs	r0, r3
 801103e:	4158      	adcs	r0, r3
 8011040:	4770      	bx	lr

08011042 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011042:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011046:	1a9b      	subs	r3, r3, r2
 8011048:	2b00      	cmp	r3, #0
 801104a:	bfdc      	itt	le
 801104c:	6882      	ldrle	r2, [r0, #8]
 801104e:	189b      	addle	r3, r3, r2
 8011050:	2b01      	cmp	r3, #1
 8011052:	bfcc      	ite	gt
 8011054:	2000      	movgt	r0, #0
 8011056:	2001      	movle	r0, #1
 8011058:	4770      	bx	lr

0801105a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801105a:	6902      	ldr	r2, [r0, #16]
 801105c:	6843      	ldr	r3, [r0, #4]
 801105e:	2024      	movs	r0, #36	@ 0x24
 8011060:	fb00 3002 	mla	r0, r0, r2, r3
 8011064:	4770      	bx	lr

08011066 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011066:	6803      	ldr	r3, [r0, #0]
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	4718      	bx	r3

0801106c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801106c:	2301      	movs	r3, #1
 801106e:	b570      	push	{r4, r5, r6, lr}
 8011070:	7203      	strb	r3, [r0, #8]
 8011072:	4604      	mov	r4, r0
 8011074:	6840      	ldr	r0, [r0, #4]
 8011076:	6803      	ldr	r3, [r0, #0]
 8011078:	699b      	ldr	r3, [r3, #24]
 801107a:	4798      	blx	r3
 801107c:	6803      	ldr	r3, [r0, #0]
 801107e:	4605      	mov	r5, r0
 8011080:	2b40      	cmp	r3, #64	@ 0x40
 8011082:	d00c      	beq.n	801109e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011084:	d810      	bhi.n	80110a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011086:	2b04      	cmp	r3, #4
 8011088:	d01d      	beq.n	80110c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801108a:	d804      	bhi.n	8011096 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801108c:	2b01      	cmp	r3, #1
 801108e:	d006      	beq.n	801109e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011090:	2b02      	cmp	r3, #2
 8011092:	d02c      	beq.n	80110ee <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011094:	bd70      	pop	{r4, r5, r6, pc}
 8011096:	2b08      	cmp	r3, #8
 8011098:	d01d      	beq.n	80110d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801109a:	2b20      	cmp	r3, #32
 801109c:	d1fa      	bne.n	8011094 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801109e:	6823      	ldr	r3, [r4, #0]
 80110a0:	4620      	mov	r0, r4
 80110a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110a4:	4798      	blx	r3
 80110a6:	e013      	b.n	80110d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80110a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110ac:	d0f7      	beq.n	801109e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110ae:	d804      	bhi.n	80110ba <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80110b0:	2b80      	cmp	r3, #128	@ 0x80
 80110b2:	d0f4      	beq.n	801109e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110b8:	e7f0      	b.n	801109c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80110ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80110be:	d0ee      	beq.n	801109e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80110c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80110c4:	e7e5      	b.n	8011092 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80110c6:	6823      	ldr	r3, [r4, #0]
 80110c8:	7f01      	ldrb	r1, [r0, #28]
 80110ca:	4620      	mov	r0, r4
 80110cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110ce:	4798      	blx	r3
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110d4:	e006      	b.n	80110e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80110d6:	6823      	ldr	r3, [r4, #0]
 80110d8:	7f01      	ldrb	r1, [r0, #28]
 80110da:	4620      	mov	r0, r4
 80110dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110de:	4798      	blx	r3
 80110e0:	6823      	ldr	r3, [r4, #0]
 80110e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110e4:	4629      	mov	r1, r5
 80110e6:	4620      	mov	r0, r4
 80110e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110ec:	4718      	bx	r3
 80110ee:	6823      	ldr	r3, [r4, #0]
 80110f0:	4620      	mov	r0, r4
 80110f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110f4:	4798      	blx	r3
 80110f6:	e7f3      	b.n	80110e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080110f8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80110f8:	4770      	bx	lr

080110fa <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80110fa:	4770      	bx	lr

080110fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80110fc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011100:	b510      	push	{r4, lr}
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	2a00      	cmp	r2, #0
 8011106:	bfdc      	itt	le
 8011108:	6884      	ldrle	r4, [r0, #8]
 801110a:	1912      	addle	r2, r2, r4
 801110c:	2a01      	cmp	r2, #1
 801110e:	dd16      	ble.n	801113e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011110:	6842      	ldr	r2, [r0, #4]
 8011112:	2424      	movs	r4, #36	@ 0x24
 8011114:	fb04 2303 	mla	r3, r4, r3, r2
 8011118:	f101 0220 	add.w	r2, r1, #32
 801111c:	f851 4b04 	ldr.w	r4, [r1], #4
 8011120:	4291      	cmp	r1, r2
 8011122:	f843 4b04 	str.w	r4, [r3], #4
 8011126:	d1f9      	bne.n	801111c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011128:	780a      	ldrb	r2, [r1, #0]
 801112a:	701a      	strb	r2, [r3, #0]
 801112c:	68c3      	ldr	r3, [r0, #12]
 801112e:	6882      	ldr	r2, [r0, #8]
 8011130:	f3bf 8f5b 	dmb	ish
 8011134:	3301      	adds	r3, #1
 8011136:	429a      	cmp	r2, r3
 8011138:	bfd8      	it	le
 801113a:	1a9b      	suble	r3, r3, r2
 801113c:	60c3      	str	r3, [r0, #12]
 801113e:	bd10      	pop	{r4, pc}

08011140 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011140:	6903      	ldr	r3, [r0, #16]
 8011142:	6882      	ldr	r2, [r0, #8]
 8011144:	f3bf 8f5b 	dmb	ish
 8011148:	3301      	adds	r3, #1
 801114a:	429a      	cmp	r2, r3
 801114c:	bfd8      	it	le
 801114e:	1a9b      	suble	r3, r3, r2
 8011150:	6103      	str	r3, [r0, #16]
 8011152:	4770      	bx	lr

08011154 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011154:	b570      	push	{r4, r5, r6, lr}
 8011156:	4604      	mov	r4, r0
 8011158:	460e      	mov	r6, r1
 801115a:	6860      	ldr	r0, [r4, #4]
 801115c:	6803      	ldr	r3, [r0, #0]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	4798      	blx	r3
 8011162:	2800      	cmp	r0, #0
 8011164:	d1f9      	bne.n	801115a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011166:	4d0d      	ldr	r5, [pc, #52]	@ (801119c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011168:	6828      	ldr	r0, [r5, #0]
 801116a:	6803      	ldr	r3, [r0, #0]
 801116c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801116e:	4798      	blx	r3
 8011170:	f7fd fa46 	bl	800e600 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011174:	6828      	ldr	r0, [r5, #0]
 8011176:	2101      	movs	r1, #1
 8011178:	f7ff ff2a 	bl	8010fd0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801117c:	6860      	ldr	r0, [r4, #4]
 801117e:	4631      	mov	r1, r6
 8011180:	6803      	ldr	r3, [r0, #0]
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	4798      	blx	r3
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	4620      	mov	r0, r4
 801118a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801118c:	4798      	blx	r3
 801118e:	6828      	ldr	r0, [r5, #0]
 8011190:	6803      	ldr	r3, [r0, #0]
 8011192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011198:	4718      	bx	r3
 801119a:	bf00      	nop
 801119c:	20001df4 	.word	0x20001df4

080111a0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80111a0:	b508      	push	{r3, lr}
 80111a2:	f7fd fa0b 	bl	800e5bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80111a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80111aa:	f7fd ba1d 	b.w	800e5e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080111ae <_ZN8touchgfx13DMA_Interface5startEv>:
 80111ae:	b510      	push	{r4, lr}
 80111b0:	4604      	mov	r4, r0
 80111b2:	6840      	ldr	r0, [r0, #4]
 80111b4:	6803      	ldr	r3, [r0, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4798      	blx	r3
 80111ba:	b948      	cbnz	r0, 80111d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80111bc:	7a63      	ldrb	r3, [r4, #9]
 80111be:	b13b      	cbz	r3, 80111d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80111c0:	7a23      	ldrb	r3, [r4, #8]
 80111c2:	b92b      	cbnz	r3, 80111d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80111c4:	6823      	ldr	r3, [r4, #0]
 80111c6:	4620      	mov	r0, r4
 80111c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111ce:	4718      	bx	r3
 80111d0:	bd10      	pop	{r4, pc}

080111d2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80111d2:	b570      	push	{r4, r5, r6, lr}
 80111d4:	4604      	mov	r4, r0
 80111d6:	6840      	ldr	r0, [r0, #4]
 80111d8:	6803      	ldr	r3, [r0, #0]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4798      	blx	r3
 80111de:	4605      	mov	r5, r0
 80111e0:	b930      	cbnz	r0, 80111f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80111e2:	7a23      	ldrb	r3, [r4, #8]
 80111e4:	b123      	cbz	r3, 80111f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80111e6:	6860      	ldr	r0, [r4, #4]
 80111e8:	6803      	ldr	r3, [r0, #0]
 80111ea:	695b      	ldr	r3, [r3, #20]
 80111ec:	4798      	blx	r3
 80111ee:	7225      	strb	r5, [r4, #8]
 80111f0:	6860      	ldr	r0, [r4, #4]
 80111f2:	6803      	ldr	r3, [r0, #0]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4798      	blx	r3
 80111f8:	b928      	cbnz	r0, 8011206 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	4620      	mov	r0, r4
 80111fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011204:	4718      	bx	r3
 8011206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801120a:	f7fd ba05 	b.w	800e618 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08011210 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011210:	b510      	push	{r4, lr}
 8011212:	6082      	str	r2, [r0, #8]
 8011214:	2200      	movs	r2, #0
 8011216:	4c03      	ldr	r4, [pc, #12]	@ (8011224 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011218:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801121c:	e9c0 4100 	strd	r4, r1, [r0]
 8011220:	bd10      	pop	{r4, pc}
 8011222:	bf00      	nop
 8011224:	08025ce4 	.word	0x08025ce4

08011228 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011228:	6840      	ldr	r0, [r0, #4]
 801122a:	6803      	ldr	r3, [r0, #0]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	4718      	bx	r3

08011230 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011230:	2300      	movs	r3, #0
 8011232:	8083      	strh	r3, [r0, #4]
 8011234:	80c3      	strh	r3, [r0, #6]
 8011236:	8003      	strh	r3, [r0, #0]
 8011238:	8043      	strh	r3, [r0, #2]
 801123a:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801123e:	2bff      	cmp	r3, #255	@ 0xff
 8011240:	bf01      	itttt	eq
 8011242:	890b      	ldrheq	r3, [r1, #8]
 8011244:	8083      	strheq	r3, [r0, #4]
 8011246:	894b      	ldrheq	r3, [r1, #10]
 8011248:	80c3      	strheq	r3, [r0, #6]
 801124a:	4770      	bx	lr

0801124c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801124c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801124e:	4604      	mov	r4, r0
 8011250:	466b      	mov	r3, sp
 8011252:	6808      	ldr	r0, [r1, #0]
 8011254:	6849      	ldr	r1, [r1, #4]
 8011256:	c303      	stmia	r3!, {r0, r1}
 8011258:	6823      	ldr	r3, [r4, #0]
 801125a:	4669      	mov	r1, sp
 801125c:	4620      	mov	r0, r4
 801125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011260:	4798      	blx	r3
 8011262:	4b08      	ldr	r3, [pc, #32]	@ (8011284 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801126a:	b10a      	cbz	r2, 8011270 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801126c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801126e:	b900      	cbnz	r0, 8011272 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011270:	6898      	ldr	r0, [r3, #8]
 8011272:	6803      	ldr	r3, [r0, #0]
 8011274:	4669      	mov	r1, sp
 8011276:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011278:	6a1d      	ldr	r5, [r3, #32]
 801127a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801127e:	47a8      	blx	r5
 8011280:	b003      	add	sp, #12
 8011282:	bd30      	pop	{r4, r5, pc}
 8011284:	20001df4 	.word	0x20001df4

08011288 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011288:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801128c:	b12a      	cbz	r2, 801129a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801128e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011292:	b112      	cbz	r2, 801129a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011294:	6803      	ldr	r3, [r0, #0]
 8011296:	695b      	ldr	r3, [r3, #20]
 8011298:	4718      	bx	r3
 801129a:	4770      	bx	lr

0801129c <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	6803      	ldr	r3, [r0, #0]
 80112a0:	4604      	mov	r4, r0
 80112a2:	4615      	mov	r5, r2
 80112a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112a6:	4798      	blx	r3
 80112a8:	6823      	ldr	r3, [r4, #0]
 80112aa:	4629      	mov	r1, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112b4:	4718      	bx	r3

080112b6 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 80112b6:	b570      	push	{r4, r5, r6, lr}
 80112b8:	6803      	ldr	r3, [r0, #0]
 80112ba:	4604      	mov	r4, r0
 80112bc:	460e      	mov	r6, r1
 80112be:	4615      	mov	r5, r2
 80112c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112c2:	4798      	blx	r3
 80112c4:	8030      	strh	r0, [r6, #0]
 80112c6:	6823      	ldr	r3, [r4, #0]
 80112c8:	4620      	mov	r0, r4
 80112ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112cc:	4798      	blx	r3
 80112ce:	8028      	strh	r0, [r5, #0]
 80112d0:	bd70      	pop	{r4, r5, r6, pc}

080112d2 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 80112d2:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 80112d6:	4770      	bx	lr

080112d8 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 80112d8:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 80112dc:	4770      	bx	lr

080112de <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 80112de:	b510      	push	{r4, lr}
 80112e0:	4604      	mov	r4, r0
 80112e2:	f000 fa38 	bl	8011756 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80112e6:	6823      	ldr	r3, [r4, #0]
 80112e8:	4620      	mov	r0, r4
 80112ea:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80112ee:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 80112f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112f8:	4718      	bx	r3

080112fa <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 80112fa:	b538      	push	{r3, r4, r5, lr}
 80112fc:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8011300:	4604      	mov	r4, r0
 8011302:	8541      	strh	r1, [r0, #42]	@ 0x2a
 8011304:	4628      	mov	r0, r5
 8011306:	f003 ff69 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801130a:	b188      	cbz	r0, 8011330 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 801130c:	4628      	mov	r0, r5
 801130e:	f003 ff65 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011312:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 8011316:	fb92 f3f0 	sdiv	r3, r2, r0
 801131a:	fb03 2010 	mls	r0, r3, r0, r2
 801131e:	2800      	cmp	r0, #0
 8011320:	8560      	strh	r0, [r4, #42]	@ 0x2a
 8011322:	da05      	bge.n	8011330 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 8011324:	4628      	mov	r0, r5
 8011326:	f003 ff59 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801132a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801132c:	4418      	add	r0, r3
 801132e:	8560      	strh	r0, [r4, #42]	@ 0x2a
 8011330:	bd38      	pop	{r3, r4, r5, pc}

08011332 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8011332:	b538      	push	{r3, r4, r5, lr}
 8011334:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8011338:	4604      	mov	r4, r0
 801133a:	8581      	strh	r1, [r0, #44]	@ 0x2c
 801133c:	4628      	mov	r0, r5
 801133e:	f003 ff81 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011342:	b188      	cbz	r0, 8011368 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 8011344:	4628      	mov	r0, r5
 8011346:	f003 ff7d 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801134a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 801134e:	fb92 f3f0 	sdiv	r3, r2, r0
 8011352:	fb03 2010 	mls	r0, r3, r0, r2
 8011356:	2800      	cmp	r0, #0
 8011358:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 801135a:	da05      	bge.n	8011368 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 801135c:	4628      	mov	r0, r5
 801135e:	f003 ff71 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011362:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8011364:	4418      	add	r0, r3
 8011366:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8011368:	bd38      	pop	{r3, r4, r5, pc}
	...

0801136c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011370:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 8011374:	b093      	sub	sp, #76	@ 0x4c
 8011376:	4607      	mov	r7, r0
 8011378:	460e      	mov	r6, r1
 801137a:	4658      	mov	r0, fp
 801137c:	f003 ff2e 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011380:	4681      	mov	r9, r0
 8011382:	4658      	mov	r0, fp
 8011384:	f003 ff5e 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011388:	4605      	mov	r5, r0
 801138a:	f1b9 0f00 	cmp.w	r9, #0
 801138e:	f000 80c4 	beq.w	801151a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8011392:	2800      	cmp	r0, #0
 8011394:	f000 80c1 	beq.w	801151a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8011398:	2300      	movs	r3, #0
 801139a:	a90e      	add	r1, sp, #56	@ 0x38
 801139c:	4638      	mov	r0, r7
 801139e:	fa1f f889 	uxth.w	r8, r9
 80113a2:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113aa:	4798      	blx	r3
 80113ac:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80113b0:	f9b6 3000 	ldrsh.w	r3, [r6]
 80113b4:	88b1      	ldrh	r1, [r6, #4]
 80113b6:	189c      	adds	r4, r3, r2
 80113b8:	440b      	add	r3, r1
 80113ba:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80113be:	fa02 f383 	sxtah	r3, r2, r3
 80113c2:	3b01      	subs	r3, #1
 80113c4:	fb93 f3f9 	sdiv	r3, r3, r9
 80113c8:	fb94 f4f9 	sdiv	r4, r4, r9
 80113cc:	fb13 f308 	smulbb	r3, r3, r8
 80113d0:	fb14 f408 	smulbb	r4, r4, r8
 80113d4:	b21b      	sxth	r3, r3
 80113d6:	1aa4      	subs	r4, r4, r2
 80113d8:	b2aa      	uxth	r2, r5
 80113da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113dc:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80113e0:	b2a4      	uxth	r4, r4
 80113e2:	9205      	str	r2, [sp, #20]
 80113e4:	185a      	adds	r2, r3, r1
 80113e6:	9805      	ldr	r0, [sp, #20]
 80113e8:	fb92 f2f5 	sdiv	r2, r2, r5
 80113ec:	fb12 f200 	smulbb	r2, r2, r0
 80113f0:	1a52      	subs	r2, r2, r1
 80113f2:	b212      	sxth	r2, r2
 80113f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80113f6:	88f2      	ldrh	r2, [r6, #6]
 80113f8:	4413      	add	r3, r2
 80113fa:	fa01 f383 	sxtah	r3, r1, r3
 80113fe:	3b01      	subs	r3, #1
 8011400:	fb93 f3f5 	sdiv	r3, r3, r5
 8011404:	fb13 f300 	smulbb	r3, r3, r0
 8011408:	eb08 0504 	add.w	r5, r8, r4
 801140c:	b21b      	sxth	r3, r3
 801140e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011410:	b223      	sxth	r3, r4
 8011412:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011414:	b2ad      	uxth	r5, r5
 8011416:	4293      	cmp	r3, r2
 8011418:	9306      	str	r3, [sp, #24]
 801141a:	dc7e      	bgt.n	801151a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801141c:	b22b      	sxth	r3, r5
 801141e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8011422:	930a      	str	r3, [sp, #40]	@ 0x28
 8011424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011426:	4599      	cmp	r9, r3
 8011428:	dd03      	ble.n	8011432 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 801142a:	4444      	add	r4, r8
 801142c:	4445      	add	r5, r8
 801142e:	b2a4      	uxth	r4, r4
 8011430:	e7ee      	b.n	8011410 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 8011432:	f9b6 c000 	ldrsh.w	ip, [r6]
 8011436:	88b2      	ldrh	r2, [r6, #4]
 8011438:	9806      	ldr	r0, [sp, #24]
 801143a:	4462      	add	r2, ip
 801143c:	9905      	ldr	r1, [sp, #20]
 801143e:	b292      	uxth	r2, r2
 8011440:	b213      	sxth	r3, r2
 8011442:	9308      	str	r3, [sp, #32]
 8011444:	fa1f f389 	uxth.w	r3, r9
 8011448:	4419      	add	r1, r3
 801144a:	9307      	str	r3, [sp, #28]
 801144c:	4603      	mov	r3, r0
 801144e:	9808      	ldr	r0, [sp, #32]
 8011450:	b289      	uxth	r1, r1
 8011452:	4283      	cmp	r3, r0
 8011454:	fa0f fa81 	sxth.w	sl, r1
 8011458:	da5b      	bge.n	8011512 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801145a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801145c:	4584      	cmp	ip, r0
 801145e:	da58      	bge.n	8011512 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8011460:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8011464:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8011468:	4486      	add	lr, r0
 801146a:	fa1f fe8e 	uxth.w	lr, lr
 801146e:	fa0f f38e 	sxth.w	r3, lr
 8011472:	4599      	cmp	r9, r3
 8011474:	9309      	str	r3, [sp, #36]	@ 0x24
 8011476:	da4c      	bge.n	8011512 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8011478:	4550      	cmp	r0, sl
 801147a:	da4a      	bge.n	8011512 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801147c:	9b06      	ldr	r3, [sp, #24]
 801147e:	459c      	cmp	ip, r3
 8011480:	bfb8      	it	lt
 8011482:	469c      	movlt	ip, r3
 8011484:	4548      	cmp	r0, r9
 8011486:	9b08      	ldr	r3, [sp, #32]
 8011488:	bfb8      	it	lt
 801148a:	4648      	movlt	r0, r9
 801148c:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8011490:	4699      	mov	r9, r3
 8011492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011494:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 8011498:	4599      	cmp	r9, r3
 801149a:	bfc8      	it	gt
 801149c:	462a      	movgt	r2, r5
 801149e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114a0:	4553      	cmp	r3, sl
 80114a2:	bfd8      	it	le
 80114a4:	4671      	movle	r1, lr
 80114a6:	eba2 020c 	sub.w	r2, r2, ip
 80114aa:	1a09      	subs	r1, r1, r0
 80114ac:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 80114b0:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 80114b4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80114b8:	9b07      	ldr	r3, [sp, #28]
 80114ba:	1b12      	subs	r2, r2, r4
 80114bc:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80114c0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80114c4:	1ad2      	subs	r2, r2, r3
 80114c6:	4b16      	ldr	r3, [pc, #88]	@ (8011520 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 80114c8:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 80114d2:	b109      	cbz	r1, 80114d8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 80114d4:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 80114d6:	b900      	cbnz	r0, 80114da <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 80114d8:	6890      	ldr	r0, [r2, #8]
 80114da:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80114de:	f04f 0c01 	mov.w	ip, #1
 80114e2:	9b07      	ldr	r3, [sp, #28]
 80114e4:	6801      	ldr	r1, [r0, #0]
 80114e6:	4413      	add	r3, r2
 80114e8:	f8cd c008 	str.w	ip, [sp, #8]
 80114ec:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80114f0:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 80114f4:	b21b      	sxth	r3, r3
 80114f6:	4422      	add	r2, r4
 80114f8:	f8cd c004 	str.w	ip, [sp, #4]
 80114fc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011500:	b212      	sxth	r2, r2
 8011502:	f8cd c000 	str.w	ip, [sp]
 8011506:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801150a:	4659      	mov	r1, fp
 801150c:	47c8      	blx	r9
 801150e:	46d1      	mov	r9, sl
 8011510:	e788      	b.n	8011424 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 8011512:	2300      	movs	r3, #0
 8011514:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 8011518:	e7cc      	b.n	80114b4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 801151a:	b013      	add	sp, #76	@ 0x4c
 801151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011520:	20001df4 	.word	0x20001df4

08011524 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8011524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011528:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801152c:	4606      	mov	r6, r0
 801152e:	4689      	mov	r9, r1
 8011530:	2bff      	cmp	r3, #255	@ 0xff
 8011532:	d008      	beq.n	8011546 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8011534:	2300      	movs	r3, #0
 8011536:	8003      	strh	r3, [r0, #0]
 8011538:	8043      	strh	r3, [r0, #2]
 801153a:	8083      	strh	r3, [r0, #4]
 801153c:	4630      	mov	r0, r6
 801153e:	80f3      	strh	r3, [r6, #6]
 8011540:	b003      	add	sp, #12
 8011542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011546:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 801154a:	4668      	mov	r0, sp
 801154c:	4659      	mov	r1, fp
 801154e:	f003 fead 	bl	80152ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011552:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8011556:	4658      	mov	r0, fp
 8011558:	f9bd 7000 	ldrsh.w	r7, [sp]
 801155c:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8011560:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8011564:	f003 fe3a 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011568:	4284      	cmp	r4, r0
 801156a:	d10d      	bne.n	8011588 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801156c:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8011570:	4658      	mov	r0, fp
 8011572:	f003 fe67 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011576:	4580      	cmp	r8, r0
 8011578:	d12a      	bne.n	80115d0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801157a:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801157e:	8037      	strh	r7, [r6, #0]
 8011580:	f8a6 a002 	strh.w	sl, [r6, #2]
 8011584:	80b5      	strh	r5, [r6, #4]
 8011586:	e7d9      	b.n	801153c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8011588:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 801158c:	4658      	mov	r0, fp
 801158e:	f003 fe25 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011592:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8011596:	1b7f      	subs	r7, r7, r5
 8011598:	b2a3      	uxth	r3, r4
 801159a:	b2bd      	uxth	r5, r7
 801159c:	b22f      	sxth	r7, r5
 801159e:	4428      	add	r0, r5
 80115a0:	2f00      	cmp	r7, #0
 80115a2:	b280      	uxth	r0, r0
 80115a4:	bfb8      	it	lt
 80115a6:	18ed      	addlt	r5, r5, r3
 80115a8:	4403      	add	r3, r0
 80115aa:	bfac      	ite	ge
 80115ac:	4625      	movge	r5, r4
 80115ae:	2700      	movlt	r7, #0
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	bfb8      	it	lt
 80115b4:	b22d      	sxthlt	r5, r5
 80115b6:	b219      	sxth	r1, r3
 80115b8:	bfb8      	it	lt
 80115ba:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 80115be:	4291      	cmp	r1, r2
 80115c0:	bfc4      	itt	gt
 80115c2:	1a9c      	subgt	r4, r3, r2
 80115c4:	b224      	sxthgt	r4, r4
 80115c6:	42ac      	cmp	r4, r5
 80115c8:	bfc4      	itt	gt
 80115ca:	b207      	sxthgt	r7, r0
 80115cc:	4625      	movgt	r5, r4
 80115ce:	e7cf      	b.n	8011570 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 80115d0:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 80115d4:	4658      	mov	r0, fp
 80115d6:	f003 fe35 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80115da:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 80115de:	ebaa 0404 	sub.w	r4, sl, r4
 80115e2:	fa1f f288 	uxth.w	r2, r8
 80115e6:	b2a4      	uxth	r4, r4
 80115e8:	fa0f fa84 	sxth.w	sl, r4
 80115ec:	4420      	add	r0, r4
 80115ee:	f1ba 0f00 	cmp.w	sl, #0
 80115f2:	b280      	uxth	r0, r0
 80115f4:	bfb8      	it	lt
 80115f6:	18a3      	addlt	r3, r4, r2
 80115f8:	4402      	add	r2, r0
 80115fa:	bfac      	ite	ge
 80115fc:	4643      	movge	r3, r8
 80115fe:	f04f 0a00 	movlt.w	sl, #0
 8011602:	b292      	uxth	r2, r2
 8011604:	bfb8      	it	lt
 8011606:	b21b      	sxthlt	r3, r3
 8011608:	b214      	sxth	r4, r2
 801160a:	bfb8      	it	lt
 801160c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8011610:	428c      	cmp	r4, r1
 8011612:	bfc4      	itt	gt
 8011614:	eba2 0801 	subgt.w	r8, r2, r1
 8011618:	fa0f f888 	sxthgt.w	r8, r8
 801161c:	4598      	cmp	r8, r3
 801161e:	bfc4      	itt	gt
 8011620:	fa0f fa80 	sxthgt.w	sl, r0
 8011624:	4643      	movgt	r3, r8
 8011626:	e7aa      	b.n	801157e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08011628 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8011628:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 801162c:	b12a      	cbz	r2, 801163a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801162e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011632:	b112      	cbz	r2, 801163a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011634:	6803      	ldr	r3, [r0, #0]
 8011636:	695b      	ldr	r3, [r3, #20]
 8011638:	4718      	bx	r3
 801163a:	4770      	bx	lr

0801163c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011640:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8011642:	4604      	mov	r4, r0
 8011644:	460e      	mov	r6, r1
 8011646:	b08e      	sub	sp, #56	@ 0x38
 8011648:	b218      	sxth	r0, r3
 801164a:	8921      	ldrh	r1, [r4, #8]
 801164c:	005b      	lsls	r3, r3, #1
 801164e:	8962      	ldrh	r2, [r4, #10]
 8011650:	f8ad 0000 	strh.w	r0, [sp]
 8011654:	b29b      	uxth	r3, r3
 8011656:	f8ad 0002 	strh.w	r0, [sp, #2]
 801165a:	1ac9      	subs	r1, r1, r3
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	b209      	sxth	r1, r1
 8011660:	b21b      	sxth	r3, r3
 8011662:	2900      	cmp	r1, #0
 8011664:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011668:	f8ad 3006 	strh.w	r3, [sp, #6]
 801166c:	dd5e      	ble.n	801172c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801166e:	2b00      	cmp	r3, #0
 8011670:	dd5c      	ble.n	801172c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8011672:	6830      	ldr	r0, [r6, #0]
 8011674:	ab02      	add	r3, sp, #8
 8011676:	6871      	ldr	r1, [r6, #4]
 8011678:	c303      	stmia	r3!, {r0, r1}
 801167a:	4669      	mov	r1, sp
 801167c:	a802      	add	r0, sp, #8
 801167e:	f7fe fdd9 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8011682:	4620      	mov	r0, r4
 8011684:	a902      	add	r1, sp, #8
 8011686:	f7ff fde1 	bl	801124c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801168a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801168c:	2800      	cmp	r0, #0
 801168e:	d05f      	beq.n	8011750 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8011690:	8963      	ldrh	r3, [r4, #10]
 8011692:	b202      	sxth	r2, r0
 8011694:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011698:	2500      	movs	r5, #0
 801169a:	1a1f      	subs	r7, r3, r0
 801169c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80116a0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80116a4:	b21b      	sxth	r3, r3
 80116a6:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80116aa:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 80116ae:	af04      	add	r7, sp, #16
 80116b0:	1a09      	subs	r1, r1, r0
 80116b2:	9506      	str	r5, [sp, #24]
 80116b4:	f8ad 201e 	strh.w	r2, [sp, #30]
 80116b8:	f8ad 5020 	strh.w	r5, [sp, #32]
 80116bc:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 80116c0:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 80116c4:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80116c8:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80116cc:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80116d0:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 80116d4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80116d8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80116dc:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80116e0:	ab06      	add	r3, sp, #24
 80116e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80116e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80116ea:	e887 0003 	stmia.w	r7, {r0, r1}
 80116ee:	4631      	mov	r1, r6
 80116f0:	4638      	mov	r0, r7
 80116f2:	f7fe fd9f 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 80116f6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	dd12      	ble.n	8011724 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80116fe:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011702:	2b00      	cmp	r3, #0
 8011704:	dd0e      	ble.n	8011724 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8011706:	6823      	ldr	r3, [r4, #0]
 8011708:	4639      	mov	r1, r7
 801170a:	4620      	mov	r0, r4
 801170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801170e:	4798      	blx	r3
 8011710:	f7f9 ffcc 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8011714:	6803      	ldr	r3, [r0, #0]
 8011716:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011718:	4639      	mov	r1, r7
 801171a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801171e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8011722:	47c0      	blx	r8
 8011724:	3501      	adds	r5, #1
 8011726:	2d04      	cmp	r5, #4
 8011728:	d1da      	bne.n	80116e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801172a:	e011      	b.n	8011750 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801172c:	6830      	ldr	r0, [r6, #0]
 801172e:	ab06      	add	r3, sp, #24
 8011730:	6871      	ldr	r1, [r6, #4]
 8011732:	c303      	stmia	r3!, {r0, r1}
 8011734:	6823      	ldr	r3, [r4, #0]
 8011736:	a906      	add	r1, sp, #24
 8011738:	4620      	mov	r0, r4
 801173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801173c:	4798      	blx	r3
 801173e:	f7f9 ffb5 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8011742:	6803      	ldr	r3, [r0, #0]
 8011744:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011746:	a906      	add	r1, sp, #24
 8011748:	6a1d      	ldr	r5, [r3, #32]
 801174a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801174e:	47a8      	blx	r5
 8011750:	b00e      	add	sp, #56	@ 0x38
 8011752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011756 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011756:	b570      	push	{r4, r5, r6, lr}
 8011758:	880b      	ldrh	r3, [r1, #0]
 801175a:	460d      	mov	r5, r1
 801175c:	4604      	mov	r4, r0
 801175e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8011760:	4608      	mov	r0, r1
 8011762:	f003 fd3b 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011766:	4606      	mov	r6, r0
 8011768:	4628      	mov	r0, r5
 801176a:	f003 fd6b 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	4605      	mov	r5, r0
 8011772:	4631      	mov	r1, r6
 8011774:	4620      	mov	r0, r4
 8011776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011778:	4798      	blx	r3
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	4629      	mov	r1, r5
 801177e:	4620      	mov	r0, r4
 8011780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011786:	4718      	bx	r3

08011788 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011788:	b510      	push	{r4, lr}
 801178a:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801178e:	4604      	mov	r4, r0
 8011790:	2bff      	cmp	r3, #255	@ 0xff
 8011792:	d006      	beq.n	80117a2 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011794:	2300      	movs	r3, #0
 8011796:	8003      	strh	r3, [r0, #0]
 8011798:	8043      	strh	r3, [r0, #2]
 801179a:	8083      	strh	r3, [r0, #4]
 801179c:	80c3      	strh	r3, [r0, #6]
 801179e:	4620      	mov	r0, r4
 80117a0:	bd10      	pop	{r4, pc}
 80117a2:	3126      	adds	r1, #38	@ 0x26
 80117a4:	f003 fd82 	bl	80152ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80117a8:	e7f9      	b.n	801179e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

080117ac <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80117ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b0:	4604      	mov	r4, r0
 80117b2:	b088      	sub	sp, #32
 80117b4:	2500      	movs	r5, #0
 80117b6:	460f      	mov	r7, r1
 80117b8:	f854 3b26 	ldr.w	r3, [r4], #38
 80117bc:	a904      	add	r1, sp, #16
 80117be:	4606      	mov	r6, r0
 80117c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80117c6:	4798      	blx	r3
 80117c8:	4620      	mov	r0, r4
 80117ca:	f003 fd07 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80117ce:	4680      	mov	r8, r0
 80117d0:	4620      	mov	r0, r4
 80117d2:	f003 fd37 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80117d6:	9506      	str	r5, [sp, #24]
 80117d8:	ad06      	add	r5, sp, #24
 80117da:	f8ad 001e 	strh.w	r0, [sp, #30]
 80117de:	4639      	mov	r1, r7
 80117e0:	f8ad 801c 	strh.w	r8, [sp, #28]
 80117e4:	4628      	mov	r0, r5
 80117e6:	f7fe fd25 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 80117ea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	dd19      	ble.n	8011826 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80117f2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	dd15      	ble.n	8011826 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80117fa:	4b0c      	ldr	r3, [pc, #48]	@ (801182c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011802:	b10a      	cbz	r2, 8011808 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011804:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011806:	b900      	cbnz	r0, 801180a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011808:	6898      	ldr	r0, [r3, #8]
 801180a:	2701      	movs	r7, #1
 801180c:	6801      	ldr	r1, [r0, #0]
 801180e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011812:	9702      	str	r7, [sp, #8]
 8011814:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8011818:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801181c:	e9cd 5600 	strd	r5, r6, [sp]
 8011820:	688d      	ldr	r5, [r1, #8]
 8011822:	4621      	mov	r1, r4
 8011824:	47a8      	blx	r5
 8011826:	b008      	add	sp, #32
 8011828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801182c:	20001df4 	.word	0x20001df4

08011830 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011830:	b510      	push	{r4, lr}
 8011832:	6803      	ldr	r3, [r0, #0]
 8011834:	460c      	mov	r4, r1
 8011836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011838:	4798      	blx	r3
 801183a:	1b03      	subs	r3, r0, r4
 801183c:	4258      	negs	r0, r3
 801183e:	4158      	adcs	r0, r3
 8011840:	bd10      	pop	{r4, pc}
	...

08011844 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011844:	4b01      	ldr	r3, [pc, #4]	@ (801184c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011846:	6019      	str	r1, [r3, #0]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	20001dfc 	.word	0x20001dfc

08011850 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011854:	4696      	mov	lr, r2
 8011856:	b097      	sub	sp, #92	@ 0x5c
 8011858:	4605      	mov	r5, r0
 801185a:	4614      	mov	r4, r2
 801185c:	460e      	mov	r6, r1
 801185e:	461f      	mov	r7, r3
 8011860:	f10d 0c1c 	add.w	ip, sp, #28
 8011864:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8011868:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801186c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8011870:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011874:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011878:	f8de 3000 	ldr.w	r3, [lr]
 801187c:	f104 0e14 	add.w	lr, r4, #20
 8011880:	f8cc 3000 	str.w	r3, [ip]
 8011884:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011888:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801188c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011890:	f8de 3000 	ldr.w	r3, [lr]
 8011894:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011898:	f8cc 3000 	str.w	r3, [ip]
 801189c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80118a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118a8:	f8de 3000 	ldr.w	r3, [lr]
 80118ac:	4631      	mov	r1, r6
 80118ae:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80118b0:	4628      	mov	r0, r5
 80118b2:	f8cc 3000 	str.w	r3, [ip]
 80118b6:	682b      	ldr	r3, [r5, #0]
 80118b8:	9201      	str	r2, [sp, #4]
 80118ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80118bc:	f8cd 8008 	str.w	r8, [sp, #8]
 80118c0:	9200      	str	r2, [sp, #0]
 80118c2:	aa07      	add	r2, sp, #28
 80118c4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80118c8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80118cc:	463b      	mov	r3, r7
 80118ce:	47d8      	blx	fp
 80118d0:	46a6      	mov	lr, r4
 80118d2:	f10d 0c1c 	add.w	ip, sp, #28
 80118d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118de:	f8de 3000 	ldr.w	r3, [lr]
 80118e2:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80118e6:	343c      	adds	r4, #60	@ 0x3c
 80118e8:	f8cc 3000 	str.w	r3, [ip]
 80118ec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80118f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118f8:	f8de 3000 	ldr.w	r3, [lr]
 80118fc:	f8cc 3000 	str.w	r3, [ip]
 8011900:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801190a:	6823      	ldr	r3, [r4, #0]
 801190c:	4631      	mov	r1, r6
 801190e:	4628      	mov	r0, r5
 8011910:	f8cc 3000 	str.w	r3, [ip]
 8011914:	682b      	ldr	r3, [r5, #0]
 8011916:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801191a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801191c:	f8cd 8008 	str.w	r8, [sp, #8]
 8011920:	9201      	str	r2, [sp, #4]
 8011922:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011924:	9200      	str	r2, [sp, #0]
 8011926:	aa07      	add	r2, sp, #28
 8011928:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801192a:	463b      	mov	r3, r7
 801192c:	47a0      	blx	r4
 801192e:	b017      	add	sp, #92	@ 0x5c
 8011930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011934 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011934:	2000      	movs	r0, #0
 8011936:	4770      	bx	lr

08011938 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193c:	b08d      	sub	sp, #52	@ 0x34
 801193e:	4688      	mov	r8, r1
 8011940:	f8d3 c000 	ldr.w	ip, [r3]
 8011944:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011946:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801194a:	680f      	ldr	r7, [r1, #0]
 801194c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8011950:	eba7 070c 	sub.w	r7, r7, ip
 8011954:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8011958:	edd3 6a07 	vldr	s13, [r3, #28]
 801195c:	42bc      	cmp	r4, r7
 801195e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011960:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8011964:	bfa8      	it	ge
 8011966:	463c      	movge	r4, r7
 8011968:	f9b1 9000 	ldrsh.w	r9, [r1]
 801196c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011970:	ee07 4a90 	vmov	s15, r4
 8011974:	eb09 0e0c 	add.w	lr, r9, ip
 8011978:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801197c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011980:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8011984:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8011988:	4571      	cmp	r1, lr
 801198a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801198e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011992:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011996:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801199a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801199e:	ee32 1a05 	vadd.f32	s2, s4, s10
 80119a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80119a6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80119aa:	ee61 1a87 	vmul.f32	s3, s3, s14
 80119ae:	ee22 2a07 	vmul.f32	s4, s4, s14
 80119b2:	f340 808c 	ble.w	8011ace <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80119b6:	eba1 060e 	sub.w	r6, r1, lr
 80119ba:	fb96 f5f4 	sdiv	r5, r6, r4
 80119be:	ee07 5a10 	vmov	s14, r5
 80119c2:	2d00      	cmp	r5, #0
 80119c4:	fb04 6615 	mls	r6, r4, r5, r6
 80119c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119cc:	eea7 0a04 	vfma.f32	s0, s14, s8
 80119d0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80119d4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80119d8:	dd12      	ble.n	8011a00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80119da:	ee70 6a44 	vsub.f32	s13, s0, s8
 80119de:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80119e2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80119e6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80119ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ee:	bf14      	ite	ne
 80119f0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80119f4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80119f8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80119fc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011a00:	fb05 f204 	mul.w	r2, r5, r4
 8011a04:	1abf      	subs	r7, r7, r2
 8011a06:	4494      	add	ip, r2
 8011a08:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011a0c:	4411      	add	r1, r2
 8011a0e:	eb09 020c 	add.w	r2, r9, ip
 8011a12:	b209      	sxth	r1, r1
 8011a14:	443a      	add	r2, r7
 8011a16:	428a      	cmp	r2, r1
 8011a18:	bfc4      	itt	gt
 8011a1a:	eba1 0209 	subgt.w	r2, r1, r9
 8011a1e:	eba2 070c 	subgt.w	r7, r2, ip
 8011a22:	2f00      	cmp	r7, #0
 8011a24:	dd50      	ble.n	8011ac8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011a26:	fb97 f1f4 	sdiv	r1, r7, r4
 8011a2a:	fb04 7211 	mls	r2, r4, r1, r7
 8011a2e:	b90a      	cbnz	r2, 8011a34 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011a30:	3901      	subs	r1, #1
 8011a32:	4622      	mov	r2, r4
 8011a34:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011a38:	6840      	ldr	r0, [r0, #4]
 8011a3a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8011a3e:	44b6      	add	lr, r6
 8011a40:	f8d0 a000 	ldr.w	sl, [r0]
 8011a44:	2900      	cmp	r1, #0
 8011a46:	bfcc      	ite	gt
 8011a48:	46a1      	movgt	r9, r4
 8011a4a:	4691      	movle	r9, r2
 8011a4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011a4e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011a50:	fb04 e505 	mla	r5, r4, r5, lr
 8011a54:	eef0 6a42 	vmov.f32	s13, s4
 8011a58:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011a5c:	9008      	str	r0, [sp, #32]
 8011a5e:	eeb0 7a61 	vmov.f32	s14, s3
 8011a62:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8011a64:	695b      	ldr	r3, [r3, #20]
 8011a66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011a6a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011a6e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011a72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011a74:	445b      	add	r3, fp
 8011a76:	9307      	str	r3, [sp, #28]
 8011a78:	ee16 3a90 	vmov	r3, s13
 8011a7c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011a80:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011a84:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011a88:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011a8c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011a90:	ee17 7a90 	vmov	r7, s15
 8011a94:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011a98:	fb97 f7f4 	sdiv	r7, r7, r4
 8011a9c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011aa0:	ee17 ca90 	vmov	ip, s15
 8011aa4:	fb9c fcf4 	sdiv	ip, ip, r4
 8011aa8:	fb0c 3306 	mla	r3, ip, r6, r3
 8011aac:	9302      	str	r3, [sp, #8]
 8011aae:	ee17 3a10 	vmov	r3, s14
 8011ab2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011ab6:	fb07 3706 	mla	r7, r7, r6, r3
 8011aba:	eba9 0306 	sub.w	r3, r9, r6
 8011abe:	e9cd 4700 	strd	r4, r7, [sp]
 8011ac2:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011ac6:	47a0      	blx	r4
 8011ac8:	b00d      	add	sp, #52	@ 0x34
 8011aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ace:	2500      	movs	r5, #0
 8011ad0:	462e      	mov	r6, r5
 8011ad2:	e799      	b.n	8011a08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011ad4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad8:	b0db      	sub	sp, #364	@ 0x16c
 8011ada:	461d      	mov	r5, r3
 8011adc:	4614      	mov	r4, r2
 8011ade:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8011ae2:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ae8:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8011aec:	9009      	str	r0, [sp, #36]	@ 0x24
 8011aee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011af0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8011af4:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8011af8:	9310      	str	r3, [sp, #64]	@ 0x40
 8011afa:	6803      	ldr	r3, [r0, #0]
 8011afc:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8011afe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011b02:	47b8      	blx	r7
 8011b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b06:	6058      	str	r0, [r3, #4]
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	f000 83a1 	beq.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b0e:	682b      	ldr	r3, [r5, #0]
 8011b10:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8011b14:	ed94 7a02 	vldr	s14, [r4, #8]
 8011b18:	9314      	str	r3, [sp, #80]	@ 0x50
 8011b1a:	686b      	ldr	r3, [r5, #4]
 8011b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b20:	9315      	str	r3, [sp, #84]	@ 0x54
 8011b22:	4bc1      	ldr	r3, [pc, #772]	@ (8011e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011b24:	7819      	ldrb	r1, [r3, #0]
 8011b26:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8011b2a:	2900      	cmp	r1, #0
 8011b2c:	bf16      	itet	ne
 8011b2e:	4619      	movne	r1, r3
 8011b30:	4611      	moveq	r1, r2
 8011b32:	4613      	movne	r3, r2
 8011b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b38:	9116      	str	r1, [sp, #88]	@ 0x58
 8011b3a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8011b3e:	f240 8387 	bls.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b42:	ed94 7a07 	vldr	s14, [r4, #28]
 8011b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4e:	f240 837f 	bls.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b52:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8011b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b5e:	f240 8377 	bls.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b62:	6822      	ldr	r2, [r4, #0]
 8011b64:	4bb1      	ldr	r3, [pc, #708]	@ (8011e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8011b66:	429a      	cmp	r2, r3
 8011b68:	f2c0 8372 	blt.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b6c:	49b0      	ldr	r1, [pc, #704]	@ (8011e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011b6e:	6963      	ldr	r3, [r4, #20]
 8011b70:	428a      	cmp	r2, r1
 8011b72:	f300 836d 	bgt.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b76:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011b7a:	48ae      	ldr	r0, [pc, #696]	@ (8011e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011b7c:	33ff      	adds	r3, #255	@ 0xff
 8011b7e:	4283      	cmp	r3, r0
 8011b80:	f200 8366 	bhi.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b84:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011b86:	4dac      	ldr	r5, [pc, #688]	@ (8011e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8011b88:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011b8c:	33ff      	adds	r3, #255	@ 0xff
 8011b8e:	42ab      	cmp	r3, r5
 8011b90:	f200 835e 	bhi.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011b94:	6862      	ldr	r2, [r4, #4]
 8011b96:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8011b9a:	33ff      	adds	r3, #255	@ 0xff
 8011b9c:	4283      	cmp	r3, r0
 8011b9e:	f200 8357 	bhi.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ba2:	69a1      	ldr	r1, [r4, #24]
 8011ba4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8011ba8:	33ff      	adds	r3, #255	@ 0xff
 8011baa:	4283      	cmp	r3, r0
 8011bac:	f200 8350 	bhi.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011bb0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011bb2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8011bb6:	30ff      	adds	r0, #255	@ 0xff
 8011bb8:	42a8      	cmp	r0, r5
 8011bba:	f200 8349 	bhi.w	8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011bbe:	428a      	cmp	r2, r1
 8011bc0:	f280 8110 	bge.w	8011de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	f300 8119 	bgt.w	8011dfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8011bca:	4299      	cmp	r1, r3
 8011bcc:	f280 811d 	bge.w	8011e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011bd0:	2502      	movs	r5, #2
 8011bd2:	2701      	movs	r7, #1
 8011bd4:	46a9      	mov	r9, r5
 8011bd6:	46b8      	mov	r8, r7
 8011bd8:	f04f 0a00 	mov.w	sl, #0
 8011bdc:	4621      	mov	r1, r4
 8011bde:	a849      	add	r0, sp, #292	@ 0x124
 8011be0:	f003 f834 	bl	8014c4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011be4:	4622      	mov	r2, r4
 8011be6:	4653      	mov	r3, sl
 8011be8:	a949      	add	r1, sp, #292	@ 0x124
 8011bea:	f8cd 9000 	str.w	r9, [sp]
 8011bee:	a819      	add	r0, sp, #100	@ 0x64
 8011bf0:	f003 f95c 	bl	8014eac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011bf4:	4622      	mov	r2, r4
 8011bf6:	4653      	mov	r3, sl
 8011bf8:	a949      	add	r1, sp, #292	@ 0x124
 8011bfa:	f8cd 8000 	str.w	r8, [sp]
 8011bfe:	a829      	add	r0, sp, #164	@ 0xa4
 8011c00:	f003 f954 	bl	8014eac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011c04:	4643      	mov	r3, r8
 8011c06:	4622      	mov	r2, r4
 8011c08:	a949      	add	r1, sp, #292	@ 0x124
 8011c0a:	f8cd 9000 	str.w	r9, [sp]
 8011c0e:	a839      	add	r0, sp, #228	@ 0xe4
 8011c10:	f003 f94c 	bl	8014eac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011c14:	42af      	cmp	r7, r5
 8011c16:	af12      	add	r7, sp, #72	@ 0x48
 8011c18:	bfb7      	itett	lt
 8011c1a:	2300      	movlt	r3, #0
 8011c1c:	2301      	movge	r3, #1
 8011c1e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8011c20:	ac19      	addlt	r4, sp, #100	@ 0x64
 8011c22:	bfb1      	iteee	lt
 8011c24:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8011c26:	ad19      	addge	r5, sp, #100	@ 0x64
 8011c28:	930e      	strge	r3, [sp, #56]	@ 0x38
 8011c2a:	ac29      	addge	r4, sp, #164	@ 0xa4
 8011c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c32:	e887 0003 	stmia.w	r7, {r0, r1}
 8011c36:	b928      	cbnz	r0, 8011c44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8011c38:	4b80      	ldr	r3, [pc, #512]	@ (8011e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8011c3a:	6818      	ldr	r0, [r3, #0]
 8011c3c:	6803      	ldr	r3, [r0, #0]
 8011c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c40:	4798      	blx	r3
 8011c42:	6038      	str	r0, [r7, #0]
 8011c44:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011c46:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011c4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c4e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8011c50:	930c      	str	r3, [sp, #48]	@ 0x30
 8011c52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c54:	6963      	ldr	r3, [r4, #20]
 8011c56:	440b      	add	r3, r1
 8011c58:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011c5c:	4408      	add	r0, r1
 8011c5e:	b200      	sxth	r0, r0
 8011c60:	4283      	cmp	r3, r0
 8011c62:	900d      	str	r0, [sp, #52]	@ 0x34
 8011c64:	f280 80dd 	bge.w	8011e22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8011c68:	428b      	cmp	r3, r1
 8011c6a:	da08      	bge.n	8011c7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011c6c:	2a00      	cmp	r2, #0
 8011c6e:	dd06      	ble.n	8011c7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011c70:	1acb      	subs	r3, r1, r3
 8011c72:	429a      	cmp	r2, r3
 8011c74:	f2c0 80e4 	blt.w	8011e40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f300 80e2 	bgt.w	8011e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8011c7e:	6967      	ldr	r7, [r4, #20]
 8011c80:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8011c84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c86:	443b      	add	r3, r7
 8011c88:	461f      	mov	r7, r3
 8011c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c8c:	1bdf      	subs	r7, r3, r7
 8011c8e:	4297      	cmp	r7, r2
 8011c90:	bfa8      	it	ge
 8011c92:	4617      	movge	r7, r2
 8011c94:	2f00      	cmp	r7, #0
 8011c96:	f340 8166 	ble.w	8011f66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8011c9a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011c9c:	6829      	ldr	r1, [r5, #0]
 8011c9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ca2:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011ca6:	4411      	add	r1, r2
 8011ca8:	6820      	ldr	r0, [r4, #0]
 8011caa:	4299      	cmp	r1, r3
 8011cac:	dd1a      	ble.n	8011ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011cae:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011cb2:	4402      	add	r2, r0
 8011cb4:	440b      	add	r3, r1
 8011cb6:	b21b      	sxth	r3, r3
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	dc13      	bgt.n	8011ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011cbc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011cbe:	a912      	add	r1, sp, #72	@ 0x48
 8011cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	9206      	str	r2, [sp, #24]
 8011cc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011cca:	9500      	str	r5, [sp, #0]
 8011ccc:	9205      	str	r2, [sp, #20]
 8011cce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011cd0:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011cd4:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8011cd6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011cda:	aa49      	add	r2, sp, #292	@ 0x124
 8011cdc:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011ce0:	4623      	mov	r3, r4
 8011ce2:	47c8      	blx	r9
 8011ce4:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8011ce8:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011cec:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011cf4:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8011cf8:	68a1      	ldr	r1, [r4, #8]
 8011cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011cfe:	ed94 6a08 	vldr	s12, [r4, #32]
 8011d02:	edd4 6a07 	vldr	s13, [r4, #28]
 8011d06:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011d0a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011d0e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011d12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d16:	edc4 6a07 	vstr	s13, [r4, #28]
 8011d1a:	441a      	add	r2, r3
 8011d1c:	6963      	ldr	r3, [r4, #20]
 8011d1e:	3301      	adds	r3, #1
 8011d20:	6022      	str	r2, [r4, #0]
 8011d22:	6163      	str	r3, [r4, #20]
 8011d24:	69a3      	ldr	r3, [r4, #24]
 8011d26:	3b01      	subs	r3, #1
 8011d28:	61a3      	str	r3, [r4, #24]
 8011d2a:	6923      	ldr	r3, [r4, #16]
 8011d2c:	440b      	add	r3, r1
 8011d2e:	68e1      	ldr	r1, [r4, #12]
 8011d30:	428b      	cmp	r3, r1
 8011d32:	6123      	str	r3, [r4, #16]
 8011d34:	db15      	blt.n	8011d62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8011d36:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8011d3a:	3201      	adds	r2, #1
 8011d3c:	1a5b      	subs	r3, r3, r1
 8011d3e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011d42:	6022      	str	r2, [r4, #0]
 8011d44:	6123      	str	r3, [r4, #16]
 8011d46:	edc4 6a07 	vstr	s13, [r4, #28]
 8011d4a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011d4e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011d52:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011d56:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8011d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d5e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011d62:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8011d66:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8011d6a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8011d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011d72:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8011d76:	68a9      	ldr	r1, [r5, #8]
 8011d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011d7c:	ed95 6a08 	vldr	s12, [r5, #32]
 8011d80:	edd5 6a07 	vldr	s13, [r5, #28]
 8011d84:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011d88:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011d8c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d94:	edc5 6a07 	vstr	s13, [r5, #28]
 8011d98:	441a      	add	r2, r3
 8011d9a:	696b      	ldr	r3, [r5, #20]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	602a      	str	r2, [r5, #0]
 8011da0:	616b      	str	r3, [r5, #20]
 8011da2:	69ab      	ldr	r3, [r5, #24]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	61ab      	str	r3, [r5, #24]
 8011da8:	692b      	ldr	r3, [r5, #16]
 8011daa:	440b      	add	r3, r1
 8011dac:	68e9      	ldr	r1, [r5, #12]
 8011dae:	428b      	cmp	r3, r1
 8011db0:	612b      	str	r3, [r5, #16]
 8011db2:	db15      	blt.n	8011de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8011db4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8011db8:	3201      	adds	r2, #1
 8011dba:	1a5b      	subs	r3, r3, r1
 8011dbc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011dc0:	602a      	str	r2, [r5, #0]
 8011dc2:	612b      	str	r3, [r5, #16]
 8011dc4:	edc5 6a07 	vstr	s13, [r5, #28]
 8011dc8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011dcc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011dd0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011dd4:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8011dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ddc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011de0:	3f01      	subs	r7, #1
 8011de2:	e757      	b.n	8011c94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011de4:	4299      	cmp	r1, r3
 8011de6:	dc13      	bgt.n	8011e10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8011de8:	429a      	cmp	r2, r3
 8011dea:	da14      	bge.n	8011e16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011dec:	2502      	movs	r5, #2
 8011dee:	2703      	movs	r7, #3
 8011df0:	f04f 0800 	mov.w	r8, #0
 8011df4:	46a9      	mov	r9, r5
 8011df6:	f04f 0a01 	mov.w	sl, #1
 8011dfa:	e6ef      	b.n	8011bdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011dfc:	2501      	movs	r5, #1
 8011dfe:	2700      	movs	r7, #0
 8011e00:	46a9      	mov	r9, r5
 8011e02:	46b8      	mov	r8, r7
 8011e04:	f04f 0a02 	mov.w	sl, #2
 8011e08:	e6e8      	b.n	8011bdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011e0a:	2501      	movs	r5, #1
 8011e0c:	2702      	movs	r7, #2
 8011e0e:	e6e1      	b.n	8011bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8011e10:	2500      	movs	r5, #0
 8011e12:	2701      	movs	r7, #1
 8011e14:	e7f4      	b.n	8011e00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8011e16:	2702      	movs	r7, #2
 8011e18:	2503      	movs	r5, #3
 8011e1a:	f04f 0900 	mov.w	r9, #0
 8011e1e:	46b8      	mov	r8, r7
 8011e20:	e7e9      	b.n	8011df6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8011e22:	4613      	mov	r3, r2
 8011e24:	e728      	b.n	8011c78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8011e26:	bf00      	nop
 8011e28:	20001dec 	.word	0x20001dec
 8011e2c:	fffd8f01 	.word	0xfffd8f01
 8011e30:	00027100 	.word	0x00027100
 8011e34:	0004e1ff 	.word	0x0004e1ff
 8011e38:	0004e1fe 	.word	0x0004e1fe
 8011e3c:	20001df4 	.word	0x20001df4
 8011e40:	4613      	mov	r3, r2
 8011e42:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8011e44:	469e      	mov	lr, r3
 8011e46:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8011e48:	469c      	mov	ip, r3
 8011e4a:	9111      	str	r1, [sp, #68]	@ 0x44
 8011e4c:	f04f 0900 	mov.w	r9, #0
 8011e50:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8011e54:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8011e58:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8011e5c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8011e60:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8011e64:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011e68:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8011e6c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8011e70:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8011e74:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8011e78:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8011e7c:	f1bc 0f00 	cmp.w	ip, #0
 8011e80:	d147      	bne.n	8011f12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011e82:	eb03 0c07 	add.w	ip, r3, r7
 8011e86:	1ad7      	subs	r7, r2, r3
 8011e88:	f1b9 0f00 	cmp.w	r9, #0
 8011e8c:	d009      	beq.n	8011ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011e8e:	9029      	str	r0, [sp, #164]	@ 0xa4
 8011e90:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8011e94:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8011e98:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8011e9c:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011e9e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8011ea2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011ea4:	f04f 0800 	mov.w	r8, #0
 8011ea8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8011eac:	9111      	str	r1, [sp, #68]	@ 0x44
 8011eae:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8011eb2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8011eb6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8011eba:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011ebe:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8011ec2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8011ec6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8011eca:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011ece:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8011ed2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8011ed6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8011eda:	f1be 0f00 	cmp.w	lr, #0
 8011ede:	d031      	beq.n	8011f44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011ee0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011ee2:	4450      	add	r0, sl
 8011ee4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011ee8:	4431      	add	r1, r6
 8011eea:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011eee:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011ef2:	4549      	cmp	r1, r9
 8011ef4:	db08      	blt.n	8011f08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8011ef6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011efa:	3001      	adds	r0, #1
 8011efc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011f00:	eba1 0109 	sub.w	r1, r1, r9
 8011f04:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011f08:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011f0c:	f04f 0801 	mov.w	r8, #1
 8011f10:	e7e3      	b.n	8011eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8011f12:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011f14:	4450      	add	r0, sl
 8011f16:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011f1a:	4431      	add	r1, r6
 8011f1c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011f20:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011f24:	4541      	cmp	r1, r8
 8011f26:	db08      	blt.n	8011f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8011f28:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011f2c:	3001      	adds	r0, #1
 8011f2e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011f32:	eba1 0108 	sub.w	r1, r1, r8
 8011f36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011f3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011f3e:	f04f 0901 	mov.w	r9, #1
 8011f42:	e79b      	b.n	8011e7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011f44:	449c      	add	ip, r3
 8011f46:	1aff      	subs	r7, r7, r3
 8011f48:	f1b8 0f00 	cmp.w	r8, #0
 8011f4c:	d009      	beq.n	8011f62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8011f4e:	9019      	str	r0, [sp, #100]	@ 0x64
 8011f50:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011f54:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011f58:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011f5c:	911d      	str	r1, [sp, #116]	@ 0x74
 8011f5e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8011f62:	1ad2      	subs	r2, r2, r3
 8011f64:	e68b      	b.n	8011c7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011f66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f68:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	f000 80d1 	beq.w	8012112 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011f70:	ad19      	add	r5, sp, #100	@ 0x64
 8011f72:	ac39      	add	r4, sp, #228	@ 0xe4
 8011f74:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011f76:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011f7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011f80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011f82:	6963      	ldr	r3, [r4, #20]
 8011f84:	440b      	add	r3, r1
 8011f86:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011f8a:	4408      	add	r0, r1
 8011f8c:	b200      	sxth	r0, r0
 8011f8e:	4283      	cmp	r3, r0
 8011f90:	900d      	str	r0, [sp, #52]	@ 0x34
 8011f92:	f280 80c1 	bge.w	8012118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8011f96:	428b      	cmp	r3, r1
 8011f98:	da08      	bge.n	8011fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011f9a:	2a00      	cmp	r2, #0
 8011f9c:	dd06      	ble.n	8011fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011f9e:	1acb      	subs	r3, r1, r3
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	f2c0 80bb 	blt.w	801211c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f300 80b9 	bgt.w	801211e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8011fac:	6967      	ldr	r7, [r4, #20]
 8011fae:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8011fb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fb4:	443b      	add	r3, r7
 8011fb6:	461f      	mov	r7, r3
 8011fb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011fba:	1bdf      	subs	r7, r3, r7
 8011fbc:	4297      	cmp	r7, r2
 8011fbe:	bfa8      	it	ge
 8011fc0:	4617      	movge	r7, r2
 8011fc2:	2f00      	cmp	r7, #0
 8011fc4:	f340 813c 	ble.w	8012240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8011fc8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011fca:	6829      	ldr	r1, [r5, #0]
 8011fcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011fd0:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011fd4:	4411      	add	r1, r2
 8011fd6:	6820      	ldr	r0, [r4, #0]
 8011fd8:	4299      	cmp	r1, r3
 8011fda:	dd1a      	ble.n	8012012 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011fdc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011fe0:	4402      	add	r2, r0
 8011fe2:	440b      	add	r3, r1
 8011fe4:	b21b      	sxth	r3, r3
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	dc13      	bgt.n	8012012 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011fea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011fec:	a912      	add	r1, sp, #72	@ 0x48
 8011fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ff0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	9206      	str	r2, [sp, #24]
 8011ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011ff8:	9500      	str	r5, [sp, #0]
 8011ffa:	9205      	str	r2, [sp, #20]
 8011ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ffe:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012002:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8012004:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012008:	aa49      	add	r2, sp, #292	@ 0x124
 801200a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801200e:	4623      	mov	r3, r4
 8012010:	47c8      	blx	r9
 8012012:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8012016:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801201a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801201e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012022:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8012026:	68a1      	ldr	r1, [r4, #8]
 8012028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801202c:	ed94 6a08 	vldr	s12, [r4, #32]
 8012030:	edd4 6a07 	vldr	s13, [r4, #28]
 8012034:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012038:	ee76 6a86 	vadd.f32	s13, s13, s12
 801203c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012040:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012044:	edc4 6a07 	vstr	s13, [r4, #28]
 8012048:	441a      	add	r2, r3
 801204a:	6963      	ldr	r3, [r4, #20]
 801204c:	3301      	adds	r3, #1
 801204e:	6022      	str	r2, [r4, #0]
 8012050:	6163      	str	r3, [r4, #20]
 8012052:	69a3      	ldr	r3, [r4, #24]
 8012054:	3b01      	subs	r3, #1
 8012056:	61a3      	str	r3, [r4, #24]
 8012058:	6923      	ldr	r3, [r4, #16]
 801205a:	440b      	add	r3, r1
 801205c:	68e1      	ldr	r1, [r4, #12]
 801205e:	428b      	cmp	r3, r1
 8012060:	6123      	str	r3, [r4, #16]
 8012062:	db15      	blt.n	8012090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012064:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8012068:	3201      	adds	r2, #1
 801206a:	1a5b      	subs	r3, r3, r1
 801206c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012070:	6022      	str	r2, [r4, #0]
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	edc4 6a07 	vstr	s13, [r4, #28]
 8012078:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801207c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012080:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012084:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8012088:	ee77 7a27 	vadd.f32	s15, s14, s15
 801208c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012090:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8012094:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8012098:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80120a0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80120a4:	68a9      	ldr	r1, [r5, #8]
 80120a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80120aa:	ed95 6a08 	vldr	s12, [r5, #32]
 80120ae:	edd5 6a07 	vldr	s13, [r5, #28]
 80120b2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80120b6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80120ba:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80120be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120c2:	edc5 6a07 	vstr	s13, [r5, #28]
 80120c6:	441a      	add	r2, r3
 80120c8:	696b      	ldr	r3, [r5, #20]
 80120ca:	3301      	adds	r3, #1
 80120cc:	602a      	str	r2, [r5, #0]
 80120ce:	616b      	str	r3, [r5, #20]
 80120d0:	69ab      	ldr	r3, [r5, #24]
 80120d2:	3b01      	subs	r3, #1
 80120d4:	61ab      	str	r3, [r5, #24]
 80120d6:	692b      	ldr	r3, [r5, #16]
 80120d8:	440b      	add	r3, r1
 80120da:	68e9      	ldr	r1, [r5, #12]
 80120dc:	428b      	cmp	r3, r1
 80120de:	612b      	str	r3, [r5, #16]
 80120e0:	db15      	blt.n	801210e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80120e2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80120e6:	3201      	adds	r2, #1
 80120e8:	1a5b      	subs	r3, r3, r1
 80120ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 80120ee:	602a      	str	r2, [r5, #0]
 80120f0:	612b      	str	r3, [r5, #16]
 80120f2:	edc5 6a07 	vstr	s13, [r5, #28]
 80120f6:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80120fa:	ee36 7a87 	vadd.f32	s14, s13, s14
 80120fe:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012102:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8012106:	ee77 7a27 	vadd.f32	s15, s14, s15
 801210a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801210e:	3f01      	subs	r7, #1
 8012110:	e757      	b.n	8011fc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012112:	ad39      	add	r5, sp, #228	@ 0xe4
 8012114:	ac19      	add	r4, sp, #100	@ 0x64
 8012116:	e72d      	b.n	8011f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012118:	4613      	mov	r3, r2
 801211a:	e744      	b.n	8011fa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801211c:	4613      	mov	r3, r2
 801211e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8012120:	469e      	mov	lr, r3
 8012122:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8012126:	461f      	mov	r7, r3
 8012128:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801212c:	f04f 0900 	mov.w	r9, #0
 8012130:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8012134:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8012138:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801213c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8012140:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8012144:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8012146:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801214a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801214e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8012152:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8012156:	960e      	str	r6, [sp, #56]	@ 0x38
 8012158:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801215c:	2f00      	cmp	r7, #0
 801215e:	d146      	bne.n	80121ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012160:	449c      	add	ip, r3
 8012162:	1ad7      	subs	r7, r2, r3
 8012164:	f1b9 0f00 	cmp.w	r9, #0
 8012168:	d009      	beq.n	801217e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801216a:	9039      	str	r0, [sp, #228]	@ 0xe4
 801216c:	913d      	str	r1, [sp, #244]	@ 0xf4
 801216e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8012172:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8012176:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801217a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801217e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012180:	f04f 0800 	mov.w	r8, #0
 8012184:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012188:	910e      	str	r1, [sp, #56]	@ 0x38
 801218a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801218e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8012192:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8012196:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801219a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801219e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80121a2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80121a6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80121aa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80121ae:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80121b2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80121b6:	f1be 0f00 	cmp.w	lr, #0
 80121ba:	d030      	beq.n	801221e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80121bc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80121be:	4450      	add	r0, sl
 80121c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80121c4:	4431      	add	r1, r6
 80121c6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80121ca:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80121ce:	4549      	cmp	r1, r9
 80121d0:	db08      	blt.n	80121e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80121d2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80121d6:	3001      	adds	r0, #1
 80121d8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80121dc:	eba1 0109 	sub.w	r1, r1, r9
 80121e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80121e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80121e8:	f04f 0801 	mov.w	r8, #1
 80121ec:	e7e3      	b.n	80121b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80121ee:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80121f0:	4450      	add	r0, sl
 80121f2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80121f6:	4431      	add	r1, r6
 80121f8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80121fc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012200:	4541      	cmp	r1, r8
 8012202:	db08      	blt.n	8012216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8012204:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012208:	3001      	adds	r0, #1
 801220a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801220e:	eba1 0108 	sub.w	r1, r1, r8
 8012212:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012216:	3f01      	subs	r7, #1
 8012218:	f04f 0901 	mov.w	r9, #1
 801221c:	e79e      	b.n	801215c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801221e:	449c      	add	ip, r3
 8012220:	1aff      	subs	r7, r7, r3
 8012222:	f1b8 0f00 	cmp.w	r8, #0
 8012226:	d009      	beq.n	801223c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8012228:	9019      	str	r0, [sp, #100]	@ 0x64
 801222a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801222e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8012232:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8012236:	911d      	str	r1, [sp, #116]	@ 0x74
 8012238:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801223c:	1ad2      	subs	r2, r2, r3
 801223e:	e6b5      	b.n	8011fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	b923      	cbnz	r3, 8012250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012246:	4b04      	ldr	r3, [pc, #16]	@ (8012258 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8012248:	6818      	ldr	r0, [r3, #0]
 801224a:	6803      	ldr	r3, [r0, #0]
 801224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801224e:	4798      	blx	r3
 8012250:	b05b      	add	sp, #364	@ 0x16c
 8012252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012256:	bf00      	nop
 8012258:	20001df4 	.word	0x20001df4

0801225c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801225c:	2b03      	cmp	r3, #3
 801225e:	d818      	bhi.n	8012292 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8012260:	e8df f003 	tbb	[pc, r3]
 8012264:	130d0602 	.word	0x130d0602
 8012268:	f9b0 2000 	ldrsh.w	r2, [r0]
 801226c:	1850      	adds	r0, r2, r1
 801226e:	4770      	bx	lr
 8012270:	8803      	ldrh	r3, [r0, #0]
 8012272:	8880      	ldrh	r0, [r0, #4]
 8012274:	4418      	add	r0, r3
 8012276:	b200      	sxth	r0, r0
 8012278:	1a80      	subs	r0, r0, r2
 801227a:	3801      	subs	r0, #1
 801227c:	4770      	bx	lr
 801227e:	8803      	ldrh	r3, [r0, #0]
 8012280:	8880      	ldrh	r0, [r0, #4]
 8012282:	4418      	add	r0, r3
 8012284:	b200      	sxth	r0, r0
 8012286:	1a40      	subs	r0, r0, r1
 8012288:	e7f7      	b.n	801227a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801228a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801228e:	4410      	add	r0, r2
 8012290:	4770      	bx	lr
 8012292:	2000      	movs	r0, #0
 8012294:	4770      	bx	lr

08012296 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012296:	2b03      	cmp	r3, #3
 8012298:	d817      	bhi.n	80122ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801229a:	e8df f003 	tbb	[pc, r3]
 801229e:	0602      	.short	0x0602
 80122a0:	1009      	.short	0x1009
 80122a2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80122a6:	1850      	adds	r0, r2, r1
 80122a8:	4770      	bx	lr
 80122aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80122ae:	e7fa      	b.n	80122a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80122b0:	8843      	ldrh	r3, [r0, #2]
 80122b2:	88c0      	ldrh	r0, [r0, #6]
 80122b4:	4418      	add	r0, r3
 80122b6:	b200      	sxth	r0, r0
 80122b8:	1a80      	subs	r0, r0, r2
 80122ba:	3801      	subs	r0, #1
 80122bc:	4770      	bx	lr
 80122be:	8843      	ldrh	r3, [r0, #2]
 80122c0:	88c0      	ldrh	r0, [r0, #6]
 80122c2:	4418      	add	r0, r3
 80122c4:	b200      	sxth	r0, r0
 80122c6:	1a40      	subs	r0, r0, r1
 80122c8:	e7f7      	b.n	80122ba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80122ca:	2000      	movs	r0, #0
 80122cc:	4770      	bx	lr
	...

080122d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80122d0:	4b01      	ldr	r3, [pc, #4]	@ (80122d8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
 80122d6:	4770      	bx	lr
 80122d8:	20001dfc 	.word	0x20001dfc

080122dc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80122dc:	4603      	mov	r3, r0
 80122de:	b1c8      	cbz	r0, 8012314 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80122e0:	0c02      	lsrs	r2, r0, #16
 80122e2:	0412      	lsls	r2, r2, #16
 80122e4:	b9a2      	cbnz	r2, 8012310 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80122e6:	0403      	lsls	r3, r0, #16
 80122e8:	2010      	movs	r0, #16
 80122ea:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80122ee:	bf04      	itt	eq
 80122f0:	021b      	lsleq	r3, r3, #8
 80122f2:	3008      	addeq	r0, #8
 80122f4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80122f8:	bf04      	itt	eq
 80122fa:	011b      	lsleq	r3, r3, #4
 80122fc:	3004      	addeq	r0, #4
 80122fe:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8012302:	bf04      	itt	eq
 8012304:	009b      	lsleq	r3, r3, #2
 8012306:	3002      	addeq	r0, #2
 8012308:	2b00      	cmp	r3, #0
 801230a:	db04      	blt.n	8012316 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801230c:	3001      	adds	r0, #1
 801230e:	4770      	bx	lr
 8012310:	2000      	movs	r0, #0
 8012312:	e7ea      	b.n	80122ea <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8012314:	2020      	movs	r0, #32
 8012316:	4770      	bx	lr

08012318 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231c:	b087      	sub	sp, #28
 801231e:	460d      	mov	r5, r1
 8012320:	4616      	mov	r6, r2
 8012322:	4698      	mov	r8, r3
 8012324:	4601      	mov	r1, r0
 8012326:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801232a:	b120      	cbz	r0, 8012336 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801232c:	b11a      	cbz	r2, 8012336 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801232e:	2d1f      	cmp	r5, #31
 8012330:	d801      	bhi.n	8012336 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012332:	2b1f      	cmp	r3, #31
 8012334:	d904      	bls.n	8012340 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8012336:	2000      	movs	r0, #0
 8012338:	6038      	str	r0, [r7, #0]
 801233a:	b007      	add	sp, #28
 801233c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012340:	b97d      	cbnz	r5, 8012362 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8012342:	b143      	cbz	r3, 8012356 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8012344:	4602      	mov	r2, r0
 8012346:	462b      	mov	r3, r5
 8012348:	4641      	mov	r1, r8
 801234a:	4630      	mov	r0, r6
 801234c:	e9cd 4700 	strd	r4, r7, [sp]
 8012350:	f7ff ffe2 	bl	8012318 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012354:	e7f1      	b.n	801233a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012356:	f04f 33ff 	mov.w	r3, #4294967295
 801235a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801235e:	603b      	str	r3, [r7, #0]
 8012360:	e7eb      	b.n	801233a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012362:	fa32 fa05 	lsrs.w	sl, r2, r5
 8012366:	d106      	bne.n	8012376 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8012368:	4346      	muls	r6, r0
 801236a:	fbb6 f0f4 	udiv	r0, r6, r4
 801236e:	fb04 6610 	mls	r6, r4, r0, r6
 8012372:	603e      	str	r6, [r7, #0]
 8012374:	e7e1      	b.n	801233a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012376:	2201      	movs	r2, #1
 8012378:	fa00 fb05 	lsl.w	fp, r0, r5
 801237c:	40aa      	lsls	r2, r5
 801237e:	fbbb f9f4 	udiv	r9, fp, r4
 8012382:	3a01      	subs	r2, #1
 8012384:	fb0a f309 	mul.w	r3, sl, r9
 8012388:	fb04 b919 	mls	r9, r4, r9, fp
 801238c:	4016      	ands	r6, r2
 801238e:	9303      	str	r3, [sp, #12]
 8012390:	4630      	mov	r0, r6
 8012392:	f7ff ffa3 	bl	80122dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012396:	462b      	mov	r3, r5
 8012398:	460a      	mov	r2, r1
 801239a:	4601      	mov	r1, r0
 801239c:	4630      	mov	r0, r6
 801239e:	e9cd 4700 	strd	r4, r7, [sp]
 80123a2:	f7ff ffb9 	bl	8012318 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80123a6:	4606      	mov	r6, r0
 80123a8:	4648      	mov	r0, r9
 80123aa:	eb05 0108 	add.w	r1, r5, r8
 80123ae:	f7ff ff95 	bl	80122dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 80123b2:	ab05      	add	r3, sp, #20
 80123b4:	464a      	mov	r2, r9
 80123b6:	e9cd 4300 	strd	r4, r3, [sp]
 80123ba:	4603      	mov	r3, r0
 80123bc:	4650      	mov	r0, sl
 80123be:	f7ff ffab 	bl	8012318 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80123c2:	6839      	ldr	r1, [r7, #0]
 80123c4:	9a05      	ldr	r2, [sp, #20]
 80123c6:	9b03      	ldr	r3, [sp, #12]
 80123c8:	4411      	add	r1, r2
 80123ca:	fbb1 f2f4 	udiv	r2, r1, r4
 80123ce:	18d3      	adds	r3, r2, r3
 80123d0:	fb04 1412 	mls	r4, r4, r2, r1
 80123d4:	441e      	add	r6, r3
 80123d6:	603c      	str	r4, [r7, #0]
 80123d8:	4430      	add	r0, r6
 80123da:	e7ae      	b.n	801233a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080123dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80123dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123e0:	b085      	sub	sp, #20
 80123e2:	f1b0 0900 	subs.w	r9, r0, #0
 80123e6:	461d      	mov	r5, r3
 80123e8:	4617      	mov	r7, r2
 80123ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80123ec:	bfbb      	ittet	lt
 80123ee:	f1c9 0900 	rsblt	r9, r9, #0
 80123f2:	f04f 36ff 	movlt.w	r6, #4294967295
 80123f6:	2601      	movge	r6, #1
 80123f8:	6823      	ldrlt	r3, [r4, #0]
 80123fa:	bfbc      	itt	lt
 80123fc:	425b      	neglt	r3, r3
 80123fe:	6023      	strlt	r3, [r4, #0]
 8012400:	2a00      	cmp	r2, #0
 8012402:	da04      	bge.n	801240e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8012404:	6823      	ldr	r3, [r4, #0]
 8012406:	4257      	negs	r7, r2
 8012408:	4276      	negs	r6, r6
 801240a:	425b      	negs	r3, r3
 801240c:	6023      	str	r3, [r4, #0]
 801240e:	2d00      	cmp	r5, #0
 8012410:	4638      	mov	r0, r7
 8012412:	bfba      	itte	lt
 8012414:	426d      	neglt	r5, r5
 8012416:	f04f 38ff 	movlt.w	r8, #4294967295
 801241a:	f04f 0801 	movge.w	r8, #1
 801241e:	f7ff ff5d 	bl	80122dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012422:	ab03      	add	r3, sp, #12
 8012424:	463a      	mov	r2, r7
 8012426:	e9cd 5300 	strd	r5, r3, [sp]
 801242a:	4603      	mov	r3, r0
 801242c:	4648      	mov	r0, r9
 801242e:	f7ff ff73 	bl	8012318 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012432:	6823      	ldr	r3, [r4, #0]
 8012434:	9a03      	ldr	r2, [sp, #12]
 8012436:	4546      	cmp	r6, r8
 8012438:	441a      	add	r2, r3
 801243a:	fb92 f3f5 	sdiv	r3, r2, r5
 801243e:	4418      	add	r0, r3
 8012440:	fb05 2313 	mls	r3, r5, r3, r2
 8012444:	bf18      	it	ne
 8012446:	4240      	negne	r0, r0
 8012448:	1c72      	adds	r2, r6, #1
 801244a:	6023      	str	r3, [r4, #0]
 801244c:	d105      	bne.n	801245a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801244e:	2b00      	cmp	r3, #0
 8012450:	f1c3 0200 	rsb	r2, r3, #0
 8012454:	db0b      	blt.n	801246e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012456:	6022      	str	r2, [r4, #0]
 8012458:	e006      	b.n	8012468 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801245a:	2e01      	cmp	r6, #1
 801245c:	d104      	bne.n	8012468 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801245e:	2b00      	cmp	r3, #0
 8012460:	da02      	bge.n	8012468 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012462:	442b      	add	r3, r5
 8012464:	3801      	subs	r0, #1
 8012466:	6023      	str	r3, [r4, #0]
 8012468:	b005      	add	sp, #20
 801246a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801246e:	3801      	subs	r0, #1
 8012470:	1b52      	subs	r2, r2, r5
 8012472:	e7f0      	b.n	8012456 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08012474 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012474:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012478:	4c1c      	ldr	r4, [pc, #112]	@ (80124ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801247a:	4605      	mov	r5, r0
 801247c:	6807      	ldr	r7, [r0, #0]
 801247e:	69a3      	ldr	r3, [r4, #24]
 8012480:	b92b      	cbnz	r3, 801248e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012482:	6840      	ldr	r0, [r0, #4]
 8012484:	e9c5 7000 	strd	r7, r0, [r5]
 8012488:	b004      	add	sp, #16
 801248a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801248e:	f04f 0802 	mov.w	r8, #2
 8012492:	68a2      	ldr	r2, [r4, #8]
 8012494:	ae04      	add	r6, sp, #16
 8012496:	6820      	ldr	r0, [r4, #0]
 8012498:	fb93 f1f8 	sdiv	r1, r3, r8
 801249c:	440a      	add	r2, r1
 801249e:	69e1      	ldr	r1, [r4, #28]
 80124a0:	f846 2d04 	str.w	r2, [r6, #-4]!
 80124a4:	463a      	mov	r2, r7
 80124a6:	9600      	str	r6, [sp, #0]
 80124a8:	f7ff ff98 	bl	80123dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80124ac:	69a3      	ldr	r3, [r4, #24]
 80124ae:	4607      	mov	r7, r0
 80124b0:	686a      	ldr	r2, [r5, #4]
 80124b2:	6a21      	ldr	r1, [r4, #32]
 80124b4:	9600      	str	r6, [sp, #0]
 80124b6:	6860      	ldr	r0, [r4, #4]
 80124b8:	f7ff ff90 	bl	80123dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80124bc:	69a3      	ldr	r3, [r4, #24]
 80124be:	6962      	ldr	r2, [r4, #20]
 80124c0:	4407      	add	r7, r0
 80124c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80124c4:	9600      	str	r6, [sp, #0]
 80124c6:	68e0      	ldr	r0, [r4, #12]
 80124c8:	fb93 f8f8 	sdiv	r8, r3, r8
 80124cc:	4442      	add	r2, r8
 80124ce:	9203      	str	r2, [sp, #12]
 80124d0:	682a      	ldr	r2, [r5, #0]
 80124d2:	f7ff ff83 	bl	80123dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80124d6:	4680      	mov	r8, r0
 80124d8:	9600      	str	r6, [sp, #0]
 80124da:	69a3      	ldr	r3, [r4, #24]
 80124dc:	686a      	ldr	r2, [r5, #4]
 80124de:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80124e0:	6920      	ldr	r0, [r4, #16]
 80124e2:	f7ff ff7b 	bl	80123dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80124e6:	4440      	add	r0, r8
 80124e8:	e7cc      	b.n	8012484 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80124ea:	bf00      	nop
 80124ec:	20001e00 	.word	0x20001e00

080124f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80124f0:	4b07      	ldr	r3, [pc, #28]	@ (8012510 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d109      	bne.n	801250c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80124f8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80124fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012500:	8003      	strh	r3, [r0, #0]
 8012502:	4b04      	ldr	r3, [pc, #16]	@ (8012514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012504:	881b      	ldrh	r3, [r3, #0]
 8012506:	3b01      	subs	r3, #1
 8012508:	1a9b      	subs	r3, r3, r2
 801250a:	800b      	strh	r3, [r1, #0]
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop
 8012510:	20001dec 	.word	0x20001dec
 8012514:	20001de8 	.word	0x20001de8

08012518 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012518:	4b07      	ldr	r3, [pc, #28]	@ (8012538 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801251a:	b510      	push	{r4, lr}
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	2b01      	cmp	r3, #1
 8012520:	d108      	bne.n	8012534 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8012522:	4b06      	ldr	r3, [pc, #24]	@ (801253c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8012524:	880c      	ldrh	r4, [r1, #0]
 8012526:	881b      	ldrh	r3, [r3, #0]
 8012528:	f9b0 2000 	ldrsh.w	r2, [r0]
 801252c:	3b01      	subs	r3, #1
 801252e:	1b1b      	subs	r3, r3, r4
 8012530:	8003      	strh	r3, [r0, #0]
 8012532:	800a      	strh	r2, [r1, #0]
 8012534:	bd10      	pop	{r4, pc}
 8012536:	bf00      	nop
 8012538:	20001dec 	.word	0x20001dec
 801253c:	20001de8 	.word	0x20001de8

08012540 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012540:	4b0a      	ldr	r3, [pc, #40]	@ (801256c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8012542:	b510      	push	{r4, lr}
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	2b01      	cmp	r3, #1
 8012548:	d10e      	bne.n	8012568 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801254a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801254e:	8843      	ldrh	r3, [r0, #2]
 8012550:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012554:	18ca      	adds	r2, r1, r3
 8012556:	4b06      	ldr	r3, [pc, #24]	@ (8012570 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012558:	8044      	strh	r4, [r0, #2]
 801255a:	881b      	ldrh	r3, [r3, #0]
 801255c:	1a9b      	subs	r3, r3, r2
 801255e:	8003      	strh	r3, [r0, #0]
 8012560:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012564:	8081      	strh	r1, [r0, #4]
 8012566:	80c3      	strh	r3, [r0, #6]
 8012568:	bd10      	pop	{r4, pc}
 801256a:	bf00      	nop
 801256c:	20001dec 	.word	0x20001dec
 8012570:	20001de8 	.word	0x20001de8

08012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8012574:	4b08      	ldr	r3, [pc, #32]	@ (8012598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	2b01      	cmp	r3, #1
 801257a:	d10c      	bne.n	8012596 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801257c:	8803      	ldrh	r3, [r0, #0]
 801257e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8012582:	8842      	ldrh	r2, [r0, #2]
 8012584:	8002      	strh	r2, [r0, #0]
 8012586:	185a      	adds	r2, r3, r1
 8012588:	4b04      	ldr	r3, [pc, #16]	@ (801259c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801258a:	881b      	ldrh	r3, [r3, #0]
 801258c:	1a9b      	subs	r3, r3, r2
 801258e:	8043      	strh	r3, [r0, #2]
 8012590:	88c3      	ldrh	r3, [r0, #6]
 8012592:	80c1      	strh	r1, [r0, #6]
 8012594:	8083      	strh	r3, [r0, #4]
 8012596:	4770      	bx	lr
 8012598:	20001dec 	.word	0x20001dec
 801259c:	20001de8 	.word	0x20001de8

080125a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80125a0:	4b07      	ldr	r3, [pc, #28]	@ (80125c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80125a2:	b510      	push	{r4, lr}
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	d108      	bne.n	80125bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80125aa:	f9b1 3000 	ldrsh.w	r3, [r1]
 80125ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 80125b2:	8003      	strh	r3, [r0, #0]
 80125b4:	8893      	ldrh	r3, [r2, #4]
 80125b6:	3b01      	subs	r3, #1
 80125b8:	1b1b      	subs	r3, r3, r4
 80125ba:	800b      	strh	r3, [r1, #0]
 80125bc:	bd10      	pop	{r4, pc}
 80125be:	bf00      	nop
 80125c0:	20001dec 	.word	0x20001dec

080125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80125c4:	4b0a      	ldr	r3, [pc, #40]	@ (80125f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80125c6:	460a      	mov	r2, r1
 80125c8:	b510      	push	{r4, lr}
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d10d      	bne.n	80125ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80125d0:	8881      	ldrh	r1, [r0, #4]
 80125d2:	8803      	ldrh	r3, [r0, #0]
 80125d4:	440b      	add	r3, r1
 80125d6:	4601      	mov	r1, r0
 80125d8:	3b01      	subs	r3, #1
 80125da:	f821 3b02 	strh.w	r3, [r1], #2
 80125de:	f7ff ffdf 	bl	80125a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80125e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80125e6:	88c2      	ldrh	r2, [r0, #6]
 80125e8:	80c3      	strh	r3, [r0, #6]
 80125ea:	8082      	strh	r2, [r0, #4]
 80125ec:	bd10      	pop	{r4, pc}
 80125ee:	bf00      	nop
 80125f0:	20001dec 	.word	0x20001dec

080125f4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80125f4:	4b06      	ldr	r3, [pc, #24]	@ (8012610 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80125f6:	2100      	movs	r1, #0
 80125f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125fc:	4b05      	ldr	r3, [pc, #20]	@ (8012614 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80125fe:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8012602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012606:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801260a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801260e:	4770      	bx	lr
 8012610:	20001de8 	.word	0x20001de8
 8012614:	20001dea 	.word	0x20001dea

08012618 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012618:	4b03      	ldr	r3, [pc, #12]	@ (8012628 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801261a:	6818      	ldr	r0, [r3, #0]
 801261c:	b110      	cbz	r0, 8012624 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801261e:	6803      	ldr	r3, [r0, #0]
 8012620:	699b      	ldr	r3, [r3, #24]
 8012622:	4718      	bx	r3
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop
 8012628:	20001e30 	.word	0x20001e30

0801262c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801262c:	4770      	bx	lr
	...

08012630 <_ZN8touchgfx11Application4drawEv>:
 8012630:	4b09      	ldr	r3, [pc, #36]	@ (8012658 <_ZN8touchgfx11Application4drawEv+0x28>)
 8012632:	b507      	push	{r0, r1, r2, lr}
 8012634:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012638:	2100      	movs	r1, #0
 801263a:	4b08      	ldr	r3, [pc, #32]	@ (801265c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801263c:	9100      	str	r1, [sp, #0]
 801263e:	4669      	mov	r1, sp
 8012640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012644:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012648:	f8ad 3006 	strh.w	r3, [sp, #6]
 801264c:	6803      	ldr	r3, [r0, #0]
 801264e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012650:	4798      	blx	r3
 8012652:	b003      	add	sp, #12
 8012654:	f85d fb04 	ldr.w	pc, [sp], #4
 8012658:	20001de8 	.word	0x20001de8
 801265c:	20001dea 	.word	0x20001dea

08012660 <_ZN8touchgfx11Application10invalidateEv>:
 8012660:	4b09      	ldr	r3, [pc, #36]	@ (8012688 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8012662:	b082      	sub	sp, #8
 8012664:	2100      	movs	r1, #0
 8012666:	f9b3 2000 	ldrsh.w	r2, [r3]
 801266a:	4b08      	ldr	r3, [pc, #32]	@ (801268c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801266c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012670:	aa02      	add	r2, sp, #8
 8012672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012676:	9100      	str	r1, [sp, #0]
 8012678:	f8ad 3006 	strh.w	r3, [sp, #6]
 801267c:	6803      	ldr	r3, [r0, #0]
 801267e:	e912 0006 	ldmdb	r2, {r1, r2}
 8012682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012684:	b002      	add	sp, #8
 8012686:	4718      	bx	r3
 8012688:	20001de8 	.word	0x20001de8
 801268c:	20001dea 	.word	0x20001dea

08012690 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012690:	4b03      	ldr	r3, [pc, #12]	@ (80126a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8012692:	6818      	ldr	r0, [r3, #0]
 8012694:	b110      	cbz	r0, 801269c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012696:	6803      	ldr	r3, [r0, #0]
 8012698:	69db      	ldr	r3, [r3, #28]
 801269a:	4718      	bx	r3
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	20001e30 	.word	0x20001e30

080126a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80126a4:	4b03      	ldr	r3, [pc, #12]	@ (80126b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80126a6:	6818      	ldr	r0, [r3, #0]
 80126a8:	b110      	cbz	r0, 80126b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80126aa:	6803      	ldr	r3, [r0, #0]
 80126ac:	6a1b      	ldr	r3, [r3, #32]
 80126ae:	4718      	bx	r3
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
 80126b4:	20001e30 	.word	0x20001e30

080126b8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80126b8:	2300      	movs	r3, #0
 80126ba:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80126be:	4770      	bx	lr

080126c0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80126c0:	4b03      	ldr	r3, [pc, #12]	@ (80126d0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80126c2:	6818      	ldr	r0, [r3, #0]
 80126c4:	b110      	cbz	r0, 80126cc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80126c6:	6803      	ldr	r3, [r0, #0]
 80126c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126ca:	4718      	bx	r3
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	20001e30 	.word	0x20001e30

080126d4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80126d4:	b510      	push	{r4, lr}
 80126d6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80126da:	888a      	ldrh	r2, [r1, #4]
 80126dc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80126e0:	4422      	add	r2, r4
 80126e2:	b212      	sxth	r2, r2
 80126e4:	4293      	cmp	r3, r2
 80126e6:	da15      	bge.n	8012714 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80126e8:	8882      	ldrh	r2, [r0, #4]
 80126ea:	4413      	add	r3, r2
 80126ec:	b21b      	sxth	r3, r3
 80126ee:	429c      	cmp	r4, r3
 80126f0:	da10      	bge.n	8012714 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80126f2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80126f6:	88c9      	ldrh	r1, [r1, #6]
 80126f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80126fc:	4419      	add	r1, r3
 80126fe:	b209      	sxth	r1, r1
 8012700:	428a      	cmp	r2, r1
 8012702:	da07      	bge.n	8012714 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012704:	88c0      	ldrh	r0, [r0, #6]
 8012706:	4410      	add	r0, r2
 8012708:	b200      	sxth	r0, r0
 801270a:	4283      	cmp	r3, r0
 801270c:	bfac      	ite	ge
 801270e:	2000      	movge	r0, #0
 8012710:	2001      	movlt	r0, #1
 8012712:	bd10      	pop	{r4, pc}
 8012714:	2000      	movs	r0, #0
 8012716:	e7fc      	b.n	8012712 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012718 <_ZN8touchgfx4Rect10restrictToEss>:
 8012718:	f9b0 3000 	ldrsh.w	r3, [r0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	b510      	push	{r4, lr}
 8012720:	da04      	bge.n	801272c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8012722:	8884      	ldrh	r4, [r0, #4]
 8012724:	4423      	add	r3, r4
 8012726:	8083      	strh	r3, [r0, #4]
 8012728:	2300      	movs	r3, #0
 801272a:	8003      	strh	r3, [r0, #0]
 801272c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012730:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012734:	1b09      	subs	r1, r1, r4
 8012736:	428b      	cmp	r3, r1
 8012738:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801273c:	bfc8      	it	gt
 801273e:	8081      	strhgt	r1, [r0, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	da04      	bge.n	801274e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8012744:	88c1      	ldrh	r1, [r0, #6]
 8012746:	440b      	add	r3, r1
 8012748:	80c3      	strh	r3, [r0, #6]
 801274a:	2300      	movs	r3, #0
 801274c:	8043      	strh	r3, [r0, #2]
 801274e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012752:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012756:	1a52      	subs	r2, r2, r1
 8012758:	4293      	cmp	r3, r2
 801275a:	bfc8      	it	gt
 801275c:	80c2      	strhgt	r2, [r0, #6]
 801275e:	bd10      	pop	{r4, pc}

08012760 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8012760:	4b10      	ldr	r3, [pc, #64]	@ (80127a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8012762:	b510      	push	{r4, lr}
 8012764:	460c      	mov	r4, r1
 8012766:	f9b3 2000 	ldrsh.w	r2, [r3]
 801276a:	4b0f      	ldr	r3, [pc, #60]	@ (80127a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801276c:	4620      	mov	r0, r4
 801276e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012772:	f7ff ffd1 	bl	8012718 <_ZN8touchgfx4Rect10restrictToEss>
 8012776:	4b0d      	ldr	r3, [pc, #52]	@ (80127ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8012778:	6818      	ldr	r0, [r3, #0]
 801277a:	b190      	cbz	r0, 80127a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801277c:	6803      	ldr	r3, [r0, #0]
 801277e:	4621      	mov	r1, r4
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	4798      	blx	r3
 8012784:	4b0a      	ldr	r3, [pc, #40]	@ (80127b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8012786:	6818      	ldr	r0, [r3, #0]
 8012788:	b118      	cbz	r0, 8012792 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801278a:	6803      	ldr	r3, [r0, #0]
 801278c:	4621      	mov	r1, r4
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	4798      	blx	r3
 8012792:	4b08      	ldr	r3, [pc, #32]	@ (80127b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8012794:	4621      	mov	r1, r4
 8012796:	6818      	ldr	r0, [r3, #0]
 8012798:	6803      	ldr	r3, [r0, #0]
 801279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801279e:	69db      	ldr	r3, [r3, #28]
 80127a0:	4718      	bx	r3
 80127a2:	bd10      	pop	{r4, pc}
 80127a4:	20001dea 	.word	0x20001dea
 80127a8:	20001de8 	.word	0x20001de8
 80127ac:	20001e30 	.word	0x20001e30
 80127b0:	20001e2c 	.word	0x20001e2c
 80127b4:	20001df4 	.word	0x20001df4

080127b8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80127b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ba:	4606      	mov	r6, r0
 80127bc:	4608      	mov	r0, r1
 80127be:	460f      	mov	r7, r1
 80127c0:	f7fd fd7b 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80127c4:	b9e8      	cbnz	r0, 8012802 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80127c6:	f9b7 5000 	ldrsh.w	r5, [r7]
 80127ca:	f9b6 4000 	ldrsh.w	r4, [r6]
 80127ce:	42a5      	cmp	r5, r4
 80127d0:	db17      	blt.n	8012802 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80127d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80127d6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80127da:	429a      	cmp	r2, r3
 80127dc:	db11      	blt.n	8012802 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80127de:	88b9      	ldrh	r1, [r7, #4]
 80127e0:	440d      	add	r5, r1
 80127e2:	88b1      	ldrh	r1, [r6, #4]
 80127e4:	440c      	add	r4, r1
 80127e6:	b22d      	sxth	r5, r5
 80127e8:	b224      	sxth	r4, r4
 80127ea:	42a5      	cmp	r5, r4
 80127ec:	dc09      	bgt.n	8012802 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80127ee:	88f8      	ldrh	r0, [r7, #6]
 80127f0:	4410      	add	r0, r2
 80127f2:	88f2      	ldrh	r2, [r6, #6]
 80127f4:	4413      	add	r3, r2
 80127f6:	b200      	sxth	r0, r0
 80127f8:	b21b      	sxth	r3, r3
 80127fa:	4298      	cmp	r0, r3
 80127fc:	bfcc      	ite	gt
 80127fe:	2000      	movgt	r0, #0
 8012800:	2001      	movle	r0, #1
 8012802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012804 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012806:	4604      	mov	r4, r0
 8012808:	4608      	mov	r0, r1
 801280a:	460d      	mov	r5, r1
 801280c:	f7fd fd55 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012810:	b978      	cbnz	r0, 8012832 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012812:	4620      	mov	r0, r4
 8012814:	f7fd fd51 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012818:	f9b5 6000 	ldrsh.w	r6, [r5]
 801281c:	b150      	cbz	r0, 8012834 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801281e:	8026      	strh	r6, [r4, #0]
 8012820:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012824:	8063      	strh	r3, [r4, #2]
 8012826:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801282a:	80a3      	strh	r3, [r4, #4]
 801282c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012830:	80e3      	strh	r3, [r4, #6]
 8012832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012834:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012838:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801283c:	42b1      	cmp	r1, r6
 801283e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012842:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012846:	460f      	mov	r7, r1
 8012848:	88ed      	ldrh	r5, [r5, #6]
 801284a:	bfa8      	it	ge
 801284c:	4637      	movge	r7, r6
 801284e:	4293      	cmp	r3, r2
 8012850:	4618      	mov	r0, r3
 8012852:	4466      	add	r6, ip
 8012854:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012858:	bfa8      	it	ge
 801285a:	4610      	movge	r0, r2
 801285c:	442a      	add	r2, r5
 801285e:	88e5      	ldrh	r5, [r4, #6]
 8012860:	4461      	add	r1, ip
 8012862:	b236      	sxth	r6, r6
 8012864:	8027      	strh	r7, [r4, #0]
 8012866:	442b      	add	r3, r5
 8012868:	b209      	sxth	r1, r1
 801286a:	b212      	sxth	r2, r2
 801286c:	8060      	strh	r0, [r4, #2]
 801286e:	b21b      	sxth	r3, r3
 8012870:	428e      	cmp	r6, r1
 8012872:	bfac      	ite	ge
 8012874:	ebc7 0106 	rsbge	r1, r7, r6
 8012878:	ebc7 0101 	rsblt	r1, r7, r1
 801287c:	429a      	cmp	r2, r3
 801287e:	bfac      	ite	ge
 8012880:	ebc0 0202 	rsbge	r2, r0, r2
 8012884:	ebc0 0203 	rsblt	r2, r0, r3
 8012888:	80a1      	strh	r1, [r4, #4]
 801288a:	80e2      	strh	r2, [r4, #6]
 801288c:	e7d1      	b.n	8012832 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08012890 <_ZN8touchgfx11Application11getInstanceEv>:
 8012890:	4b01      	ldr	r3, [pc, #4]	@ (8012898 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012892:	6818      	ldr	r0, [r3, #0]
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop
 8012898:	20001e40 	.word	0x20001e40

0801289c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801289c:	2300      	movs	r3, #0
 801289e:	b510      	push	{r4, lr}
 80128a0:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80128a4:	4604      	mov	r4, r0
 80128a6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80128aa:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80128ae:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80128b2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d90e      	bls.n	80128d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80128ba:	18e2      	adds	r2, r4, r3
 80128bc:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80128c0:	b122      	cbz	r2, 80128cc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80128c2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80128c6:	6803      	ldr	r3, [r0, #0]
 80128c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128ca:	4798      	blx	r3
 80128cc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80128d0:	3301      	adds	r3, #1
 80128d2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80128d6:	e7ea      	b.n	80128ae <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80128d8:	bd10      	pop	{r4, pc}

080128da <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80128da:	2300      	movs	r3, #0
 80128dc:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80128e0:	30a4      	adds	r0, #164	@ 0xa4
 80128e2:	f820 3c24 	strh.w	r3, [r0, #-36]
 80128e6:	f802 3b01 	strb.w	r3, [r2], #1
 80128ea:	4282      	cmp	r2, r0
 80128ec:	d1fb      	bne.n	80128e6 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80128ee:	4770      	bx	lr

080128f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80128f0:	b570      	push	{r4, r5, r6, lr}
 80128f2:	4c0b      	ldr	r4, [pc, #44]	@ (8012920 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80128f4:	4605      	mov	r5, r0
 80128f6:	460e      	mov	r6, r1
 80128f8:	6820      	ldr	r0, [r4, #0]
 80128fa:	b110      	cbz	r0, 8012902 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80128fc:	6803      	ldr	r3, [r0, #0]
 80128fe:	695b      	ldr	r3, [r3, #20]
 8012900:	4798      	blx	r3
 8012902:	1d28      	adds	r0, r5, #4
 8012904:	f7ff ffe9 	bl	80128da <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012908:	6026      	str	r6, [r4, #0]
 801290a:	6833      	ldr	r3, [r6, #0]
 801290c:	4630      	mov	r0, r6
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	4798      	blx	r3
 8012912:	682b      	ldr	r3, [r5, #0]
 8012914:	4628      	mov	r0, r5
 8012916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801291c:	4718      	bx	r3
 801291e:	bf00      	nop
 8012920:	20001e30 	.word	0x20001e30

08012924 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8012924:	2300      	movs	r3, #0
 8012926:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801292a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801292e:	461a      	mov	r2, r3
 8012930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012932:	461c      	mov	r4, r3
 8012934:	461d      	mov	r5, r3
 8012936:	459c      	cmp	ip, r3
 8012938:	dd1a      	ble.n	8012970 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801293a:	18c6      	adds	r6, r0, r3
 801293c:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8012940:	b16e      	cbz	r6, 801295e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8012942:	429a      	cmp	r2, r3
 8012944:	d008      	beq.n	8012958 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8012946:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801294a:	fa1f fe82 	uxth.w	lr, r2
 801294e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8012952:	1887      	adds	r7, r0, r2
 8012954:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8012958:	3201      	adds	r2, #1
 801295a:	3301      	adds	r3, #1
 801295c:	e7eb      	b.n	8012936 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801295e:	4299      	cmp	r1, r3
 8012960:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8012964:	bfa8      	it	ge
 8012966:	3501      	addge	r5, #1
 8012968:	429e      	cmp	r6, r3
 801296a:	bfc8      	it	gt
 801296c:	3401      	addgt	r4, #1
 801296e:	e7f4      	b.n	801295a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8012970:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8012974:	1b49      	subs	r1, r1, r5
 8012976:	1b1b      	subs	r3, r3, r4
 8012978:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801297c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8012980:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8012984:	4293      	cmp	r3, r2
 8012986:	dd03      	ble.n	8012990 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8012988:	3b01      	subs	r3, #1
 801298a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801298e:	e7f7      	b.n	8012980 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8012990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012994 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	4d16      	ldr	r5, [pc, #88]	@ (80129f0 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8012998:	4604      	mov	r4, r0
 801299a:	6828      	ldr	r0, [r5, #0]
 801299c:	b140      	cbz	r0, 80129b0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801299e:	7a03      	ldrb	r3, [r0, #8]
 80129a0:	b933      	cbnz	r3, 80129b0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80129a2:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80129a6:	6803      	ldr	r3, [r0, #0]
 80129a8:	689b      	ldr	r3, [r3, #8]
 80129aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129ae:	4718      	bx	r3
 80129b0:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80129b4:	4e0f      	ldr	r6, [pc, #60]	@ (80129f4 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80129b6:	b973      	cbnz	r3, 80129d6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80129b8:	b168      	cbz	r0, 80129d6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80129ba:	7a03      	ldrb	r3, [r0, #8]
 80129bc:	b15b      	cbz	r3, 80129d6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80129be:	6830      	ldr	r0, [r6, #0]
 80129c0:	b110      	cbz	r0, 80129c8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80129c2:	6803      	ldr	r3, [r0, #0]
 80129c4:	691b      	ldr	r3, [r3, #16]
 80129c6:	4798      	blx	r3
 80129c8:	6828      	ldr	r0, [r5, #0]
 80129ca:	6803      	ldr	r3, [r0, #0]
 80129cc:	68db      	ldr	r3, [r3, #12]
 80129ce:	4798      	blx	r3
 80129d0:	2301      	movs	r3, #1
 80129d2:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80129d6:	3404      	adds	r4, #4
 80129d8:	4620      	mov	r0, r4
 80129da:	f7ff ff5f 	bl	801289c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80129de:	4620      	mov	r0, r4
 80129e0:	f7ff ffa0 	bl	8012924 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80129e4:	6830      	ldr	r0, [r6, #0]
 80129e6:	b110      	cbz	r0, 80129ee <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80129e8:	6803      	ldr	r3, [r0, #0]
 80129ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ec:	e7dd      	b.n	80129aa <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80129ee:	bd70      	pop	{r4, r5, r6, pc}
 80129f0:	20001e34 	.word	0x20001e34
 80129f4:	20001e30 	.word	0x20001e30

080129f8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80129f8:	4603      	mov	r3, r0
 80129fa:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80129fe:	2200      	movs	r2, #0
 8012a00:	801a      	strh	r2, [r3, #0]
 8012a02:	3308      	adds	r3, #8
 8012a04:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012a08:	f823 2c04 	strh.w	r2, [r3, #-4]
 8012a0c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012a10:	428b      	cmp	r3, r1
 8012a12:	d1f5      	bne.n	8012a00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012a14:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8012a18:	4770      	bx	lr
	...

08012a1c <_ZN8touchgfx11ApplicationC1Ev>:
 8012a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8012a94 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012a20:	4606      	mov	r6, r0
 8012a22:	4604      	mov	r4, r0
 8012a24:	2500      	movs	r5, #0
 8012a26:	f846 3b04 	str.w	r3, [r6], #4
 8012a2a:	22a8      	movs	r2, #168	@ 0xa8
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f011 f8f1 	bl	8023c16 <memset>
 8012a34:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8012a38:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8012a3c:	4f16      	ldr	r7, [pc, #88]	@ (8012a98 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8012a3e:	f7ff ffdb 	bl	80129f8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012a42:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8012a46:	f7ff ffd7 	bl	80129f8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012a4a:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8012a4e:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8012a52:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8012a56:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8012a5a:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8012a5e:	490f      	ldr	r1, [pc, #60]	@ (8012a9c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012a60:	480f      	ldr	r0, [pc, #60]	@ (8012aa0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8012a62:	f010 fd79 	bl	8023558 <CRC_Lock>
 8012a66:	4b0f      	ldr	r3, [pc, #60]	@ (8012aa4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8012a68:	b158      	cbz	r0, 8012a82 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8012a6a:	801d      	strh	r5, [r3, #0]
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8012aa8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8012a70:	4630      	mov	r0, r6
 8012a72:	6013      	str	r3, [r2, #0]
 8012a74:	4a0d      	ldr	r2, [pc, #52]	@ (8012aac <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8012a76:	603b      	str	r3, [r7, #0]
 8012a78:	6013      	str	r3, [r2, #0]
 8012a7a:	f7ff ff2e 	bl	80128da <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012a7e:	4620      	mov	r0, r4
 8012a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012a86:	2002      	movs	r0, #2
 8012a88:	801a      	strh	r2, [r3, #0]
 8012a8a:	6038      	str	r0, [r7, #0]
 8012a8c:	f001 fa50 	bl	8013f30 <_ZN8touchgfx6Screen4drawEv>
 8012a90:	e7ec      	b.n	8012a6c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8012a92:	bf00      	nop
 8012a94:	08025f20 	.word	0x08025f20
 8012a98:	20001e30 	.word	0x20001e30
 8012a9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012aa0:	f407a5c2 	.word	0xf407a5c2
 8012aa4:	200001a0 	.word	0x200001a0
 8012aa8:	20001e40 	.word	0x20001e40
 8012aac:	20001e34 	.word	0x20001e34

08012ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012ab0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8012ab4:	3b01      	subs	r3, #1
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	428b      	cmp	r3, r1
 8012aba:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8012abe:	b510      	push	{r4, lr}
 8012ac0:	d908      	bls.n	8012ad4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8012ac2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012ac6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012ad0:	685a      	ldr	r2, [r3, #4]
 8012ad2:	6062      	str	r2, [r4, #4]
 8012ad4:	bd10      	pop	{r4, pc}
	...

08012ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	b08f      	sub	sp, #60	@ 0x3c
 8012ade:	4b8f      	ldr	r3, [pc, #572]	@ (8012d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8012ae0:	4683      	mov	fp, r0
 8012ae2:	ac0a      	add	r4, sp, #40	@ 0x28
 8012ae4:	e884 0006 	stmia.w	r4, {r1, r2}
 8012ae8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012aec:	4620      	mov	r0, r4
 8012aee:	4b8c      	ldr	r3, [pc, #560]	@ (8012d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8012af0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012af4:	f7ff fe10 	bl	8012718 <_ZN8touchgfx4Rect10restrictToEss>
 8012af8:	4620      	mov	r0, r4
 8012afa:	f7fd fbde 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	d16a      	bne.n	8012bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012b02:	9403      	str	r4, [sp, #12]
 8012b04:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8012b08:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8012b0c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8012b10:	9301      	str	r3, [sp, #4]
 8012b12:	35a4      	adds	r5, #164	@ 0xa4
 8012b14:	b15c      	cbz	r4, 8012b2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8012b16:	4629      	mov	r1, r5
 8012b18:	9803      	ldr	r0, [sp, #12]
 8012b1a:	f7ff fe4d 	bl	80127b8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012b1e:	3c01      	subs	r4, #1
 8012b20:	b118      	cbz	r0, 8012b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8012b22:	b2a1      	uxth	r1, r4
 8012b24:	9801      	ldr	r0, [sp, #4]
 8012b26:	f7ff ffc3 	bl	8012ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012b2a:	3d08      	subs	r5, #8
 8012b2c:	e7f2      	b.n	8012b14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8012b2e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8012b32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012b36:	f8cd a010 	str.w	sl, [sp, #16]
 8012b3a:	9302      	str	r3, [sp, #8]
 8012b3c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012b40:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8012b44:	9306      	str	r3, [sp, #24]
 8012b46:	445c      	add	r4, fp
 8012b48:	2500      	movs	r5, #0
 8012b4a:	4626      	mov	r6, r4
 8012b4c:	f8cd a014 	str.w	sl, [sp, #20]
 8012b50:	462f      	mov	r7, r5
 8012b52:	9b05      	ldr	r3, [sp, #20]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d073      	beq.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8012b58:	9903      	ldr	r1, [sp, #12]
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	f7ff fdba 	bl	80126d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012b60:	b350      	cbz	r0, 8012bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012b62:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8012b66:	f9b6 c000 	ldrsh.w	ip, [r6]
 8012b6a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8012b6e:	45e6      	cmp	lr, ip
 8012b70:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012b74:	db33      	blt.n	8012bde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012b76:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012b7a:	88b3      	ldrh	r3, [r6, #4]
 8012b7c:	4472      	add	r2, lr
 8012b7e:	4463      	add	r3, ip
 8012b80:	b212      	sxth	r2, r2
 8012b82:	b21b      	sxth	r3, r3
 8012b84:	429a      	cmp	r2, r3
 8012b86:	dc2a      	bgt.n	8012bde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012b88:	fa1f f289 	uxth.w	r2, r9
 8012b8c:	88f3      	ldrh	r3, [r6, #6]
 8012b8e:	45c8      	cmp	r8, r9
 8012b90:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012b94:	4413      	add	r3, r2
 8012b96:	fa1f fc88 	uxth.w	ip, r8
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	fa0f fe83 	sxth.w	lr, r3
 8012ba0:	db0f      	blt.n	8012bc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012ba2:	eba3 030c 	sub.w	r3, r3, ip
 8012ba6:	1ac9      	subs	r1, r1, r3
 8012ba8:	b209      	sxth	r1, r1
 8012baa:	2900      	cmp	r1, #0
 8012bac:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012bb0:	dd12      	ble.n	8012bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012bb2:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	9b05      	ldr	r3, [sp, #20]
 8012bba:	3e08      	subs	r6, #8
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	9305      	str	r3, [sp, #20]
 8012bc0:	e7c7      	b.n	8012b52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012bc2:	4461      	add	r1, ip
 8012bc4:	b209      	sxth	r1, r1
 8012bc6:	4571      	cmp	r1, lr
 8012bc8:	dc38      	bgt.n	8012c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012bca:	eba2 020c 	sub.w	r2, r2, ip
 8012bce:	b212      	sxth	r2, r2
 8012bd0:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8012bd4:	2a00      	cmp	r2, #0
 8012bd6:	dcee      	bgt.n	8012bb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012bd8:	b00f      	add	sp, #60	@ 0x3c
 8012bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bde:	45c8      	cmp	r8, r9
 8012be0:	db2c      	blt.n	8012c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012be2:	88f3      	ldrh	r3, [r6, #6]
 8012be4:	4499      	add	r9, r3
 8012be6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8012bea:	4498      	add	r8, r3
 8012bec:	fa0f f989 	sxth.w	r9, r9
 8012bf0:	fa0f f888 	sxth.w	r8, r8
 8012bf4:	45c1      	cmp	r9, r8
 8012bf6:	db21      	blt.n	8012c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012bf8:	fa1f f28c 	uxth.w	r2, ip
 8012bfc:	88b3      	ldrh	r3, [r6, #4]
 8012bfe:	45e6      	cmp	lr, ip
 8012c00:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8012c04:	4413      	add	r3, r2
 8012c06:	fa1f f88e 	uxth.w	r8, lr
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	fa0f f983 	sxth.w	r9, r3
 8012c10:	db0a      	blt.n	8012c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8012c12:	eba3 0308 	sub.w	r3, r3, r8
 8012c16:	1ac9      	subs	r1, r1, r3
 8012c18:	b209      	sxth	r1, r1
 8012c1a:	2900      	cmp	r1, #0
 8012c1c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8012c20:	ddda      	ble.n	8012bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012c22:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012c26:	e7c6      	b.n	8012bb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012c28:	4441      	add	r1, r8
 8012c2a:	b209      	sxth	r1, r1
 8012c2c:	4549      	cmp	r1, r9
 8012c2e:	dc05      	bgt.n	8012c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012c30:	eba2 0208 	sub.w	r2, r2, r8
 8012c34:	b212      	sxth	r2, r2
 8012c36:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8012c3a:	e7cb      	b.n	8012bd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8012c3c:	4607      	mov	r7, r0
 8012c3e:	e7bb      	b.n	8012bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012c40:	2d00      	cmp	r5, #0
 8012c42:	d181      	bne.n	8012b48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8012c44:	2f00      	cmp	r7, #0
 8012c46:	f000 81dd 	beq.w	8013004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012c4a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8012c4e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8012c52:	b2b3      	uxth	r3, r6
 8012c54:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8012c58:	9305      	str	r3, [sp, #20]
 8012c5a:	9a05      	ldr	r2, [sp, #20]
 8012c5c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8012c60:	4413      	add	r3, r2
 8012c62:	b2ba      	uxth	r2, r7
 8012c64:	4492      	add	sl, r2
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	fa1f fa8a 	uxth.w	sl, sl
 8012c6c:	fa0f f883 	sxth.w	r8, r3
 8012c70:	fa0f f98a 	sxth.w	r9, sl
 8012c74:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012c78:	9b04      	ldr	r3, [sp, #16]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d052      	beq.n	8012d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8012c7e:	9903      	ldr	r1, [sp, #12]
 8012c80:	4620      	mov	r0, r4
 8012c82:	f7ff fd27 	bl	80126d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012c86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c8a:	b1c0      	cbz	r0, 8012cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012c8c:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012c90:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012c94:	4576      	cmp	r6, lr
 8012c96:	dc22      	bgt.n	8012cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012c98:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012c9c:	44f4      	add	ip, lr
 8012c9e:	fa0f fc8c 	sxth.w	ip, ip
 8012ca2:	45e0      	cmp	r8, ip
 8012ca4:	db1b      	blt.n	8012cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012ca6:	428f      	cmp	r7, r1
 8012ca8:	fa1f fc81 	uxth.w	ip, r1
 8012cac:	88e1      	ldrh	r1, [r4, #6]
 8012cae:	dc0d      	bgt.n	8012ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8012cb0:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012cb4:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012cb8:	eba1 010c 	sub.w	r1, r1, ip
 8012cbc:	80e1      	strh	r1, [r4, #6]
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	9904      	ldr	r1, [sp, #16]
 8012cc2:	3c08      	subs	r4, #8
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	3901      	subs	r1, #1
 8012cc8:	9104      	str	r1, [sp, #16]
 8012cca:	e7d3      	b.n	8012c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8012ccc:	4461      	add	r1, ip
 8012cce:	b209      	sxth	r1, r1
 8012cd0:	4549      	cmp	r1, r9
 8012cd2:	dcf5      	bgt.n	8012cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012cd4:	eba2 0c0c 	sub.w	ip, r2, ip
 8012cd8:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012cdc:	e7ef      	b.n	8012cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012cde:	428f      	cmp	r7, r1
 8012ce0:	dcee      	bgt.n	8012cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012ce2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012ce6:	4461      	add	r1, ip
 8012ce8:	b209      	sxth	r1, r1
 8012cea:	4589      	cmp	r9, r1
 8012cec:	dbe8      	blt.n	8012cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012cee:	4576      	cmp	r6, lr
 8012cf0:	fa1f fc8e 	uxth.w	ip, lr
 8012cf4:	88a1      	ldrh	r1, [r4, #4]
 8012cf6:	dc07      	bgt.n	8012d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012cf8:	eba3 0c0c 	sub.w	ip, r3, ip
 8012cfc:	f8a4 8000 	strh.w	r8, [r4]
 8012d00:	eba1 010c 	sub.w	r1, r1, ip
 8012d04:	80a1      	strh	r1, [r4, #4]
 8012d06:	e7da      	b.n	8012cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012d08:	4461      	add	r1, ip
 8012d0a:	b209      	sxth	r1, r1
 8012d0c:	4588      	cmp	r8, r1
 8012d0e:	dbd7      	blt.n	8012cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012d10:	9905      	ldr	r1, [sp, #20]
 8012d12:	eba1 0c0c 	sub.w	ip, r1, ip
 8012d16:	f8a4 c004 	strh.w	ip, [r4, #4]
 8012d1a:	e7d0      	b.n	8012cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012d1c:	20001dea 	.word	0x20001dea
 8012d20:	20001de8 	.word	0x20001de8
 8012d24:	2d00      	cmp	r5, #0
 8012d26:	f000 816d 	beq.w	8013004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012d2a:	9b06      	ldr	r3, [sp, #24]
 8012d2c:	445b      	add	r3, fp
 8012d2e:	461c      	mov	r4, r3
 8012d30:	9b02      	ldr	r3, [sp, #8]
 8012d32:	3301      	adds	r3, #1
 8012d34:	f000 8166 	beq.w	8013004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012d38:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8012d3c:	9803      	ldr	r0, [sp, #12]
 8012d3e:	4629      	mov	r1, r5
 8012d40:	f7ff fd3a 	bl	80127b8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012d44:	b120      	cbz	r0, 8012d50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8012d46:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012d4a:	9801      	ldr	r0, [sp, #4]
 8012d4c:	f7ff feb0 	bl	8012ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012d50:	9903      	ldr	r1, [sp, #12]
 8012d52:	4628      	mov	r0, r5
 8012d54:	f7ff fcbe 	bl	80126d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	f000 809c 	beq.w	8012e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012d5e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8012d62:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012d66:	fa1f f189 	uxth.w	r1, r9
 8012d6a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d70:	eb01 0c03 	add.w	ip, r1, r3
 8012d74:	b283      	uxth	r3, r0
 8012d76:	4548      	cmp	r0, r9
 8012d78:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8012d7c:	fa1f fa8c 	uxth.w	sl, ip
 8012d80:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8012d84:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8012d88:	eb03 050c 	add.w	r5, r3, ip
 8012d8c:	b2ad      	uxth	r5, r5
 8012d8e:	9505      	str	r5, [sp, #20]
 8012d90:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012d94:	9504      	str	r5, [sp, #16]
 8012d96:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8012d9a:	f340 8099 	ble.w	8012ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8012d9e:	1a5b      	subs	r3, r3, r1
 8012da0:	4596      	cmp	lr, r2
 8012da2:	fa0f f08a 	sxth.w	r0, sl
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	b21e      	sxth	r6, r3
 8012daa:	dd2e      	ble.n	8012e0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8012dac:	9f02      	ldr	r7, [sp, #8]
 8012dae:	fa1f fe8e 	uxth.w	lr, lr
 8012db2:	b292      	uxth	r2, r2
 8012db4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8012db8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012dbc:	9f04      	ldr	r7, [sp, #16]
 8012dbe:	ebae 0102 	sub.w	r1, lr, r2
 8012dc2:	44a6      	add	lr, r4
 8012dc4:	1a3f      	subs	r7, r7, r0
 8012dc6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8012dca:	b289      	uxth	r1, r1
 8012dcc:	4402      	add	r2, r0
 8012dce:	fa0f fe8e 	sxth.w	lr, lr
 8012dd2:	b20d      	sxth	r5, r1
 8012dd4:	b212      	sxth	r2, r2
 8012dd6:	436f      	muls	r7, r5
 8012dd8:	ebae 0202 	sub.w	r2, lr, r2
 8012ddc:	4372      	muls	r2, r6
 8012dde:	4297      	cmp	r7, r2
 8012de0:	db09      	blt.n	8012df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8012de2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8012de6:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8012dea:	449c      	add	ip, r3
 8012dec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012df0:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012df4:	e686      	b.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012df6:	4421      	add	r1, r4
 8012df8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8012dfc:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8012e00:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012e04:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012e08:	e67c      	b.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012e0a:	9f04      	ldr	r7, [sp, #16]
 8012e0c:	42b8      	cmp	r0, r7
 8012e0e:	da27      	bge.n	8012e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8012e10:	9902      	ldr	r1, [sp, #8]
 8012e12:	1a3f      	subs	r7, r7, r0
 8012e14:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8012e18:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8012e1c:	eb05 010e 	add.w	r1, r5, lr
 8012e20:	fa1f f881 	uxth.w	r8, r1
 8012e24:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8012e28:	4411      	add	r1, r2
 8012e2a:	fa0f f988 	sxth.w	r9, r8
 8012e2e:	eba2 020e 	sub.w	r2, r2, lr
 8012e32:	eba1 0108 	sub.w	r1, r1, r8
 8012e36:	4372      	muls	r2, r6
 8012e38:	b289      	uxth	r1, r1
 8012e3a:	fa0f f881 	sxth.w	r8, r1
 8012e3e:	fb08 f707 	mul.w	r7, r8, r7
 8012e42:	42ba      	cmp	r2, r7
 8012e44:	dc06      	bgt.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8012e46:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8012e4a:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8012e4e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8012e52:	e7ca      	b.n	8012dea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8012e54:	4429      	add	r1, r5
 8012e56:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8012e5a:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012e5e:	e651      	b.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012e60:	9805      	ldr	r0, [sp, #20]
 8012e62:	2d06      	cmp	r5, #6
 8012e64:	ebaa 0000 	sub.w	r0, sl, r0
 8012e68:	b280      	uxth	r0, r0
 8012e6a:	fa0f fe80 	sxth.w	lr, r0
 8012e6e:	d817      	bhi.n	8012ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012e70:	9b04      	ldr	r3, [sp, #16]
 8012e72:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8012e76:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012e7a:	1c6b      	adds	r3, r5, #1
 8012e7c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8012e80:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012e84:	9b01      	ldr	r3, [sp, #4]
 8012e86:	9801      	ldr	r0, [sp, #4]
 8012e88:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012e8c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012e90:	805a      	strh	r2, [r3, #2]
 8012e92:	809e      	strh	r6, [r3, #4]
 8012e94:	80d9      	strh	r1, [r3, #6]
 8012e96:	9b02      	ldr	r3, [sp, #8]
 8012e98:	3c08      	subs	r4, #8
 8012e9a:	3b01      	subs	r3, #1
 8012e9c:	9302      	str	r3, [sp, #8]
 8012e9e:	e747      	b.n	8012d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012ea0:	9a02      	ldr	r2, [sp, #8]
 8012ea2:	45b6      	cmp	lr, r6
 8012ea4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012ea8:	db0d      	blt.n	8012ec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012eaa:	449c      	add	ip, r3
 8012eac:	445a      	add	r2, fp
 8012eae:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012eb2:	fa1f fc8c 	uxth.w	ip, ip
 8012eb6:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8012eba:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012ebe:	448c      	add	ip, r1
 8012ec0:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8012ec4:	e61e      	b.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012ec6:	445a      	add	r2, fp
 8012ec8:	4484      	add	ip, r0
 8012eca:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8012ece:	e78f      	b.n	8012df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012ed0:	fa1f f18e 	uxth.w	r1, lr
 8012ed4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8012ed8:	b293      	uxth	r3, r2
 8012eda:	4596      	cmp	lr, r2
 8012edc:	eb01 0806 	add.w	r8, r1, r6
 8012ee0:	9306      	str	r3, [sp, #24]
 8012ee2:	fa1f f888 	uxth.w	r8, r8
 8012ee6:	9f06      	ldr	r7, [sp, #24]
 8012ee8:	fa0f f388 	sxth.w	r3, r8
 8012eec:	9307      	str	r3, [sp, #28]
 8012eee:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012ef2:	443b      	add	r3, r7
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	9308      	str	r3, [sp, #32]
 8012ef8:	da24      	bge.n	8012f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8012efa:	9905      	ldr	r1, [sp, #20]
 8012efc:	eba3 0308 	sub.w	r3, r3, r8
 8012f00:	eba2 020e 	sub.w	r2, r2, lr
 8012f04:	eba9 0000 	sub.w	r0, r9, r0
 8012f08:	ebaa 0401 	sub.w	r4, sl, r1
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	b2a4      	uxth	r4, r4
 8012f10:	b219      	sxth	r1, r3
 8012f12:	b225      	sxth	r5, r4
 8012f14:	4348      	muls	r0, r1
 8012f16:	436a      	muls	r2, r5
 8012f18:	4282      	cmp	r2, r0
 8012f1a:	9a02      	ldr	r2, [sp, #8]
 8012f1c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012f20:	445a      	add	r2, fp
 8012f22:	dc06      	bgt.n	8012f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8012f24:	9b07      	ldr	r3, [sp, #28]
 8012f26:	44a4      	add	ip, r4
 8012f28:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8012f2c:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8012f30:	e75e      	b.n	8012df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012f32:	9904      	ldr	r1, [sp, #16]
 8012f34:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8012f38:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8012f3c:	4433      	add	r3, r6
 8012f3e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012f42:	e5df      	b.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012f44:	9f06      	ldr	r7, [sp, #24]
 8012f46:	9b04      	ldr	r3, [sp, #16]
 8012f48:	1bc9      	subs	r1, r1, r7
 8012f4a:	fa0f f78a 	sxth.w	r7, sl
 8012f4e:	b289      	uxth	r1, r1
 8012f50:	429f      	cmp	r7, r3
 8012f52:	fa0f fe81 	sxth.w	lr, r1
 8012f56:	dd23      	ble.n	8012fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8012f58:	9a05      	ldr	r2, [sp, #20]
 8012f5a:	eba9 0000 	sub.w	r0, r9, r0
 8012f5e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012f62:	ebaa 0202 	sub.w	r2, sl, r2
 8012f66:	9d07      	ldr	r5, [sp, #28]
 8012f68:	fb0e f000 	mul.w	r0, lr, r0
 8012f6c:	b292      	uxth	r2, r2
 8012f6e:	eba5 0a03 	sub.w	sl, r5, r3
 8012f72:	9b02      	ldr	r3, [sp, #8]
 8012f74:	b214      	sxth	r4, r2
 8012f76:	00db      	lsls	r3, r3, #3
 8012f78:	fb04 fa0a 	mul.w	sl, r4, sl
 8012f7c:	445b      	add	r3, fp
 8012f7e:	4550      	cmp	r0, sl
 8012f80:	db03      	blt.n	8012f8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8012f82:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8012f86:	4494      	add	ip, r2
 8012f88:	e732      	b.n	8012df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012f8a:	9a04      	ldr	r2, [sp, #16]
 8012f8c:	4431      	add	r1, r6
 8012f8e:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8012f92:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8012f96:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8012f9a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012f9e:	e75c      	b.n	8012e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8012fa0:	9b08      	ldr	r3, [sp, #32]
 8012fa2:	2d06      	cmp	r5, #6
 8012fa4:	eba3 0308 	sub.w	r3, r3, r8
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	b218      	sxth	r0, r3
 8012fac:	d813      	bhi.n	8012fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8012fae:	9b07      	ldr	r3, [sp, #28]
 8012fb0:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8012fb4:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8012fb8:	1c6b      	adds	r3, r5, #1
 8012fba:	9901      	ldr	r1, [sp, #4]
 8012fbc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012fc0:	9b01      	ldr	r3, [sp, #4]
 8012fc2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012fc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012fca:	805a      	strh	r2, [r3, #2]
 8012fcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012fce:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012fd2:	809a      	strh	r2, [r3, #4]
 8012fd4:	e75f      	b.n	8012e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012fd6:	9c02      	ldr	r4, [sp, #8]
 8012fd8:	4570      	cmp	r0, lr
 8012fda:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8012fde:	db0d      	blt.n	8012ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8012fe0:	4431      	add	r1, r6
 8012fe2:	9b06      	ldr	r3, [sp, #24]
 8012fe4:	445c      	add	r4, fp
 8012fe6:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8012fea:	b289      	uxth	r1, r1
 8012fec:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8012ff0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012ff4:	4419      	add	r1, r3
 8012ff6:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8012ffa:	e583      	b.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012ffc:	445c      	add	r4, fp
 8012ffe:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8013002:	e79b      	b.n	8012f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013004:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013008:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801300c:	1e65      	subs	r5, r4, #1
 801300e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8013012:	b2ad      	uxth	r5, r5
 8013014:	42b5      	cmp	r5, r6
 8013016:	d044      	beq.n	80130a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8013018:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801301c:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8013020:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8013024:	4282      	cmp	r2, r0
 8013026:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801302a:	d11f      	bne.n	801306c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801302c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8013030:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013034:	459c      	cmp	ip, r3
 8013036:	d119      	bne.n	801306c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013038:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801303c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8013040:	19d8      	adds	r0, r3, r7
 8013042:	b200      	sxth	r0, r0
 8013044:	4288      	cmp	r0, r1
 8013046:	d109      	bne.n	801305c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8013048:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801304c:	4413      	add	r3, r2
 801304e:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8013052:	4629      	mov	r1, r5
 8013054:	9801      	ldr	r0, [sp, #4]
 8013056:	f7ff fd2b 	bl	8012ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801305a:	e003      	b.n	8013064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801305c:	4411      	add	r1, r2
 801305e:	b209      	sxth	r1, r1
 8013060:	42b9      	cmp	r1, r7
 8013062:	d0f3      	beq.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8013064:	3d01      	subs	r5, #1
 8013066:	3c08      	subs	r4, #8
 8013068:	b2ad      	uxth	r5, r5
 801306a:	e7d3      	b.n	8013014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801306c:	42b9      	cmp	r1, r7
 801306e:	d1f9      	bne.n	8013064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8013070:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8013074:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013078:	4299      	cmp	r1, r3
 801307a:	d1f3      	bne.n	8013064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801307c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8013080:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8013084:	181f      	adds	r7, r3, r0
 8013086:	b23f      	sxth	r7, r7
 8013088:	42ba      	cmp	r2, r7
 801308a:	d105      	bne.n	8013098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801308c:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8013090:	440b      	add	r3, r1
 8013092:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013096:	e7dc      	b.n	8013052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8013098:	440a      	add	r2, r1
 801309a:	b212      	sxth	r2, r2
 801309c:	4290      	cmp	r0, r2
 801309e:	d1e1      	bne.n	8013064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80130a0:	e7f6      	b.n	8013090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80130a2:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80130a6:	2e07      	cmp	r6, #7
 80130a8:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80130ac:	d812      	bhi.n	80130d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80130ae:	1c75      	adds	r5, r6, #1
 80130b0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80130b4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80130b8:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80130bc:	9d01      	ldr	r5, [sp, #4]
 80130be:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80130c2:	442c      	add	r4, r5
 80130c4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80130c8:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80130cc:	8061      	strh	r1, [r4, #2]
 80130ce:	80a2      	strh	r2, [r4, #4]
 80130d0:	80e3      	strh	r3, [r4, #6]
 80130d2:	e581      	b.n	8012bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80130d4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80130d8:	3e01      	subs	r6, #1
 80130da:	445c      	add	r4, fp
 80130dc:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80130e0:	f04f 37ff 	mov.w	r7, #4294967295
 80130e4:	2500      	movs	r5, #0
 80130e6:	9305      	str	r3, [sp, #20]
 80130e8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80130ec:	1e72      	subs	r2, r6, #1
 80130ee:	9302      	str	r3, [sp, #8]
 80130f0:	4691      	mov	r9, r2
 80130f2:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80130f6:	9304      	str	r3, [sp, #16]
 80130f8:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80130fc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013100:	6818      	ldr	r0, [r3, #0]
 8013102:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013106:	9207      	str	r2, [sp, #28]
 8013108:	bf16      	itet	ne
 801310a:	9905      	ldrne	r1, [sp, #20]
 801310c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8013110:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013114:	9306      	str	r3, [sp, #24]
 8013116:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801311a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801311e:	fb18 f801 	smulbb	r8, r8, r1
 8013122:	6859      	ldr	r1, [r3, #4]
 8013124:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013128:	4671      	mov	r1, lr
 801312a:	a80c      	add	r0, sp, #48	@ 0x30
 801312c:	f7ff fb6a 	bl	8012804 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013130:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013134:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013138:	f04f 0c08 	mov.w	ip, #8
 801313c:	9b04      	ldr	r3, [sp, #16]
 801313e:	9a02      	ldr	r2, [sp, #8]
 8013140:	fb10 f001 	smulbb	r0, r0, r1
 8013144:	fb02 8803 	mla	r8, r2, r3, r8
 8013148:	eba0 0108 	sub.w	r1, r0, r8
 801314c:	fb90 f0fc 	sdiv	r0, r0, ip
 8013150:	4288      	cmp	r0, r1
 8013152:	dc20      	bgt.n	8013196 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8013154:	4551      	cmp	r1, sl
 8013156:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801315a:	da03      	bge.n	8013164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801315c:	b1d9      	cbz	r1, 8013196 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801315e:	468a      	mov	sl, r1
 8013160:	464f      	mov	r7, r9
 8013162:	4635      	mov	r5, r6
 8013164:	f109 39ff 	add.w	r9, r9, #4294967295
 8013168:	f119 0f02 	cmn.w	r9, #2
 801316c:	d1c6      	bne.n	80130fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801316e:	4616      	mov	r6, r2
 8013170:	3201      	adds	r2, #1
 8013172:	f1a4 0408 	sub.w	r4, r4, #8
 8013176:	d1b7      	bne.n	80130e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8013178:	9b01      	ldr	r3, [sp, #4]
 801317a:	b2ac      	uxth	r4, r5
 801317c:	00ed      	lsls	r5, r5, #3
 801317e:	1958      	adds	r0, r3, r5
 8013180:	1c7b      	adds	r3, r7, #1
 8013182:	d10b      	bne.n	801319c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8013184:	4601      	mov	r1, r0
 8013186:	9803      	ldr	r0, [sp, #12]
 8013188:	f7ff fb3c 	bl	8012804 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801318c:	4621      	mov	r1, r4
 801318e:	9801      	ldr	r0, [sp, #4]
 8013190:	f7ff fc8e 	bl	8012ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013194:	e4b6      	b.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013196:	464f      	mov	r7, r9
 8013198:	4635      	mov	r5, r6
 801319a:	e7ed      	b.n	8013178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801319c:	9b01      	ldr	r3, [sp, #4]
 801319e:	00ff      	lsls	r7, r7, #3
 80131a0:	445d      	add	r5, fp
 80131a2:	19d9      	adds	r1, r3, r7
 80131a4:	445f      	add	r7, fp
 80131a6:	f7ff fb2d 	bl	8012804 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80131aa:	9b03      	ldr	r3, [sp, #12]
 80131ac:	cb03      	ldmia	r3!, {r0, r1}
 80131ae:	9b03      	ldr	r3, [sp, #12]
 80131b0:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 80131b4:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80131b8:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80131bc:	6869      	ldr	r1, [r5, #4]
 80131be:	c303      	stmia	r3!, {r0, r1}
 80131c0:	e7e4      	b.n	801318c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80131c2:	bf00      	nop

080131c4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80131c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c8:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80131cc:	b09b      	sub	sp, #108	@ 0x6c
 80131ce:	4604      	mov	r4, r0
 80131d0:	4630      	mov	r0, r6
 80131d2:	f7fd f872 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80131d6:	4605      	mov	r5, r0
 80131d8:	b948      	cbnz	r0, 80131ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	4620      	mov	r0, r4
 80131de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131e0:	e896 0006 	ldmia.w	r6, {r1, r2}
 80131e4:	4798      	blx	r3
 80131e6:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80131ea:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80131ee:	4bc5      	ldr	r3, [pc, #788]	@ (8013504 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d03f      	beq.n	8013276 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80131f6:	4dc4      	ldr	r5, [pc, #784]	@ (8013508 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80131f8:	4628      	mov	r0, r5
 80131fa:	f7fd f85e 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80131fe:	4606      	mov	r6, r0
 8013200:	2800      	cmp	r0, #0
 8013202:	d138      	bne.n	8013276 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013204:	4628      	mov	r0, r5
 8013206:	f7ff f99b 	bl	8012540 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	6829      	ldr	r1, [r5, #0]
 801320e:	4620      	mov	r0, r4
 8013210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013212:	686a      	ldr	r2, [r5, #4]
 8013214:	4798      	blx	r3
 8013216:	802e      	strh	r6, [r5, #0]
 8013218:	806e      	strh	r6, [r5, #2]
 801321a:	80ae      	strh	r6, [r5, #4]
 801321c:	80ee      	strh	r6, [r5, #6]
 801321e:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8013222:	4dba      	ldr	r5, [pc, #744]	@ (801350c <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8013224:	4640      	mov	r0, r8
 8013226:	f7ff fbe7 	bl	80129f8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801322a:	882e      	ldrh	r6, [r5, #0]
 801322c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8013230:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013234:	4633      	mov	r3, r6
 8013236:	42bb      	cmp	r3, r7
 8013238:	d224      	bcs.n	8013284 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801323a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801323e:	2907      	cmp	r1, #7
 8013240:	d816      	bhi.n	8013270 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8013242:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013246:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801324a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801324e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8013252:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8013256:	1c4a      	adds	r2, r1, #1
 8013258:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801325c:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8013260:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8013264:	f8a2 a002 	strh.w	sl, [r2, #2]
 8013268:	f8a2 e004 	strh.w	lr, [r2, #4]
 801326c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013270:	3301      	adds	r3, #1
 8013272:	b29b      	uxth	r3, r3
 8013274:	e7df      	b.n	8013236 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8013276:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1cf      	bne.n	801321e <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801327e:	b01b      	add	sp, #108	@ 0x6c
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8013288:	42b3      	cmp	r3, r6
 801328a:	d90c      	bls.n	80132a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801328c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013290:	6822      	ldr	r2, [r4, #0]
 8013292:	3601      	adds	r6, #1
 8013294:	4620      	mov	r0, r4
 8013296:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8013298:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801329c:	b2b6      	uxth	r6, r6
 801329e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80132a2:	47b8      	blx	r7
 80132a4:	e7ee      	b.n	8013284 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80132a6:	4a9a      	ldr	r2, [pc, #616]	@ (8013510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80132a8:	6813      	ldr	r3, [r2, #0]
 80132aa:	4691      	mov	r9, r2
 80132ac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	f040 80e0 	bne.w	8013476 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80132b6:	8829      	ldrh	r1, [r5, #0]
 80132b8:	2600      	movs	r6, #0
 80132ba:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80132be:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80132c2:	33ae      	adds	r3, #174	@ 0xae
 80132c4:	428f      	cmp	r7, r1
 80132c6:	f103 0308 	add.w	r3, r3, #8
 80132ca:	dd0a      	ble.n	80132e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80132cc:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80132d0:	3101      	adds	r1, #1
 80132d2:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80132d6:	4402      	add	r2, r0
 80132d8:	b212      	sxth	r2, r2
 80132da:	4296      	cmp	r6, r2
 80132dc:	bfb8      	it	lt
 80132de:	4616      	movlt	r6, r2
 80132e0:	e7f0      	b.n	80132c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80132e2:	4b8c      	ldr	r3, [pc, #560]	@ (8013514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80132e4:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8013510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	2b0f      	cmp	r3, #15
 80132ec:	bf8c      	ite	hi
 80132ee:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80132f2:	f04f 0b01 	movls.w	fp, #1
 80132f6:	2300      	movs	r3, #0
 80132f8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80132fc:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8013300:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8013304:	4b82      	ldr	r3, [pc, #520]	@ (8013510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013306:	4438      	add	r0, r7
 8013308:	b207      	sxth	r7, r0
 801330a:	6818      	ldr	r0, [r3, #0]
 801330c:	42b7      	cmp	r7, r6
 801330e:	6803      	ldr	r3, [r0, #0]
 8013310:	f280 8083 	bge.w	801341a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8013314:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013318:	4798      	blx	r3
 801331a:	eb07 030b 	add.w	r3, r7, fp
 801331e:	4298      	cmp	r0, r3
 8013320:	da07      	bge.n	8013332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013322:	42b0      	cmp	r0, r6
 8013324:	da05      	bge.n	8013332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013326:	4287      	cmp	r7, r0
 8013328:	dd6c      	ble.n	8013404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801332a:	2f00      	cmp	r7, #0
 801332c:	dd6a      	ble.n	8013404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801332e:	4630      	mov	r0, r6
 8013330:	e004      	b.n	801333c <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8013332:	4287      	cmp	r7, r0
 8013334:	dcfb      	bgt.n	801332e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8013336:	42b0      	cmp	r0, r6
 8013338:	bfa8      	it	ge
 801333a:	4630      	movge	r0, r6
 801333c:	4b76      	ldr	r3, [pc, #472]	@ (8013518 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801333e:	1bc0      	subs	r0, r0, r7
 8013340:	2200      	movs	r2, #0
 8013342:	f8ad 7016 	strh.w	r7, [sp, #22]
 8013346:	f9b3 3000 	ldrsh.w	r3, [r3]
 801334a:	882f      	ldrh	r7, [r5, #0]
 801334c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013350:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013354:	f8ad 001a 	strh.w	r0, [sp, #26]
 8013358:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801335c:	42bb      	cmp	r3, r7
 801335e:	d9cd      	bls.n	80132fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013360:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8013364:	ab07      	add	r3, sp, #28
 8013366:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801336a:	6851      	ldr	r1, [r2, #4]
 801336c:	c303      	stmia	r3!, {r0, r1}
 801336e:	a905      	add	r1, sp, #20
 8013370:	a807      	add	r0, sp, #28
 8013372:	f7ff f9af 	bl	80126d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013376:	2800      	cmp	r0, #0
 8013378:	d04c      	beq.n	8013414 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801337a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801337e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8013382:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8013386:	4686      	mov	lr, r0
 8013388:	4290      	cmp	r0, r2
 801338a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801338e:	4450      	add	r0, sl
 8013390:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8013394:	bfb8      	it	lt
 8013396:	4696      	movlt	lr, r2
 8013398:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801339c:	4452      	add	r2, sl
 801339e:	b280      	uxth	r0, r0
 80133a0:	4299      	cmp	r1, r3
 80133a2:	468c      	mov	ip, r1
 80133a4:	b292      	uxth	r2, r2
 80133a6:	9302      	str	r3, [sp, #8]
 80133a8:	bfb8      	it	lt
 80133aa:	469c      	movlt	ip, r3
 80133ac:	b203      	sxth	r3, r0
 80133ae:	fa0f fa82 	sxth.w	sl, r2
 80133b2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80133b6:	f8ad c01e 	strh.w	ip, [sp, #30]
 80133ba:	4553      	cmp	r3, sl
 80133bc:	bfb8      	it	lt
 80133be:	4602      	movlt	r2, r0
 80133c0:	9b02      	ldr	r3, [sp, #8]
 80133c2:	eba2 020e 	sub.w	r2, r2, lr
 80133c6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80133ca:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80133ce:	4411      	add	r1, r2
 80133d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80133d4:	4413      	add	r3, r2
 80133d6:	b289      	uxth	r1, r1
 80133d8:	b29b      	uxth	r3, r3
 80133da:	b208      	sxth	r0, r1
 80133dc:	b21a      	sxth	r2, r3
 80133de:	4290      	cmp	r0, r2
 80133e0:	bfb8      	it	lt
 80133e2:	460b      	movlt	r3, r1
 80133e4:	eba3 030c 	sub.w	r3, r3, ip
 80133e8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80133ec:	a807      	add	r0, sp, #28
 80133ee:	f7fc ff64 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80133f2:	b920      	cbnz	r0, 80133fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80133f4:	6823      	ldr	r3, [r4, #0]
 80133f6:	a907      	add	r1, sp, #28
 80133f8:	4620      	mov	r0, r4
 80133fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80133fc:	4798      	blx	r3
 80133fe:	3701      	adds	r7, #1
 8013400:	b2bf      	uxth	r7, r7
 8013402:	e7a9      	b.n	8013358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8013404:	f8d9 0000 	ldr.w	r0, [r9]
 8013408:	2101      	movs	r1, #1
 801340a:	6803      	ldr	r3, [r0, #0]
 801340c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013410:	4798      	blx	r3
 8013412:	e773      	b.n	80132fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013414:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013418:	e7e8      	b.n	80133ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801341c:	4798      	blx	r3
 801341e:	4b3f      	ldr	r3, [pc, #252]	@ (801351c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	f43f af2b 	beq.w	801327e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013428:	2300      	movs	r3, #0
 801342a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801342e:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8013432:	882b      	ldrh	r3, [r5, #0]
 8013434:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8013438:	42ab      	cmp	r3, r5
 801343a:	f4bf af20 	bcs.w	801327e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801343e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8013442:	2907      	cmp	r1, #7
 8013444:	d814      	bhi.n	8013470 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8013446:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801344a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801344e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8013452:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8013456:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801345a:	1c4a      	adds	r2, r1, #1
 801345c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8013460:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8013464:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8013468:	f8a2 c002 	strh.w	ip, [r2, #2]
 801346c:	8097      	strh	r7, [r2, #4]
 801346e:	80d6      	strh	r6, [r2, #6]
 8013470:	3301      	adds	r3, #1
 8013472:	b29b      	uxth	r3, r3
 8013474:	e7e0      	b.n	8013438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8013476:	2b02      	cmp	r3, #2
 8013478:	f040 8133 	bne.w	80136e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801347c:	4b28      	ldr	r3, [pc, #160]	@ (8013520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801347e:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	2b01      	cmp	r3, #1
 8013486:	f000 8098 	beq.w	80135ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801348a:	882a      	ldrh	r2, [r5, #0]
 801348c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8013490:	3201      	adds	r2, #1
 8013492:	b292      	uxth	r2, r2
 8013494:	2900      	cmp	r1, #0
 8013496:	d0c2      	beq.n	801341e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013498:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801349c:	4694      	mov	ip, r2
 801349e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80134a2:	f04f 0900 	mov.w	r9, #0
 80134a6:	441e      	add	r6, r3
 80134a8:	b236      	sxth	r6, r6
 80134aa:	fa1f f38c 	uxth.w	r3, ip
 80134ae:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80134b2:	4299      	cmp	r1, r3
 80134b4:	f240 80be 	bls.w	8013634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80134b8:	4427      	add	r7, r4
 80134ba:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80134be:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80134c2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80134c6:	4283      	cmp	r3, r0
 80134c8:	f340 80a0 	ble.w	801360c <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80134cc:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80134d0:	46e1      	mov	r9, ip
 80134d2:	4406      	add	r6, r0
 80134d4:	b236      	sxth	r6, r6
 80134d6:	429e      	cmp	r6, r3
 80134d8:	bfa8      	it	ge
 80134da:	461e      	movge	r6, r3
 80134dc:	f10c 0c01 	add.w	ip, ip, #1
 80134e0:	e7e3      	b.n	80134aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 80134e2:	d10a      	bne.n	80134fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80134e4:	4562      	cmp	r2, ip
 80134e6:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80134ea:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80134ee:	bfb8      	it	lt
 80134f0:	4662      	movlt	r2, ip
 80134f2:	4288      	cmp	r0, r1
 80134f4:	bfb8      	it	lt
 80134f6:	461f      	movlt	r7, r3
 80134f8:	e086      	b.n	8013608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80134fa:	428a      	cmp	r2, r1
 80134fc:	bfb8      	it	lt
 80134fe:	460a      	movlt	r2, r1
 8013500:	e082      	b.n	8013608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8013502:	bf00      	nop
 8013504:	20001e2c 	.word	0x20001e2c
 8013508:	20001e38 	.word	0x20001e38
 801350c:	200001a0 	.word	0x200001a0
 8013510:	20001df4 	.word	0x20001df4
 8013514:	20001dea 	.word	0x20001dea
 8013518:	20001de8 	.word	0x20001de8
 801351c:	20001df2 	.word	0x20001df2
 8013520:	20001dec 	.word	0x20001dec
 8013524:	19a1      	adds	r1, r4, r6
 8013526:	ab07      	add	r3, sp, #28
 8013528:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801352c:	6849      	ldr	r1, [r1, #4]
 801352e:	c303      	stmia	r3!, {r0, r1}
 8013530:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013534:	a807      	add	r0, sp, #28
 8013536:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801353a:	2b13      	cmp	r3, #19
 801353c:	440b      	add	r3, r1
 801353e:	bfd8      	it	le
 8013540:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013544:	1a9b      	subs	r3, r3, r2
 8013546:	f8ad 201c 	strh.w	r2, [sp, #28]
 801354a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801354e:	f7ff f811 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013552:	a807      	add	r0, sp, #28
 8013554:	f7fc feb1 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013558:	bb78      	cbnz	r0, 80135ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801355a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801355e:	4426      	add	r6, r4
 8013560:	f8d9 0000 	ldr.w	r0, [r9]
 8013564:	f1bc 0f14 	cmp.w	ip, #20
 8013568:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801356c:	f8d0 e000 	ldr.w	lr, [r0]
 8013570:	bfa8      	it	ge
 8013572:	f04f 0c14 	movge.w	ip, #20
 8013576:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801357a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801357e:	fa1f fc8c 	uxth.w	ip, ip
 8013582:	f8cd c000 	str.w	ip, [sp]
 8013586:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801358a:	47d8      	blx	fp
 801358c:	4683      	mov	fp, r0
 801358e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8013592:	a807      	add	r0, sp, #28
 8013594:	f7fe ffd4 	bl	8012540 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013598:	6823      	ldr	r3, [r4, #0]
 801359a:	4620      	mov	r0, r4
 801359c:	a907      	add	r1, sp, #28
 801359e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135a0:	4798      	blx	r3
 80135a2:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80135a6:	eba0 000b 	sub.w	r0, r0, fp
 80135aa:	b200      	sxth	r0, r0
 80135ac:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80135b0:	b918      	cbnz	r0, 80135ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80135b2:	b2b9      	uxth	r1, r7
 80135b4:	4650      	mov	r0, sl
 80135b6:	f7ff fa7b 	bl	8012ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80135ba:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80135be:	f1bb 0f00 	cmp.w	fp, #0
 80135c2:	f43f af2c 	beq.w	801341e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80135c6:	882b      	ldrh	r3, [r5, #0]
 80135c8:	2700      	movs	r7, #0
 80135ca:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80135ce:	3301      	adds	r3, #1
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	b299      	uxth	r1, r3
 80135d4:	00fe      	lsls	r6, r7, #3
 80135d6:	458b      	cmp	fp, r1
 80135d8:	d9a4      	bls.n	8013524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 80135da:	4426      	add	r6, r4
 80135dc:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80135e0:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 80135e4:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80135e8:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80135ec:	4408      	add	r0, r1
 80135ee:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80135f2:	4461      	add	r1, ip
 80135f4:	b200      	sxth	r0, r0
 80135f6:	b209      	sxth	r1, r1
 80135f8:	4288      	cmp	r0, r1
 80135fa:	f6bf af72 	bge.w	80134e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80135fe:	4584      	cmp	ip, r0
 8013600:	4662      	mov	r2, ip
 8013602:	461f      	mov	r7, r3
 8013604:	bfb8      	it	lt
 8013606:	4602      	movlt	r2, r0
 8013608:	3301      	adds	r3, #1
 801360a:	e7e2      	b.n	80135d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801360c:	d10e      	bne.n	801362c <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801360e:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8013612:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8013616:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801361a:	4473      	add	r3, lr
 801361c:	b21b      	sxth	r3, r3
 801361e:	429e      	cmp	r6, r3
 8013620:	bfa8      	it	ge
 8013622:	461e      	movge	r6, r3
 8013624:	4287      	cmp	r7, r0
 8013626:	bfb8      	it	lt
 8013628:	46e1      	movlt	r9, ip
 801362a:	e757      	b.n	80134dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801362c:	4286      	cmp	r6, r0
 801362e:	bfa8      	it	ge
 8013630:	4606      	movge	r6, r0
 8013632:	e753      	b.n	80134dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013634:	eb0a 0007 	add.w	r0, sl, r7
 8013638:	4427      	add	r7, r4
 801363a:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801363e:	f1bb 0f13 	cmp.w	fp, #19
 8013642:	bfdc      	itt	le
 8013644:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8013648:	445e      	addle	r6, fp
 801364a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801364e:	bfd8      	it	le
 8013650:	b236      	sxthle	r6, r6
 8013652:	f7fc fe32 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013656:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801365a:	2800      	cmp	r0, #0
 801365c:	f47f af1a 	bne.w	8013494 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8013660:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8013664:	fa1f fb8b 	uxth.w	fp, fp
 8013668:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801366c:	1ab6      	subs	r6, r6, r2
 801366e:	4829      	ldr	r0, [pc, #164]	@ (8013714 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8013670:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8013674:	2e14      	cmp	r6, #20
 8013676:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801367a:	6800      	ldr	r0, [r0, #0]
 801367c:	bfa8      	it	ge
 801367e:	2614      	movge	r6, #20
 8013680:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013684:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013688:	b289      	uxth	r1, r1
 801368a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801368e:	b2b6      	uxth	r6, r6
 8013690:	f8d0 c000 	ldr.w	ip, [r0]
 8013694:	b292      	uxth	r2, r2
 8013696:	455e      	cmp	r6, fp
 8013698:	bf94      	ite	ls
 801369a:	9600      	strls	r6, [sp, #0]
 801369c:	f8cd b000 	strhi.w	fp, [sp]
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80136a6:	47b0      	blx	r6
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80136ae:	a907      	add	r1, sp, #28
 80136b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80136b2:	4620      	mov	r0, r4
 80136b4:	4798      	blx	r3
 80136b6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80136ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80136be:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80136c2:	1a5b      	subs	r3, r3, r1
 80136c4:	440a      	add	r2, r1
 80136c6:	b21b      	sxth	r3, r3
 80136c8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80136cc:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	f47f aeda 	bne.w	801348a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80136d6:	fa1f f189 	uxth.w	r1, r9
 80136da:	4650      	mov	r0, sl
 80136dc:	f7ff f9e8 	bl	8012ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80136e0:	e6d3      	b.n	801348a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80136e2:	882e      	ldrh	r6, [r5, #0]
 80136e4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80136e8:	42b3      	cmp	r3, r6
 80136ea:	f67f ae98 	bls.w	801341e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80136ee:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80136f2:	ab07      	add	r3, sp, #28
 80136f4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80136f8:	6851      	ldr	r1, [r2, #4]
 80136fa:	c303      	stmia	r3!, {r0, r1}
 80136fc:	a807      	add	r0, sp, #28
 80136fe:	f7fc fddc 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8013702:	b920      	cbnz	r0, 801370e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8013704:	6823      	ldr	r3, [r4, #0]
 8013706:	a907      	add	r1, sp, #28
 8013708:	4620      	mov	r0, r4
 801370a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801370c:	4798      	blx	r3
 801370e:	3601      	adds	r6, #1
 8013710:	b2b6      	uxth	r6, r6
 8013712:	e7e7      	b.n	80136e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8013714:	20001df4 	.word	0x20001df4

08013718 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013718:	4b03      	ldr	r3, [pc, #12]	@ (8013728 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801371a:	2200      	movs	r2, #0
 801371c:	801a      	strh	r2, [r3, #0]
 801371e:	805a      	strh	r2, [r3, #2]
 8013720:	809a      	strh	r2, [r3, #4]
 8013722:	80da      	strh	r2, [r3, #6]
 8013724:	4770      	bx	lr
 8013726:	bf00      	nop
 8013728:	20001e38 	.word	0x20001e38

0801372c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013730:	b09d      	sub	sp, #116	@ 0x74
 8013732:	4606      	mov	r6, r0
 8013734:	4614      	mov	r4, r2
 8013736:	468a      	mov	sl, r1
 8013738:	a803      	add	r0, sp, #12
 801373a:	461d      	mov	r5, r3
 801373c:	f000 fd72 	bl	8014224 <_ZN8touchgfx12TextProviderC1Ev>
 8013740:	6833      	ldr	r3, [r6, #0]
 8013742:	4630      	mov	r0, r6
 8013744:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8013748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801374a:	4798      	blx	r3
 801374c:	6833      	ldr	r3, [r6, #0]
 801374e:	4607      	mov	r7, r0
 8013750:	4630      	mov	r0, r6
 8013752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013754:	4798      	blx	r3
 8013756:	462a      	mov	r2, r5
 8013758:	2500      	movs	r5, #0
 801375a:	4621      	mov	r1, r4
 801375c:	9000      	str	r0, [sp, #0]
 801375e:	463b      	mov	r3, r7
 8013760:	462c      	mov	r4, r5
 8013762:	46a9      	mov	r9, r5
 8013764:	46a8      	mov	r8, r5
 8013766:	a803      	add	r0, sp, #12
 8013768:	f000 fdaf 	bl	80142ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801376c:	2300      	movs	r3, #0
 801376e:	9302      	str	r3, [sp, #8]
 8013770:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013774:	429c      	cmp	r4, r3
 8013776:	d002      	beq.n	801377e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013778:	455c      	cmp	r4, fp
 801377a:	bf18      	it	ne
 801377c:	4625      	movne	r5, r4
 801377e:	ab02      	add	r3, sp, #8
 8013780:	4632      	mov	r2, r6
 8013782:	4651      	mov	r1, sl
 8013784:	a803      	add	r0, sp, #12
 8013786:	f001 f8c3 	bl	8014910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801378a:	4604      	mov	r4, r0
 801378c:	b108      	cbz	r0, 8013792 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801378e:	280a      	cmp	r0, #10
 8013790:	d10a      	bne.n	80137a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8013792:	45c1      	cmp	r9, r8
 8013794:	bf38      	it	cc
 8013796:	46c1      	movcc	r9, r8
 8013798:	f04f 0800 	mov.w	r8, #0
 801379c:	2c00      	cmp	r4, #0
 801379e:	d1e5      	bne.n	801376c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80137a0:	4648      	mov	r0, r9
 80137a2:	b01d      	add	sp, #116	@ 0x74
 80137a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a8:	9a02      	ldr	r2, [sp, #8]
 80137aa:	2a00      	cmp	r2, #0
 80137ac:	d0de      	beq.n	801376c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80137ae:	7b57      	ldrb	r7, [r2, #13]
 80137b0:	4629      	mov	r1, r5
 80137b2:	6833      	ldr	r3, [r6, #0]
 80137b4:	007f      	lsls	r7, r7, #1
 80137b6:	8894      	ldrh	r4, [r2, #4]
 80137b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137ba:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80137be:	7a97      	ldrb	r7, [r2, #10]
 80137c0:	4307      	orrs	r7, r0
 80137c2:	4630      	mov	r0, r6
 80137c4:	4798      	blx	r3
 80137c6:	4438      	add	r0, r7
 80137c8:	4480      	add	r8, r0
 80137ca:	fa1f f888 	uxth.w	r8, r8
 80137ce:	e7e5      	b.n	801379c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080137d0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80137d0:	b508      	push	{r3, lr}
 80137d2:	6803      	ldr	r3, [r0, #0]
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	4798      	blx	r3
 80137d8:	b128      	cbz	r0, 80137e6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80137da:	7b43      	ldrb	r3, [r0, #13]
 80137dc:	7a80      	ldrb	r0, [r0, #10]
 80137de:	005b      	lsls	r3, r3, #1
 80137e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80137e4:	4318      	orrs	r0, r3
 80137e6:	bd08      	pop	{r3, pc}

080137e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80137e8:	b40e      	push	{r1, r2, r3}
 80137ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ec:	b09e      	sub	sp, #120	@ 0x78
 80137ee:	4605      	mov	r5, r0
 80137f0:	ab23      	add	r3, sp, #140	@ 0x8c
 80137f2:	a805      	add	r0, sp, #20
 80137f4:	f853 4b04 	ldr.w	r4, [r3], #4
 80137f8:	9303      	str	r3, [sp, #12]
 80137fa:	f000 fd13 	bl	8014224 <_ZN8touchgfx12TextProviderC1Ev>
 80137fe:	682b      	ldr	r3, [r5, #0]
 8013800:	4628      	mov	r0, r5
 8013802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013804:	4798      	blx	r3
 8013806:	682b      	ldr	r3, [r5, #0]
 8013808:	4606      	mov	r6, r0
 801380a:	4628      	mov	r0, r5
 801380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801380e:	4798      	blx	r3
 8013810:	4633      	mov	r3, r6
 8013812:	4621      	mov	r1, r4
 8013814:	ae1e      	add	r6, sp, #120	@ 0x78
 8013816:	2400      	movs	r4, #0
 8013818:	9000      	str	r0, [sp, #0]
 801381a:	9a03      	ldr	r2, [sp, #12]
 801381c:	a805      	add	r0, sp, #20
 801381e:	f000 fd54 	bl	80142ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013822:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013826:	462a      	mov	r2, r5
 8013828:	4633      	mov	r3, r6
 801382a:	4621      	mov	r1, r4
 801382c:	a805      	add	r0, sp, #20
 801382e:	f001 f86f 	bl	8014910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013832:	b300      	cbz	r0, 8013876 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8013834:	280a      	cmp	r0, #10
 8013836:	d01a      	beq.n	801386e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013838:	9f04      	ldr	r7, [sp, #16]
 801383a:	b1c7      	cbz	r7, 801386e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801383c:	7b78      	ldrb	r0, [r7, #13]
 801383e:	7a3b      	ldrb	r3, [r7, #8]
 8013840:	00c1      	lsls	r1, r0, #3
 8013842:	88ea      	ldrh	r2, [r5, #6]
 8013844:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8013848:	4319      	orrs	r1, r3
 801384a:	0643      	lsls	r3, r0, #25
 801384c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013850:	bf48      	it	mi
 8013852:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8013856:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801385a:	bf48      	it	mi
 801385c:	b219      	sxthmi	r1, r3
 801385e:	79fb      	ldrb	r3, [r7, #7]
 8013860:	4303      	orrs	r3, r0
 8013862:	4413      	add	r3, r2
 8013864:	1a5b      	subs	r3, r3, r1
 8013866:	b21b      	sxth	r3, r3
 8013868:	429c      	cmp	r4, r3
 801386a:	bfb8      	it	lt
 801386c:	461c      	movlt	r4, r3
 801386e:	4633      	mov	r3, r6
 8013870:	462a      	mov	r2, r5
 8013872:	2100      	movs	r1, #0
 8013874:	e7da      	b.n	801382c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8013876:	b2a0      	uxth	r0, r4
 8013878:	b01e      	add	sp, #120	@ 0x78
 801387a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801387e:	b003      	add	sp, #12
 8013880:	4770      	bx	lr

08013882 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8013882:	7a43      	ldrb	r3, [r0, #9]
 8013884:	8880      	ldrh	r0, [r0, #4]
 8013886:	4418      	add	r0, r3
 8013888:	b280      	uxth	r0, r0
 801388a:	4770      	bx	lr

0801388c <_ZNK8touchgfx4Font13getFontHeightEv>:
 801388c:	6803      	ldr	r3, [r0, #0]
 801388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013890:	4718      	bx	r3

08013892 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013892:	b40e      	push	{r1, r2, r3}
 8013894:	b570      	push	{r4, r5, r6, lr}
 8013896:	b09d      	sub	sp, #116	@ 0x74
 8013898:	4604      	mov	r4, r0
 801389a:	ab21      	add	r3, sp, #132	@ 0x84
 801389c:	a803      	add	r0, sp, #12
 801389e:	f853 5b04 	ldr.w	r5, [r3], #4
 80138a2:	9302      	str	r3, [sp, #8]
 80138a4:	f000 fcbe 	bl	8014224 <_ZN8touchgfx12TextProviderC1Ev>
 80138a8:	6823      	ldr	r3, [r4, #0]
 80138aa:	4620      	mov	r0, r4
 80138ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138ae:	4798      	blx	r3
 80138b0:	6823      	ldr	r3, [r4, #0]
 80138b2:	4606      	mov	r6, r0
 80138b4:	4620      	mov	r0, r4
 80138b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138b8:	2401      	movs	r4, #1
 80138ba:	4798      	blx	r3
 80138bc:	4633      	mov	r3, r6
 80138be:	9000      	str	r0, [sp, #0]
 80138c0:	4629      	mov	r1, r5
 80138c2:	9a02      	ldr	r2, [sp, #8]
 80138c4:	a803      	add	r0, sp, #12
 80138c6:	f000 fd00 	bl	80142ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80138ca:	a803      	add	r0, sp, #12
 80138cc:	f001 f8a0 	bl	8014a10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80138d0:	b2a3      	uxth	r3, r4
 80138d2:	b138      	cbz	r0, 80138e4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80138d4:	280a      	cmp	r0, #10
 80138d6:	a803      	add	r0, sp, #12
 80138d8:	bf04      	itt	eq
 80138da:	3301      	addeq	r3, #1
 80138dc:	b21c      	sxtheq	r4, r3
 80138de:	f001 f897 	bl	8014a10 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80138e2:	e7f5      	b.n	80138d0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80138e4:	4618      	mov	r0, r3
 80138e6:	b01d      	add	sp, #116	@ 0x74
 80138e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138ec:	b003      	add	sp, #12
 80138ee:	4770      	bx	lr

080138f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80138f0:	b40e      	push	{r1, r2, r3}
 80138f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138f4:	b09e      	sub	sp, #120	@ 0x78
 80138f6:	4604      	mov	r4, r0
 80138f8:	ab23      	add	r3, sp, #140	@ 0x8c
 80138fa:	a805      	add	r0, sp, #20
 80138fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8013900:	9303      	str	r3, [sp, #12]
 8013902:	f000 fc8f 	bl	8014224 <_ZN8touchgfx12TextProviderC1Ev>
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	4620      	mov	r0, r4
 801390a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801390c:	4798      	blx	r3
 801390e:	6823      	ldr	r3, [r4, #0]
 8013910:	4606      	mov	r6, r0
 8013912:	4620      	mov	r0, r4
 8013914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013916:	4798      	blx	r3
 8013918:	4633      	mov	r3, r6
 801391a:	4629      	mov	r1, r5
 801391c:	9000      	str	r0, [sp, #0]
 801391e:	9a03      	ldr	r2, [sp, #12]
 8013920:	a805      	add	r0, sp, #20
 8013922:	f000 fcd2 	bl	80142ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013926:	ad1e      	add	r5, sp, #120	@ 0x78
 8013928:	2100      	movs	r1, #0
 801392a:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801392e:	4622      	mov	r2, r4
 8013930:	a805      	add	r0, sp, #20
 8013932:	f845 1d68 	str.w	r1, [r5, #-104]!
 8013936:	462b      	mov	r3, r5
 8013938:	f000 ffea 	bl	8014910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801393c:	b1d8      	cbz	r0, 8013976 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801393e:	280a      	cmp	r0, #10
 8013940:	d012      	beq.n	8013968 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013942:	9804      	ldr	r0, [sp, #16]
 8013944:	b180      	cbz	r0, 8013968 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013946:	7b47      	ldrb	r7, [r0, #13]
 8013948:	88e2      	ldrh	r2, [r4, #6]
 801394a:	00fb      	lsls	r3, r7, #3
 801394c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8013950:	7a03      	ldrb	r3, [r0, #8]
 8013952:	430b      	orrs	r3, r1
 8013954:	0679      	lsls	r1, r7, #25
 8013956:	bf44      	itt	mi
 8013958:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801395c:	b21b      	sxthmi	r3, r3
 801395e:	1ad3      	subs	r3, r2, r3
 8013960:	b21b      	sxth	r3, r3
 8013962:	429e      	cmp	r6, r3
 8013964:	bfa8      	it	ge
 8013966:	461e      	movge	r6, r3
 8013968:	462b      	mov	r3, r5
 801396a:	4622      	mov	r2, r4
 801396c:	2100      	movs	r1, #0
 801396e:	a805      	add	r0, sp, #20
 8013970:	f000 ffce 	bl	8014910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013974:	e7e2      	b.n	801393c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8013976:	4630      	mov	r0, r6
 8013978:	b01e      	add	sp, #120	@ 0x78
 801397a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801397e:	b003      	add	sp, #12
 8013980:	4770      	bx	lr

08013982 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013982:	b513      	push	{r0, r1, r4, lr}
 8013984:	6803      	ldr	r3, [r0, #0]
 8013986:	2400      	movs	r4, #0
 8013988:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801398c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013990:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013994:	4669      	mov	r1, sp
 8013996:	691b      	ldr	r3, [r3, #16]
 8013998:	9400      	str	r4, [sp, #0]
 801399a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801399e:	4798      	blx	r3
 80139a0:	b002      	add	sp, #8
 80139a2:	bd10      	pop	{r4, pc}

080139a4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80139a4:	b538      	push	{r3, r4, r5, lr}
 80139a6:	680b      	ldr	r3, [r1, #0]
 80139a8:	460c      	mov	r4, r1
 80139aa:	4605      	mov	r5, r0
 80139ac:	68db      	ldr	r3, [r3, #12]
 80139ae:	4798      	blx	r3
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	4620      	mov	r0, r4
 80139b4:	4629      	mov	r1, r5
 80139b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139b8:	4798      	blx	r3
 80139ba:	4628      	mov	r0, r5
 80139bc:	bd38      	pop	{r3, r4, r5, pc}

080139be <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80139be:	b410      	push	{r4}
 80139c0:	880a      	ldrh	r2, [r1, #0]
 80139c2:	8884      	ldrh	r4, [r0, #4]
 80139c4:	4422      	add	r2, r4
 80139c6:	800a      	strh	r2, [r1, #0]
 80139c8:	884a      	ldrh	r2, [r1, #2]
 80139ca:	88c4      	ldrh	r4, [r0, #6]
 80139cc:	4422      	add	r2, r4
 80139ce:	804a      	strh	r2, [r1, #2]
 80139d0:	6940      	ldr	r0, [r0, #20]
 80139d2:	b120      	cbz	r0, 80139de <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80139d4:	6803      	ldr	r3, [r0, #0]
 80139d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139dc:	4718      	bx	r3
 80139de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139e2:	4770      	bx	lr

080139e4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80139e4:	b570      	push	{r4, r5, r6, lr}
 80139e6:	8882      	ldrh	r2, [r0, #4]
 80139e8:	460c      	mov	r4, r1
 80139ea:	880b      	ldrh	r3, [r1, #0]
 80139ec:	4605      	mov	r5, r0
 80139ee:	4413      	add	r3, r2
 80139f0:	800b      	strh	r3, [r1, #0]
 80139f2:	884b      	ldrh	r3, [r1, #2]
 80139f4:	88c2      	ldrh	r2, [r0, #6]
 80139f6:	4413      	add	r3, r2
 80139f8:	804b      	strh	r3, [r1, #2]
 80139fa:	1d01      	adds	r1, r0, #4
 80139fc:	4620      	mov	r0, r4
 80139fe:	f7fc fc19 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8013a02:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	dd0b      	ble.n	8013a22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013a0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	dd07      	ble.n	8013a22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013a12:	6968      	ldr	r0, [r5, #20]
 8013a14:	b128      	cbz	r0, 8013a22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013a16:	6803      	ldr	r3, [r0, #0]
 8013a18:	4621      	mov	r1, r4
 8013a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a20:	4718      	bx	r3
 8013a22:	bd70      	pop	{r4, r5, r6, pc}

08013a24 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013a24:	b570      	push	{r4, r5, r6, lr}
 8013a26:	8882      	ldrh	r2, [r0, #4]
 8013a28:	460c      	mov	r4, r1
 8013a2a:	880b      	ldrh	r3, [r1, #0]
 8013a2c:	4605      	mov	r5, r0
 8013a2e:	4413      	add	r3, r2
 8013a30:	800b      	strh	r3, [r1, #0]
 8013a32:	884b      	ldrh	r3, [r1, #2]
 8013a34:	88c2      	ldrh	r2, [r0, #6]
 8013a36:	4413      	add	r3, r2
 8013a38:	804b      	strh	r3, [r1, #2]
 8013a3a:	1d01      	adds	r1, r0, #4
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	f7fc fbf9 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8013a42:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	dd19      	ble.n	8013a7e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013a4a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	dd15      	ble.n	8013a7e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013a52:	6968      	ldr	r0, [r5, #20]
 8013a54:	b128      	cbz	r0, 8013a62 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8013a56:	6803      	ldr	r3, [r0, #0]
 8013a58:	4621      	mov	r1, r4
 8013a5a:	691b      	ldr	r3, [r3, #16]
 8013a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a60:	4718      	bx	r3
 8013a62:	4b07      	ldr	r3, [pc, #28]	@ (8013a80 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	3304      	adds	r3, #4
 8013a68:	429d      	cmp	r5, r3
 8013a6a:	d108      	bne.n	8013a7e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013a6c:	f7fe ff10 	bl	8012890 <_ZN8touchgfx11Application11getInstanceEv>
 8013a70:	6803      	ldr	r3, [r0, #0]
 8013a72:	6821      	ldr	r1, [r4, #0]
 8013a74:	6862      	ldr	r2, [r4, #4]
 8013a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a7c:	4718      	bx	r3
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
 8013a80:	20001e30 	.word	0x20001e30

08013a84 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013a84:	b570      	push	{r4, r5, r6, lr}
 8013a86:	4604      	mov	r4, r0
 8013a88:	4616      	mov	r6, r2
 8013a8a:	460d      	mov	r5, r1
 8013a8c:	b901      	cbnz	r1, 8013a90 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013a8e:	b192      	cbz	r2, 8013ab6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013a90:	6823      	ldr	r3, [r4, #0]
 8013a92:	4620      	mov	r0, r4
 8013a94:	699b      	ldr	r3, [r3, #24]
 8013a96:	4798      	blx	r3
 8013a98:	88e2      	ldrh	r2, [r4, #6]
 8013a9a:	88a1      	ldrh	r1, [r4, #4]
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	4432      	add	r2, r6
 8013aa0:	4429      	add	r1, r5
 8013aa2:	b212      	sxth	r2, r2
 8013aa4:	b209      	sxth	r1, r1
 8013aa6:	f7f8 fb9a 	bl	800c1de <_ZN8touchgfx8Drawable5setXYEss>
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	4620      	mov	r0, r4
 8013aae:	699b      	ldr	r3, [r3, #24]
 8013ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ab4:	4718      	bx	r3
 8013ab6:	bd70      	pop	{r4, r5, r6, pc}

08013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013ab8:	b510      	push	{r4, lr}
 8013aba:	2300      	movs	r3, #0
 8013abc:	4604      	mov	r4, r0
 8013abe:	4608      	mov	r0, r1
 8013ac0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013ac4:	8023      	strh	r3, [r4, #0]
 8013ac6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013aca:	8063      	strh	r3, [r4, #2]
 8013acc:	6803      	ldr	r3, [r0, #0]
 8013ace:	80a1      	strh	r1, [r4, #4]
 8013ad0:	4621      	mov	r1, r4
 8013ad2:	80e2      	strh	r2, [r4, #6]
 8013ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ad6:	4798      	blx	r3
 8013ad8:	4620      	mov	r0, r4
 8013ada:	bd10      	pop	{r4, pc}

08013adc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8013adc:	b530      	push	{r4, r5, lr}
 8013ade:	8083      	strh	r3, [r0, #4]
 8013ae0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013ae4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013ae8:	80c3      	strh	r3, [r0, #6]
 8013aea:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013aee:	6141      	str	r1, [r0, #20]
 8013af0:	7203      	strb	r3, [r0, #8]
 8013af2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013af6:	8302      	strh	r2, [r0, #24]
 8013af8:	7243      	strb	r3, [r0, #9]
 8013afa:	7a83      	ldrb	r3, [r0, #10]
 8013afc:	f365 0306 	bfi	r3, r5, #0, #7
 8013b00:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8013b04:	f365 13c7 	bfi	r3, r5, #7, #1
 8013b08:	7283      	strb	r3, [r0, #10]
 8013b0a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013b0e:	72c3      	strb	r3, [r0, #11]
 8013b10:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013b14:	7303      	strb	r3, [r0, #12]
 8013b16:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8013b1a:	81c3      	strh	r3, [r0, #14]
 8013b1c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8013b20:	8203      	strh	r3, [r0, #16]
 8013b22:	4b01      	ldr	r3, [pc, #4]	@ (8013b28 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8013b24:	6003      	str	r3, [r0, #0]
 8013b26:	bd30      	pop	{r4, r5, pc}
 8013b28:	08025fdc 	.word	0x08025fdc

08013b2c <_ZNK8touchgfx9ConstFont4findEt>:
 8013b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b2e:	6944      	ldr	r4, [r0, #20]
 8013b30:	b3bc      	cbz	r4, 8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b32:	88a3      	ldrh	r3, [r4, #4]
 8013b34:	8b02      	ldrh	r2, [r0, #24]
 8013b36:	1acb      	subs	r3, r1, r3
 8013b38:	f102 32ff 	add.w	r2, r2, #4294967295
 8013b3c:	d431      	bmi.n	8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	dd0c      	ble.n	8013b5c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013b42:	230e      	movs	r3, #14
 8013b44:	fb03 4302 	mla	r3, r3, r2, r4
 8013b48:	889b      	ldrh	r3, [r3, #4]
 8013b4a:	1a5b      	subs	r3, r3, r1
 8013b4c:	1ad3      	subs	r3, r2, r3
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	db27      	blt.n	8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	bfbc      	itt	lt
 8013b56:	2302      	movlt	r3, #2
 8013b58:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013b5c:	2500      	movs	r5, #0
 8013b5e:	260e      	movs	r6, #14
 8013b60:	4295      	cmp	r5, r2
 8013b62:	dc1e      	bgt.n	8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b64:	fb06 4003 	mla	r0, r6, r3, r4
 8013b68:	8887      	ldrh	r7, [r0, #4]
 8013b6a:	42b9      	cmp	r1, r7
 8013b6c:	d01a      	beq.n	8013ba4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013b6e:	d20d      	bcs.n	8013b8c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013b70:	1e5a      	subs	r2, r3, #1
 8013b72:	4295      	cmp	r5, r2
 8013b74:	dc15      	bgt.n	8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b76:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013b7a:	1a5b      	subs	r3, r3, r1
 8013b7c:	1ad3      	subs	r3, r2, r3
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	db0f      	blt.n	8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b82:	429d      	cmp	r5, r3
 8013b84:	ddec      	ble.n	8013b60 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013b86:	1953      	adds	r3, r2, r5
 8013b88:	105b      	asrs	r3, r3, #1
 8013b8a:	e7e9      	b.n	8013b60 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013b8c:	1c5d      	adds	r5, r3, #1
 8013b8e:	42aa      	cmp	r2, r5
 8013b90:	db07      	blt.n	8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b92:	8a43      	ldrh	r3, [r0, #18]
 8013b94:	1acb      	subs	r3, r1, r3
 8013b96:	442b      	add	r3, r5
 8013b98:	429d      	cmp	r5, r3
 8013b9a:	dc02      	bgt.n	8013ba2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	dadf      	bge.n	8013b60 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013ba0:	e7f1      	b.n	8013b86 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013ba2:	2000      	movs	r0, #0
 8013ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ba6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ba8:	4604      	mov	r4, r0
 8013baa:	4617      	mov	r7, r2
 8013bac:	461e      	mov	r6, r3
 8013bae:	b911      	cbnz	r1, 8013bb6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013bb0:	2500      	movs	r5, #0
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bb6:	290a      	cmp	r1, #10
 8013bb8:	d0fa      	beq.n	8013bb0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013bba:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8013bbe:	4291      	cmp	r1, r2
 8013bc0:	d0f6      	beq.n	8013bb0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013bc2:	f242 020b 	movw	r2, #8203	@ 0x200b
 8013bc6:	4291      	cmp	r1, r2
 8013bc8:	d0f2      	beq.n	8013bb0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013bca:	f7ff ffaf 	bl	8013b2c <_ZNK8touchgfx9ConstFont4findEt>
 8013bce:	4605      	mov	r5, r0
 8013bd0:	b950      	cbnz	r0, 8013be8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013bd2:	6823      	ldr	r3, [r4, #0]
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	691b      	ldr	r3, [r3, #16]
 8013bd8:	4798      	blx	r3
 8013bda:	4601      	mov	r1, r0
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f7ff ffa5 	bl	8013b2c <_ZNK8touchgfx9ConstFont4findEt>
 8013be2:	4605      	mov	r5, r0
 8013be4:	2800      	cmp	r0, #0
 8013be6:	d0e3      	beq.n	8013bb0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013be8:	6823      	ldr	r3, [r4, #0]
 8013bea:	4629      	mov	r1, r5
 8013bec:	4620      	mov	r0, r4
 8013bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013bf0:	4798      	blx	r3
 8013bf2:	6038      	str	r0, [r7, #0]
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013bfa:	4798      	blx	r3
 8013bfc:	7030      	strb	r0, [r6, #0]
 8013bfe:	e7d8      	b.n	8013bb2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013c00 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013c00:	2000      	movs	r0, #0
 8013c02:	4770      	bx	lr

08013c04 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013c04:	2001      	movs	r0, #1
 8013c06:	4770      	bx	lr

08013c08 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8013c08:	2002      	movs	r0, #2
 8013c0a:	4770      	bx	lr

08013c0c <_ZN8touchgfx12GestureEventD1Ev>:
 8013c0c:	4770      	bx	lr

08013c0e <_ZN8touchgfx9DragEventD1Ev>:
 8013c0e:	4770      	bx	lr

08013c10 <_ZN8touchgfx10ClickEventD1Ev>:
 8013c10:	4770      	bx	lr

08013c12 <_ZN8touchgfx10ClickEventD0Ev>:
 8013c12:	b510      	push	{r4, lr}
 8013c14:	4604      	mov	r4, r0
 8013c16:	210c      	movs	r1, #12
 8013c18:	f00f fdc7 	bl	80237aa <_ZdlPvj>
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	bd10      	pop	{r4, pc}

08013c20 <_ZN8touchgfx9DragEventD0Ev>:
 8013c20:	b510      	push	{r4, lr}
 8013c22:	4604      	mov	r4, r0
 8013c24:	2110      	movs	r1, #16
 8013c26:	f00f fdc0 	bl	80237aa <_ZdlPvj>
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	bd10      	pop	{r4, pc}

08013c2e <_ZN8touchgfx12GestureEventD0Ev>:
 8013c2e:	b510      	push	{r4, lr}
 8013c30:	4604      	mov	r4, r0
 8013c32:	210c      	movs	r1, #12
 8013c34:	f00f fdb9 	bl	80237aa <_ZdlPvj>
 8013c38:	4620      	mov	r0, r4
 8013c3a:	bd10      	pop	{r4, pc}

08013c3c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013c3c:	b530      	push	{r4, r5, lr}
 8013c3e:	460d      	mov	r5, r1
 8013c40:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013c42:	b087      	sub	sp, #28
 8013c44:	4604      	mov	r4, r0
 8013c46:	b301      	cbz	r1, 8013c8a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013c48:	a801      	add	r0, sp, #4
 8013c4a:	f7ff ff35 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c4e:	892a      	ldrh	r2, [r5, #8]
 8013c50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013c54:	7928      	ldrb	r0, [r5, #4]
 8013c56:	1ad2      	subs	r2, r2, r3
 8013c58:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013c5a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013c5e:	441a      	add	r2, r3
 8013c60:	896b      	ldrh	r3, [r5, #10]
 8013c62:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013c66:	f88d 0010 	strb.w	r0, [sp, #16]
 8013c6a:	1b5b      	subs	r3, r3, r5
 8013c6c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8013c6e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013c70:	442b      	add	r3, r5
 8013c72:	4d07      	ldr	r5, [pc, #28]	@ (8013c90 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013c74:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013c78:	a903      	add	r1, sp, #12
 8013c7a:	9503      	str	r5, [sp, #12]
 8013c7c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013c80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013c84:	6803      	ldr	r3, [r0, #0]
 8013c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c88:	4798      	blx	r3
 8013c8a:	b007      	add	sp, #28
 8013c8c:	bd30      	pop	{r4, r5, pc}
 8013c8e:	bf00      	nop
 8013c90:	0802606c 	.word	0x0802606c

08013c94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c9a:	b08a      	sub	sp, #40	@ 0x28
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	460d      	mov	r5, r1
 8013ca0:	b113      	cbz	r3, 8013ca8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013ca2:	790b      	ldrb	r3, [r1, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d044      	beq.n	8013d32 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013ca8:	f104 0804 	add.w	r8, r4, #4
 8013cac:	a803      	add	r0, sp, #12
 8013cae:	4641      	mov	r1, r8
 8013cb0:	f7ff ff02 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013cb4:	792b      	ldrb	r3, [r5, #4]
 8013cb6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013cba:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013cbe:	b983      	cbnz	r3, 8013ce2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013cc0:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8013cc4:	892a      	ldrh	r2, [r5, #8]
 8013cc6:	88e9      	ldrh	r1, [r5, #6]
 8013cc8:	4640      	mov	r0, r8
 8013cca:	1b92      	subs	r2, r2, r6
 8013ccc:	9301      	str	r3, [sp, #4]
 8013cce:	1bc9      	subs	r1, r1, r7
 8013cd0:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8013cd4:	b212      	sxth	r2, r2
 8013cd6:	9300      	str	r3, [sp, #0]
 8013cd8:	b209      	sxth	r1, r1
 8013cda:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8013cde:	f7fc f9c7 	bl	8010070 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013ce2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013ce4:	b329      	cbz	r1, 8013d32 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013ce6:	a805      	add	r0, sp, #20
 8013ce8:	f7ff fee6 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013cec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013cf0:	792b      	ldrb	r3, [r5, #4]
 8013cf2:	a907      	add	r1, sp, #28
 8013cf4:	1abf      	subs	r7, r7, r2
 8013cf6:	88ea      	ldrh	r2, [r5, #6]
 8013cf8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013cfa:	4417      	add	r7, r2
 8013cfc:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8013cfe:	f88d 3020 	strb.w	r3, [sp, #32]
 8013d02:	4417      	add	r7, r2
 8013d04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013d08:	1ab6      	subs	r6, r6, r2
 8013d0a:	892a      	ldrh	r2, [r5, #8]
 8013d0c:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8013d10:	4416      	add	r6, r2
 8013d12:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013d14:	4416      	add	r6, r2
 8013d16:	4a08      	ldr	r2, [pc, #32]	@ (8013d38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8013d18:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8013d1c:	2600      	movs	r6, #0
 8013d1e:	9207      	str	r2, [sp, #28]
 8013d20:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8013d24:	6803      	ldr	r3, [r0, #0]
 8013d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d28:	4798      	blx	r3
 8013d2a:	792b      	ldrb	r3, [r5, #4]
 8013d2c:	b10b      	cbz	r3, 8013d32 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013d2e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8013d32:	b00a      	add	sp, #40	@ 0x28
 8013d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d38:	08026044 	.word	0x08026044

08013d3c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d40:	460c      	mov	r4, r1
 8013d42:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013d44:	b088      	sub	sp, #32
 8013d46:	4605      	mov	r5, r0
 8013d48:	2900      	cmp	r1, #0
 8013d4a:	d06d      	beq.n	8013e28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8013d4c:	4668      	mov	r0, sp
 8013d4e:	f7ff feb3 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d52:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8013d54:	88e3      	ldrh	r3, [r4, #6]
 8013d56:	f9bd 8000 	ldrsh.w	r8, [sp]
 8013d5a:	440b      	add	r3, r1
 8013d5c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8013d60:	b21b      	sxth	r3, r3
 8013d62:	4543      	cmp	r3, r8
 8013d64:	db31      	blt.n	8013dca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013d66:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8013d6a:	44c4      	add	ip, r8
 8013d6c:	fa0f fc8c 	sxth.w	ip, ip
 8013d70:	4563      	cmp	r3, ip
 8013d72:	da2a      	bge.n	8013dca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013d74:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8013d76:	8926      	ldrh	r6, [r4, #8]
 8013d78:	4416      	add	r6, r2
 8013d7a:	b236      	sxth	r6, r6
 8013d7c:	42be      	cmp	r6, r7
 8013d7e:	db24      	blt.n	8013dca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013d80:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013d84:	4438      	add	r0, r7
 8013d86:	b200      	sxth	r0, r0
 8013d88:	4286      	cmp	r6, r0
 8013d8a:	da1e      	bge.n	8013dca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013d8c:	8963      	ldrh	r3, [r4, #10]
 8013d8e:	4419      	add	r1, r3
 8013d90:	b209      	sxth	r1, r1
 8013d92:	4541      	cmp	r1, r8
 8013d94:	db08      	blt.n	8013da8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013d96:	4561      	cmp	r1, ip
 8013d98:	da06      	bge.n	8013da8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013d9a:	89a3      	ldrh	r3, [r4, #12]
 8013d9c:	441a      	add	r2, r3
 8013d9e:	b212      	sxth	r2, r2
 8013da0:	42ba      	cmp	r2, r7
 8013da2:	db01      	blt.n	8013da8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013da4:	4282      	cmp	r2, r0
 8013da6:	db10      	blt.n	8013dca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013da8:	4b21      	ldr	r3, [pc, #132]	@ (8013e30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8013daa:	a904      	add	r1, sp, #16
 8013dac:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8013dae:	9304      	str	r3, [sp, #16]
 8013db0:	2302      	movs	r3, #2
 8013db2:	f88d 3014 	strb.w	r3, [sp, #20]
 8013db6:	2300      	movs	r3, #0
 8013db8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013dbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013dc0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013dc4:	6803      	ldr	r3, [r0, #0]
 8013dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dc8:	4798      	blx	r3
 8013dca:	1d29      	adds	r1, r5, #4
 8013dcc:	a802      	add	r0, sp, #8
 8013dce:	f7ff fe73 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013dd2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013dd6:	88e0      	ldrh	r0, [r4, #6]
 8013dd8:	eba3 0808 	sub.w	r8, r3, r8
 8013ddc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013de0:	7921      	ldrb	r1, [r4, #4]
 8013de2:	fa1f f888 	uxth.w	r8, r8
 8013de6:	1bdf      	subs	r7, r3, r7
 8013de8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8013dec:	b2bb      	uxth	r3, r7
 8013dee:	4440      	add	r0, r8
 8013df0:	8922      	ldrh	r2, [r4, #8]
 8013df2:	8967      	ldrh	r7, [r4, #10]
 8013df4:	4460      	add	r0, ip
 8013df6:	89a4      	ldrh	r4, [r4, #12]
 8013df8:	441a      	add	r2, r3
 8013dfa:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8013dfc:	44b8      	add	r8, r7
 8013dfe:	4423      	add	r3, r4
 8013e00:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013e04:	4432      	add	r2, r6
 8013e06:	44e0      	add	r8, ip
 8013e08:	4433      	add	r3, r6
 8013e0a:	4c0a      	ldr	r4, [pc, #40]	@ (8013e34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8013e0c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8013e0e:	f88d 1014 	strb.w	r1, [sp, #20]
 8013e12:	a904      	add	r1, sp, #16
 8013e14:	9404      	str	r4, [sp, #16]
 8013e16:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013e1a:	f8ad 801a 	strh.w	r8, [sp, #26]
 8013e1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013e22:	6803      	ldr	r3, [r0, #0]
 8013e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013e26:	4798      	blx	r3
 8013e28:	b008      	add	sp, #32
 8013e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e2e:	bf00      	nop
 8013e30:	08026044 	.word	0x08026044
 8013e34:	08026058 	.word	0x08026058

08013e38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8013e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8013e40:	3201      	adds	r2, #1
 8013e42:	d112      	bne.n	8013e6a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8013e44:	2500      	movs	r5, #0
 8013e46:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013e4a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013e4e:	6803      	ldr	r3, [r0, #0]
 8013e50:	9500      	str	r5, [sp, #0]
 8013e52:	466d      	mov	r5, sp
 8013e54:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013e58:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013e5c:	4629      	mov	r1, r5
 8013e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e60:	4798      	blx	r3
 8013e62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013e66:	e884 0003 	stmia.w	r4, {r0, r1}
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	b003      	add	sp, #12
 8013e6e:	bd30      	pop	{r4, r5, pc}

08013e70 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8013e70:	b513      	push	{r0, r1, r4, lr}
 8013e72:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8013e76:	4604      	mov	r4, r0
 8013e78:	3301      	adds	r3, #1
 8013e7a:	d109      	bne.n	8013e90 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8013e7c:	4601      	mov	r1, r0
 8013e7e:	4668      	mov	r0, sp
 8013e80:	f7ff fe1a 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e84:	f8bd 3000 	ldrh.w	r3, [sp]
 8013e88:	8423      	strh	r3, [r4, #32]
 8013e8a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013e8e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8013e90:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8013e94:	b002      	add	sp, #8
 8013e96:	bd10      	pop	{r4, pc}

08013e98 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013e98:	b513      	push	{r0, r1, r4, lr}
 8013e9a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8013e9e:	4604      	mov	r4, r0
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	d109      	bne.n	8013eb8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8013ea4:	4601      	mov	r1, r0
 8013ea6:	4668      	mov	r0, sp
 8013ea8:	f7ff fe06 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013eac:	f8bd 3000 	ldrh.w	r3, [sp]
 8013eb0:	8423      	strh	r3, [r4, #32]
 8013eb2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013eb6:	8463      	strh	r3, [r4, #34]	@ 0x22
 8013eb8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8013ebc:	b002      	add	sp, #8
 8013ebe:	bd10      	pop	{r4, pc}

08013ec0 <_ZN8touchgfx6ScreenC1Ev>:
 8013ec0:	b570      	push	{r4, r5, r6, lr}
 8013ec2:	4b17      	ldr	r3, [pc, #92]	@ (8013f20 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8013ec4:	4605      	mov	r5, r0
 8013ec6:	4a17      	ldr	r2, [pc, #92]	@ (8013f24 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013ec8:	2101      	movs	r1, #1
 8013eca:	f845 3b04 	str.w	r3, [r5], #4
 8013ece:	2300      	movs	r3, #0
 8013ed0:	6042      	str	r2, [r0, #4]
 8013ed2:	4604      	mov	r4, r0
 8013ed4:	8103      	strh	r3, [r0, #8]
 8013ed6:	8143      	strh	r3, [r0, #10]
 8013ed8:	8183      	strh	r3, [r0, #12]
 8013eda:	81c3      	strh	r3, [r0, #14]
 8013edc:	8203      	strh	r3, [r0, #16]
 8013ede:	8243      	strh	r3, [r0, #18]
 8013ee0:	8283      	strh	r3, [r0, #20]
 8013ee2:	82c3      	strh	r3, [r0, #22]
 8013ee4:	6203      	str	r3, [r0, #32]
 8013ee6:	8483      	strh	r3, [r0, #36]	@ 0x24
 8013ee8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013eea:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8013eee:	6343      	str	r3, [r0, #52]	@ 0x34
 8013ef0:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8013ef4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013ef8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8013efc:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8013f00:	4b09      	ldr	r3, [pc, #36]	@ (8013f28 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8013f02:	4628      	mov	r0, r5
 8013f04:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013f08:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8013f0a:	4a08      	ldr	r2, [pc, #32]	@ (8013f2c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8013f0c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013f10:	4798      	blx	r3
 8013f12:	6863      	ldr	r3, [r4, #4]
 8013f14:	4628      	mov	r0, r5
 8013f16:	4631      	mov	r1, r6
 8013f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f1a:	4798      	blx	r3
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	bd70      	pop	{r4, r5, r6, pc}
 8013f20:	08026080 	.word	0x08026080
 8013f24:	08025b20 	.word	0x08025b20
 8013f28:	20001dea 	.word	0x20001dea
 8013f2c:	20001de8 	.word	0x20001de8

08013f30 <_ZN8touchgfx6Screen4drawEv>:
 8013f30:	4b09      	ldr	r3, [pc, #36]	@ (8013f58 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8013f32:	b507      	push	{r0, r1, r2, lr}
 8013f34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f38:	2100      	movs	r1, #0
 8013f3a:	4b08      	ldr	r3, [pc, #32]	@ (8013f5c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8013f3c:	9100      	str	r1, [sp, #0]
 8013f3e:	4669      	mov	r1, sp
 8013f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f44:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013f48:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f4c:	6803      	ldr	r3, [r0, #0]
 8013f4e:	689b      	ldr	r3, [r3, #8]
 8013f50:	4798      	blx	r3
 8013f52:	b003      	add	sp, #12
 8013f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f58:	20001de8 	.word	0x20001de8
 8013f5c:	20001dea 	.word	0x20001dea

08013f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8013f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f64:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013f68:	b089      	sub	sp, #36	@ 0x24
 8013f6a:	4680      	mov	r8, r0
 8013f6c:	460c      	mov	r4, r1
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	4615      	mov	r5, r2
 8013f72:	dd0e      	ble.n	8013f92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013f74:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	dd0a      	ble.n	8013f92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	f7ff ff5b 	bl	8013e38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013f82:	4621      	mov	r1, r4
 8013f84:	f7fe fba6 	bl	80126d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013f88:	69eb      	ldr	r3, [r5, #28]
 8013f8a:	b928      	cbnz	r0, 8013f98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8013f8c:	461d      	mov	r5, r3
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d1f4      	bne.n	8013f7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8013f92:	b009      	add	sp, #36	@ 0x24
 8013f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f98:	ae04      	add	r6, sp, #16
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f000 80b5 	beq.w	801410a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013fa0:	682b      	ldr	r3, [r5, #0]
 8013fa2:	4629      	mov	r1, r5
 8013fa4:	a802      	add	r0, sp, #8
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	4798      	blx	r3
 8013faa:	4628      	mov	r0, r5
 8013fac:	f7ff ff60 	bl	8013e70 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013fb0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8013fb4:	4407      	add	r7, r0
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	f7ff ff6e 	bl	8013e98 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013fbc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013fc0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013fc4:	b23f      	sxth	r7, r7
 8013fc6:	4418      	add	r0, r3
 8013fc8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013fcc:	4621      	mov	r1, r4
 8013fce:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013fd2:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013fd6:	4630      	mov	r0, r6
 8013fd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013fdc:	f8ad 7010 	strh.w	r7, [sp, #16]
 8013fe0:	f7fc f928 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	f7ff ff27 	bl	8013e38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013fea:	ab06      	add	r3, sp, #24
 8013fec:	4602      	mov	r2, r0
 8013fee:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013ff2:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ff6:	4611      	mov	r1, r2
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fc f91b 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8013ffe:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014002:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014006:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801400a:	4299      	cmp	r1, r3
 801400c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014010:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014014:	d10b      	bne.n	801402e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014016:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801401a:	4552      	cmp	r2, sl
 801401c:	d107      	bne.n	801402e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801401e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014022:	455a      	cmp	r2, fp
 8014024:	d103      	bne.n	801402e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014026:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801402a:	454a      	cmp	r2, r9
 801402c:	d06d      	beq.n	801410a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801402e:	f1bb 0f00 	cmp.w	fp, #0
 8014032:	dd65      	ble.n	8014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014034:	f1b9 0f00 	cmp.w	r9, #0
 8014038:	dd62      	ble.n	8014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801403a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801403e:	fa1f f08a 	uxth.w	r0, sl
 8014042:	4552      	cmp	r2, sl
 8014044:	9000      	str	r0, [sp, #0]
 8014046:	da12      	bge.n	801406e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014048:	9301      	str	r3, [sp, #4]
 801404a:	9b00      	ldr	r3, [sp, #0]
 801404c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014050:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014054:	1a9a      	subs	r2, r3, r2
 8014056:	f8ad 1010 	strh.w	r1, [sp, #16]
 801405a:	4631      	mov	r1, r6
 801405c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014060:	4640      	mov	r0, r8
 8014062:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014066:	69ea      	ldr	r2, [r5, #28]
 8014068:	f7ff ff7a 	bl	8013f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801406c:	9b01      	ldr	r3, [sp, #4]
 801406e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014072:	b29f      	uxth	r7, r3
 8014074:	429a      	cmp	r2, r3
 8014076:	da0d      	bge.n	8014094 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014078:	f8ad 2010 	strh.w	r2, [sp, #16]
 801407c:	1aba      	subs	r2, r7, r2
 801407e:	f8ad a012 	strh.w	sl, [sp, #18]
 8014082:	4631      	mov	r1, r6
 8014084:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014088:	4640      	mov	r0, r8
 801408a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801408e:	69ea      	ldr	r2, [r5, #28]
 8014090:	f7ff ff66 	bl	8013f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014094:	8822      	ldrh	r2, [r4, #0]
 8014096:	445f      	add	r7, fp
 8014098:	88a3      	ldrh	r3, [r4, #4]
 801409a:	b2bf      	uxth	r7, r7
 801409c:	4413      	add	r3, r2
 801409e:	b23a      	sxth	r2, r7
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	b219      	sxth	r1, r3
 80140a4:	4291      	cmp	r1, r2
 80140a6:	dd0d      	ble.n	80140c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80140a8:	1bdb      	subs	r3, r3, r7
 80140aa:	f8ad 2010 	strh.w	r2, [sp, #16]
 80140ae:	f8ad a012 	strh.w	sl, [sp, #18]
 80140b2:	4631      	mov	r1, r6
 80140b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80140b8:	4640      	mov	r0, r8
 80140ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 80140be:	69ea      	ldr	r2, [r5, #28]
 80140c0:	f7ff ff4e 	bl	8013f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80140c4:	88e2      	ldrh	r2, [r4, #6]
 80140c6:	8863      	ldrh	r3, [r4, #2]
 80140c8:	4413      	add	r3, r2
 80140ca:	9a00      	ldr	r2, [sp, #0]
 80140cc:	444a      	add	r2, r9
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	fa1f f982 	uxth.w	r9, r2
 80140d4:	b219      	sxth	r1, r3
 80140d6:	fa0f f289 	sxth.w	r2, r9
 80140da:	428a      	cmp	r2, r1
 80140dc:	da15      	bge.n	801410a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80140de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80140e2:	eba3 0309 	sub.w	r3, r3, r9
 80140e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80140ea:	f8ad 1014 	strh.w	r1, [sp, #20]
 80140ee:	4631      	mov	r1, r6
 80140f0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80140f4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80140f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80140fc:	69ea      	ldr	r2, [r5, #28]
 80140fe:	e001      	b.n	8014104 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014100:	69ea      	ldr	r2, [r5, #28]
 8014102:	4621      	mov	r1, r4
 8014104:	4640      	mov	r0, r8
 8014106:	f7ff ff2b 	bl	8013f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801410a:	4628      	mov	r0, r5
 801410c:	f7ff fe94 	bl	8013e38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014110:	6861      	ldr	r1, [r4, #4]
 8014112:	4602      	mov	r2, r0
 8014114:	4633      	mov	r3, r6
 8014116:	6820      	ldr	r0, [r4, #0]
 8014118:	c303      	stmia	r3!, {r0, r1}
 801411a:	4611      	mov	r1, r2
 801411c:	4630      	mov	r0, r6
 801411e:	f7fc f889 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8014122:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014126:	2b00      	cmp	r3, #0
 8014128:	f77f af33 	ble.w	8013f92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801412c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014130:	2b00      	cmp	r3, #0
 8014132:	f77f af2e 	ble.w	8013f92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014136:	4628      	mov	r0, r5
 8014138:	f7ff fe9a 	bl	8013e70 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801413c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014140:	1a18      	subs	r0, r3, r0
 8014142:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014146:	4628      	mov	r0, r5
 8014148:	f7ff fea6 	bl	8013e98 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801414c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014150:	4631      	mov	r1, r6
 8014152:	1a18      	subs	r0, r3, r0
 8014154:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014158:	4628      	mov	r0, r5
 801415a:	682b      	ldr	r3, [r5, #0]
 801415c:	689b      	ldr	r3, [r3, #8]
 801415e:	4798      	blx	r3
 8014160:	e717      	b.n	8013f92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014162 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014162:	b570      	push	{r4, r5, r6, lr}
 8014164:	1d06      	adds	r6, r0, #4
 8014166:	b086      	sub	sp, #24
 8014168:	460c      	mov	r4, r1
 801416a:	2300      	movs	r3, #0
 801416c:	4631      	mov	r1, r6
 801416e:	4605      	mov	r5, r0
 8014170:	a802      	add	r0, sp, #8
 8014172:	9301      	str	r3, [sp, #4]
 8014174:	f7ff fca0 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014178:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801417c:	8822      	ldrh	r2, [r4, #0]
 801417e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014182:	1ad2      	subs	r2, r2, r3
 8014184:	8863      	ldrh	r3, [r4, #2]
 8014186:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801418a:	1a5b      	subs	r3, r3, r1
 801418c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014190:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014194:	aa01      	add	r2, sp, #4
 8014196:	f8ad 0014 	strh.w	r0, [sp, #20]
 801419a:	4630      	mov	r0, r6
 801419c:	f8ad 1016 	strh.w	r1, [sp, #22]
 80141a0:	a904      	add	r1, sp, #16
 80141a2:	f8ad 3012 	strh.w	r3, [sp, #18]
 80141a6:	f7fc f91d 	bl	80103e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80141aa:	9a01      	ldr	r2, [sp, #4]
 80141ac:	b11a      	cbz	r2, 80141b6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80141ae:	4621      	mov	r1, r4
 80141b0:	4628      	mov	r0, r5
 80141b2:	f7ff fed5 	bl	8013f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80141b6:	b006      	add	sp, #24
 80141b8:	bd70      	pop	{r4, r5, r6, pc}

080141ba <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80141ba:	4602      	mov	r2, r0
 80141bc:	b530      	push	{r4, r5, lr}
 80141be:	4604      	mov	r4, r0
 80141c0:	b085      	sub	sp, #20
 80141c2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80141c6:	460d      	mov	r5, r1
 80141c8:	466b      	mov	r3, sp
 80141ca:	6851      	ldr	r1, [r2, #4]
 80141cc:	c303      	stmia	r3!, {r0, r1}
 80141ce:	4629      	mov	r1, r5
 80141d0:	4668      	mov	r0, sp
 80141d2:	f7fc f82f 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 80141d6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80141da:	b12b      	cbz	r3, 80141e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80141dc:	4669      	mov	r1, sp
 80141de:	4620      	mov	r0, r4
 80141e0:	f7ff ffbf 	bl	8014162 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80141e4:	b005      	add	sp, #20
 80141e6:	bd30      	pop	{r4, r5, pc}
 80141e8:	3404      	adds	r4, #4
 80141ea:	a802      	add	r0, sp, #8
 80141ec:	4621      	mov	r1, r4
 80141ee:	f7ff fc63 	bl	8013ab8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80141f2:	f8bd 3000 	ldrh.w	r3, [sp]
 80141f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80141fa:	4669      	mov	r1, sp
 80141fc:	4620      	mov	r0, r4
 80141fe:	1a9b      	subs	r3, r3, r2
 8014200:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014204:	f8ad 3000 	strh.w	r3, [sp]
 8014208:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801420c:	1a9b      	subs	r3, r3, r2
 801420e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014212:	f7fc f8ae 	bl	8010372 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014216:	e7e5      	b.n	80141e4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08014218 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8014218:	460b      	mov	r3, r1
 801421a:	680a      	ldr	r2, [r1, #0]
 801421c:	1d01      	adds	r1, r0, #4
 801421e:	6992      	ldr	r2, [r2, #24]
 8014220:	4618      	mov	r0, r3
 8014222:	4710      	bx	r2

08014224 <_ZN8touchgfx12TextProviderC1Ev>:
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	2500      	movs	r5, #0
 8014228:	2302      	movs	r3, #2
 801422a:	4604      	mov	r4, r0
 801422c:	220e      	movs	r2, #14
 801422e:	7403      	strb	r3, [r0, #16]
 8014230:	4629      	mov	r1, r5
 8014232:	6145      	str	r5, [r0, #20]
 8014234:	7605      	strb	r5, [r0, #24]
 8014236:	83c5      	strh	r5, [r0, #30]
 8014238:	8405      	strh	r5, [r0, #32]
 801423a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801423c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801423e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8014240:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8014244:	e9c0 5500 	strd	r5, r5, [r0]
 8014248:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801424c:	304c      	adds	r0, #76	@ 0x4c
 801424e:	f00f fce2 	bl	8023c16 <memset>
 8014252:	2301      	movs	r3, #1
 8014254:	4620      	mov	r0, r4
 8014256:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801425a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801425e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8014262:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8014266:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801426a:	f7f9 fc11 	bl	800da90 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801426e:	4620      	mov	r0, r4
 8014270:	bd38      	pop	{r3, r4, r5, pc}

08014272 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014272:	b530      	push	{r4, r5, lr}
 8014274:	2500      	movs	r5, #0
 8014276:	2401      	movs	r4, #1
 8014278:	6843      	ldr	r3, [r0, #4]
 801427a:	b913      	cbnz	r3, 8014282 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801427c:	6803      	ldr	r3, [r0, #0]
 801427e:	b313      	cbz	r3, 80142c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014280:	6043      	str	r3, [r0, #4]
 8014282:	7e03      	ldrb	r3, [r0, #24]
 8014284:	b143      	cbz	r3, 8014298 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8014286:	6943      	ldr	r3, [r0, #20]
 8014288:	b12b      	cbz	r3, 8014296 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801428a:	881a      	ldrh	r2, [r3, #0]
 801428c:	b11a      	cbz	r2, 8014296 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801428e:	1c9a      	adds	r2, r3, #2
 8014290:	6142      	str	r2, [r0, #20]
 8014292:	8818      	ldrh	r0, [r3, #0]
 8014294:	bd30      	pop	{r4, r5, pc}
 8014296:	7605      	strb	r5, [r0, #24]
 8014298:	6843      	ldr	r3, [r0, #4]
 801429a:	8819      	ldrh	r1, [r3, #0]
 801429c:	b199      	cbz	r1, 80142c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801429e:	1c9a      	adds	r2, r3, #2
 80142a0:	2902      	cmp	r1, #2
 80142a2:	6042      	str	r2, [r0, #4]
 80142a4:	d1f5      	bne.n	8014292 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80142a6:	7c03      	ldrb	r3, [r0, #16]
 80142a8:	2b01      	cmp	r3, #1
 80142aa:	d8e5      	bhi.n	8014278 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80142ac:	1c5a      	adds	r2, r3, #1
 80142ae:	3302      	adds	r3, #2
 80142b0:	7402      	strb	r2, [r0, #16]
 80142b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80142b6:	6143      	str	r3, [r0, #20]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d0dd      	beq.n	8014278 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80142bc:	881b      	ldrh	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d0da      	beq.n	8014278 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80142c2:	7604      	strb	r4, [r0, #24]
 80142c4:	e7d8      	b.n	8014278 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80142c6:	2000      	movs	r0, #0
 80142c8:	e7e4      	b.n	8014294 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080142ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80142ca:	6001      	str	r1, [r0, #0]
 80142cc:	2100      	movs	r1, #0
 80142ce:	b430      	push	{r4, r5}
 80142d0:	6041      	str	r1, [r0, #4]
 80142d2:	6815      	ldr	r5, [r2, #0]
 80142d4:	6085      	str	r5, [r0, #8]
 80142d6:	6852      	ldr	r2, [r2, #4]
 80142d8:	6443      	str	r3, [r0, #68]	@ 0x44
 80142da:	9b02      	ldr	r3, [sp, #8]
 80142dc:	60c2      	str	r2, [r0, #12]
 80142de:	7401      	strb	r1, [r0, #16]
 80142e0:	6141      	str	r1, [r0, #20]
 80142e2:	7601      	strb	r1, [r0, #24]
 80142e4:	8701      	strh	r1, [r0, #56]	@ 0x38
 80142e6:	8401      	strh	r1, [r0, #32]
 80142e8:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80142ec:	6483      	str	r3, [r0, #72]	@ 0x48
 80142ee:	bc30      	pop	{r4, r5}
 80142f0:	f7f9 bbce 	b.w	800da90 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080142f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80142f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142f6:	4605      	mov	r5, r0
 80142f8:	4608      	mov	r0, r1
 80142fa:	b1f1      	cbz	r1, 801433a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80142fc:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8014300:	460b      	mov	r3, r1
 8014302:	f101 0708 	add.w	r7, r1, #8
 8014306:	4622      	mov	r2, r4
 8014308:	6818      	ldr	r0, [r3, #0]
 801430a:	3308      	adds	r3, #8
 801430c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014310:	4626      	mov	r6, r4
 8014312:	42bb      	cmp	r3, r7
 8014314:	c603      	stmia	r6!, {r0, r1}
 8014316:	4634      	mov	r4, r6
 8014318:	d1f6      	bne.n	8014308 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801431a:	6818      	ldr	r0, [r3, #0]
 801431c:	6030      	str	r0, [r6, #0]
 801431e:	4610      	mov	r0, r2
 8014320:	889b      	ldrh	r3, [r3, #4]
 8014322:	80b3      	strh	r3, [r6, #4]
 8014324:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8014328:	015b      	lsls	r3, r3, #5
 801432a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801432e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8014332:	430b      	orrs	r3, r1
 8014334:	425b      	negs	r3, r3
 8014336:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801433a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801433c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	460c      	mov	r4, r1
 8014340:	6811      	ldr	r1, [r2, #0]
 8014342:	4610      	mov	r0, r2
 8014344:	68cd      	ldr	r5, [r1, #12]
 8014346:	4619      	mov	r1, r3
 8014348:	47a8      	blx	r5
 801434a:	2800      	cmp	r0, #0
 801434c:	bf08      	it	eq
 801434e:	4620      	moveq	r0, r4
 8014350:	bd38      	pop	{r3, r4, r5, pc}
	...

08014354 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014358:	468c      	mov	ip, r1
 801435a:	4605      	mov	r5, r0
 801435c:	4614      	mov	r4, r2
 801435e:	b942      	cbnz	r2, 8014372 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8014360:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8014364:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8014368:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801436c:	4620      	mov	r0, r4
 801436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014372:	7b50      	ldrb	r0, [r2, #13]
 8014374:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8014378:	8893      	ldrh	r3, [r2, #4]
 801437a:	0106      	lsls	r6, r0, #4
 801437c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014380:	79e6      	ldrb	r6, [r4, #7]
 8014382:	4316      	orrs	r6, r2
 8014384:	185a      	adds	r2, r3, r1
 8014386:	b291      	uxth	r1, r2
 8014388:	b2b7      	uxth	r7, r6
 801438a:	291d      	cmp	r1, #29
 801438c:	d87f      	bhi.n	801448e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801438e:	2201      	movs	r2, #1
 8014390:	10f6      	asrs	r6, r6, #3
 8014392:	408a      	lsls	r2, r1
 8014394:	498b      	ldr	r1, [pc, #556]	@ (80145c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8014396:	420a      	tst	r2, r1
 8014398:	d12e      	bne.n	80143f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801439a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801439e:	d076      	beq.n	801448e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80143a0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80143a4:	4623      	mov	r3, r4
 80143a6:	f104 0e08 	add.w	lr, r4, #8
 80143aa:	4614      	mov	r4, r2
 80143ac:	6818      	ldr	r0, [r3, #0]
 80143ae:	3308      	adds	r3, #8
 80143b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80143b4:	4694      	mov	ip, r2
 80143b6:	4573      	cmp	r3, lr
 80143b8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80143bc:	4662      	mov	r2, ip
 80143be:	d1f5      	bne.n	80143ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80143c0:	6818      	ldr	r0, [r3, #0]
 80143c2:	f8cc 0000 	str.w	r0, [ip]
 80143c6:	889b      	ldrh	r3, [r3, #4]
 80143c8:	f8ac 3004 	strh.w	r3, [ip, #4]
 80143cc:	b2b3      	uxth	r3, r6
 80143ce:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80143d2:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80143d6:	1aca      	subs	r2, r1, r3
 80143d8:	1bcf      	subs	r7, r1, r7
 80143da:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80143de:	b292      	uxth	r2, r2
 80143e0:	1afb      	subs	r3, r7, r3
 80143e2:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80143e6:	10d2      	asrs	r2, r2, #3
 80143e8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80143ec:	4302      	orrs	r2, r0
 80143ee:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80143f2:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80143f6:	e7b9      	b.n	801436c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80143f8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80143fc:	4623      	mov	r3, r4
 80143fe:	f104 0808 	add.w	r8, r4, #8
 8014402:	4614      	mov	r4, r2
 8014404:	6818      	ldr	r0, [r3, #0]
 8014406:	3308      	adds	r3, #8
 8014408:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801440c:	4696      	mov	lr, r2
 801440e:	4543      	cmp	r3, r8
 8014410:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014414:	4672      	mov	r2, lr
 8014416:	d1f5      	bne.n	8014404 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8014418:	6818      	ldr	r0, [r3, #0]
 801441a:	f8ce 0000 	str.w	r0, [lr]
 801441e:	889b      	ldrh	r3, [r3, #4]
 8014420:	f8ae 3004 	strh.w	r3, [lr, #4]
 8014424:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8014426:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801442a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801442c:	f640 6333 	movw	r3, #3635	@ 0xe33
 8014430:	4299      	cmp	r1, r3
 8014432:	d111      	bne.n	8014458 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8014434:	f8dc 3000 	ldr.w	r3, [ip]
 8014438:	4660      	mov	r0, ip
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	4798      	blx	r3
 801443e:	7b41      	ldrb	r1, [r0, #13]
 8014440:	00cb      	lsls	r3, r1, #3
 8014442:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014446:	7a03      	ldrb	r3, [r0, #8]
 8014448:	4313      	orrs	r3, r2
 801444a:	064a      	lsls	r2, r1, #25
 801444c:	bf44      	itt	mi
 801444e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014452:	b21b      	sxthmi	r3, r3
 8014454:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8014458:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801445c:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8014460:	443b      	add	r3, r7
 8014462:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014466:	4433      	add	r3, r6
 8014468:	b29b      	uxth	r3, r3
 801446a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801446e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8014472:	10db      	asrs	r3, r3, #3
 8014474:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014478:	4313      	orrs	r3, r2
 801447a:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801447e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8014482:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8014486:	1a9b      	subs	r3, r3, r2
 8014488:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801448c:	e76e      	b.n	801436c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801448e:	f023 0204 	bic.w	r2, r3, #4
 8014492:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8014496:	428a      	cmp	r2, r1
 8014498:	d003      	beq.n	80144a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801449a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801449e:	4293      	cmp	r3, r2
 80144a0:	d138      	bne.n	8014514 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 80144a2:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 80144a6:	4622      	mov	r2, r4
 80144a8:	f104 0808 	add.w	r8, r4, #8
 80144ac:	4634      	mov	r4, r6
 80144ae:	6810      	ldr	r0, [r2, #0]
 80144b0:	3208      	adds	r2, #8
 80144b2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80144b6:	46b6      	mov	lr, r6
 80144b8:	4542      	cmp	r2, r8
 80144ba:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80144be:	4676      	mov	r6, lr
 80144c0:	d1f5      	bne.n	80144ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 80144c2:	6810      	ldr	r0, [r2, #0]
 80144c4:	3b01      	subs	r3, #1
 80144c6:	4621      	mov	r1, r4
 80144c8:	f8ce 0000 	str.w	r0, [lr]
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	8892      	ldrh	r2, [r2, #4]
 80144d0:	4628      	mov	r0, r5
 80144d2:	f8ae 2004 	strh.w	r2, [lr, #4]
 80144d6:	4662      	mov	r2, ip
 80144d8:	f7ff ff30 	bl	801433c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80144dc:	7b41      	ldrb	r1, [r0, #13]
 80144de:	00cb      	lsls	r3, r1, #3
 80144e0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80144e4:	7a03      	ldrb	r3, [r0, #8]
 80144e6:	0648      	lsls	r0, r1, #25
 80144e8:	ea43 0302 	orr.w	r3, r3, r2
 80144ec:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80144f0:	bf44      	itt	mi
 80144f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80144f6:	b21b      	sxthmi	r3, r3
 80144f8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80144fc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8014500:	005b      	lsls	r3, r3, #1
 8014502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014506:	4313      	orrs	r3, r2
 8014508:	115a      	asrs	r2, r3, #5
 801450a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801450e:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8014512:	e047      	b.n	80145a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8014514:	00c2      	lsls	r2, r0, #3
 8014516:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801451a:	7a22      	ldrb	r2, [r4, #8]
 801451c:	430a      	orrs	r2, r1
 801451e:	0641      	lsls	r1, r0, #25
 8014520:	f640 6109 	movw	r1, #3593	@ 0xe09
 8014524:	bf44      	itt	mi
 8014526:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801452a:	b212      	sxthmi	r2, r2
 801452c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8014530:	f023 0210 	bic.w	r2, r3, #16
 8014534:	428a      	cmp	r2, r1
 8014536:	d003      	beq.n	8014540 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8014538:	f640 6213 	movw	r2, #3603	@ 0xe13
 801453c:	4293      	cmp	r3, r2
 801453e:	d13e      	bne.n	80145be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8014540:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8014544:	f104 0808 	add.w	r8, r4, #8
 8014548:	4696      	mov	lr, r2
 801454a:	6820      	ldr	r0, [r4, #0]
 801454c:	3408      	adds	r4, #8
 801454e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8014552:	4616      	mov	r6, r2
 8014554:	4544      	cmp	r4, r8
 8014556:	c603      	stmia	r6!, {r0, r1}
 8014558:	4632      	mov	r2, r6
 801455a:	d1f6      	bne.n	801454a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801455c:	6820      	ldr	r0, [r4, #0]
 801455e:	6030      	str	r0, [r6, #0]
 8014560:	4628      	mov	r0, r5
 8014562:	88a1      	ldrh	r1, [r4, #4]
 8014564:	4674      	mov	r4, lr
 8014566:	80b1      	strh	r1, [r6, #4]
 8014568:	4671      	mov	r1, lr
 801456a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801456e:	0076      	lsls	r6, r6, #1
 8014570:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014574:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8014578:	4316      	orrs	r6, r2
 801457a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801457e:	4293      	cmp	r3, r2
 8014580:	4662      	mov	r2, ip
 8014582:	bf16      	itet	ne
 8014584:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014588:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801458c:	b29b      	uxthne	r3, r3
 801458e:	f7ff fed5 	bl	801433c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014592:	7b43      	ldrb	r3, [r0, #13]
 8014594:	7a82      	ldrb	r2, [r0, #10]
 8014596:	005b      	lsls	r3, r3, #1
 8014598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801459c:	4313      	orrs	r3, r2
 801459e:	1af6      	subs	r6, r6, r3
 80145a0:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 80145a4:	7b61      	ldrb	r1, [r4, #13]
 80145a6:	00cb      	lsls	r3, r1, #3
 80145a8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80145ac:	7a23      	ldrb	r3, [r4, #8]
 80145ae:	4313      	orrs	r3, r2
 80145b0:	064a      	lsls	r2, r1, #25
 80145b2:	bf44      	itt	mi
 80145b4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80145b8:	b21b      	sxthmi	r3, r3
 80145ba:	1bdb      	subs	r3, r3, r7
 80145bc:	e719      	b.n	80143f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80145be:	2300      	movs	r3, #0
 80145c0:	e7a5      	b.n	801450e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80145c2:	bf00      	nop
 80145c4:	3fc00079 	.word	0x3fc00079

080145c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80145c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145cc:	4604      	mov	r4, r0
 80145ce:	b942      	cbnz	r2, 80145e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80145d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80145d4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80145d8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80145dc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80145e0:	e047      	b.n	8014672 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80145e2:	7b51      	ldrb	r1, [r2, #13]
 80145e4:	8893      	ldrh	r3, [r2, #4]
 80145e6:	010d      	lsls	r5, r1, #4
 80145e8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80145ec:	79d5      	ldrb	r5, [r2, #7]
 80145ee:	4305      	orrs	r5, r0
 80145f0:	2d04      	cmp	r5, #4
 80145f2:	bfcc      	ite	gt
 80145f4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80145f8:	f04f 0e01 	movle.w	lr, #1
 80145fc:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8014600:	f200 80ab 	bhi.w	801475a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8014604:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8014608:	4283      	cmp	r3, r0
 801460a:	d216      	bcs.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801460c:	f240 605b 	movw	r0, #1627	@ 0x65b
 8014610:	4283      	cmp	r3, r0
 8014612:	d859      	bhi.n	80146c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8014614:	f240 6057 	movw	r0, #1623	@ 0x657
 8014618:	4283      	cmp	r3, r0
 801461a:	d20e      	bcs.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801461c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8014620:	d24a      	bcs.n	80146b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8014622:	f240 604e 	movw	r0, #1614	@ 0x64e
 8014626:	4283      	cmp	r3, r0
 8014628:	d207      	bcs.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801462a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801462e:	4283      	cmp	r3, r0
 8014630:	d02a      	beq.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014632:	d821      	bhi.n	8014678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8014634:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8014638:	d35b      	bcc.n	80146f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801463a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801463e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014642:	f040 80d0 	bne.w	80147e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014646:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801464a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801464e:	f040 80ca 	bne.w	80147e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014652:	00cb      	lsls	r3, r1, #3
 8014654:	0649      	lsls	r1, r1, #25
 8014656:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801465a:	7a13      	ldrb	r3, [r2, #8]
 801465c:	ea43 0300 	orr.w	r3, r3, r0
 8014660:	bf44      	itt	mi
 8014662:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014666:	b21b      	sxthmi	r3, r3
 8014668:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801466c:	1b5d      	subs	r5, r3, r5
 801466e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014672:	4610      	mov	r0, r2
 8014674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014678:	f240 604b 	movw	r0, #1611	@ 0x64b
 801467c:	4283      	cmp	r3, r0
 801467e:	d338      	bcc.n	80146f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014680:	f240 604c 	movw	r0, #1612	@ 0x64c
 8014684:	4283      	cmp	r3, r0
 8014686:	d9d8      	bls.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014688:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801468c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8014690:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014694:	f040 80f3 	bne.w	801487e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014698:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801469c:	f040 80ef 	bne.w	801487e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80146a0:	00cb      	lsls	r3, r1, #3
 80146a2:	064e      	lsls	r6, r1, #25
 80146a4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80146a8:	7a13      	ldrb	r3, [r2, #8]
 80146aa:	ea43 0300 	orr.w	r3, r3, r0
 80146ae:	bf44      	itt	mi
 80146b0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80146b4:	b21b      	sxthmi	r3, r3
 80146b6:	e7d9      	b.n	801466c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80146b8:	f240 6054 	movw	r0, #1620	@ 0x654
 80146bc:	4283      	cmp	r3, r0
 80146be:	d8e3      	bhi.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80146c0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80146c4:	d9e0      	bls.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80146c6:	e7b8      	b.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80146c8:	f240 6074 	movw	r0, #1652	@ 0x674
 80146cc:	4283      	cmp	r3, r0
 80146ce:	d0b4      	beq.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80146d0:	d82d      	bhi.n	801472e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80146d2:	f240 605e 	movw	r0, #1630	@ 0x65e
 80146d6:	4283      	cmp	r3, r0
 80146d8:	d804      	bhi.n	80146e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80146da:	f240 605d 	movw	r0, #1629	@ 0x65d
 80146de:	4283      	cmp	r3, r0
 80146e0:	d3d2      	bcc.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80146e2:	e7aa      	b.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80146e4:	f240 605f 	movw	r0, #1631	@ 0x65f
 80146e8:	4283      	cmp	r3, r0
 80146ea:	d0cd      	beq.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80146ec:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80146f0:	d0a3      	beq.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80146f2:	00cb      	lsls	r3, r1, #3
 80146f4:	0649      	lsls	r1, r1, #25
 80146f6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80146fa:	7a13      	ldrb	r3, [r2, #8]
 80146fc:	ea43 0300 	orr.w	r3, r3, r0
 8014700:	bf44      	itt	mi
 8014702:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014706:	b21b      	sxthmi	r3, r3
 8014708:	1b5d      	subs	r5, r3, r5
 801470a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801470e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014712:	7b53      	ldrb	r3, [r2, #13]
 8014714:	015b      	lsls	r3, r3, #5
 8014716:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801471a:	7993      	ldrb	r3, [r2, #6]
 801471c:	430b      	orrs	r3, r1
 801471e:	2105      	movs	r1, #5
 8014720:	005b      	lsls	r3, r3, #1
 8014722:	fb93 f3f1 	sdiv	r3, r3, r1
 8014726:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801472a:	440b      	add	r3, r1
 801472c:	e756      	b.n	80145dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801472e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8014732:	4283      	cmp	r3, r0
 8014734:	d809      	bhi.n	801474a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8014736:	f240 60df 	movw	r0, #1759	@ 0x6df
 801473a:	4283      	cmp	r3, r0
 801473c:	f4bf af7d 	bcs.w	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014740:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8014744:	2b05      	cmp	r3, #5
 8014746:	d8d4      	bhi.n	80146f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014748:	e777      	b.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801474a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801474e:	4283      	cmp	r3, r0
 8014750:	d09a      	beq.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014752:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8014756:	4283      	cmp	r3, r0
 8014758:	e7ca      	b.n	80146f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801475a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801475e:	d22b      	bcs.n	80147b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014760:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8014764:	4283      	cmp	r3, r0
 8014766:	d28f      	bcs.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014768:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801476c:	4283      	cmp	r3, r0
 801476e:	d816      	bhi.n	801479e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014770:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8014774:	4283      	cmp	r3, r0
 8014776:	f4bf af60 	bcs.w	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801477a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801477e:	4283      	cmp	r3, r0
 8014780:	d80a      	bhi.n	8014798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014782:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8014786:	4283      	cmp	r3, r0
 8014788:	f4bf af57 	bcs.w	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801478c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8014790:	4283      	cmp	r3, r0
 8014792:	f43f af79 	beq.w	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014796:	e7ac      	b.n	80146f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014798:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801479c:	e7f8      	b.n	8014790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801479e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 80147a2:	4283      	cmp	r3, r0
 80147a4:	d802      	bhi.n	80147ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80147a6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80147aa:	e798      	b.n	80146de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80147ac:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80147b0:	4283      	cmp	r3, r0
 80147b2:	f47f af42 	bne.w	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80147b6:	e767      	b.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80147b8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80147bc:	4283      	cmp	r3, r0
 80147be:	f43f af63 	beq.w	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80147c2:	d802      	bhi.n	80147ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80147c4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80147c8:	e7f2      	b.n	80147b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80147ca:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80147ce:	4283      	cmp	r3, r0
 80147d0:	d805      	bhi.n	80147de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80147d2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80147d6:	4283      	cmp	r3, r0
 80147d8:	f4ff af2f 	bcc.w	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80147dc:	e754      	b.n	8014688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80147de:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80147e2:	4283      	cmp	r3, r0
 80147e4:	e7af      	b.n	8014746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80147e6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80147ea:	4617      	mov	r7, r2
 80147ec:	f102 0808 	add.w	r8, r2, #8
 80147f0:	4666      	mov	r6, ip
 80147f2:	6838      	ldr	r0, [r7, #0]
 80147f4:	3708      	adds	r7, #8
 80147f6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80147fa:	46e6      	mov	lr, ip
 80147fc:	4547      	cmp	r7, r8
 80147fe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014802:	46f4      	mov	ip, lr
 8014804:	d1f5      	bne.n	80147f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014806:	6838      	ldr	r0, [r7, #0]
 8014808:	f8ce 0000 	str.w	r0, [lr]
 801480c:	88b9      	ldrh	r1, [r7, #4]
 801480e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014812:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014816:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801481a:	d009      	beq.n	8014830 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801481c:	7b51      	ldrb	r1, [r2, #13]
 801481e:	7992      	ldrb	r2, [r2, #6]
 8014820:	0149      	lsls	r1, r1, #5
 8014822:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014826:	4311      	orrs	r1, r2
 8014828:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801482c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014830:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014834:	b2ad      	uxth	r5, r5
 8014836:	d00d      	beq.n	8014854 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8014838:	442b      	add	r3, r5
 801483a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801483e:	b29b      	uxth	r3, r3
 8014840:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014844:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014848:	10db      	asrs	r3, r3, #3
 801484a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801484e:	4313      	orrs	r3, r2
 8014850:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014854:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014858:	00cb      	lsls	r3, r1, #3
 801485a:	064f      	lsls	r7, r1, #25
 801485c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014860:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014864:	ea43 0302 	orr.w	r3, r3, r2
 8014868:	bf44      	itt	mi
 801486a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801486e:	b21b      	sxthmi	r3, r3
 8014870:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014874:	1b5b      	subs	r3, r3, r5
 8014876:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801487a:	4632      	mov	r2, r6
 801487c:	e6f9      	b.n	8014672 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801487e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014882:	4617      	mov	r7, r2
 8014884:	f102 0908 	add.w	r9, r2, #8
 8014888:	4666      	mov	r6, ip
 801488a:	6838      	ldr	r0, [r7, #0]
 801488c:	3708      	adds	r7, #8
 801488e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014892:	46e0      	mov	r8, ip
 8014894:	454f      	cmp	r7, r9
 8014896:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801489a:	46c4      	mov	ip, r8
 801489c:	d1f5      	bne.n	801488a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801489e:	6838      	ldr	r0, [r7, #0]
 80148a0:	f8c8 0000 	str.w	r0, [r8]
 80148a4:	88b9      	ldrh	r1, [r7, #4]
 80148a6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80148aa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80148ae:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80148b2:	d009      	beq.n	80148c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80148b4:	7b51      	ldrb	r1, [r2, #13]
 80148b6:	7992      	ldrb	r2, [r2, #6]
 80148b8:	0149      	lsls	r1, r1, #5
 80148ba:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80148be:	4311      	orrs	r1, r2
 80148c0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80148c4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80148c8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80148cc:	d00e      	beq.n	80148ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80148ce:	eba3 030e 	sub.w	r3, r3, lr
 80148d2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80148dc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80148e0:	10db      	asrs	r3, r3, #3
 80148e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80148e6:	4313      	orrs	r3, r2
 80148e8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80148ec:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80148f0:	00cb      	lsls	r3, r1, #3
 80148f2:	0648      	lsls	r0, r1, #25
 80148f4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80148f8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80148fc:	ea43 0302 	orr.w	r3, r3, r2
 8014900:	bf44      	itt	mi
 8014902:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014906:	b21b      	sxthmi	r3, r3
 8014908:	1b5d      	subs	r5, r3, r5
 801490a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801490e:	e7b4      	b.n	801487a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08014910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014914:	461e      	mov	r6, r3
 8014916:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014918:	4604      	mov	r4, r0
 801491a:	4617      	mov	r7, r2
 801491c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014920:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014924:	f7f9 f80e 	bl	800d944 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014928:	4605      	mov	r5, r0
 801492a:	b918      	cbnz	r0, 8014934 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801492c:	6030      	str	r0, [r6, #0]
 801492e:	4628      	mov	r0, r5
 8014930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	4601      	mov	r1, r0
 8014938:	4638      	mov	r0, r7
 801493a:	68db      	ldr	r3, [r3, #12]
 801493c:	4798      	blx	r3
 801493e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8014942:	4602      	mov	r2, r0
 8014944:	6030      	str	r0, [r6, #0]
 8014946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801494a:	d213      	bcs.n	8014974 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801494c:	4643      	mov	r3, r8
 801494e:	4639      	mov	r1, r7
 8014950:	4620      	mov	r0, r4
 8014952:	f7ff fe39 	bl	80145c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014956:	6030      	str	r0, [r6, #0]
 8014958:	6833      	ldr	r3, [r6, #0]
 801495a:	b143      	cbz	r3, 801496e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801495c:	7b5a      	ldrb	r2, [r3, #13]
 801495e:	7a9b      	ldrb	r3, [r3, #10]
 8014960:	0052      	lsls	r2, r2, #1
 8014962:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8014966:	4313      	orrs	r3, r2
 8014968:	bf0c      	ite	eq
 801496a:	2301      	moveq	r3, #1
 801496c:	2300      	movne	r3, #0
 801496e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8014972:	e7dc      	b.n	801492e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8014974:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8014978:	b29b      	uxth	r3, r3
 801497a:	2b7f      	cmp	r3, #127	@ 0x7f
 801497c:	d804      	bhi.n	8014988 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801497e:	4639      	mov	r1, r7
 8014980:	4620      	mov	r0, r4
 8014982:	f7ff fce7 	bl	8014354 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014986:	e7e6      	b.n	8014956 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014988:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801498c:	2b00      	cmp	r3, #0
 801498e:	d0e3      	beq.n	8014958 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014990:	f640 1302 	movw	r3, #2306	@ 0x902
 8014994:	429d      	cmp	r5, r3
 8014996:	d1df      	bne.n	8014958 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014998:	4601      	mov	r1, r0
 801499a:	4620      	mov	r0, r4
 801499c:	f7ff fcaa 	bl	80142f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80149a0:	e7d9      	b.n	8014956 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080149a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80149a2:	b510      	push	{r4, lr}
 80149a4:	4604      	mov	r4, r0
 80149a6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80149aa:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80149ac:	b1e1      	cbz	r1, 80149e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80149ae:	2b0a      	cmp	r3, #10
 80149b0:	d02d      	beq.n	8014a0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80149b2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80149b4:	3901      	subs	r1, #1
 80149b6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80149ba:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80149bc:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80149c0:	1c51      	adds	r1, r2, #1
 80149c2:	b289      	uxth	r1, r1
 80149c4:	2901      	cmp	r1, #1
 80149c6:	bf8a      	itet	hi
 80149c8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80149cc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80149ce:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80149d0:	1c5a      	adds	r2, r3, #1
 80149d2:	8722      	strh	r2, [r4, #56]	@ 0x38
 80149d4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80149d6:	4413      	add	r3, r2
 80149d8:	b29b      	uxth	r3, r3
 80149da:	2b09      	cmp	r3, #9
 80149dc:	bf88      	it	hi
 80149de:	3b0a      	subhi	r3, #10
 80149e0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80149e4:	8458      	strh	r0, [r3, #34]	@ 0x22
 80149e6:	e7de      	b.n	80149a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80149e8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80149ea:	2b0a      	cmp	r3, #10
 80149ec:	d00f      	beq.n	8014a0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80149ee:	4620      	mov	r0, r4
 80149f0:	f7ff fc3f 	bl	8014272 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80149f4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	8722      	strh	r2, [r4, #56]	@ 0x38
 80149fa:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80149fc:	4413      	add	r3, r2
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	2b09      	cmp	r3, #9
 8014a02:	bf88      	it	hi
 8014a04:	3b0a      	subhi	r3, #10
 8014a06:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014a0a:	8458      	strh	r0, [r3, #34]	@ 0x22
 8014a0c:	e7ec      	b.n	80149e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014a0e:	bd10      	pop	{r4, pc}

08014a10 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014a10:	b538      	push	{r3, r4, r5, lr}
 8014a12:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014a14:	4604      	mov	r4, r0
 8014a16:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014a1a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8014a1c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8014a1e:	3a01      	subs	r2, #1
 8014a20:	8702      	strh	r2, [r0, #56]	@ 0x38
 8014a22:	1c5a      	adds	r2, r3, #1
 8014a24:	b292      	uxth	r2, r2
 8014a26:	2a09      	cmp	r2, #9
 8014a28:	bf8a      	itet	hi
 8014a2a:	3b09      	subhi	r3, #9
 8014a2c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8014a2e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8014a30:	f7ff ffb7 	bl	80149a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014a34:	8c23      	ldrh	r3, [r4, #32]
 8014a36:	2b01      	cmp	r3, #1
 8014a38:	bf9c      	itt	ls
 8014a3a:	3301      	addls	r3, #1
 8014a3c:	8423      	strhls	r3, [r4, #32]
 8014a3e:	8be3      	ldrh	r3, [r4, #30]
 8014a40:	b90b      	cbnz	r3, 8014a46 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8014a42:	2302      	movs	r3, #2
 8014a44:	83e3      	strh	r3, [r4, #30]
 8014a46:	8be3      	ldrh	r3, [r4, #30]
 8014a48:	4628      	mov	r0, r5
 8014a4a:	3b01      	subs	r3, #1
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	83e3      	strh	r3, [r4, #30]
 8014a50:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014a54:	8365      	strh	r5, [r4, #26]
 8014a56:	bd38      	pop	{r3, r4, r5, pc}

08014a58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014a58:	428a      	cmp	r2, r1
 8014a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a5e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8014a60:	d932      	bls.n	8014ac8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8014a62:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8014a64:	1a54      	subs	r4, r2, r1
 8014a66:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8014a6a:	19ee      	adds	r6, r5, r7
 8014a6c:	fa1f fe84 	uxth.w	lr, r4
 8014a70:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8014a74:	3e01      	subs	r6, #1
 8014a76:	b2b4      	uxth	r4, r6
 8014a78:	eba4 090e 	sub.w	r9, r4, lr
 8014a7c:	fa1f f989 	uxth.w	r9, r9
 8014a80:	2c09      	cmp	r4, #9
 8014a82:	4626      	mov	r6, r4
 8014a84:	bf88      	it	hi
 8014a86:	f1a4 060a 	subhi.w	r6, r4, #10
 8014a8a:	f1bc 0f00 	cmp.w	ip, #0
 8014a8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014a92:	bf08      	it	eq
 8014a94:	f04f 0c02 	moveq.w	ip, #2
 8014a98:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014a9c:	b2a4      	uxth	r4, r4
 8014a9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014aa2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8014aa6:	454c      	cmp	r4, r9
 8014aa8:	fa1f fc8c 	uxth.w	ip, ip
 8014aac:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8014ab0:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8014ab4:	d1e4      	bne.n	8014a80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8014ab6:	eba5 050e 	sub.w	r5, r5, lr
 8014aba:	eb0e 0408 	add.w	r4, lr, r8
 8014abe:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8014ac2:	8705      	strh	r5, [r0, #56]	@ 0x38
 8014ac4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8014ac8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8014aca:	250a      	movs	r5, #10
 8014acc:	1a64      	subs	r4, r4, r1
 8014ace:	4439      	add	r1, r7
 8014ad0:	b289      	uxth	r1, r1
 8014ad2:	8704      	strh	r4, [r0, #56]	@ 0x38
 8014ad4:	2909      	cmp	r1, #9
 8014ad6:	bf88      	it	hi
 8014ad8:	390a      	subhi	r1, #10
 8014ada:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014adc:	b18a      	cbz	r2, 8014b02 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8014ade:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8014ae0:	3a01      	subs	r2, #1
 8014ae2:	3101      	adds	r1, #1
 8014ae4:	b292      	uxth	r2, r2
 8014ae6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014aea:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014aec:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014aee:	b901      	cbnz	r1, 8014af2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8014af0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8014af2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014af4:	3901      	subs	r1, #1
 8014af6:	b289      	uxth	r1, r1
 8014af8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014afa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014afe:	844c      	strh	r4, [r1, #34]	@ 0x22
 8014b00:	e7ec      	b.n	8014adc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8014b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b06:	f7ff bf4c 	b.w	80149a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014b0a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014b0a:	b570      	push	{r4, r5, r6, lr}
 8014b0c:	2500      	movs	r5, #0
 8014b0e:	4295      	cmp	r5, r2
 8014b10:	d011      	beq.n	8014b36 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8014b12:	8bc4      	ldrh	r4, [r0, #30]
 8014b14:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014b18:	4414      	add	r4, r2
 8014b1a:	3c01      	subs	r4, #1
 8014b1c:	1b64      	subs	r4, r4, r5
 8014b1e:	b2a4      	uxth	r4, r4
 8014b20:	2c01      	cmp	r4, #1
 8014b22:	bf88      	it	hi
 8014b24:	3c02      	subhi	r4, #2
 8014b26:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014b2a:	8b64      	ldrh	r4, [r4, #26]
 8014b2c:	42b4      	cmp	r4, r6
 8014b2e:	d117      	bne.n	8014b60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014b30:	3501      	adds	r5, #1
 8014b32:	b2ad      	uxth	r5, r5
 8014b34:	e7eb      	b.n	8014b0e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8014b36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014b3a:	2400      	movs	r4, #0
 8014b3c:	4413      	add	r3, r2
 8014b3e:	b2a2      	uxth	r2, r4
 8014b40:	429a      	cmp	r2, r3
 8014b42:	da0f      	bge.n	8014b64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8014b44:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8014b46:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014b4a:	3401      	adds	r4, #1
 8014b4c:	4432      	add	r2, r6
 8014b4e:	b292      	uxth	r2, r2
 8014b50:	2a09      	cmp	r2, #9
 8014b52:	bf88      	it	hi
 8014b54:	3a0a      	subhi	r2, #10
 8014b56:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014b5a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8014b5c:	42aa      	cmp	r2, r5
 8014b5e:	d0ee      	beq.n	8014b3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014b60:	2000      	movs	r0, #0
 8014b62:	bd70      	pop	{r4, r5, r6, pc}
 8014b64:	2001      	movs	r0, #1
 8014b66:	e7fc      	b.n	8014b62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014b68 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6c:	4605      	mov	r5, r0
 8014b6e:	4616      	mov	r6, r2
 8014b70:	1c8c      	adds	r4, r1, #2
 8014b72:	8809      	ldrh	r1, [r1, #0]
 8014b74:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014b78:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014b7c:	42b3      	cmp	r3, r6
 8014b7e:	d124      	bne.n	8014bca <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014b80:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014b84:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014b88:	f001 070f 	and.w	r7, r1, #15
 8014b8c:	4652      	mov	r2, sl
 8014b8e:	f8cd 8000 	str.w	r8, [sp]
 8014b92:	464b      	mov	r3, r9
 8014b94:	4621      	mov	r1, r4
 8014b96:	4628      	mov	r0, r5
 8014b98:	f7ff ffb7 	bl	8014b0a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014b9c:	4683      	mov	fp, r0
 8014b9e:	b168      	cbz	r0, 8014bbc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014ba0:	eb0a 0109 	add.w	r1, sl, r9
 8014ba4:	463a      	mov	r2, r7
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	4441      	add	r1, r8
 8014baa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014bae:	4649      	mov	r1, r9
 8014bb0:	f7ff ff52 	bl	8014a58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014bb4:	4658      	mov	r0, fp
 8014bb6:	b003      	add	sp, #12
 8014bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bbc:	eb07 010a 	add.w	r1, r7, sl
 8014bc0:	4449      	add	r1, r9
 8014bc2:	4441      	add	r1, r8
 8014bc4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014bc8:	e7d2      	b.n	8014b70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014bca:	f04f 0b00 	mov.w	fp, #0
 8014bce:	e7f1      	b.n	8014bb4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014bd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014bd0:	b570      	push	{r4, r5, r6, lr}
 8014bd2:	8810      	ldrh	r0, [r2, #0]
 8014bd4:	4298      	cmp	r0, r3
 8014bd6:	d817      	bhi.n	8014c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014bd8:	1e48      	subs	r0, r1, #1
 8014bda:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014bde:	4298      	cmp	r0, r3
 8014be0:	d312      	bcc.n	8014c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014be2:	2400      	movs	r4, #0
 8014be4:	428c      	cmp	r4, r1
 8014be6:	d20f      	bcs.n	8014c08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014be8:	1860      	adds	r0, r4, r1
 8014bea:	1040      	asrs	r0, r0, #1
 8014bec:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014bf0:	0085      	lsls	r5, r0, #2
 8014bf2:	42b3      	cmp	r3, r6
 8014bf4:	d902      	bls.n	8014bfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8014bf6:	3001      	adds	r0, #1
 8014bf8:	b284      	uxth	r4, r0
 8014bfa:	e7f3      	b.n	8014be4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014bfc:	d201      	bcs.n	8014c02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014bfe:	b281      	uxth	r1, r0
 8014c00:	e7f0      	b.n	8014be4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014c02:	442a      	add	r2, r5
 8014c04:	8850      	ldrh	r0, [r2, #2]
 8014c06:	bd70      	pop	{r4, r5, r6, pc}
 8014c08:	2000      	movs	r0, #0
 8014c0a:	e7fc      	b.n	8014c06 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014c0c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c10:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8014c12:	4604      	mov	r4, r0
 8014c14:	260b      	movs	r6, #11
 8014c16:	886f      	ldrh	r7, [r5, #2]
 8014c18:	087f      	lsrs	r7, r7, #1
 8014c1a:	3e01      	subs	r6, #1
 8014c1c:	d013      	beq.n	8014c46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014c1e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014c20:	462a      	mov	r2, r5
 8014c22:	4639      	mov	r1, r7
 8014c24:	4620      	mov	r0, r4
 8014c26:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014c2a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014c2e:	4643      	mov	r3, r8
 8014c30:	f7ff ffce 	bl	8014bd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8014c34:	b138      	cbz	r0, 8014c46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014c36:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014c3a:	4642      	mov	r2, r8
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f7ff ff93 	bl	8014b68 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8014c42:	2800      	cmp	r0, #0
 8014c44:	d1e9      	bne.n	8014c1a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8014c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014c4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014c4c:	b570      	push	{r4, r5, r6, lr}
 8014c4e:	694a      	ldr	r2, [r1, #20]
 8014c50:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014c52:	684b      	ldr	r3, [r1, #4]
 8014c54:	1b54      	subs	r4, r2, r5
 8014c56:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8014c58:	f000 8106 	beq.w	8014e68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014c5c:	1b9b      	subs	r3, r3, r6
 8014c5e:	d003      	beq.n	8014c68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014c60:	4363      	muls	r3, r4
 8014c62:	2210      	movs	r2, #16
 8014c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c68:	680c      	ldr	r4, [r1, #0]
 8014c6a:	698a      	ldr	r2, [r1, #24]
 8014c6c:	1b65      	subs	r5, r4, r5
 8014c6e:	f000 80fd 	beq.w	8014e6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8014c72:	1b92      	subs	r2, r2, r6
 8014c74:	d003      	beq.n	8014c7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014c76:	436a      	muls	r2, r5
 8014c78:	2410      	movs	r4, #16
 8014c7a:	fb92 f2f4 	sdiv	r2, r2, r4
 8014c7e:	1a9b      	subs	r3, r3, r2
 8014c80:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8014ea8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8014c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014c88:	460a      	mov	r2, r1
 8014c8a:	ee07 3a90 	vmov	s15, r3
 8014c8e:	f100 040c 	add.w	r4, r0, #12
 8014c92:	4603      	mov	r3, r0
 8014c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c98:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014c9c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014ca0:	eeb1 6a43 	vneg.f32	s12, s6
 8014ca4:	edd2 7a02 	vldr	s15, [r2, #8]
 8014ca8:	3214      	adds	r2, #20
 8014caa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014cae:	ece3 6a01 	vstmia	r3!, {s13}
 8014cb2:	429c      	cmp	r4, r3
 8014cb4:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014cb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014cbc:	edc3 7a02 	vstr	s15, [r3, #8]
 8014cc0:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014cc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014cc8:	edc3 7a05 	vstr	s15, [r3, #20]
 8014ccc:	d1ea      	bne.n	8014ca4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014cce:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014cd0:	698b      	ldr	r3, [r1, #24]
 8014cd2:	edd0 4a02 	vldr	s9, [r0, #8]
 8014cd6:	1a9b      	subs	r3, r3, r2
 8014cd8:	edd0 3a00 	vldr	s7, [r0]
 8014cdc:	edd0 6a01 	vldr	s13, [r0, #4]
 8014ce0:	ee07 3a90 	vmov	s15, r3
 8014ce4:	684b      	ldr	r3, [r1, #4]
 8014ce6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014cea:	ed90 5a05 	vldr	s10, [r0, #20]
 8014cee:	1a9b      	subs	r3, r3, r2
 8014cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cf4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014cf8:	ed90 2a03 	vldr	s4, [r0, #12]
 8014cfc:	ee07 3a10 	vmov	s14, r3
 8014d00:	edd0 5a04 	vldr	s11, [r0, #16]
 8014d04:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014d08:	ed90 1a07 	vldr	s2, [r0, #28]
 8014d0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d10:	edd0 2a06 	vldr	s5, [r0, #24]
 8014d14:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014d18:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014d1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d20:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014d24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014d28:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014d2c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8014d30:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014d32:	694a      	ldr	r2, [r1, #20]
 8014d34:	1b13      	subs	r3, r2, r4
 8014d36:	ee07 3a10 	vmov	s14, r3
 8014d3a:	680b      	ldr	r3, [r1, #0]
 8014d3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d40:	1b1b      	subs	r3, r3, r4
 8014d42:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d46:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014d4a:	ee07 3a10 	vmov	s14, r3
 8014d4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d52:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d56:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014d5a:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014d5e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8014d62:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014d64:	698b      	ldr	r3, [r1, #24]
 8014d66:	1a9b      	subs	r3, r3, r2
 8014d68:	ee06 3a90 	vmov	s13, r3
 8014d6c:	684b      	ldr	r3, [r1, #4]
 8014d6e:	1a9b      	subs	r3, r3, r2
 8014d70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014d74:	ee07 3a10 	vmov	s14, r3
 8014d78:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014d7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d80:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8014d84:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d88:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014d8c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014d90:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8014d94:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014d96:	694a      	ldr	r2, [r1, #20]
 8014d98:	1b13      	subs	r3, r2, r4
 8014d9a:	ee07 3a10 	vmov	s14, r3
 8014d9e:	680b      	ldr	r3, [r1, #0]
 8014da0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014da4:	1b1b      	subs	r3, r3, r4
 8014da6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014daa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8014dae:	ee07 3a10 	vmov	s14, r3
 8014db2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014db6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014dba:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014dbe:	edd0 5a08 	vldr	s11, [r0, #32]
 8014dc2:	ee31 1a65 	vsub.f32	s2, s2, s11
 8014dc6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8014dca:	ee25 5a06 	vmul.f32	s10, s10, s12
 8014dce:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8014dd2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014dd4:	698b      	ldr	r3, [r1, #24]
 8014dd6:	1a9b      	subs	r3, r3, r2
 8014dd8:	ee07 3a10 	vmov	s14, r3
 8014ddc:	684b      	ldr	r3, [r1, #4]
 8014dde:	1a9b      	subs	r3, r3, r2
 8014de0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014de4:	ee01 3a90 	vmov	s3, r3
 8014de8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014dec:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014df0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8014df4:	ee61 1a84 	vmul.f32	s3, s3, s8
 8014df8:	eea1 7a21 	vfma.f32	s14, s2, s3
 8014dfc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014e00:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8014e04:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014e06:	694a      	ldr	r2, [r1, #20]
 8014e08:	1b13      	subs	r3, r2, r4
 8014e0a:	ee03 3a10 	vmov	s6, r3
 8014e0e:	680b      	ldr	r3, [r1, #0]
 8014e10:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014e14:	1b1b      	subs	r3, r3, r4
 8014e16:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014e1a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014e1e:	ee03 3a10 	vmov	s6, r3
 8014e22:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014e26:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014e2a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014e2e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014e32:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8014e36:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8014e3a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8014e3e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e46:	dd13      	ble.n	8014e70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8014e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014e4c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8014e50:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8014e52:	eee3 7a87 	vfma.f32	s15, s7, s14
 8014e56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e5e:	dd15      	ble.n	8014e8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8014e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014e64:	6403      	str	r3, [r0, #64]	@ 0x40
 8014e66:	bd70      	pop	{r4, r5, r6, pc}
 8014e68:	4623      	mov	r3, r4
 8014e6a:	e6fd      	b.n	8014c68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014e6c:	462a      	mov	r2, r5
 8014e6e:	e706      	b.n	8014c7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014e70:	d502      	bpl.n	8014e78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8014e72:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8014e76:	e7e9      	b.n	8014e4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8014e78:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8014e7c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8014e80:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8014e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e88:	dade      	bge.n	8014e48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8014e8a:	e7f2      	b.n	8014e72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8014e8c:	d502      	bpl.n	8014e94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8014e8e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8014e92:	e7e7      	b.n	8014e64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8014e94:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8014e98:	eee3 4a86 	vfma.f32	s9, s7, s12
 8014e9c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ea4:	dadc      	bge.n	8014e60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8014ea6:	e7f2      	b.n	8014e8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8014ea8:	3d800000 	.word	0x3d800000

08014eac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8014eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eb0:	2714      	movs	r7, #20
 8014eb2:	435f      	muls	r7, r3
 8014eb4:	eb02 0c07 	add.w	ip, r2, r7
 8014eb8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8014ebc:	f115 0e0f 	adds.w	lr, r5, #15
 8014ec0:	f100 80a2 	bmi.w	8015008 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8014ec4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8014ec8:	9c08      	ldr	r4, [sp, #32]
 8014eca:	2614      	movs	r6, #20
 8014ecc:	f8c0 e014 	str.w	lr, [r0, #20]
 8014ed0:	4366      	muls	r6, r4
 8014ed2:	eb02 0806 	add.w	r8, r2, r6
 8014ed6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014eda:	f115 040f 	adds.w	r4, r5, #15
 8014ede:	f100 809f 	bmi.w	8015020 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8014ee2:	1124      	asrs	r4, r4, #4
 8014ee4:	eba4 040e 	sub.w	r4, r4, lr
 8014ee8:	6184      	str	r4, [r0, #24]
 8014eea:	2c00      	cmp	r4, #0
 8014eec:	f000 808a 	beq.w	8015004 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8014ef0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8014ef4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014ef8:	5995      	ldr	r5, [r2, r6]
 8014efa:	eba4 0809 	sub.w	r8, r4, r9
 8014efe:	59d4      	ldr	r4, [r2, r7]
 8014f00:	eba5 0a04 	sub.w	sl, r5, r4
 8014f04:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8014f08:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8014f0c:	fb0e fe05 	mul.w	lr, lr, r5
 8014f10:	fb0a ee19 	mls	lr, sl, r9, lr
 8014f14:	fb08 e404 	mla	r4, r8, r4, lr
 8014f18:	3c01      	subs	r4, #1
 8014f1a:	19a4      	adds	r4, r4, r6
 8014f1c:	f100 808c 	bmi.w	8015038 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8014f20:	fb94 fef6 	sdiv	lr, r4, r6
 8014f24:	fb06 441e 	mls	r4, r6, lr, r4
 8014f28:	f8c0 e000 	str.w	lr, [r0]
 8014f2c:	6104      	str	r4, [r0, #16]
 8014f2e:	2d00      	cmp	r5, #0
 8014f30:	f2c0 8095 	blt.w	801505e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8014f34:	fb95 f4f6 	sdiv	r4, r5, r6
 8014f38:	fb06 5514 	mls	r5, r6, r4, r5
 8014f3c:	6044      	str	r4, [r0, #4]
 8014f3e:	6085      	str	r5, [r0, #8]
 8014f40:	60c6      	str	r6, [r0, #12]
 8014f42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014f46:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8014f4a:	6945      	ldr	r5, [r0, #20]
 8014f4c:	59d2      	ldr	r2, [r2, r7]
 8014f4e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8014f52:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8015080 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8014f56:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8014f5a:	ee07 4a10 	vmov	s14, r4
 8014f5e:	6804      	ldr	r4, [r0, #0]
 8014f60:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8014f64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f68:	ee07 2a90 	vmov	s15, r2
 8014f6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f78:	edd3 6a00 	vldr	s13, [r3]
 8014f7c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014f80:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8014f84:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014f88:	edc0 6a07 	vstr	s13, [r0, #28]
 8014f8c:	edd0 6a01 	vldr	s13, [r0, #4]
 8014f90:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8014f94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014f98:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8014f9c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014fa0:	ed80 6a08 	vstr	s12, [r0, #32]
 8014fa4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8014fa6:	6242      	str	r2, [r0, #36]	@ 0x24
 8014fa8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8014fac:	ed93 6a03 	vldr	s12, [r3, #12]
 8014fb0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014fb4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8014fb8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014fbc:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8014fc0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8014fc4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8014fc8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014fcc:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8014fd0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014fd2:	6302      	str	r2, [r0, #48]	@ 0x30
 8014fd4:	ed93 6a06 	vldr	s12, [r3, #24]
 8014fd8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8014fdc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014fe0:	eeb0 7a46 	vmov.f32	s14, s12
 8014fe4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8014fe8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014fec:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8014ff0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8014ff4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8014ff8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ffc:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8015000:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8015002:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8015004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015008:	2410      	movs	r4, #16
 801500a:	f1c5 0501 	rsb	r5, r5, #1
 801500e:	fb9e fef4 	sdiv	lr, lr, r4
 8015012:	f015 050f 	ands.w	r5, r5, #15
 8015016:	bf18      	it	ne
 8015018:	2501      	movne	r5, #1
 801501a:	ebae 0e05 	sub.w	lr, lr, r5
 801501e:	e753      	b.n	8014ec8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8015020:	f04f 0910 	mov.w	r9, #16
 8015024:	f1c5 0501 	rsb	r5, r5, #1
 8015028:	fb94 f4f9 	sdiv	r4, r4, r9
 801502c:	f015 050f 	ands.w	r5, r5, #15
 8015030:	bf18      	it	ne
 8015032:	2501      	movne	r5, #1
 8015034:	1b64      	subs	r4, r4, r5
 8015036:	e755      	b.n	8014ee4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015038:	4264      	negs	r4, r4
 801503a:	fb94 fef6 	sdiv	lr, r4, r6
 801503e:	f1ce 0800 	rsb	r8, lr, #0
 8015042:	fb06 441e 	mls	r4, r6, lr, r4
 8015046:	f8c0 8000 	str.w	r8, [r0]
 801504a:	6104      	str	r4, [r0, #16]
 801504c:	2c00      	cmp	r4, #0
 801504e:	f43f af6e 	beq.w	8014f2e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8015052:	ea6f 0e0e 	mvn.w	lr, lr
 8015056:	1b34      	subs	r4, r6, r4
 8015058:	f8c0 e000 	str.w	lr, [r0]
 801505c:	e766      	b.n	8014f2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801505e:	426d      	negs	r5, r5
 8015060:	fb95 f4f6 	sdiv	r4, r5, r6
 8015064:	f1c4 0e00 	rsb	lr, r4, #0
 8015068:	fb06 5514 	mls	r5, r6, r4, r5
 801506c:	f8c0 e004 	str.w	lr, [r0, #4]
 8015070:	6085      	str	r5, [r0, #8]
 8015072:	2d00      	cmp	r5, #0
 8015074:	f43f af64 	beq.w	8014f40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015078:	43e4      	mvns	r4, r4
 801507a:	1b75      	subs	r5, r6, r5
 801507c:	6044      	str	r4, [r0, #4]
 801507e:	e75e      	b.n	8014f3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015080:	3d800000 	.word	0x3d800000

08015084 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015084:	4b01      	ldr	r3, [pc, #4]	@ (801508c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015086:	6018      	str	r0, [r3, #0]
 8015088:	4770      	bx	lr
 801508a:	bf00      	nop
 801508c:	20001e54 	.word	0x20001e54

08015090 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015090:	4b06      	ldr	r3, [pc, #24]	@ (80150ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015092:	881a      	ldrh	r2, [r3, #0]
 8015094:	4282      	cmp	r2, r0
 8015096:	d807      	bhi.n	80150a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015098:	4b05      	ldr	r3, [pc, #20]	@ (80150b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	4413      	add	r3, r2
 801509e:	4298      	cmp	r0, r3
 80150a0:	bfac      	ite	ge
 80150a2:	2000      	movge	r0, #0
 80150a4:	2001      	movlt	r0, #1
 80150a6:	4770      	bx	lr
 80150a8:	2000      	movs	r0, #0
 80150aa:	4770      	bx	lr
 80150ac:	20001e74 	.word	0x20001e74
 80150b0:	20001e78 	.word	0x20001e78

080150b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80150b4:	b508      	push	{r3, lr}
 80150b6:	4601      	mov	r1, r0
 80150b8:	f7ff ffea 	bl	8015090 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80150bc:	b118      	cbz	r0, 80150c6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80150be:	4b02      	ldr	r3, [pc, #8]	@ (80150c8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80150c6:	bd08      	pop	{r3, pc}
 80150c8:	20001e58 	.word	0x20001e58

080150cc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80150cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ce:	4c24      	ldr	r4, [pc, #144]	@ (8015160 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80150d0:	6823      	ldr	r3, [r4, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d042      	beq.n	801515c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80150d6:	4a23      	ldr	r2, [pc, #140]	@ (8015164 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80150d8:	4d23      	ldr	r5, [pc, #140]	@ (8015168 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80150da:	8811      	ldrh	r1, [r2, #0]
 80150dc:	f8b5 c000 	ldrh.w	ip, [r5]
 80150e0:	4822      	ldr	r0, [pc, #136]	@ (801516c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80150e2:	4461      	add	r1, ip
 80150e4:	1c4a      	adds	r2, r1, #1
 80150e6:	008f      	lsls	r7, r1, #2
 80150e8:	f022 0201 	bic.w	r2, r2, #1
 80150ec:	19de      	adds	r6, r3, r7
 80150ee:	0412      	lsls	r2, r2, #16
 80150f0:	6006      	str	r6, [r0, #0]
 80150f2:	4e1f      	ldr	r6, [pc, #124]	@ (8015170 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80150f4:	0c12      	lsrs	r2, r2, #16
 80150f6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80150fa:	19da      	adds	r2, r3, r7
 80150fc:	6032      	str	r2, [r6, #0]
 80150fe:	220e      	movs	r2, #14
 8015100:	fb02 f20c 	mul.w	r2, r2, ip
 8015104:	3203      	adds	r2, #3
 8015106:	f022 0203 	bic.w	r2, r2, #3
 801510a:	443a      	add	r2, r7
 801510c:	4f19      	ldr	r7, [pc, #100]	@ (8015174 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801510e:	4413      	add	r3, r2
 8015110:	603b      	str	r3, [r7, #0]
 8015112:	2300      	movs	r3, #0
 8015114:	4f18      	ldr	r7, [pc, #96]	@ (8015178 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015116:	469c      	mov	ip, r3
 8015118:	803b      	strh	r3, [r7, #0]
 801511a:	4f18      	ldr	r7, [pc, #96]	@ (801517c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801511c:	683f      	ldr	r7, [r7, #0]
 801511e:	1aba      	subs	r2, r7, r2
 8015120:	4f17      	ldr	r7, [pc, #92]	@ (8015180 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015122:	603a      	str	r2, [r7, #0]
 8015124:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8015128:	4a16      	ldr	r2, [pc, #88]	@ (8015184 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801512a:	8013      	strh	r3, [r2, #0]
 801512c:	428b      	cmp	r3, r1
 801512e:	d10d      	bne.n	801514c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015130:	882d      	ldrh	r5, [r5, #0]
 8015132:	2300      	movs	r3, #0
 8015134:	6830      	ldr	r0, [r6, #0]
 8015136:	240e      	movs	r4, #14
 8015138:	429d      	cmp	r5, r3
 801513a:	d90f      	bls.n	801515c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801513c:	fb04 0203 	mla	r2, r4, r3, r0
 8015140:	3301      	adds	r3, #1
 8015142:	7b11      	ldrb	r1, [r2, #12]
 8015144:	f36f 1145 	bfc	r1, #5, #1
 8015148:	7311      	strb	r1, [r2, #12]
 801514a:	e7f5      	b.n	8015138 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801514c:	6822      	ldr	r2, [r4, #0]
 801514e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8015152:	6802      	ldr	r2, [r0, #0]
 8015154:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015158:	3301      	adds	r3, #1
 801515a:	e7e7      	b.n	801512c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801515c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801515e:	bf00      	nop
 8015160:	20001e58 	.word	0x20001e58
 8015164:	20001e74 	.word	0x20001e74
 8015168:	20001e78 	.word	0x20001e78
 801516c:	20001e6c 	.word	0x20001e6c
 8015170:	20001e5c 	.word	0x20001e5c
 8015174:	20001e64 	.word	0x20001e64
 8015178:	20001e76 	.word	0x20001e76
 801517c:	20001e60 	.word	0x20001e60
 8015180:	20001e70 	.word	0x20001e70
 8015184:	20001e68 	.word	0x20001e68

08015188 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015188:	4b06      	ldr	r3, [pc, #24]	@ (80151a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	b943      	cbnz	r3, 80151a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801518e:	b139      	cbz	r1, 80151a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015190:	4b05      	ldr	r3, [pc, #20]	@ (80151a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8015192:	801a      	strh	r2, [r3, #0]
 8015194:	4b05      	ldr	r3, [pc, #20]	@ (80151ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8015196:	6019      	str	r1, [r3, #0]
 8015198:	4b05      	ldr	r3, [pc, #20]	@ (80151b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801519a:	6018      	str	r0, [r3, #0]
 801519c:	f7ff bf96 	b.w	80150cc <_ZN8touchgfx6Bitmap10clearCacheEv>
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	20001e64 	.word	0x20001e64
 80151a8:	20001e78 	.word	0x20001e78
 80151ac:	20001e60 	.word	0x20001e60
 80151b0:	20001e58 	.word	0x20001e58

080151b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80151b4:	b470      	push	{r4, r5, r6}
 80151b6:	4c07      	ldr	r4, [pc, #28]	@ (80151d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80151b8:	4605      	mov	r5, r0
 80151ba:	4610      	mov	r0, r2
 80151bc:	9a03      	ldr	r2, [sp, #12]
 80151be:	6826      	ldr	r6, [r4, #0]
 80151c0:	b936      	cbnz	r6, 80151d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80151c2:	6025      	str	r5, [r4, #0]
 80151c4:	4c04      	ldr	r4, [pc, #16]	@ (80151d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80151c6:	8021      	strh	r1, [r4, #0]
 80151c8:	4619      	mov	r1, r3
 80151ca:	bc70      	pop	{r4, r5, r6}
 80151cc:	f7ff bfdc 	b.w	8015188 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80151d0:	bc70      	pop	{r4, r5, r6}
 80151d2:	4770      	bx	lr
 80151d4:	20001e7c 	.word	0x20001e7c
 80151d8:	20001e74 	.word	0x20001e74

080151dc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80151dc:	4a12      	ldr	r2, [pc, #72]	@ (8015228 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80151de:	8803      	ldrh	r3, [r0, #0]
 80151e0:	8812      	ldrh	r2, [r2, #0]
 80151e2:	4293      	cmp	r3, r2
 80151e4:	d207      	bcs.n	80151f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80151e6:	4a11      	ldr	r2, [pc, #68]	@ (801522c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80151e8:	2114      	movs	r1, #20
 80151ea:	6812      	ldr	r2, [r2, #0]
 80151ec:	fb01 2303 	mla	r3, r1, r3, r2
 80151f0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80151f4:	4770      	bx	lr
 80151f6:	490e      	ldr	r1, [pc, #56]	@ (8015230 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80151f8:	8809      	ldrh	r1, [r1, #0]
 80151fa:	4411      	add	r1, r2
 80151fc:	428b      	cmp	r3, r1
 80151fe:	da04      	bge.n	801520a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015200:	1a9b      	subs	r3, r3, r2
 8015202:	4a0c      	ldr	r2, [pc, #48]	@ (8015234 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015204:	210e      	movs	r1, #14
 8015206:	6812      	ldr	r2, [r2, #0]
 8015208:	e7f0      	b.n	80151ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801520a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801520e:	4293      	cmp	r3, r2
 8015210:	d108      	bne.n	8015224 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8015212:	4b09      	ldr	r3, [pc, #36]	@ (8015238 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	b91b      	cbnz	r3, 8015220 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015218:	4b08      	ldr	r3, [pc, #32]	@ (801523c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801521a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801521e:	4770      	bx	lr
 8015220:	4b07      	ldr	r3, [pc, #28]	@ (8015240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015222:	e7fa      	b.n	801521a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015224:	2000      	movs	r0, #0
 8015226:	4770      	bx	lr
 8015228:	20001e74 	.word	0x20001e74
 801522c:	20001e7c 	.word	0x20001e7c
 8015230:	20001e78 	.word	0x20001e78
 8015234:	20001e5c 	.word	0x20001e5c
 8015238:	20001dec 	.word	0x20001dec
 801523c:	20001dee 	.word	0x20001dee
 8015240:	20001df0 	.word	0x20001df0

08015244 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015244:	4a12      	ldr	r2, [pc, #72]	@ (8015290 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015246:	8803      	ldrh	r3, [r0, #0]
 8015248:	8812      	ldrh	r2, [r2, #0]
 801524a:	4293      	cmp	r3, r2
 801524c:	d207      	bcs.n	801525e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801524e:	4a11      	ldr	r2, [pc, #68]	@ (8015294 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015250:	2114      	movs	r1, #20
 8015252:	6812      	ldr	r2, [r2, #0]
 8015254:	fb01 2303 	mla	r3, r1, r3, r2
 8015258:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801525c:	4770      	bx	lr
 801525e:	490e      	ldr	r1, [pc, #56]	@ (8015298 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015260:	8809      	ldrh	r1, [r1, #0]
 8015262:	4411      	add	r1, r2
 8015264:	428b      	cmp	r3, r1
 8015266:	da04      	bge.n	8015272 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015268:	1a9b      	subs	r3, r3, r2
 801526a:	4a0c      	ldr	r2, [pc, #48]	@ (801529c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801526c:	210e      	movs	r1, #14
 801526e:	6812      	ldr	r2, [r2, #0]
 8015270:	e7f0      	b.n	8015254 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8015272:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015276:	4293      	cmp	r3, r2
 8015278:	d108      	bne.n	801528c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801527a:	4b09      	ldr	r3, [pc, #36]	@ (80152a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	b91b      	cbnz	r3, 8015288 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8015280:	4b08      	ldr	r3, [pc, #32]	@ (80152a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015282:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015286:	4770      	bx	lr
 8015288:	4b07      	ldr	r3, [pc, #28]	@ (80152a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801528a:	e7fa      	b.n	8015282 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801528c:	2000      	movs	r0, #0
 801528e:	4770      	bx	lr
 8015290:	20001e74 	.word	0x20001e74
 8015294:	20001e7c 	.word	0x20001e7c
 8015298:	20001e78 	.word	0x20001e78
 801529c:	20001e5c 	.word	0x20001e5c
 80152a0:	20001dec 	.word	0x20001dec
 80152a4:	20001df0 	.word	0x20001df0
 80152a8:	20001dee 	.word	0x20001dee

080152ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80152ac:	4a22      	ldr	r2, [pc, #136]	@ (8015338 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80152ae:	b530      	push	{r4, r5, lr}
 80152b0:	880b      	ldrh	r3, [r1, #0]
 80152b2:	8812      	ldrh	r2, [r2, #0]
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d213      	bcs.n	80152e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80152b8:	4a20      	ldr	r2, [pc, #128]	@ (801533c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80152ba:	2114      	movs	r1, #20
 80152bc:	6812      	ldr	r2, [r2, #0]
 80152be:	fb01 2303 	mla	r3, r1, r3, r2
 80152c2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80152c6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80152ca:	8a1a      	ldrh	r2, [r3, #16]
 80152cc:	8a5b      	ldrh	r3, [r3, #18]
 80152ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80152d2:	8004      	strh	r4, [r0, #0]
 80152d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152d8:	8041      	strh	r1, [r0, #2]
 80152da:	8082      	strh	r2, [r0, #4]
 80152dc:	80c3      	strh	r3, [r0, #6]
 80152de:	e024      	b.n	801532a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80152e0:	4917      	ldr	r1, [pc, #92]	@ (8015340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80152e2:	8809      	ldrh	r1, [r1, #0]
 80152e4:	4411      	add	r1, r2
 80152e6:	428b      	cmp	r3, r1
 80152e8:	da10      	bge.n	801530c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80152ea:	1a9b      	subs	r3, r3, r2
 80152ec:	220e      	movs	r2, #14
 80152ee:	4353      	muls	r3, r2
 80152f0:	4a14      	ldr	r2, [pc, #80]	@ (8015344 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80152f2:	6811      	ldr	r1, [r2, #0]
 80152f4:	18ca      	adds	r2, r1, r3
 80152f6:	5ecd      	ldrsh	r5, [r1, r3]
 80152f8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80152fc:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8015300:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8015304:	8005      	strh	r5, [r0, #0]
 8015306:	8044      	strh	r4, [r0, #2]
 8015308:	8081      	strh	r1, [r0, #4]
 801530a:	e7e7      	b.n	80152dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801530c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015310:	4293      	cmp	r3, r2
 8015312:	d10b      	bne.n	801532c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8015314:	4b0c      	ldr	r3, [pc, #48]	@ (8015348 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8015316:	f9b3 1000 	ldrsh.w	r1, [r3]
 801531a:	4b0c      	ldr	r3, [pc, #48]	@ (801534c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801531c:	8081      	strh	r1, [r0, #4]
 801531e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015322:	2300      	movs	r3, #0
 8015324:	80c2      	strh	r2, [r0, #6]
 8015326:	8003      	strh	r3, [r0, #0]
 8015328:	8043      	strh	r3, [r0, #2]
 801532a:	bd30      	pop	{r4, r5, pc}
 801532c:	2300      	movs	r3, #0
 801532e:	8003      	strh	r3, [r0, #0]
 8015330:	8043      	strh	r3, [r0, #2]
 8015332:	8083      	strh	r3, [r0, #4]
 8015334:	e7d2      	b.n	80152dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015336:	bf00      	nop
 8015338:	20001e74 	.word	0x20001e74
 801533c:	20001e7c 	.word	0x20001e7c
 8015340:	20001e78 	.word	0x20001e78
 8015344:	20001e5c 	.word	0x20001e5c
 8015348:	20001de8 	.word	0x20001de8
 801534c:	20001dea 	.word	0x20001dea

08015350 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8015350:	4a17      	ldr	r2, [pc, #92]	@ (80153b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8015352:	8803      	ldrh	r3, [r0, #0]
 8015354:	8812      	ldrh	r2, [r2, #0]
 8015356:	4293      	cmp	r3, r2
 8015358:	d213      	bcs.n	8015382 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801535a:	4a16      	ldr	r2, [pc, #88]	@ (80153b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801535c:	2114      	movs	r1, #20
 801535e:	6812      	ldr	r2, [r2, #0]
 8015360:	fb01 2303 	mla	r3, r1, r3, r2
 8015364:	8a1a      	ldrh	r2, [r3, #16]
 8015366:	8919      	ldrh	r1, [r3, #8]
 8015368:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801536c:	428a      	cmp	r2, r1
 801536e:	db1d      	blt.n	80153ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8015370:	8a58      	ldrh	r0, [r3, #18]
 8015372:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015376:	895b      	ldrh	r3, [r3, #10]
 8015378:	4298      	cmp	r0, r3
 801537a:	bfac      	ite	ge
 801537c:	2000      	movge	r0, #0
 801537e:	2001      	movlt	r0, #1
 8015380:	4770      	bx	lr
 8015382:	490d      	ldr	r1, [pc, #52]	@ (80153b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8015384:	8809      	ldrh	r1, [r1, #0]
 8015386:	4411      	add	r1, r2
 8015388:	428b      	cmp	r3, r1
 801538a:	da0d      	bge.n	80153a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801538c:	1a9b      	subs	r3, r3, r2
 801538e:	4a0b      	ldr	r2, [pc, #44]	@ (80153bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8015390:	210e      	movs	r1, #14
 8015392:	6812      	ldr	r2, [r2, #0]
 8015394:	fb01 2303 	mla	r3, r1, r3, r2
 8015398:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801539c:	891a      	ldrh	r2, [r3, #8]
 801539e:	4291      	cmp	r1, r2
 80153a0:	db04      	blt.n	80153ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80153a2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80153a6:	e7e6      	b.n	8015376 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80153a8:	2000      	movs	r0, #0
 80153aa:	4770      	bx	lr
 80153ac:	2001      	movs	r0, #1
 80153ae:	4770      	bx	lr
 80153b0:	20001e74 	.word	0x20001e74
 80153b4:	20001e7c 	.word	0x20001e7c
 80153b8:	20001e78 	.word	0x20001e78
 80153bc:	20001e5c 	.word	0x20001e5c

080153c0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80153c0:	4a12      	ldr	r2, [pc, #72]	@ (801540c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80153c2:	8803      	ldrh	r3, [r0, #0]
 80153c4:	8811      	ldrh	r1, [r2, #0]
 80153c6:	428b      	cmp	r3, r1
 80153c8:	d20b      	bcs.n	80153e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80153ca:	4a11      	ldr	r2, [pc, #68]	@ (8015410 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80153cc:	6812      	ldr	r2, [r2, #0]
 80153ce:	b112      	cbz	r2, 80153d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80153d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80153d4:	b9c0      	cbnz	r0, 8015408 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80153d6:	4a0f      	ldr	r2, [pc, #60]	@ (8015414 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80153d8:	6811      	ldr	r1, [r2, #0]
 80153da:	2214      	movs	r2, #20
 80153dc:	4353      	muls	r3, r2
 80153de:	58c8      	ldr	r0, [r1, r3]
 80153e0:	4770      	bx	lr
 80153e2:	4a0d      	ldr	r2, [pc, #52]	@ (8015418 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80153e4:	8812      	ldrh	r2, [r2, #0]
 80153e6:	440a      	add	r2, r1
 80153e8:	4293      	cmp	r3, r2
 80153ea:	da04      	bge.n	80153f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80153ec:	4a08      	ldr	r2, [pc, #32]	@ (8015410 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80153ee:	6812      	ldr	r2, [r2, #0]
 80153f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80153f4:	4770      	bx	lr
 80153f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80153fa:	4293      	cmp	r3, r2
 80153fc:	d103      	bne.n	8015406 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80153fe:	4b07      	ldr	r3, [pc, #28]	@ (801541c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8015404:	4770      	bx	lr
 8015406:	2000      	movs	r0, #0
 8015408:	4770      	bx	lr
 801540a:	bf00      	nop
 801540c:	20001e74 	.word	0x20001e74
 8015410:	20001e58 	.word	0x20001e58
 8015414:	20001e7c 	.word	0x20001e7c
 8015418:	20001e78 	.word	0x20001e78
 801541c:	20001df4 	.word	0x20001df4

08015420 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8015420:	4b24      	ldr	r3, [pc, #144]	@ (80154b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8015422:	8802      	ldrh	r2, [r0, #0]
 8015424:	8818      	ldrh	r0, [r3, #0]
 8015426:	4282      	cmp	r2, r0
 8015428:	d221      	bcs.n	801546e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801542a:	4b23      	ldr	r3, [pc, #140]	@ (80154b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801542c:	6819      	ldr	r1, [r3, #0]
 801542e:	2314      	movs	r3, #20
 8015430:	fb03 1302 	mla	r3, r3, r2, r1
 8015434:	6858      	ldr	r0, [r3, #4]
 8015436:	2800      	cmp	r0, #0
 8015438:	d03a      	beq.n	80154b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801543a:	4920      	ldr	r1, [pc, #128]	@ (80154bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801543c:	6809      	ldr	r1, [r1, #0]
 801543e:	2900      	cmp	r1, #0
 8015440:	d036      	beq.n	80154b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015442:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015446:	2900      	cmp	r1, #0
 8015448:	d032      	beq.n	80154b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801544a:	891a      	ldrh	r2, [r3, #8]
 801544c:	8958      	ldrh	r0, [r3, #10]
 801544e:	4350      	muls	r0, r2
 8015450:	7c5a      	ldrb	r2, [r3, #17]
 8015452:	7cdb      	ldrb	r3, [r3, #19]
 8015454:	0952      	lsrs	r2, r2, #5
 8015456:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801545a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801545e:	2b0b      	cmp	r3, #11
 8015460:	bf18      	it	ne
 8015462:	0040      	lslne	r0, r0, #1
 8015464:	3003      	adds	r0, #3
 8015466:	f020 0003 	bic.w	r0, r0, #3
 801546a:	4408      	add	r0, r1
 801546c:	4770      	bx	lr
 801546e:	4b14      	ldr	r3, [pc, #80]	@ (80154c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8015470:	881b      	ldrh	r3, [r3, #0]
 8015472:	4403      	add	r3, r0
 8015474:	429a      	cmp	r2, r3
 8015476:	da1a      	bge.n	80154ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015478:	4b12      	ldr	r3, [pc, #72]	@ (80154c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801547a:	1a10      	subs	r0, r2, r0
 801547c:	210e      	movs	r1, #14
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	fb01 3000 	mla	r0, r1, r0, r3
 8015484:	7b03      	ldrb	r3, [r0, #12]
 8015486:	f003 031f 	and.w	r3, r3, #31
 801548a:	2b0b      	cmp	r3, #11
 801548c:	d10b      	bne.n	80154a6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801548e:	8903      	ldrh	r3, [r0, #8]
 8015490:	8940      	ldrh	r0, [r0, #10]
 8015492:	4358      	muls	r0, r3
 8015494:	4b09      	ldr	r3, [pc, #36]	@ (80154bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015496:	3003      	adds	r0, #3
 8015498:	6819      	ldr	r1, [r3, #0]
 801549a:	f020 0303 	bic.w	r3, r0, #3
 801549e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80154a2:	4418      	add	r0, r3
 80154a4:	4770      	bx	lr
 80154a6:	2b0d      	cmp	r3, #13
 80154a8:	d101      	bne.n	80154ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80154aa:	300d      	adds	r0, #13
 80154ac:	4770      	bx	lr
 80154ae:	2000      	movs	r0, #0
 80154b0:	4770      	bx	lr
 80154b2:	bf00      	nop
 80154b4:	20001e74 	.word	0x20001e74
 80154b8:	20001e7c 	.word	0x20001e7c
 80154bc:	20001e58 	.word	0x20001e58
 80154c0:	20001e78 	.word	0x20001e78
 80154c4:	20001e5c 	.word	0x20001e5c

080154c8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80154c8:	4b1f      	ldr	r3, [pc, #124]	@ (8015548 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80154ca:	b510      	push	{r4, lr}
 80154cc:	8802      	ldrh	r2, [r0, #0]
 80154ce:	881b      	ldrh	r3, [r3, #0]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d21a      	bcs.n	801550a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80154d4:	4b1d      	ldr	r3, [pc, #116]	@ (801554c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80154d6:	2114      	movs	r1, #20
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	fb01 3102 	mla	r1, r1, r2, r3
 80154de:	7c4b      	ldrb	r3, [r1, #17]
 80154e0:	0958      	lsrs	r0, r3, #5
 80154e2:	7ccb      	ldrb	r3, [r1, #19]
 80154e4:	491a      	ldr	r1, [pc, #104]	@ (8015550 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 80154e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80154ea:	6809      	ldr	r1, [r1, #0]
 80154ec:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 80154f0:	b2d8      	uxtb	r0, r3
 80154f2:	b149      	cbz	r1, 8015508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80154f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80154f8:	b132      	cbz	r2, 8015508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80154fa:	2b0e      	cmp	r3, #14
 80154fc:	d021      	beq.n	8015542 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80154fe:	280f      	cmp	r0, #15
 8015500:	d01d      	beq.n	801553e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8015502:	2810      	cmp	r0, #16
 8015504:	bf08      	it	eq
 8015506:	2002      	moveq	r0, #2
 8015508:	bd10      	pop	{r4, pc}
 801550a:	4912      	ldr	r1, [pc, #72]	@ (8015554 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801550c:	8809      	ldrh	r1, [r1, #0]
 801550e:	4419      	add	r1, r3
 8015510:	428a      	cmp	r2, r1
 8015512:	da09      	bge.n	8015528 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8015514:	1ad3      	subs	r3, r2, r3
 8015516:	4a10      	ldr	r2, [pc, #64]	@ (8015558 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8015518:	210e      	movs	r1, #14
 801551a:	6812      	ldr	r2, [r2, #0]
 801551c:	fb01 2303 	mla	r3, r1, r3, r2
 8015520:	7b18      	ldrb	r0, [r3, #12]
 8015522:	f000 001f 	and.w	r0, r0, #31
 8015526:	e7ef      	b.n	8015508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015528:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801552c:	429a      	cmp	r2, r3
 801552e:	d108      	bne.n	8015542 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8015530:	f7f6 f8bc 	bl	800b6ac <_ZN8touchgfx3HAL3lcdEv>
 8015534:	6803      	ldr	r3, [r0, #0]
 8015536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801553c:	4718      	bx	r3
 801553e:	2001      	movs	r0, #1
 8015540:	e7e2      	b.n	8015508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015542:	2000      	movs	r0, #0
 8015544:	e7e0      	b.n	8015508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015546:	bf00      	nop
 8015548:	20001e74 	.word	0x20001e74
 801554c:	20001e7c 	.word	0x20001e7c
 8015550:	20001e58 	.word	0x20001e58
 8015554:	20001e78 	.word	0x20001e78
 8015558:	20001e5c 	.word	0x20001e5c

0801555c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801555c:	2010      	movs	r0, #16
 801555e:	4770      	bx	lr

08015560 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8015560:	2000      	movs	r0, #0
 8015562:	4770      	bx	lr

08015564 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8015564:	4b02      	ldr	r3, [pc, #8]	@ (8015570 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8015566:	8818      	ldrh	r0, [r3, #0]
 8015568:	0040      	lsls	r0, r0, #1
 801556a:	b280      	uxth	r0, r0
 801556c:	4770      	bx	lr
 801556e:	bf00      	nop
 8015570:	20001dee 	.word	0x20001dee

08015574 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015574:	2bff      	cmp	r3, #255	@ 0xff
 8015576:	d05e      	beq.n	8015636 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 8015578:	2a0b      	cmp	r2, #11
 801557a:	d058      	beq.n	801562e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801557c:	d80e      	bhi.n	801559c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801557e:	2a03      	cmp	r2, #3
 8015580:	d04d      	beq.n	801561e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 8015582:	d804      	bhi.n	801558e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015584:	2a01      	cmp	r2, #1
 8015586:	d04c      	beq.n	8015622 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 8015588:	d94d      	bls.n	8015626 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801558a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801558c:	e031      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801558e:	2a09      	cmp	r2, #9
 8015590:	d04d      	beq.n	801562e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8015592:	d84a      	bhi.n	801562a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8015594:	2a08      	cmp	r2, #8
 8015596:	d048      	beq.n	801562a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8015598:	2300      	movs	r3, #0
 801559a:	e02a      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801559c:	2a2f      	cmp	r2, #47	@ 0x2f
 801559e:	d02c      	beq.n	80155fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80155a0:	d811      	bhi.n	80155c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80155a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80155a4:	d018      	beq.n	80155d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 80155a6:	d831      	bhi.n	801560c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 80155a8:	2a2c      	cmp	r2, #44	@ 0x2c
 80155aa:	d1f5      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80155ac:	684a      	ldr	r2, [r1, #4]
 80155ae:	7813      	ldrb	r3, [r2, #0]
 80155b0:	7852      	ldrb	r2, [r2, #1]
 80155b2:	2a00      	cmp	r2, #0
 80155b4:	d1f0      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80155b6:	2b01      	cmp	r3, #1
 80155b8:	d01d      	beq.n	80155f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d02d      	beq.n	801561a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80155be:	2b02      	cmp	r3, #2
 80155c0:	d1ea      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80155c2:	68c3      	ldr	r3, [r0, #12]
 80155c4:	e015      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80155c6:	2a31      	cmp	r2, #49	@ 0x31
 80155c8:	d004      	beq.n	80155d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 80155ca:	d332      	bcc.n	8015632 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80155cc:	2a32      	cmp	r2, #50	@ 0x32
 80155ce:	d030      	beq.n	8015632 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80155d0:	2a33      	cmp	r2, #51	@ 0x33
 80155d2:	d1e1      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80155d4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80155d6:	e00c      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80155d8:	684a      	ldr	r2, [r1, #4]
 80155da:	7813      	ldrb	r3, [r2, #0]
 80155dc:	7852      	ldrb	r2, [r2, #1]
 80155de:	2a00      	cmp	r2, #0
 80155e0:	d1da      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80155e2:	2b01      	cmp	r3, #1
 80155e4:	d004      	beq.n	80155f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 80155e6:	d30f      	bcc.n	8015608 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 80155e8:	2b02      	cmp	r3, #2
 80155ea:	d1d5      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80155ec:	6943      	ldr	r3, [r0, #20]
 80155ee:	e000      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80155f0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80155f2:	4618      	mov	r0, r3
 80155f4:	4770      	bx	lr
 80155f6:	69c3      	ldr	r3, [r0, #28]
 80155f8:	e7fb      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80155fa:	684b      	ldr	r3, [r1, #4]
 80155fc:	781a      	ldrb	r2, [r3, #0]
 80155fe:	785b      	ldrb	r3, [r3, #1]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d1c9      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015604:	2a00      	cmp	r2, #0
 8015606:	d1f4      	bne.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015608:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801560a:	e7f2      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801560c:	684b      	ldr	r3, [r1, #4]
 801560e:	781a      	ldrb	r2, [r3, #0]
 8015610:	785b      	ldrb	r3, [r3, #1]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d1c0      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015616:	2a00      	cmp	r2, #0
 8015618:	d1eb      	bne.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801561a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801561c:	e7e9      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801561e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015620:	e7e7      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015622:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8015624:	e7e5      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015626:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8015628:	e7e3      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801562a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801562c:	e7e1      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801562e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8015630:	e7df      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015632:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8015634:	e7dd      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015636:	2a0b      	cmp	r2, #11
 8015638:	d059      	beq.n	80156ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801563a:	d80e      	bhi.n	801565a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801563c:	2a03      	cmp	r2, #3
 801563e:	d050      	beq.n	80156e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8015640:	d804      	bhi.n	801564c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8015642:	2a01      	cmp	r2, #1
 8015644:	d04f      	beq.n	80156e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8015646:	d950      	bls.n	80156ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8015648:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801564a:	e7d2      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801564c:	2a09      	cmp	r2, #9
 801564e:	d04e      	beq.n	80156ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8015650:	d801      	bhi.n	8015656 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8015652:	2a08      	cmp	r2, #8
 8015654:	d1a0      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015656:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8015658:	e7cb      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801565a:	2a2f      	cmp	r2, #47	@ 0x2f
 801565c:	d02d      	beq.n	80156ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801565e:	d811      	bhi.n	8015684 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8015660:	2a2d      	cmp	r2, #45	@ 0x2d
 8015662:	d018      	beq.n	8015696 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8015664:	d833      	bhi.n	80156ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8015666:	2a2c      	cmp	r2, #44	@ 0x2c
 8015668:	d196      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801566a:	684a      	ldr	r2, [r1, #4]
 801566c:	7813      	ldrb	r3, [r2, #0]
 801566e:	7852      	ldrb	r2, [r2, #1]
 8015670:	2a00      	cmp	r2, #0
 8015672:	d191      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015674:	2b01      	cmp	r3, #1
 8015676:	d01e      	beq.n	80156b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8015678:	2b00      	cmp	r3, #0
 801567a:	d030      	beq.n	80156de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801567c:	2b02      	cmp	r3, #2
 801567e:	d18b      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015680:	6903      	ldr	r3, [r0, #16]
 8015682:	e7b6      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015684:	2a31      	cmp	r2, #49	@ 0x31
 8015686:	d004      	beq.n	8015692 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8015688:	d333      	bcc.n	80156f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801568a:	2a32      	cmp	r2, #50	@ 0x32
 801568c:	d031      	beq.n	80156f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801568e:	2a33      	cmp	r2, #51	@ 0x33
 8015690:	d182      	bne.n	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015692:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8015694:	e7ad      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015696:	684a      	ldr	r2, [r1, #4]
 8015698:	7813      	ldrb	r3, [r2, #0]
 801569a:	7852      	ldrb	r2, [r2, #1]
 801569c:	2a00      	cmp	r2, #0
 801569e:	f47f af7b 	bne.w	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80156a2:	2b01      	cmp	r3, #1
 80156a4:	d005      	beq.n	80156b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80156a6:	d310      	bcc.n	80156ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 80156a8:	2b02      	cmp	r3, #2
 80156aa:	f47f af75 	bne.w	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80156ae:	6983      	ldr	r3, [r0, #24]
 80156b0:	e79f      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156b2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80156b4:	e79d      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156b6:	6a03      	ldr	r3, [r0, #32]
 80156b8:	e79b      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156ba:	684b      	ldr	r3, [r1, #4]
 80156bc:	781a      	ldrb	r2, [r3, #0]
 80156be:	785b      	ldrb	r3, [r3, #1]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	f47f af69 	bne.w	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80156c6:	2a00      	cmp	r2, #0
 80156c8:	d193      	bne.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156ca:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80156cc:	e791      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156ce:	684b      	ldr	r3, [r1, #4]
 80156d0:	781a      	ldrb	r2, [r3, #0]
 80156d2:	785b      	ldrb	r3, [r3, #1]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	f47f af5f 	bne.w	8015598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80156da:	2a00      	cmp	r2, #0
 80156dc:	d189      	bne.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80156e0:	e787      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156e2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80156e4:	e785      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156e6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80156e8:	e783      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156ea:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80156ec:	e781      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156ee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80156f0:	e77f      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80156f2:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80156f4:	e77d      	b.n	80155f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

080156f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80156f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156fa:	b087      	sub	sp, #28
 80156fc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80156fe:	9205      	str	r2, [sp, #20]
 8015700:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015704:	9101      	str	r1, [sp, #4]
 8015706:	9202      	str	r2, [sp, #8]
 8015708:	6841      	ldr	r1, [r0, #4]
 801570a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801570e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8015712:	fb01 2404 	mla	r4, r1, r4, r2
 8015716:	6802      	ldr	r2, [r0, #0]
 8015718:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801571c:	f8de 2000 	ldr.w	r2, [lr]
 8015720:	9203      	str	r2, [sp, #12]
 8015722:	f8de 2004 	ldr.w	r2, [lr, #4]
 8015726:	3204      	adds	r2, #4
 8015728:	9204      	str	r2, [sp, #16]
 801572a:	9a02      	ldr	r2, [sp, #8]
 801572c:	43d6      	mvns	r6, r2
 801572e:	b2f6      	uxtb	r6, r6
 8015730:	9a01      	ldr	r2, [sp, #4]
 8015732:	2a00      	cmp	r2, #0
 8015734:	dc03      	bgt.n	801573e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015736:	9a05      	ldr	r2, [sp, #20]
 8015738:	2a00      	cmp	r2, #0
 801573a:	f340 8129 	ble.w	8015990 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801573e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015740:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8015744:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015748:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801574a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801574e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015752:	2b00      	cmp	r3, #0
 8015754:	dd0e      	ble.n	8015774 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015756:	1408      	asrs	r0, r1, #16
 8015758:	d405      	bmi.n	8015766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801575a:	4560      	cmp	r0, ip
 801575c:	da03      	bge.n	8015766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801575e:	1410      	asrs	r0, r2, #16
 8015760:	d401      	bmi.n	8015766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015762:	42b8      	cmp	r0, r7
 8015764:	db07      	blt.n	8015776 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015766:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015768:	3b01      	subs	r3, #1
 801576a:	3402      	adds	r4, #2
 801576c:	4401      	add	r1, r0
 801576e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015770:	4402      	add	r2, r0
 8015772:	e7ee      	b.n	8015752 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015774:	d071      	beq.n	801585a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015776:	1e58      	subs	r0, r3, #1
 8015778:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801577a:	fb05 1500 	mla	r5, r5, r0, r1
 801577e:	142d      	asrs	r5, r5, #16
 8015780:	d45f      	bmi.n	8015842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8015782:	4565      	cmp	r5, ip
 8015784:	da5d      	bge.n	8015842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8015786:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8015788:	fb05 2000 	mla	r0, r5, r0, r2
 801578c:	1400      	asrs	r0, r0, #16
 801578e:	d458      	bmi.n	8015842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8015790:	42b8      	cmp	r0, r7
 8015792:	da56      	bge.n	8015842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8015794:	4699      	mov	r9, r3
 8015796:	46a2      	mov	sl, r4
 8015798:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801579c:	f1b9 0f00 	cmp.w	r9, #0
 80157a0:	dd57      	ble.n	8015852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80157a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80157a6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80157aa:	9803      	ldr	r0, [sp, #12]
 80157ac:	140d      	asrs	r5, r1, #16
 80157ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80157b2:	fb07 000c 	mla	r0, r7, ip, r0
 80157b6:	5d40      	ldrb	r0, [r0, r5]
 80157b8:	9d04      	ldr	r5, [sp, #16]
 80157ba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80157be:	f8ba 5000 	ldrh.w	r5, [sl]
 80157c2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80157c6:	122f      	asrs	r7, r5, #8
 80157c8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80157cc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80157d0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80157d4:	00ed      	lsls	r5, r5, #3
 80157d6:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 80157da:	fb17 f706 	smulbb	r7, r7, r6
 80157de:	b2ed      	uxtb	r5, r5
 80157e0:	fb18 f806 	smulbb	r8, r8, r6
 80157e4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80157e8:	10c7      	asrs	r7, r0, #3
 80157ea:	fb15 f506 	smulbb	r5, r5, r6
 80157ee:	00c0      	lsls	r0, r0, #3
 80157f0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80157f4:	fa1f fc8c 	uxth.w	ip, ip
 80157f8:	b2c0      	uxtb	r0, r0
 80157fa:	fb07 870b 	mla	r7, r7, fp, r8
 80157fe:	fb00 500b 	mla	r0, r0, fp, r5
 8015802:	f10c 0501 	add.w	r5, ip, #1
 8015806:	b2bf      	uxth	r7, r7
 8015808:	b280      	uxth	r0, r0
 801580a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801580e:	f107 0801 	add.w	r8, r7, #1
 8015812:	1c45      	adds	r5, r0, #1
 8015814:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8015818:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801581c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8015820:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015822:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015826:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801582a:	4401      	add	r1, r0
 801582c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8015830:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015832:	ea45 0c0c 	orr.w	ip, r5, ip
 8015836:	4402      	add	r2, r0
 8015838:	ea4c 0c08 	orr.w	ip, ip, r8
 801583c:	f82a cb02 	strh.w	ip, [sl], #2
 8015840:	e7ac      	b.n	801579c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8015842:	f04f 0800 	mov.w	r8, #0
 8015846:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801584a:	eb03 0008 	add.w	r0, r3, r8
 801584e:	2800      	cmp	r0, #0
 8015850:	dc41      	bgt.n	80158d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8015852:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015856:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801585a:	9b01      	ldr	r3, [sp, #4]
 801585c:	2b00      	cmp	r3, #0
 801585e:	f340 8097 	ble.w	8015990 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015866:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015868:	ee30 0a04 	vadd.f32	s0, s0, s8
 801586c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015870:	eef0 6a62 	vmov.f32	s13, s5
 8015874:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015878:	ee31 1a05 	vadd.f32	s2, s2, s10
 801587c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015880:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 8015884:	eef0 6a43 	vmov.f32	s13, s6
 8015888:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801588c:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8015890:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015894:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015898:	ee77 2a62 	vsub.f32	s5, s14, s5
 801589c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80158a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80158a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80158a8:	ee12 2a90 	vmov	r2, s5
 80158ac:	eef0 2a47 	vmov.f32	s5, s14
 80158b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80158b4:	ee13 2a10 	vmov	r2, s6
 80158b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80158ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80158bc:	eeb0 3a67 	vmov.f32	s6, s15
 80158c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80158c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80158c6:	9b01      	ldr	r3, [sp, #4]
 80158c8:	9a05      	ldr	r2, [sp, #20]
 80158ca:	3b01      	subs	r3, #1
 80158cc:	9301      	str	r3, [sp, #4]
 80158ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80158d0:	bf08      	it	eq
 80158d2:	4613      	moveq	r3, r2
 80158d4:	e72c      	b.n	8015730 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80158d6:	140f      	asrs	r7, r1, #16
 80158d8:	d453      	bmi.n	8015982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80158da:	f8de 5008 	ldr.w	r5, [lr, #8]
 80158de:	42bd      	cmp	r5, r7
 80158e0:	dd4f      	ble.n	8015982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80158e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80158e6:	d44c      	bmi.n	8015982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80158e8:	f8de 000c 	ldr.w	r0, [lr, #12]
 80158ec:	4560      	cmp	r0, ip
 80158ee:	dd48      	ble.n	8015982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80158f0:	9803      	ldr	r0, [sp, #12]
 80158f2:	b22d      	sxth	r5, r5
 80158f4:	fb0c 0505 	mla	r5, ip, r5, r0
 80158f8:	5de8      	ldrb	r0, [r5, r7]
 80158fa:	9d04      	ldr	r5, [sp, #16]
 80158fc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8015900:	f06f 0501 	mvn.w	r5, #1
 8015904:	fb05 fb08 	mul.w	fp, r5, r8
 8015908:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801590c:	f834 500b 	ldrh.w	r5, [r4, fp]
 8015910:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8015914:	122f      	asrs	r7, r5, #8
 8015916:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801591a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801591e:	00ed      	lsls	r5, r5, #3
 8015920:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8015924:	fb17 f706 	smulbb	r7, r7, r6
 8015928:	b2ed      	uxtb	r5, r5
 801592a:	fb19 f906 	smulbb	r9, r9, r6
 801592e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8015932:	10c7      	asrs	r7, r0, #3
 8015934:	fb15 f506 	smulbb	r5, r5, r6
 8015938:	00c0      	lsls	r0, r0, #3
 801593a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801593e:	fa1f fc8c 	uxth.w	ip, ip
 8015942:	b2c0      	uxtb	r0, r0
 8015944:	fb07 970a 	mla	r7, r7, sl, r9
 8015948:	fb00 500a 	mla	r0, r0, sl, r5
 801594c:	f10c 0501 	add.w	r5, ip, #1
 8015950:	b2bf      	uxth	r7, r7
 8015952:	b280      	uxth	r0, r0
 8015954:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8015958:	f107 0901 	add.w	r9, r7, #1
 801595c:	1c45      	adds	r5, r0, #1
 801595e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8015962:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8015966:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801596a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801596e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015972:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8015976:	ea45 0c0c 	orr.w	ip, r5, ip
 801597a:	ea4c 0c09 	orr.w	ip, ip, r9
 801597e:	f824 c00b 	strh.w	ip, [r4, fp]
 8015982:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015984:	f108 38ff 	add.w	r8, r8, #4294967295
 8015988:	4401      	add	r1, r0
 801598a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801598c:	4402      	add	r2, r0
 801598e:	e75c      	b.n	801584a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015990:	b007      	add	sp, #28
 8015992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015996 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801599a:	b085      	sub	sp, #20
 801599c:	4693      	mov	fp, r2
 801599e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80159a2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80159a4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80159a6:	6870      	ldr	r0, [r6, #4]
 80159a8:	9100      	str	r1, [sp, #0]
 80159aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80159ae:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 80159b2:	fb00 2404 	mla	r4, r0, r4, r2
 80159b6:	6832      	ldr	r2, [r6, #0]
 80159b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80159bc:	682a      	ldr	r2, [r5, #0]
 80159be:	9201      	str	r2, [sp, #4]
 80159c0:	686a      	ldr	r2, [r5, #4]
 80159c2:	3204      	adds	r2, #4
 80159c4:	9202      	str	r2, [sp, #8]
 80159c6:	9a00      	ldr	r2, [sp, #0]
 80159c8:	2a00      	cmp	r2, #0
 80159ca:	dc03      	bgt.n	80159d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80159cc:	f1bb 0f00 	cmp.w	fp, #0
 80159d0:	f340 80a0 	ble.w	8015b14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80159d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80159d6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80159da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80159de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80159e0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80159e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	dd0c      	ble.n	8015a06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80159ec:	1406      	asrs	r6, r0, #16
 80159ee:	d405      	bmi.n	80159fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80159f0:	454e      	cmp	r6, r9
 80159f2:	da03      	bge.n	80159fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80159f4:	1416      	asrs	r6, r2, #16
 80159f6:	d401      	bmi.n	80159fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80159f8:	4546      	cmp	r6, r8
 80159fa:	db05      	blt.n	8015a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80159fc:	4470      	add	r0, lr
 80159fe:	4462      	add	r2, ip
 8015a00:	3b01      	subs	r3, #1
 8015a02:	3402      	adds	r4, #2
 8015a04:	e7f0      	b.n	80159e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8015a06:	d00f      	beq.n	8015a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8015a08:	1e5e      	subs	r6, r3, #1
 8015a0a:	fb0e 0706 	mla	r7, lr, r6, r0
 8015a0e:	143f      	asrs	r7, r7, #16
 8015a10:	d541      	bpl.n	8015a96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8015a12:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8015a16:	4698      	mov	r8, r3
 8015a18:	9603      	str	r6, [sp, #12]
 8015a1a:	f1b8 0f00 	cmp.w	r8, #0
 8015a1e:	dc59      	bgt.n	8015ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8015a20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015a28:	9b00      	ldr	r3, [sp, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	dd72      	ble.n	8015b14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8015a2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015a38:	eeb0 6a62 	vmov.f32	s12, s5
 8015a3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015a40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015a44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a48:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8015a4c:	eeb0 6a43 	vmov.f32	s12, s6
 8015a50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a54:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8015a58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015a5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015a60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015a64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015a68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015a6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015a70:	ee12 2a90 	vmov	r2, s5
 8015a74:	eef0 2a47 	vmov.f32	s5, s14
 8015a78:	fb92 fef3 	sdiv	lr, r2, r3
 8015a7c:	ee13 2a10 	vmov	r2, s6
 8015a80:	eeb0 3a67 	vmov.f32	s6, s15
 8015a84:	fb92 fcf3 	sdiv	ip, r2, r3
 8015a88:	9b00      	ldr	r3, [sp, #0]
 8015a8a:	3b01      	subs	r3, #1
 8015a8c:	9300      	str	r3, [sp, #0]
 8015a8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a90:	bf08      	it	eq
 8015a92:	465b      	moveq	r3, fp
 8015a94:	e797      	b.n	80159c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8015a96:	454f      	cmp	r7, r9
 8015a98:	dabb      	bge.n	8015a12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015a9a:	fb0c 2606 	mla	r6, ip, r6, r2
 8015a9e:	1436      	asrs	r6, r6, #16
 8015aa0:	d4b7      	bmi.n	8015a12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015aa2:	4546      	cmp	r6, r8
 8015aa4:	dab5      	bge.n	8015a12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015aa6:	461e      	mov	r6, r3
 8015aa8:	46a0      	mov	r8, r4
 8015aaa:	2e00      	cmp	r6, #0
 8015aac:	ddb8      	ble.n	8015a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8015aae:	1417      	asrs	r7, r2, #16
 8015ab0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8015ab4:	9901      	ldr	r1, [sp, #4]
 8015ab6:	ea4f 4920 	mov.w	r9, r0, asr #16
 8015aba:	4462      	add	r2, ip
 8015abc:	4470      	add	r0, lr
 8015abe:	fb0a 1707 	mla	r7, sl, r7, r1
 8015ac2:	9902      	ldr	r1, [sp, #8]
 8015ac4:	3e01      	subs	r6, #1
 8015ac6:	f817 7009 	ldrb.w	r7, [r7, r9]
 8015aca:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8015ace:	f828 7b02 	strh.w	r7, [r8], #2
 8015ad2:	e7ea      	b.n	8015aaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8015ad4:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015ad8:	d417      	bmi.n	8015b0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015ada:	68ae      	ldr	r6, [r5, #8]
 8015adc:	454e      	cmp	r6, r9
 8015ade:	dd14      	ble.n	8015b0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015ae0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015ae4:	d411      	bmi.n	8015b0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015ae6:	68ef      	ldr	r7, [r5, #12]
 8015ae8:	4557      	cmp	r7, sl
 8015aea:	dd0e      	ble.n	8015b0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015aec:	9f01      	ldr	r7, [sp, #4]
 8015aee:	b236      	sxth	r6, r6
 8015af0:	f06f 0101 	mvn.w	r1, #1
 8015af4:	fb0a 7606 	mla	r6, sl, r6, r7
 8015af8:	9f02      	ldr	r7, [sp, #8]
 8015afa:	f816 6009 	ldrb.w	r6, [r6, r9]
 8015afe:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8015b02:	fb01 f608 	mul.w	r6, r1, r8
 8015b06:	9903      	ldr	r1, [sp, #12]
 8015b08:	538f      	strh	r7, [r1, r6]
 8015b0a:	4470      	add	r0, lr
 8015b0c:	4462      	add	r2, ip
 8015b0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015b12:	e782      	b.n	8015a1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015b14:	b005      	add	sp, #20
 8015b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015b1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b1e:	b087      	sub	sp, #28
 8015b20:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8015b22:	9205      	str	r2, [sp, #20]
 8015b24:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015b28:	9102      	str	r1, [sp, #8]
 8015b2a:	9203      	str	r2, [sp, #12]
 8015b2c:	6861      	ldr	r1, [r4, #4]
 8015b2e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8015b32:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8015b36:	fb01 2000 	mla	r0, r1, r0, r2
 8015b3a:	6822      	ldr	r2, [r4, #0]
 8015b3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015b40:	9200      	str	r2, [sp, #0]
 8015b42:	f8dc 2000 	ldr.w	r2, [ip]
 8015b46:	9204      	str	r2, [sp, #16]
 8015b48:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015b4c:	3204      	adds	r2, #4
 8015b4e:	9201      	str	r2, [sp, #4]
 8015b50:	9a03      	ldr	r2, [sp, #12]
 8015b52:	43d5      	mvns	r5, r2
 8015b54:	b2ed      	uxtb	r5, r5
 8015b56:	9a02      	ldr	r2, [sp, #8]
 8015b58:	2a00      	cmp	r2, #0
 8015b5a:	dc03      	bgt.n	8015b64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015b5c:	9a05      	ldr	r2, [sp, #20]
 8015b5e:	2a00      	cmp	r2, #0
 8015b60:	f340 812c 	ble.w	8015dbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8015b64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b66:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015b6a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015b6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015b70:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015b74:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	dd10      	ble.n	8015b9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015b7c:	140c      	asrs	r4, r1, #16
 8015b7e:	d405      	bmi.n	8015b8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b80:	4574      	cmp	r4, lr
 8015b82:	da03      	bge.n	8015b8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b84:	1414      	asrs	r4, r2, #16
 8015b86:	d401      	bmi.n	8015b8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b88:	42bc      	cmp	r4, r7
 8015b8a:	db09      	blt.n	8015ba0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8015b8c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015b8e:	3b01      	subs	r3, #1
 8015b90:	9800      	ldr	r0, [sp, #0]
 8015b92:	4421      	add	r1, r4
 8015b94:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8015b96:	3002      	adds	r0, #2
 8015b98:	4422      	add	r2, r4
 8015b9a:	9000      	str	r0, [sp, #0]
 8015b9c:	e7ec      	b.n	8015b78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015b9e:	d071      	beq.n	8015c84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015ba0:	1e5c      	subs	r4, r3, #1
 8015ba2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015ba4:	fb06 1604 	mla	r6, r6, r4, r1
 8015ba8:	1436      	asrs	r6, r6, #16
 8015baa:	d45d      	bmi.n	8015c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015bac:	4576      	cmp	r6, lr
 8015bae:	da5b      	bge.n	8015c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015bb0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8015bb2:	fb06 2404 	mla	r4, r6, r4, r2
 8015bb6:	1424      	asrs	r4, r4, #16
 8015bb8:	d456      	bmi.n	8015c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015bba:	42bc      	cmp	r4, r7
 8015bbc:	da54      	bge.n	8015c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015bbe:	4698      	mov	r8, r3
 8015bc0:	f8dd 9000 	ldr.w	r9, [sp]
 8015bc4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8015bc8:	f1b8 0f00 	cmp.w	r8, #0
 8015bcc:	dd54      	ble.n	8015c78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015bce:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8015bd2:	1414      	asrs	r4, r2, #16
 8015bd4:	9804      	ldr	r0, [sp, #16]
 8015bd6:	140e      	asrs	r6, r1, #16
 8015bd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8015bdc:	fb07 0404 	mla	r4, r7, r4, r0
 8015be0:	9801      	ldr	r0, [sp, #4]
 8015be2:	f814 e006 	ldrb.w	lr, [r4, r6]
 8015be6:	f8b9 4000 	ldrh.w	r4, [r9]
 8015bea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015bee:	1227      	asrs	r7, r4, #8
 8015bf0:	eb00 0b0e 	add.w	fp, r0, lr
 8015bf4:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8015bf8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8015bfc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015bfe:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8015c02:	f89b b001 	ldrb.w	fp, [fp, #1]
 8015c06:	4401      	add	r1, r0
 8015c08:	fb16 f60a 	smulbb	r6, r6, sl
 8015c0c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015c0e:	fb1b fb0a 	smulbb	fp, fp, sl
 8015c12:	fb07 6705 	mla	r7, r7, r5, r6
 8015c16:	10e6      	asrs	r6, r4, #3
 8015c18:	00e4      	lsls	r4, r4, #3
 8015c1a:	4402      	add	r2, r0
 8015c1c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015c20:	b2bf      	uxth	r7, r7
 8015c22:	b2e4      	uxtb	r4, r4
 8015c24:	fb06 b605 	mla	r6, r6, r5, fp
 8015c28:	fb14 f405 	smulbb	r4, r4, r5
 8015c2c:	b2b6      	uxth	r6, r6
 8015c2e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8015c32:	1c7c      	adds	r4, r7, #1
 8015c34:	f106 0b01 	add.w	fp, r6, #1
 8015c38:	fa1f fe8e 	uxth.w	lr, lr
 8015c3c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8015c40:	f10e 0401 	add.w	r4, lr, #1
 8015c44:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8015c48:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8015c4c:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8015c50:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015c54:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8015c58:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8015c5c:	4327      	orrs	r7, r4
 8015c5e:	ea47 070b 	orr.w	r7, r7, fp
 8015c62:	f829 7b02 	strh.w	r7, [r9], #2
 8015c66:	e7af      	b.n	8015bc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8015c68:	f04f 0e00 	mov.w	lr, #0
 8015c6c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8015c70:	eb03 040e 	add.w	r4, r3, lr
 8015c74:	2c00      	cmp	r4, #0
 8015c76:	dc43      	bgt.n	8015d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8015c78:	9a00      	ldr	r2, [sp, #0]
 8015c7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015c7e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015c82:	9300      	str	r3, [sp, #0]
 8015c84:	9b02      	ldr	r3, [sp, #8]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	f340 8098 	ble.w	8015dbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8015c8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015c90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015c92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015c96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015c9a:	eef0 6a62 	vmov.f32	s13, s5
 8015c9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015ca2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015ca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015caa:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 8015cae:	eef0 6a43 	vmov.f32	s13, s6
 8015cb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015cb6:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8015cba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015cbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015cc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015cc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015cca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015cce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015cd2:	ee12 2a90 	vmov	r2, s5
 8015cd6:	eef0 2a47 	vmov.f32	s5, s14
 8015cda:	fb92 f3f3 	sdiv	r3, r2, r3
 8015cde:	ee13 2a10 	vmov	r2, s6
 8015ce2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015ce4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ce6:	eeb0 3a67 	vmov.f32	s6, s15
 8015cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8015cee:	9314      	str	r3, [sp, #80]	@ 0x50
 8015cf0:	9b02      	ldr	r3, [sp, #8]
 8015cf2:	9a05      	ldr	r2, [sp, #20]
 8015cf4:	3b01      	subs	r3, #1
 8015cf6:	9302      	str	r3, [sp, #8]
 8015cf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015cfa:	bf08      	it	eq
 8015cfc:	4613      	moveq	r3, r2
 8015cfe:	e72a      	b.n	8015b56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015d00:	140f      	asrs	r7, r1, #16
 8015d02:	d454      	bmi.n	8015dae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015d04:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015d08:	42be      	cmp	r6, r7
 8015d0a:	dd50      	ble.n	8015dae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015d0c:	ea5f 4822 	movs.w	r8, r2, asr #16
 8015d10:	d44d      	bmi.n	8015dae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015d12:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8015d16:	4544      	cmp	r4, r8
 8015d18:	dd49      	ble.n	8015dae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015d1a:	9c04      	ldr	r4, [sp, #16]
 8015d1c:	b236      	sxth	r6, r6
 8015d1e:	f06f 0001 	mvn.w	r0, #1
 8015d22:	fb08 4606 	mla	r6, r8, r6, r4
 8015d26:	9c01      	ldr	r4, [sp, #4]
 8015d28:	fb00 fa0e 	mul.w	sl, r0, lr
 8015d2c:	9800      	ldr	r0, [sp, #0]
 8015d2e:	f816 8007 	ldrb.w	r8, [r6, r7]
 8015d32:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015d36:	eb04 0b08 	add.w	fp, r4, r8
 8015d3a:	f830 400a 	ldrh.w	r4, [r0, sl]
 8015d3e:	9801      	ldr	r0, [sp, #4]
 8015d40:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8015d44:	1227      	asrs	r7, r4, #8
 8015d46:	f89b b001 	ldrb.w	fp, [fp, #1]
 8015d4a:	fb16 f609 	smulbb	r6, r6, r9
 8015d4e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8015d52:	f810 8008 	ldrb.w	r8, [r0, r8]
 8015d56:	fb1b fb09 	smulbb	fp, fp, r9
 8015d5a:	fb07 6705 	mla	r7, r7, r5, r6
 8015d5e:	10e6      	asrs	r6, r4, #3
 8015d60:	00e4      	lsls	r4, r4, #3
 8015d62:	9800      	ldr	r0, [sp, #0]
 8015d64:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015d68:	b2bf      	uxth	r7, r7
 8015d6a:	b2e4      	uxtb	r4, r4
 8015d6c:	fb06 b605 	mla	r6, r6, r5, fp
 8015d70:	fb14 f405 	smulbb	r4, r4, r5
 8015d74:	b2b6      	uxth	r6, r6
 8015d76:	fb08 4809 	mla	r8, r8, r9, r4
 8015d7a:	1c7c      	adds	r4, r7, #1
 8015d7c:	f106 0b01 	add.w	fp, r6, #1
 8015d80:	fa1f f888 	uxth.w	r8, r8
 8015d84:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8015d88:	f108 0401 	add.w	r4, r8, #1
 8015d8c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8015d90:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8015d94:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8015d98:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015d9c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8015da0:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8015da4:	4327      	orrs	r7, r4
 8015da6:	ea47 070b 	orr.w	r7, r7, fp
 8015daa:	f820 700a 	strh.w	r7, [r0, sl]
 8015dae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015db0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015db4:	4401      	add	r1, r0
 8015db6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015db8:	4402      	add	r2, r0
 8015dba:	e759      	b.n	8015c70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8015dbc:	b007      	add	sp, #28
 8015dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015dc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dc8:	b085      	sub	sp, #20
 8015dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015dce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015dd0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8015dd2:	9203      	str	r2, [sp, #12]
 8015dd4:	6870      	ldr	r0, [r6, #4]
 8015dd6:	686f      	ldr	r7, [r5, #4]
 8015dd8:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8015ddc:	3704      	adds	r7, #4
 8015dde:	9101      	str	r1, [sp, #4]
 8015de0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8015de4:	fb00 2404 	mla	r4, r0, r4, r2
 8015de8:	6832      	ldr	r2, [r6, #0]
 8015dea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015dee:	682a      	ldr	r2, [r5, #0]
 8015df0:	9202      	str	r2, [sp, #8]
 8015df2:	9a01      	ldr	r2, [sp, #4]
 8015df4:	2a00      	cmp	r2, #0
 8015df6:	dc03      	bgt.n	8015e00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015df8:	9a03      	ldr	r2, [sp, #12]
 8015dfa:	2a00      	cmp	r2, #0
 8015dfc:	f340 80cc 	ble.w	8015f98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015e00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015e02:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8015e06:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015e0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015e0c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8015e10:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	dd0d      	ble.n	8015e34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e18:	1406      	asrs	r6, r0, #16
 8015e1a:	d405      	bmi.n	8015e28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015e1c:	454e      	cmp	r6, r9
 8015e1e:	da03      	bge.n	8015e28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015e20:	1416      	asrs	r6, r2, #16
 8015e22:	d401      	bmi.n	8015e28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015e24:	4546      	cmp	r6, r8
 8015e26:	db06      	blt.n	8015e36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015e28:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015e2a:	4460      	add	r0, ip
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	3402      	adds	r4, #2
 8015e30:	4432      	add	r2, r6
 8015e32:	e7ef      	b.n	8015e14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015e34:	d00f      	beq.n	8015e56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8015e36:	1e5e      	subs	r6, r3, #1
 8015e38:	fb0c 0e06 	mla	lr, ip, r6, r0
 8015e3c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8015e40:	d543      	bpl.n	8015eca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8015e42:	4698      	mov	r8, r3
 8015e44:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8015e48:	f1b8 0f00 	cmp.w	r8, #0
 8015e4c:	dc71      	bgt.n	8015f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8015e4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e52:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015e56:	9b01      	ldr	r3, [sp, #4]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	f340 809d 	ble.w	8015f98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015e5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015e62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015e68:	eeb0 6a62 	vmov.f32	s12, s5
 8015e6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015e70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015e74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e78:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8015e7c:	eeb0 6a43 	vmov.f32	s12, s6
 8015e80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e84:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8015e88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015e8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015e90:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015e94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015e98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015e9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015ea0:	ee12 2a90 	vmov	r2, s5
 8015ea4:	eef0 2a47 	vmov.f32	s5, s14
 8015ea8:	fb92 fcf3 	sdiv	ip, r2, r3
 8015eac:	ee13 2a10 	vmov	r2, s6
 8015eb0:	eeb0 3a67 	vmov.f32	s6, s15
 8015eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8015eb8:	9312      	str	r3, [sp, #72]	@ 0x48
 8015eba:	9b01      	ldr	r3, [sp, #4]
 8015ebc:	9a03      	ldr	r2, [sp, #12]
 8015ebe:	3b01      	subs	r3, #1
 8015ec0:	9301      	str	r3, [sp, #4]
 8015ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ec4:	bf08      	it	eq
 8015ec6:	4613      	moveq	r3, r2
 8015ec8:	e793      	b.n	8015df2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015eca:	45ce      	cmp	lr, r9
 8015ecc:	dab9      	bge.n	8015e42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015ece:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015ed0:	fb01 2606 	mla	r6, r1, r6, r2
 8015ed4:	1436      	asrs	r6, r6, #16
 8015ed6:	d4b4      	bmi.n	8015e42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015ed8:	4546      	cmp	r6, r8
 8015eda:	dab2      	bge.n	8015e42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015edc:	4698      	mov	r8, r3
 8015ede:	46a2      	mov	sl, r4
 8015ee0:	f1b8 0f00 	cmp.w	r8, #0
 8015ee4:	ddb3      	ble.n	8015e4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8015ee6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8015eea:	1416      	asrs	r6, r2, #16
 8015eec:	9902      	ldr	r1, [sp, #8]
 8015eee:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8015ef2:	f108 38ff 	add.w	r8, r8, #4294967295
 8015ef6:	4460      	add	r0, ip
 8015ef8:	fb09 1606 	mla	r6, r9, r6, r1
 8015efc:	4928      	ldr	r1, [pc, #160]	@ (8015fa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8015efe:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8015f02:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015f06:	eb07 0b0e 	add.w	fp, r7, lr
 8015f0a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8015f0e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8015f12:	00f6      	lsls	r6, r6, #3
 8015f14:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8015f18:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015f1a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8015f1e:	440a      	add	r2, r1
 8015f20:	ea49 0606 	orr.w	r6, r9, r6
 8015f24:	f817 900e 	ldrb.w	r9, [r7, lr]
 8015f28:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8015f2c:	f82a 6b02 	strh.w	r6, [sl], #2
 8015f30:	e7d6      	b.n	8015ee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8015f32:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015f36:	d429      	bmi.n	8015f8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8015f38:	68ae      	ldr	r6, [r5, #8]
 8015f3a:	454e      	cmp	r6, r9
 8015f3c:	dd26      	ble.n	8015f8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8015f3e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015f42:	d423      	bmi.n	8015f8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8015f44:	68e9      	ldr	r1, [r5, #12]
 8015f46:	4559      	cmp	r1, fp
 8015f48:	dd20      	ble.n	8015f8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8015f4a:	fa0f fe86 	sxth.w	lr, r6
 8015f4e:	9902      	ldr	r1, [sp, #8]
 8015f50:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8015f54:	f06f 0101 	mvn.w	r1, #1
 8015f58:	f81e e009 	ldrb.w	lr, [lr, r9]
 8015f5c:	fb01 f908 	mul.w	r9, r1, r8
 8015f60:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 8015f64:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015f68:	eb07 060e 	add.w	r6, r7, lr
 8015f6c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8015f70:	7876      	ldrb	r6, [r6, #1]
 8015f72:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8015f76:	00f6      	lsls	r6, r6, #3
 8015f78:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8015f7c:	ea4b 0606 	orr.w	r6, fp, r6
 8015f80:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8015f84:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8015f88:	f82a 6009 	strh.w	r6, [sl, r9]
 8015f8c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015f8e:	4460      	add	r0, ip
 8015f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8015f94:	440a      	add	r2, r1
 8015f96:	e757      	b.n	8015e48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015f98:	b005      	add	sp, #20
 8015f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f9e:	bf00      	nop
 8015fa0:	fffff800 	.word	0xfffff800

08015fa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa8:	b087      	sub	sp, #28
 8015faa:	468b      	mov	fp, r1
 8015fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015fb0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8015fb2:	9204      	str	r2, [sp, #16]
 8015fb4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015fb8:	6841      	ldr	r1, [r0, #4]
 8015fba:	9205      	str	r2, [sp, #20]
 8015fbc:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8015fc0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8015fc4:	fb01 2404 	mla	r4, r1, r4, r2
 8015fc8:	6802      	ldr	r2, [r0, #0]
 8015fca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015fce:	f8dc 2000 	ldr.w	r2, [ip]
 8015fd2:	9201      	str	r2, [sp, #4]
 8015fd4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015fd8:	3204      	adds	r2, #4
 8015fda:	9202      	str	r2, [sp, #8]
 8015fdc:	f1bb 0f00 	cmp.w	fp, #0
 8015fe0:	dc03      	bgt.n	8015fea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8015fe2:	9a04      	ldr	r2, [sp, #16]
 8015fe4:	2a00      	cmp	r2, #0
 8015fe6:	f340 8138 	ble.w	801625a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8015fea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015fec:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8015ff0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015ff4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015ff6:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8015ffa:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	dd0e      	ble.n	8016020 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016002:	1402      	asrs	r2, r0, #16
 8016004:	d405      	bmi.n	8016012 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016006:	42ba      	cmp	r2, r7
 8016008:	da03      	bge.n	8016012 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801600a:	140a      	asrs	r2, r1, #16
 801600c:	d401      	bmi.n	8016012 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801600e:	42b2      	cmp	r2, r6
 8016010:	db07      	blt.n	8016022 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016012:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016014:	3b01      	subs	r3, #1
 8016016:	3402      	adds	r4, #2
 8016018:	4410      	add	r0, r2
 801601a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801601c:	4411      	add	r1, r2
 801601e:	e7ee      	b.n	8015ffe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016020:	d019      	beq.n	8016056 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016022:	1e5a      	subs	r2, r3, #1
 8016024:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8016026:	fb05 0502 	mla	r5, r5, r2, r0
 801602a:	142d      	asrs	r5, r5, #16
 801602c:	d409      	bmi.n	8016042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801602e:	42bd      	cmp	r5, r7
 8016030:	da07      	bge.n	8016042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016032:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8016034:	fb05 1202 	mla	r2, r5, r2, r1
 8016038:	1412      	asrs	r2, r2, #16
 801603a:	d402      	bmi.n	8016042 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801603c:	42b2      	cmp	r2, r6
 801603e:	f2c0 80ac 	blt.w	801619a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8016042:	f04f 0e00 	mov.w	lr, #0
 8016046:	eb03 020e 	add.w	r2, r3, lr
 801604a:	2a00      	cmp	r2, #0
 801604c:	dc3e      	bgt.n	80160cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801604e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016052:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016056:	f1bb 0f00 	cmp.w	fp, #0
 801605a:	f340 80fe 	ble.w	801625a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801605e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016062:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016064:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016068:	f1bb 0b01 	subs.w	fp, fp, #1
 801606c:	eeb0 6a62 	vmov.f32	s12, s5
 8016070:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016074:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016078:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801607c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016080:	eeb0 6a43 	vmov.f32	s12, s6
 8016084:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016088:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801608c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016090:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016094:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016098:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801609c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80160a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80160a4:	ee12 2a90 	vmov	r2, s5
 80160a8:	eef0 2a47 	vmov.f32	s5, s14
 80160ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80160b0:	ee13 2a10 	vmov	r2, s6
 80160b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80160b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80160b8:	eeb0 3a67 	vmov.f32	s6, s15
 80160bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80160c0:	9a04      	ldr	r2, [sp, #16]
 80160c2:	9314      	str	r3, [sp, #80]	@ 0x50
 80160c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80160c6:	bf08      	it	eq
 80160c8:	4613      	moveq	r3, r2
 80160ca:	e787      	b.n	8015fdc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80160cc:	1406      	asrs	r6, r0, #16
 80160ce:	d45d      	bmi.n	801618c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80160d0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80160d4:	42b5      	cmp	r5, r6
 80160d6:	dd59      	ble.n	801618c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80160d8:	140f      	asrs	r7, r1, #16
 80160da:	d457      	bmi.n	801618c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80160dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80160e0:	42ba      	cmp	r2, r7
 80160e2:	dd53      	ble.n	801618c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80160e4:	9a01      	ldr	r2, [sp, #4]
 80160e6:	b22d      	sxth	r5, r5
 80160e8:	fb07 2505 	mla	r5, r7, r5, r2
 80160ec:	5daa      	ldrb	r2, [r5, r6]
 80160ee:	9d02      	ldr	r5, [sp, #8]
 80160f0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80160f4:	0e2e      	lsrs	r6, r5, #24
 80160f6:	d049      	beq.n	801618c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80160f8:	f06f 0201 	mvn.w	r2, #1
 80160fc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016100:	fb02 f20e 	mul.w	r2, r2, lr
 8016104:	f834 8002 	ldrh.w	r8, [r4, r2]
 8016108:	9203      	str	r2, [sp, #12]
 801610a:	9a05      	ldr	r2, [sp, #20]
 801610c:	ea4f 2728 	mov.w	r7, r8, asr #8
 8016110:	4356      	muls	r6, r2
 8016112:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8016116:	1c72      	adds	r2, r6, #1
 8016118:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801611c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8016120:	b2ed      	uxtb	r5, r5
 8016122:	1212      	asrs	r2, r2, #8
 8016124:	fa1f f982 	uxth.w	r9, r2
 8016128:	43d2      	mvns	r2, r2
 801612a:	fb16 f609 	smulbb	r6, r6, r9
 801612e:	b2d2      	uxtb	r2, r2
 8016130:	fb15 f509 	smulbb	r5, r5, r9
 8016134:	fb07 6702 	mla	r7, r7, r2, r6
 8016138:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801613c:	fb1a fa09 	smulbb	sl, sl, r9
 8016140:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016144:	b2bf      	uxth	r7, r7
 8016146:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801614a:	fa5f f888 	uxtb.w	r8, r8
 801614e:	fb06 a602 	mla	r6, r6, r2, sl
 8016152:	fb08 5502 	mla	r5, r8, r2, r5
 8016156:	1c7a      	adds	r2, r7, #1
 8016158:	b2b6      	uxth	r6, r6
 801615a:	b2ad      	uxth	r5, r5
 801615c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016160:	9a03      	ldr	r2, [sp, #12]
 8016162:	f105 0a01 	add.w	sl, r5, #1
 8016166:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801616a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801616e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016172:	ea4a 0707 	orr.w	r7, sl, r7
 8016176:	f106 0a01 	add.w	sl, r6, #1
 801617a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801617e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016182:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016186:	ea47 070a 	orr.w	r7, r7, sl
 801618a:	52a7      	strh	r7, [r4, r2]
 801618c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801618e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016192:	4410      	add	r0, r2
 8016194:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016196:	4411      	add	r1, r2
 8016198:	e755      	b.n	8016046 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801619a:	f04f 0800 	mov.w	r8, #0
 801619e:	eba3 0208 	sub.w	r2, r3, r8
 80161a2:	2a00      	cmp	r2, #0
 80161a4:	f77f af53 	ble.w	801604e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80161a8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80161ac:	140a      	asrs	r2, r1, #16
 80161ae:	9f01      	ldr	r7, [sp, #4]
 80161b0:	1405      	asrs	r5, r0, #16
 80161b2:	fb06 7202 	mla	r2, r6, r2, r7
 80161b6:	5d52      	ldrb	r2, [r2, r5]
 80161b8:	9d02      	ldr	r5, [sp, #8]
 80161ba:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80161be:	0e2e      	lsrs	r6, r5, #24
 80161c0:	d044      	beq.n	801624c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80161c2:	9a05      	ldr	r2, [sp, #20]
 80161c4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80161c8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80161cc:	4356      	muls	r6, r2
 80161ce:	ea4f 272e 	mov.w	r7, lr, asr #8
 80161d2:	1c72      	adds	r2, r6, #1
 80161d4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80161d8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80161dc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80161e0:	b2ed      	uxtb	r5, r5
 80161e2:	1212      	asrs	r2, r2, #8
 80161e4:	fa1f f982 	uxth.w	r9, r2
 80161e8:	43d2      	mvns	r2, r2
 80161ea:	fb16 f609 	smulbb	r6, r6, r9
 80161ee:	b2d2      	uxtb	r2, r2
 80161f0:	fb15 f509 	smulbb	r5, r5, r9
 80161f4:	fb07 6702 	mla	r7, r7, r2, r6
 80161f8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80161fc:	fb1a fa09 	smulbb	sl, sl, r9
 8016200:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016204:	b2bf      	uxth	r7, r7
 8016206:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801620a:	fa5f fe8e 	uxtb.w	lr, lr
 801620e:	fb06 a602 	mla	r6, r6, r2, sl
 8016212:	fb0e 5502 	mla	r5, lr, r2, r5
 8016216:	1c7a      	adds	r2, r7, #1
 8016218:	b2b6      	uxth	r6, r6
 801621a:	b2ad      	uxth	r5, r5
 801621c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016220:	f105 0a01 	add.w	sl, r5, #1
 8016224:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8016228:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801622c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016230:	ea4a 0707 	orr.w	r7, sl, r7
 8016234:	f106 0a01 	add.w	sl, r6, #1
 8016238:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801623c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016240:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016244:	ea47 070a 	orr.w	r7, r7, sl
 8016248:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801624c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801624e:	f108 0801 	add.w	r8, r8, #1
 8016252:	4410      	add	r0, r2
 8016254:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016256:	4411      	add	r1, r2
 8016258:	e7a1      	b.n	801619e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801625a:	b007      	add	sp, #28
 801625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016260 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016264:	b085      	sub	sp, #20
 8016266:	468b      	mov	fp, r1
 8016268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801626c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801626e:	9203      	str	r2, [sp, #12]
 8016270:	6841      	ldr	r1, [r0, #4]
 8016272:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8016276:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801627a:	fb01 2404 	mla	r4, r1, r4, r2
 801627e:	6802      	ldr	r2, [r0, #0]
 8016280:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016284:	f8de 2000 	ldr.w	r2, [lr]
 8016288:	9200      	str	r2, [sp, #0]
 801628a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801628e:	3204      	adds	r2, #4
 8016290:	9201      	str	r2, [sp, #4]
 8016292:	f1bb 0f00 	cmp.w	fp, #0
 8016296:	dc03      	bgt.n	80162a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016298:	9a03      	ldr	r2, [sp, #12]
 801629a:	2a00      	cmp	r2, #0
 801629c:	f340 8153 	ble.w	8016546 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80162a0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80162a2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80162a6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80162aa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80162ac:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80162b0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	dd0e      	ble.n	80162d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80162b8:	1408      	asrs	r0, r1, #16
 80162ba:	d405      	bmi.n	80162c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80162bc:	42b8      	cmp	r0, r7
 80162be:	da03      	bge.n	80162c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80162c0:	1410      	asrs	r0, r2, #16
 80162c2:	d401      	bmi.n	80162c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80162c4:	42b0      	cmp	r0, r6
 80162c6:	db07      	blt.n	80162d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80162c8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80162ca:	3b01      	subs	r3, #1
 80162cc:	3402      	adds	r4, #2
 80162ce:	4401      	add	r1, r0
 80162d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80162d2:	4402      	add	r2, r0
 80162d4:	e7ee      	b.n	80162b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80162d6:	d017      	beq.n	8016308 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80162d8:	1e58      	subs	r0, r3, #1
 80162da:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80162dc:	fb05 1500 	mla	r5, r5, r0, r1
 80162e0:	142d      	asrs	r5, r5, #16
 80162e2:	d409      	bmi.n	80162f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80162e4:	42bd      	cmp	r5, r7
 80162e6:	da07      	bge.n	80162f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80162e8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80162ea:	fb05 2000 	mla	r0, r5, r0, r2
 80162ee:	1400      	asrs	r0, r0, #16
 80162f0:	d402      	bmi.n	80162f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80162f2:	42b0      	cmp	r0, r6
 80162f4:	f2c0 80bc 	blt.w	8016470 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80162f8:	2600      	movs	r6, #0
 80162fa:	1998      	adds	r0, r3, r6
 80162fc:	2800      	cmp	r0, #0
 80162fe:	dc3e      	bgt.n	801637e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8016300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016304:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016308:	f1bb 0f00 	cmp.w	fp, #0
 801630c:	f340 811b 	ble.w	8016546 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8016310:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016316:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801631a:	f1bb 0b01 	subs.w	fp, fp, #1
 801631e:	eeb0 6a62 	vmov.f32	s12, s5
 8016322:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016326:	ee31 1a05 	vadd.f32	s2, s2, s10
 801632a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801632e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016332:	eeb0 6a43 	vmov.f32	s12, s6
 8016336:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801633a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801633e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016342:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016346:	ee77 2a62 	vsub.f32	s5, s14, s5
 801634a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801634e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016352:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016356:	ee12 2a90 	vmov	r2, s5
 801635a:	eef0 2a47 	vmov.f32	s5, s14
 801635e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016362:	ee13 2a10 	vmov	r2, s6
 8016366:	9311      	str	r3, [sp, #68]	@ 0x44
 8016368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801636a:	eeb0 3a67 	vmov.f32	s6, s15
 801636e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016372:	9a03      	ldr	r2, [sp, #12]
 8016374:	9312      	str	r3, [sp, #72]	@ 0x48
 8016376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016378:	bf08      	it	eq
 801637a:	4613      	moveq	r3, r2
 801637c:	e789      	b.n	8016292 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801637e:	140f      	asrs	r7, r1, #16
 8016380:	d426      	bmi.n	80163d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8016382:	f8de 5008 	ldr.w	r5, [lr, #8]
 8016386:	42bd      	cmp	r5, r7
 8016388:	dd22      	ble.n	80163d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801638a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801638e:	d41f      	bmi.n	80163d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8016390:	f8de 000c 	ldr.w	r0, [lr, #12]
 8016394:	4560      	cmp	r0, ip
 8016396:	dd1b      	ble.n	80163d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8016398:	9800      	ldr	r0, [sp, #0]
 801639a:	b22d      	sxth	r5, r5
 801639c:	fb0c 0505 	mla	r5, ip, r5, r0
 80163a0:	5de8      	ldrb	r0, [r5, r7]
 80163a2:	9d01      	ldr	r5, [sp, #4]
 80163a4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80163a8:	0e07      	lsrs	r7, r0, #24
 80163aa:	2fff      	cmp	r7, #255	@ 0xff
 80163ac:	d116      	bne.n	80163dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80163ae:	f06f 0501 	mvn.w	r5, #1
 80163b2:	fb05 f706 	mul.w	r7, r5, r6
 80163b6:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 80163ba:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80163be:	0945      	lsrs	r5, r0, #5
 80163c0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80163c4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80163c8:	ea4c 0505 	orr.w	r5, ip, r5
 80163cc:	4305      	orrs	r5, r0
 80163ce:	53e5      	strh	r5, [r4, r7]
 80163d0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80163d2:	3e01      	subs	r6, #1
 80163d4:	4401      	add	r1, r0
 80163d6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80163d8:	4402      	add	r2, r0
 80163da:	e78e      	b.n	80162fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80163dc:	b2fd      	uxtb	r5, r7
 80163de:	2f00      	cmp	r7, #0
 80163e0:	d0f6      	beq.n	80163d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80163e2:	f06f 0701 	mvn.w	r7, #1
 80163e6:	fa1f f985 	uxth.w	r9, r5
 80163ea:	43ed      	mvns	r5, r5
 80163ec:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80163f0:	4377      	muls	r7, r6
 80163f2:	fb1a fa09 	smulbb	sl, sl, r9
 80163f6:	b2ed      	uxtb	r5, r5
 80163f8:	f834 8007 	ldrh.w	r8, [r4, r7]
 80163fc:	9702      	str	r7, [sp, #8]
 80163fe:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016402:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8016406:	fb17 f709 	smulbb	r7, r7, r9
 801640a:	b2c0      	uxtb	r0, r0
 801640c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8016410:	fb10 f009 	smulbb	r0, r0, r9
 8016414:	fb0c 7c05 	mla	ip, ip, r5, r7
 8016418:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801641c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016420:	fa1f fc8c 	uxth.w	ip, ip
 8016424:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8016428:	fa5f f888 	uxtb.w	r8, r8
 801642c:	fb07 a705 	mla	r7, r7, r5, sl
 8016430:	fb08 0005 	mla	r0, r8, r5, r0
 8016434:	f10c 0501 	add.w	r5, ip, #1
 8016438:	b2bf      	uxth	r7, r7
 801643a:	b280      	uxth	r0, r0
 801643c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016440:	f100 0a01 	add.w	sl, r0, #1
 8016444:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016448:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801644c:	9802      	ldr	r0, [sp, #8]
 801644e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016452:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016456:	f107 0a01 	add.w	sl, r7, #1
 801645a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801645e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016462:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016466:	ea4c 0c0a 	orr.w	ip, ip, sl
 801646a:	f824 c000 	strh.w	ip, [r4, r0]
 801646e:	e7af      	b.n	80163d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8016470:	f04f 0800 	mov.w	r8, #0
 8016474:	eba3 0008 	sub.w	r0, r3, r8
 8016478:	2800      	cmp	r0, #0
 801647a:	f77f af41 	ble.w	8016300 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801647e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8016482:	1410      	asrs	r0, r2, #16
 8016484:	9f00      	ldr	r7, [sp, #0]
 8016486:	140d      	asrs	r5, r1, #16
 8016488:	fb06 7000 	mla	r0, r6, r0, r7
 801648c:	5d40      	ldrb	r0, [r0, r5]
 801648e:	9d01      	ldr	r5, [sp, #4]
 8016490:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8016494:	0e2e      	lsrs	r6, r5, #24
 8016496:	2eff      	cmp	r6, #255	@ 0xff
 8016498:	d112      	bne.n	80164c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801649a:	482c      	ldr	r0, [pc, #176]	@ (801654c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801649c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80164a0:	0968      	lsrs	r0, r5, #5
 80164a2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80164a6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80164aa:	4330      	orrs	r0, r6
 80164ac:	4328      	orrs	r0, r5
 80164ae:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80164b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80164b4:	f108 0801 	add.w	r8, r8, #1
 80164b8:	4401      	add	r1, r0
 80164ba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80164bc:	4402      	add	r2, r0
 80164be:	e7d9      	b.n	8016474 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80164c0:	b2f0      	uxtb	r0, r6
 80164c2:	2e00      	cmp	r6, #0
 80164c4:	d0f5      	beq.n	80164b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80164c6:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 80164ca:	fa1f f980 	uxth.w	r9, r0
 80164ce:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80164d2:	43c0      	mvns	r0, r0
 80164d4:	ea4f 272c 	mov.w	r7, ip, asr #8
 80164d8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80164dc:	fb16 f609 	smulbb	r6, r6, r9
 80164e0:	b2c0      	uxtb	r0, r0
 80164e2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80164e6:	b2ed      	uxtb	r5, r5
 80164e8:	fb1a fa09 	smulbb	sl, sl, r9
 80164ec:	fb07 6700 	mla	r7, r7, r0, r6
 80164f0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80164f4:	fb15 f509 	smulbb	r5, r5, r9
 80164f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80164fc:	b2bf      	uxth	r7, r7
 80164fe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8016502:	fa5f fc8c 	uxtb.w	ip, ip
 8016506:	fb06 a600 	mla	r6, r6, r0, sl
 801650a:	fb0c 5500 	mla	r5, ip, r0, r5
 801650e:	1c78      	adds	r0, r7, #1
 8016510:	b2b6      	uxth	r6, r6
 8016512:	b2ad      	uxth	r5, r5
 8016514:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8016518:	f105 0a01 	add.w	sl, r5, #1
 801651c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8016520:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016524:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016528:	ea4a 0707 	orr.w	r7, sl, r7
 801652c:	f106 0a01 	add.w	sl, r6, #1
 8016530:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016534:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016538:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801653c:	ea47 070a 	orr.w	r7, r7, sl
 8016540:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8016544:	e7b5      	b.n	80164b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8016546:	b005      	add	sp, #20
 8016548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654c:	fffff800 	.word	0xfffff800

08016550 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016554:	b087      	sub	sp, #28
 8016556:	468b      	mov	fp, r1
 8016558:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801655c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801655e:	9204      	str	r2, [sp, #16]
 8016560:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8016564:	6861      	ldr	r1, [r4, #4]
 8016566:	9205      	str	r2, [sp, #20]
 8016568:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801656c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8016570:	fb01 2000 	mla	r0, r1, r0, r2
 8016574:	6822      	ldr	r2, [r4, #0]
 8016576:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801657a:	f8de 2000 	ldr.w	r2, [lr]
 801657e:	9201      	str	r2, [sp, #4]
 8016580:	f8de 2004 	ldr.w	r2, [lr, #4]
 8016584:	9202      	str	r2, [sp, #8]
 8016586:	f1bb 0f00 	cmp.w	fp, #0
 801658a:	dc03      	bgt.n	8016594 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801658c:	9a04      	ldr	r2, [sp, #16]
 801658e:	2a00      	cmp	r2, #0
 8016590:	f340 8142 	ble.w	8016818 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8016594:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016596:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801659a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801659e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80165a0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80165a4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	dd0e      	ble.n	80165ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80165ac:	140c      	asrs	r4, r1, #16
 80165ae:	d405      	bmi.n	80165bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80165b0:	42bc      	cmp	r4, r7
 80165b2:	da03      	bge.n	80165bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80165b4:	1414      	asrs	r4, r2, #16
 80165b6:	d401      	bmi.n	80165bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80165b8:	42b4      	cmp	r4, r6
 80165ba:	db07      	blt.n	80165cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80165bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80165be:	3b01      	subs	r3, #1
 80165c0:	3002      	adds	r0, #2
 80165c2:	4421      	add	r1, r4
 80165c4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80165c6:	4422      	add	r2, r4
 80165c8:	e7ee      	b.n	80165a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80165ca:	d019      	beq.n	8016600 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80165cc:	1e5c      	subs	r4, r3, #1
 80165ce:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80165d0:	fb05 1504 	mla	r5, r5, r4, r1
 80165d4:	142d      	asrs	r5, r5, #16
 80165d6:	d409      	bmi.n	80165ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80165d8:	42bd      	cmp	r5, r7
 80165da:	da07      	bge.n	80165ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80165dc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80165de:	fb05 2404 	mla	r4, r5, r4, r2
 80165e2:	1424      	asrs	r4, r4, #16
 80165e4:	d402      	bmi.n	80165ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80165e6:	42b4      	cmp	r4, r6
 80165e8:	f2c0 80b1 	blt.w	801674e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80165ec:	f04f 0800 	mov.w	r8, #0
 80165f0:	eb03 0408 	add.w	r4, r3, r8
 80165f4:	2c00      	cmp	r4, #0
 80165f6:	dc3e      	bgt.n	8016676 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80165f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80165fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016600:	f1bb 0f00 	cmp.w	fp, #0
 8016604:	f340 8108 	ble.w	8016818 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8016608:	ee30 0a04 	vadd.f32	s0, s0, s8
 801660c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801660e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016612:	f1bb 0b01 	subs.w	fp, fp, #1
 8016616:	eeb0 6a62 	vmov.f32	s12, s5
 801661a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801661e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016622:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016626:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801662a:	eeb0 6a43 	vmov.f32	s12, s6
 801662e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016632:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016636:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801663a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801663e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016642:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016646:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801664a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801664e:	ee12 2a90 	vmov	r2, s5
 8016652:	eef0 2a47 	vmov.f32	s5, s14
 8016656:	fb92 f3f3 	sdiv	r3, r2, r3
 801665a:	ee13 2a10 	vmov	r2, s6
 801665e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016660:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016662:	eeb0 3a67 	vmov.f32	s6, s15
 8016666:	fb92 f3f3 	sdiv	r3, r2, r3
 801666a:	9a04      	ldr	r2, [sp, #16]
 801666c:	9314      	str	r3, [sp, #80]	@ 0x50
 801666e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016670:	bf08      	it	eq
 8016672:	4613      	moveq	r3, r2
 8016674:	e787      	b.n	8016586 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8016676:	140e      	asrs	r6, r1, #16
 8016678:	d462      	bmi.n	8016740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801667a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801667e:	42b5      	cmp	r5, r6
 8016680:	dd5e      	ble.n	8016740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8016682:	1417      	asrs	r7, r2, #16
 8016684:	d45c      	bmi.n	8016740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8016686:	f8de 400c 	ldr.w	r4, [lr, #12]
 801668a:	42bc      	cmp	r4, r7
 801668c:	dd58      	ble.n	8016740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801668e:	b22d      	sxth	r5, r5
 8016690:	9c02      	ldr	r4, [sp, #8]
 8016692:	fb07 6505 	mla	r5, r7, r5, r6
 8016696:	5d66      	ldrb	r6, [r4, r5]
 8016698:	2e00      	cmp	r6, #0
 801669a:	d051      	beq.n	8016740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801669c:	9c01      	ldr	r4, [sp, #4]
 801669e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 80166a2:	f06f 0401 	mvn.w	r4, #1
 80166a6:	fb04 f408 	mul.w	r4, r4, r8
 80166aa:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80166ae:	5b05      	ldrh	r5, [r0, r4]
 80166b0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80166b4:	9403      	str	r4, [sp, #12]
 80166b6:	9c05      	ldr	r4, [sp, #20]
 80166b8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80166bc:	4366      	muls	r6, r4
 80166be:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80166c2:	1c74      	adds	r4, r6, #1
 80166c4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80166c8:	122e      	asrs	r6, r5, #8
 80166ca:	1224      	asrs	r4, r4, #8
 80166cc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80166d0:	00ed      	lsls	r5, r5, #3
 80166d2:	b2a7      	uxth	r7, r4
 80166d4:	43e4      	mvns	r4, r4
 80166d6:	b2ed      	uxtb	r5, r5
 80166d8:	b2e4      	uxtb	r4, r4
 80166da:	fb16 f604 	smulbb	r6, r6, r4
 80166de:	fb15 f504 	smulbb	r5, r5, r4
 80166e2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80166e6:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80166ea:	fb1a fa04 	smulbb	sl, sl, r4
 80166ee:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80166f2:	fa1f fc8c 	uxth.w	ip, ip
 80166f6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80166fa:	fa5f f989 	uxtb.w	r9, r9
 80166fe:	fb06 a607 	mla	r6, r6, r7, sl
 8016702:	f10c 0401 	add.w	r4, ip, #1
 8016706:	fb09 5507 	mla	r5, r9, r7, r5
 801670a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801670e:	9c03      	ldr	r4, [sp, #12]
 8016710:	b2ad      	uxth	r5, r5
 8016712:	b2b6      	uxth	r6, r6
 8016714:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016718:	f105 0a01 	add.w	sl, r5, #1
 801671c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016720:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016724:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016728:	f106 0a01 	add.w	sl, r6, #1
 801672c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016730:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016734:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016738:	ea4c 0c0a 	orr.w	ip, ip, sl
 801673c:	f820 c004 	strh.w	ip, [r0, r4]
 8016740:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016742:	f108 38ff 	add.w	r8, r8, #4294967295
 8016746:	4421      	add	r1, r4
 8016748:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801674a:	4422      	add	r2, r4
 801674c:	e750      	b.n	80165f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801674e:	f04f 0900 	mov.w	r9, #0
 8016752:	eba3 0409 	sub.w	r4, r3, r9
 8016756:	2c00      	cmp	r4, #0
 8016758:	f77f af4e 	ble.w	80165f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801675c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8016760:	140d      	asrs	r5, r1, #16
 8016762:	1414      	asrs	r4, r2, #16
 8016764:	fb06 5404 	mla	r4, r6, r4, r5
 8016768:	9d02      	ldr	r5, [sp, #8]
 801676a:	5d2e      	ldrb	r6, [r5, r4]
 801676c:	2e00      	cmp	r6, #0
 801676e:	d04c      	beq.n	801680a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016770:	9d01      	ldr	r5, [sp, #4]
 8016772:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8016776:	9c05      	ldr	r4, [sp, #20]
 8016778:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801677c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8016780:	4366      	muls	r6, r4
 8016782:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8016786:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801678a:	1c74      	adds	r4, r6, #1
 801678c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8016790:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8016794:	122e      	asrs	r6, r5, #8
 8016796:	1224      	asrs	r4, r4, #8
 8016798:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801679c:	00ed      	lsls	r5, r5, #3
 801679e:	b2a7      	uxth	r7, r4
 80167a0:	43e4      	mvns	r4, r4
 80167a2:	b2ed      	uxtb	r5, r5
 80167a4:	b2e4      	uxtb	r4, r4
 80167a6:	fb16 f604 	smulbb	r6, r6, r4
 80167aa:	fb15 f504 	smulbb	r5, r5, r4
 80167ae:	fb0c 6c07 	mla	ip, ip, r7, r6
 80167b2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80167b6:	fb1a fa04 	smulbb	sl, sl, r4
 80167ba:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80167be:	fa1f fc8c 	uxth.w	ip, ip
 80167c2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80167c6:	fa5f f888 	uxtb.w	r8, r8
 80167ca:	fb06 a607 	mla	r6, r6, r7, sl
 80167ce:	f10c 0401 	add.w	r4, ip, #1
 80167d2:	fb08 5507 	mla	r5, r8, r7, r5
 80167d6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80167da:	b2ad      	uxth	r5, r5
 80167dc:	b2b6      	uxth	r6, r6
 80167de:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80167e2:	f105 0a01 	add.w	sl, r5, #1
 80167e6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80167ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80167ee:	ea4a 0c0c 	orr.w	ip, sl, ip
 80167f2:	f106 0a01 	add.w	sl, r6, #1
 80167f6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80167fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80167fe:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016802:	ea4c 0c0a 	orr.w	ip, ip, sl
 8016806:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801680a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801680c:	f109 0901 	add.w	r9, r9, #1
 8016810:	4421      	add	r1, r4
 8016812:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8016814:	4422      	add	r2, r4
 8016816:	e79c      	b.n	8016752 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8016818:	b007      	add	sp, #28
 801681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801681e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801681e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016822:	b085      	sub	sp, #20
 8016824:	468b      	mov	fp, r1
 8016826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801682a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801682c:	9203      	str	r2, [sp, #12]
 801682e:	6861      	ldr	r1, [r4, #4]
 8016830:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016834:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 8016838:	fb01 2000 	mla	r0, r1, r0, r2
 801683c:	6822      	ldr	r2, [r4, #0]
 801683e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8016842:	f8d8 2000 	ldr.w	r2, [r8]
 8016846:	9200      	str	r2, [sp, #0]
 8016848:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801684c:	9201      	str	r2, [sp, #4]
 801684e:	f1bb 0f00 	cmp.w	fp, #0
 8016852:	dc03      	bgt.n	801685c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8016854:	9a03      	ldr	r2, [sp, #12]
 8016856:	2a00      	cmp	r2, #0
 8016858:	f340 8146 	ble.w	8016ae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801685c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801685e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8016862:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8016866:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016868:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801686c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016870:	2b00      	cmp	r3, #0
 8016872:	dd0e      	ble.n	8016892 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016874:	140c      	asrs	r4, r1, #16
 8016876:	d405      	bmi.n	8016884 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016878:	42bc      	cmp	r4, r7
 801687a:	da03      	bge.n	8016884 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801687c:	1414      	asrs	r4, r2, #16
 801687e:	d401      	bmi.n	8016884 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016880:	42b4      	cmp	r4, r6
 8016882:	db07      	blt.n	8016894 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016884:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8016886:	3b01      	subs	r3, #1
 8016888:	3002      	adds	r0, #2
 801688a:	4421      	add	r1, r4
 801688c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801688e:	4422      	add	r2, r4
 8016890:	e7ee      	b.n	8016870 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8016892:	d017      	beq.n	80168c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016894:	1e5c      	subs	r4, r3, #1
 8016896:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016898:	fb05 1504 	mla	r5, r5, r4, r1
 801689c:	142d      	asrs	r5, r5, #16
 801689e:	d409      	bmi.n	80168b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80168a0:	42bd      	cmp	r5, r7
 80168a2:	da07      	bge.n	80168b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80168a4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80168a6:	fb05 2404 	mla	r4, r5, r4, r2
 80168aa:	1424      	asrs	r4, r4, #16
 80168ac:	d402      	bmi.n	80168b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80168ae:	42b4      	cmp	r4, r6
 80168b0:	f2c0 80b3 	blt.w	8016a1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80168b4:	2600      	movs	r6, #0
 80168b6:	199c      	adds	r4, r3, r6
 80168b8:	2c00      	cmp	r4, #0
 80168ba:	dc3e      	bgt.n	801693a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80168bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80168c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80168c4:	f1bb 0f00 	cmp.w	fp, #0
 80168c8:	f340 810e 	ble.w	8016ae8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80168cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80168d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80168d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80168d6:	f1bb 0b01 	subs.w	fp, fp, #1
 80168da:	eeb0 6a62 	vmov.f32	s12, s5
 80168de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80168e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80168e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80168ee:	eeb0 6a43 	vmov.f32	s12, s6
 80168f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168f6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80168fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80168fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016902:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016906:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801690a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801690e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016912:	ee12 2a90 	vmov	r2, s5
 8016916:	eef0 2a47 	vmov.f32	s5, s14
 801691a:	fb92 f3f3 	sdiv	r3, r2, r3
 801691e:	ee13 2a10 	vmov	r2, s6
 8016922:	9311      	str	r3, [sp, #68]	@ 0x44
 8016924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016926:	eeb0 3a67 	vmov.f32	s6, s15
 801692a:	fb92 f3f3 	sdiv	r3, r2, r3
 801692e:	9a03      	ldr	r2, [sp, #12]
 8016930:	9312      	str	r3, [sp, #72]	@ 0x48
 8016932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016934:	bf08      	it	eq
 8016936:	4613      	moveq	r3, r2
 8016938:	e789      	b.n	801684e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801693a:	140f      	asrs	r7, r1, #16
 801693c:	d418      	bmi.n	8016970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801693e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016942:	42bd      	cmp	r5, r7
 8016944:	dd14      	ble.n	8016970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016946:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801694a:	d411      	bmi.n	8016970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801694c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8016950:	4564      	cmp	r4, ip
 8016952:	dd0d      	ble.n	8016970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016954:	b22d      	sxth	r5, r5
 8016956:	9c01      	ldr	r4, [sp, #4]
 8016958:	fb0c 7505 	mla	r5, ip, r5, r7
 801695c:	5d64      	ldrb	r4, [r4, r5]
 801695e:	2cff      	cmp	r4, #255	@ 0xff
 8016960:	d10c      	bne.n	801697c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8016962:	9c00      	ldr	r4, [sp, #0]
 8016964:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8016968:	f06f 0401 	mvn.w	r4, #1
 801696c:	4374      	muls	r4, r6
 801696e:	5305      	strh	r5, [r0, r4]
 8016970:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8016972:	3e01      	subs	r6, #1
 8016974:	4421      	add	r1, r4
 8016976:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016978:	4422      	add	r2, r4
 801697a:	e79c      	b.n	80168b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801697c:	2c00      	cmp	r4, #0
 801697e:	d0f7      	beq.n	8016970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016980:	9f00      	ldr	r7, [sp, #0]
 8016982:	fa1f fc84 	uxth.w	ip, r4
 8016986:	43e4      	mvns	r4, r4
 8016988:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801698c:	f06f 0501 	mvn.w	r5, #1
 8016990:	b2e4      	uxtb	r4, r4
 8016992:	4375      	muls	r5, r6
 8016994:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8016998:	9502      	str	r5, [sp, #8]
 801699a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801699e:	5b45      	ldrh	r5, [r0, r5]
 80169a0:	122f      	asrs	r7, r5, #8
 80169a2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80169a6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80169aa:	00ed      	lsls	r5, r5, #3
 80169ac:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80169b0:	fb17 f704 	smulbb	r7, r7, r4
 80169b4:	b2ed      	uxtb	r5, r5
 80169b6:	fb1a fa04 	smulbb	sl, sl, r4
 80169ba:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80169be:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80169c2:	fb15 f504 	smulbb	r5, r5, r4
 80169c6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80169ca:	fa1f fe8e 	uxth.w	lr, lr
 80169ce:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80169d2:	fa5f f989 	uxtb.w	r9, r9
 80169d6:	fb07 a70c 	mla	r7, r7, ip, sl
 80169da:	f10e 0401 	add.w	r4, lr, #1
 80169de:	fb09 550c 	mla	r5, r9, ip, r5
 80169e2:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80169e6:	9c02      	ldr	r4, [sp, #8]
 80169e8:	b2ad      	uxth	r5, r5
 80169ea:	b2bf      	uxth	r7, r7
 80169ec:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 80169f0:	f105 0a01 	add.w	sl, r5, #1
 80169f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80169f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80169fc:	ea4a 0e0e 	orr.w	lr, sl, lr
 8016a00:	f107 0a01 	add.w	sl, r7, #1
 8016a04:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8016a08:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016a0c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016a10:	ea4e 0e0a 	orr.w	lr, lr, sl
 8016a14:	f820 e004 	strh.w	lr, [r0, r4]
 8016a18:	e7aa      	b.n	8016970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016a1a:	f04f 0900 	mov.w	r9, #0
 8016a1e:	eba3 0409 	sub.w	r4, r3, r9
 8016a22:	2c00      	cmp	r4, #0
 8016a24:	f77f af4a 	ble.w	80168bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016a28:	1414      	asrs	r4, r2, #16
 8016a2a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8016a2e:	140d      	asrs	r5, r1, #16
 8016a30:	fb06 5504 	mla	r5, r6, r4, r5
 8016a34:	9c01      	ldr	r4, [sp, #4]
 8016a36:	5d64      	ldrb	r4, [r4, r5]
 8016a38:	2cff      	cmp	r4, #255	@ 0xff
 8016a3a:	d10b      	bne.n	8016a54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8016a3c:	9c00      	ldr	r4, [sp, #0]
 8016a3e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8016a42:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8016a46:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8016a48:	f109 0901 	add.w	r9, r9, #1
 8016a4c:	4421      	add	r1, r4
 8016a4e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016a50:	4422      	add	r2, r4
 8016a52:	e7e4      	b.n	8016a1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8016a54:	2c00      	cmp	r4, #0
 8016a56:	d0f6      	beq.n	8016a46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8016a58:	9e00      	ldr	r6, [sp, #0]
 8016a5a:	b2a7      	uxth	r7, r4
 8016a5c:	43e4      	mvns	r4, r4
 8016a5e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8016a62:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8016a66:	b2e4      	uxtb	r4, r4
 8016a68:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8016a6c:	122e      	asrs	r6, r5, #8
 8016a6e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8016a72:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8016a76:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8016a7a:	00ed      	lsls	r5, r5, #3
 8016a7c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8016a80:	fb16 f604 	smulbb	r6, r6, r4
 8016a84:	b2ed      	uxtb	r5, r5
 8016a86:	fb1a fa04 	smulbb	sl, sl, r4
 8016a8a:	fb0c 6c07 	mla	ip, ip, r7, r6
 8016a8e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8016a92:	fb15 f504 	smulbb	r5, r5, r4
 8016a96:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016a9a:	fa1f fc8c 	uxth.w	ip, ip
 8016a9e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8016aa2:	fa5f fe8e 	uxtb.w	lr, lr
 8016aa6:	fb06 a607 	mla	r6, r6, r7, sl
 8016aaa:	f10c 0401 	add.w	r4, ip, #1
 8016aae:	fb0e 5507 	mla	r5, lr, r7, r5
 8016ab2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8016ab6:	b2ad      	uxth	r5, r5
 8016ab8:	b2b6      	uxth	r6, r6
 8016aba:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016abe:	f105 0a01 	add.w	sl, r5, #1
 8016ac2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016ac6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016aca:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016ace:	f106 0a01 	add.w	sl, r6, #1
 8016ad2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016ad6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016ada:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016ade:	ea4c 0c0a 	orr.w	ip, ip, sl
 8016ae2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8016ae6:	e7ae      	b.n	8016a46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8016ae8:	b005      	add	sp, #20
 8016aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016aee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016aee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af2:	b085      	sub	sp, #20
 8016af4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8016af6:	9203      	str	r2, [sp, #12]
 8016af8:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016afc:	9100      	str	r1, [sp, #0]
 8016afe:	9201      	str	r2, [sp, #4]
 8016b00:	6841      	ldr	r1, [r0, #4]
 8016b02:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8016b06:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8016b0a:	fb01 2404 	mla	r4, r1, r4, r2
 8016b0e:	6802      	ldr	r2, [r0, #0]
 8016b10:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016b14:	f8de 2000 	ldr.w	r2, [lr]
 8016b18:	9202      	str	r2, [sp, #8]
 8016b1a:	9a01      	ldr	r2, [sp, #4]
 8016b1c:	43d6      	mvns	r6, r2
 8016b1e:	b2f6      	uxtb	r6, r6
 8016b20:	9a00      	ldr	r2, [sp, #0]
 8016b22:	2a00      	cmp	r2, #0
 8016b24:	dc03      	bgt.n	8016b2e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016b26:	9a03      	ldr	r2, [sp, #12]
 8016b28:	2a00      	cmp	r2, #0
 8016b2a:	f340 8124 	ble.w	8016d76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016b2e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b30:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8016b34:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8016b38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016b3a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8016b3e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	dd0e      	ble.n	8016b64 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016b46:	1408      	asrs	r0, r1, #16
 8016b48:	d405      	bmi.n	8016b56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016b4a:	4560      	cmp	r0, ip
 8016b4c:	da03      	bge.n	8016b56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016b4e:	1410      	asrs	r0, r2, #16
 8016b50:	d401      	bmi.n	8016b56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016b52:	42b8      	cmp	r0, r7
 8016b54:	db07      	blt.n	8016b66 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016b56:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016b58:	3b01      	subs	r3, #1
 8016b5a:	3402      	adds	r4, #2
 8016b5c:	4401      	add	r1, r0
 8016b5e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016b60:	4402      	add	r2, r0
 8016b62:	e7ee      	b.n	8016b42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016b64:	d06e      	beq.n	8016c44 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016b66:	1e58      	subs	r0, r3, #1
 8016b68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016b6a:	fb05 1500 	mla	r5, r5, r0, r1
 8016b6e:	142d      	asrs	r5, r5, #16
 8016b70:	d45c      	bmi.n	8016c2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016b72:	4565      	cmp	r5, ip
 8016b74:	da5a      	bge.n	8016c2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016b76:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8016b78:	fb05 2000 	mla	r0, r5, r0, r2
 8016b7c:	1400      	asrs	r0, r0, #16
 8016b7e:	d455      	bmi.n	8016c2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016b80:	42b8      	cmp	r0, r7
 8016b82:	da53      	bge.n	8016c2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016b84:	4699      	mov	r9, r3
 8016b86:	46a2      	mov	sl, r4
 8016b88:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8016b8c:	f1b9 0f00 	cmp.w	r9, #0
 8016b90:	dd54      	ble.n	8016c3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8016b92:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8016b96:	140d      	asrs	r5, r1, #16
 8016b98:	1410      	asrs	r0, r2, #16
 8016b9a:	f109 39ff 	add.w	r9, r9, #4294967295
 8016b9e:	fb07 5000 	mla	r0, r7, r0, r5
 8016ba2:	9d02      	ldr	r5, [sp, #8]
 8016ba4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016ba8:	f8ba 5000 	ldrh.w	r5, [sl]
 8016bac:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016bb0:	122f      	asrs	r7, r5, #8
 8016bb2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8016bb6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8016bba:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8016bbe:	00ed      	lsls	r5, r5, #3
 8016bc0:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8016bc4:	fb17 f706 	smulbb	r7, r7, r6
 8016bc8:	b2ed      	uxtb	r5, r5
 8016bca:	fb18 f806 	smulbb	r8, r8, r6
 8016bce:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8016bd2:	10c7      	asrs	r7, r0, #3
 8016bd4:	fb15 f506 	smulbb	r5, r5, r6
 8016bd8:	00c0      	lsls	r0, r0, #3
 8016bda:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8016bde:	fa1f fc8c 	uxth.w	ip, ip
 8016be2:	b2c0      	uxtb	r0, r0
 8016be4:	fb07 870b 	mla	r7, r7, fp, r8
 8016be8:	fb00 500b 	mla	r0, r0, fp, r5
 8016bec:	f10c 0501 	add.w	r5, ip, #1
 8016bf0:	b2bf      	uxth	r7, r7
 8016bf2:	b280      	uxth	r0, r0
 8016bf4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016bf8:	f107 0801 	add.w	r8, r7, #1
 8016bfc:	1c45      	adds	r5, r0, #1
 8016bfe:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8016c02:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016c06:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016c0a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016c0c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016c10:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016c14:	4401      	add	r1, r0
 8016c16:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8016c1a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016c1c:	ea45 0c0c 	orr.w	ip, r5, ip
 8016c20:	4402      	add	r2, r0
 8016c22:	ea4c 0c08 	orr.w	ip, ip, r8
 8016c26:	f82a cb02 	strh.w	ip, [sl], #2
 8016c2a:	e7af      	b.n	8016b8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016c2c:	f04f 0800 	mov.w	r8, #0
 8016c30:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8016c34:	eb03 0008 	add.w	r0, r3, r8
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	dc41      	bgt.n	8016cc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8016c3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016c44:	9b00      	ldr	r3, [sp, #0]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	f340 8095 	ble.w	8016d76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016c4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c52:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016c56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016c5a:	eef0 6a62 	vmov.f32	s13, s5
 8016c5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016c62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016c66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016c6a:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8016c6e:	eef0 6a43 	vmov.f32	s13, s6
 8016c72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016c76:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8016c7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016c7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016c82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016c86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016c8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016c8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016c92:	ee12 2a90 	vmov	r2, s5
 8016c96:	eef0 2a47 	vmov.f32	s5, s14
 8016c9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c9e:	ee13 2a10 	vmov	r2, s6
 8016ca2:	9311      	str	r3, [sp, #68]	@ 0x44
 8016ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ca6:	eeb0 3a67 	vmov.f32	s6, s15
 8016caa:	fb92 f3f3 	sdiv	r3, r2, r3
 8016cae:	9312      	str	r3, [sp, #72]	@ 0x48
 8016cb0:	9b00      	ldr	r3, [sp, #0]
 8016cb2:	9a03      	ldr	r2, [sp, #12]
 8016cb4:	3b01      	subs	r3, #1
 8016cb6:	9300      	str	r3, [sp, #0]
 8016cb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016cba:	bf08      	it	eq
 8016cbc:	4613      	moveq	r3, r2
 8016cbe:	e72f      	b.n	8016b20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8016cc0:	140f      	asrs	r7, r1, #16
 8016cc2:	d451      	bmi.n	8016d68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016cc4:	f8de 5008 	ldr.w	r5, [lr, #8]
 8016cc8:	42bd      	cmp	r5, r7
 8016cca:	dd4d      	ble.n	8016d68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016ccc:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8016cd0:	d44a      	bmi.n	8016d68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016cd2:	f8de 000c 	ldr.w	r0, [lr, #12]
 8016cd6:	4560      	cmp	r0, ip
 8016cd8:	dd46      	ble.n	8016d68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016cda:	b22d      	sxth	r5, r5
 8016cdc:	9802      	ldr	r0, [sp, #8]
 8016cde:	fb0c 7505 	mla	r5, ip, r5, r7
 8016ce2:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8016ce6:	f06f 0501 	mvn.w	r5, #1
 8016cea:	fb05 fb08 	mul.w	fp, r5, r8
 8016cee:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016cf2:	f834 500b 	ldrh.w	r5, [r4, fp]
 8016cf6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8016cfa:	122f      	asrs	r7, r5, #8
 8016cfc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8016d00:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8016d04:	00ed      	lsls	r5, r5, #3
 8016d06:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8016d0a:	fb17 f706 	smulbb	r7, r7, r6
 8016d0e:	b2ed      	uxtb	r5, r5
 8016d10:	fb19 f906 	smulbb	r9, r9, r6
 8016d14:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8016d18:	10c7      	asrs	r7, r0, #3
 8016d1a:	fb15 f506 	smulbb	r5, r5, r6
 8016d1e:	00c0      	lsls	r0, r0, #3
 8016d20:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8016d24:	fa1f fc8c 	uxth.w	ip, ip
 8016d28:	b2c0      	uxtb	r0, r0
 8016d2a:	fb07 970a 	mla	r7, r7, sl, r9
 8016d2e:	fb00 500a 	mla	r0, r0, sl, r5
 8016d32:	f10c 0501 	add.w	r5, ip, #1
 8016d36:	b2bf      	uxth	r7, r7
 8016d38:	b280      	uxth	r0, r0
 8016d3a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016d3e:	f107 0901 	add.w	r9, r7, #1
 8016d42:	1c45      	adds	r5, r0, #1
 8016d44:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8016d48:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016d4c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016d50:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8016d54:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016d58:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8016d5c:	ea45 0c0c 	orr.w	ip, r5, ip
 8016d60:	ea4c 0c09 	orr.w	ip, ip, r9
 8016d64:	f824 c00b 	strh.w	ip, [r4, fp]
 8016d68:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016d6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8016d6e:	4401      	add	r1, r0
 8016d70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016d72:	4402      	add	r2, r0
 8016d74:	e75e      	b.n	8016c34 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016d76:	b005      	add	sp, #20
 8016d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d80:	b085      	sub	sp, #20
 8016d82:	4693      	mov	fp, r2
 8016d84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016d88:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8016d8a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8016d8c:	6870      	ldr	r0, [r6, #4]
 8016d8e:	9101      	str	r1, [sp, #4]
 8016d90:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8016d94:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8016d98:	fb00 2404 	mla	r4, r0, r4, r2
 8016d9c:	6832      	ldr	r2, [r6, #0]
 8016d9e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016da2:	682a      	ldr	r2, [r5, #0]
 8016da4:	9202      	str	r2, [sp, #8]
 8016da6:	9a01      	ldr	r2, [sp, #4]
 8016da8:	2a00      	cmp	r2, #0
 8016daa:	dc03      	bgt.n	8016db4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8016dac:	f1bb 0f00 	cmp.w	fp, #0
 8016db0:	f340 809a 	ble.w	8016ee8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016db4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016db6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016dba:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016dbe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016dc0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8016dc4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	dd0c      	ble.n	8016de6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016dcc:	1406      	asrs	r6, r0, #16
 8016dce:	d405      	bmi.n	8016ddc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016dd0:	454e      	cmp	r6, r9
 8016dd2:	da03      	bge.n	8016ddc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016dd4:	1416      	asrs	r6, r2, #16
 8016dd6:	d401      	bmi.n	8016ddc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016dd8:	4546      	cmp	r6, r8
 8016dda:	db05      	blt.n	8016de8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016ddc:	4470      	add	r0, lr
 8016dde:	4462      	add	r2, ip
 8016de0:	3b01      	subs	r3, #1
 8016de2:	3402      	adds	r4, #2
 8016de4:	e7f0      	b.n	8016dc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8016de6:	d00f      	beq.n	8016e08 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8016de8:	1e5e      	subs	r6, r3, #1
 8016dea:	fb0e 0706 	mla	r7, lr, r6, r0
 8016dee:	143f      	asrs	r7, r7, #16
 8016df0:	d541      	bpl.n	8016e76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8016df2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8016df6:	4698      	mov	r8, r3
 8016df8:	9603      	str	r6, [sp, #12]
 8016dfa:	f1b8 0f00 	cmp.w	r8, #0
 8016dfe:	dc56      	bgt.n	8016eae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8016e00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016e04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016e08:	9b01      	ldr	r3, [sp, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	dd6c      	ble.n	8016ee8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016e0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016e18:	eeb0 6a62 	vmov.f32	s12, s5
 8016e1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016e20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016e24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e28:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016e2c:	eeb0 6a43 	vmov.f32	s12, s6
 8016e30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e34:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016e38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016e48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016e50:	ee12 2a90 	vmov	r2, s5
 8016e54:	eef0 2a47 	vmov.f32	s5, s14
 8016e58:	fb92 fef3 	sdiv	lr, r2, r3
 8016e5c:	ee13 2a10 	vmov	r2, s6
 8016e60:	eeb0 3a67 	vmov.f32	s6, s15
 8016e64:	fb92 fcf3 	sdiv	ip, r2, r3
 8016e68:	9b01      	ldr	r3, [sp, #4]
 8016e6a:	3b01      	subs	r3, #1
 8016e6c:	9301      	str	r3, [sp, #4]
 8016e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e70:	bf08      	it	eq
 8016e72:	465b      	moveq	r3, fp
 8016e74:	e797      	b.n	8016da6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8016e76:	454f      	cmp	r7, r9
 8016e78:	dabb      	bge.n	8016df2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016e7a:	fb0c 2606 	mla	r6, ip, r6, r2
 8016e7e:	1436      	asrs	r6, r6, #16
 8016e80:	d4b7      	bmi.n	8016df2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016e82:	4546      	cmp	r6, r8
 8016e84:	dab5      	bge.n	8016df2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016e86:	461e      	mov	r6, r3
 8016e88:	46a0      	mov	r8, r4
 8016e8a:	2e00      	cmp	r6, #0
 8016e8c:	ddb8      	ble.n	8016e00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016e8e:	1417      	asrs	r7, r2, #16
 8016e90:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8016e94:	ea4f 4920 	mov.w	r9, r0, asr #16
 8016e98:	9902      	ldr	r1, [sp, #8]
 8016e9a:	4470      	add	r0, lr
 8016e9c:	4462      	add	r2, ip
 8016e9e:	fb0a 9707 	mla	r7, sl, r7, r9
 8016ea2:	3e01      	subs	r6, #1
 8016ea4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8016ea8:	f828 7b02 	strh.w	r7, [r8], #2
 8016eac:	e7ed      	b.n	8016e8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8016eae:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016eb2:	d414      	bmi.n	8016ede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8016eb4:	68ae      	ldr	r6, [r5, #8]
 8016eb6:	454e      	cmp	r6, r9
 8016eb8:	dd11      	ble.n	8016ede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8016eba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016ebe:	d40e      	bmi.n	8016ede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8016ec0:	68ef      	ldr	r7, [r5, #12]
 8016ec2:	4557      	cmp	r7, sl
 8016ec4:	dd0b      	ble.n	8016ede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8016ec6:	b236      	sxth	r6, r6
 8016ec8:	f06f 0101 	mvn.w	r1, #1
 8016ecc:	9f02      	ldr	r7, [sp, #8]
 8016ece:	fb0a 9606 	mla	r6, sl, r6, r9
 8016ed2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8016ed6:	fb01 f608 	mul.w	r6, r1, r8
 8016eda:	9903      	ldr	r1, [sp, #12]
 8016edc:	538f      	strh	r7, [r1, r6]
 8016ede:	4470      	add	r0, lr
 8016ee0:	4462      	add	r2, ip
 8016ee2:	f108 38ff 	add.w	r8, r8, #4294967295
 8016ee6:	e788      	b.n	8016dfa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016ee8:	b005      	add	sp, #20
 8016eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016eee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016eee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef2:	b087      	sub	sp, #28
 8016ef4:	468b      	mov	fp, r1
 8016ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016efa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8016efc:	9203      	str	r2, [sp, #12]
 8016efe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8016f02:	6841      	ldr	r1, [r0, #4]
 8016f04:	9204      	str	r2, [sp, #16]
 8016f06:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8016f0a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8016f0e:	fb01 2505 	mla	r5, r1, r5, r2
 8016f12:	6802      	ldr	r2, [r0, #0]
 8016f14:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8016f18:	f8d9 2000 	ldr.w	r2, [r9]
 8016f1c:	9201      	str	r2, [sp, #4]
 8016f1e:	f1bb 0f00 	cmp.w	fp, #0
 8016f22:	dc03      	bgt.n	8016f2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8016f24:	9a03      	ldr	r2, [sp, #12]
 8016f26:	2a00      	cmp	r2, #0
 8016f28:	f340 8158 	ble.w	80171dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8016f2c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016f2e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8016f32:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016f36:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016f38:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8016f3c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	dd0e      	ble.n	8016f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016f44:	1402      	asrs	r2, r0, #16
 8016f46:	d405      	bmi.n	8016f54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016f48:	42ba      	cmp	r2, r7
 8016f4a:	da03      	bge.n	8016f54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016f4c:	140a      	asrs	r2, r1, #16
 8016f4e:	d401      	bmi.n	8016f54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016f50:	42b2      	cmp	r2, r6
 8016f52:	db07      	blt.n	8016f64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016f54:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016f56:	3b01      	subs	r3, #1
 8016f58:	3502      	adds	r5, #2
 8016f5a:	4410      	add	r0, r2
 8016f5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016f5e:	4411      	add	r1, r2
 8016f60:	e7ee      	b.n	8016f40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8016f62:	d017      	beq.n	8016f94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016f64:	1e5a      	subs	r2, r3, #1
 8016f66:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016f68:	fb04 0402 	mla	r4, r4, r2, r0
 8016f6c:	1424      	asrs	r4, r4, #16
 8016f6e:	d409      	bmi.n	8016f84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016f70:	42bc      	cmp	r4, r7
 8016f72:	da07      	bge.n	8016f84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016f74:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8016f76:	fb04 1202 	mla	r2, r4, r2, r1
 8016f7a:	1412      	asrs	r2, r2, #16
 8016f7c:	d402      	bmi.n	8016f84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016f7e:	42b2      	cmp	r2, r6
 8016f80:	f2c0 80bf 	blt.w	8017102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8016f84:	2700      	movs	r7, #0
 8016f86:	19da      	adds	r2, r3, r7
 8016f88:	2a00      	cmp	r2, #0
 8016f8a:	dc3e      	bgt.n	801700a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016f8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f90:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8016f94:	f1bb 0f00 	cmp.w	fp, #0
 8016f98:	f340 8120 	ble.w	80171dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8016f9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016fa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016fa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016fa6:	f1bb 0b01 	subs.w	fp, fp, #1
 8016faa:	eeb0 6a62 	vmov.f32	s12, s5
 8016fae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016fb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016fb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016fba:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016fbe:	eeb0 6a43 	vmov.f32	s12, s6
 8016fc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016fc6:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016fca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016fce:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016fd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016fd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016fda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016fde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016fe2:	ee12 2a90 	vmov	r2, s5
 8016fe6:	eef0 2a47 	vmov.f32	s5, s14
 8016fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fee:	ee13 2a10 	vmov	r2, s6
 8016ff2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016ff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016ff6:	eeb0 3a67 	vmov.f32	s6, s15
 8016ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ffe:	9a03      	ldr	r2, [sp, #12]
 8017000:	9314      	str	r3, [sp, #80]	@ 0x50
 8017002:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017004:	bf08      	it	eq
 8017006:	4613      	moveq	r3, r2
 8017008:	e789      	b.n	8016f1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801700a:	1406      	asrs	r6, r0, #16
 801700c:	d42d      	bmi.n	801706a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801700e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8017012:	42b4      	cmp	r4, r6
 8017014:	dd29      	ble.n	801706a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017016:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801701a:	d426      	bmi.n	801706a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801701c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017020:	4562      	cmp	r2, ip
 8017022:	dd22      	ble.n	801706a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017024:	b224      	sxth	r4, r4
 8017026:	9a01      	ldr	r2, [sp, #4]
 8017028:	fb0c 6404 	mla	r4, ip, r4, r6
 801702c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8017030:	0e22      	lsrs	r2, r4, #24
 8017032:	d01a      	beq.n	801706a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017034:	9e04      	ldr	r6, [sp, #16]
 8017036:	4372      	muls	r2, r6
 8017038:	1c56      	adds	r6, r2, #1
 801703a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801703e:	0a26      	lsrs	r6, r4, #8
 8017040:	1212      	asrs	r2, r2, #8
 8017042:	9605      	str	r6, [sp, #20]
 8017044:	2aff      	cmp	r2, #255	@ 0xff
 8017046:	d116      	bne.n	8017076 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8017048:	f06f 0201 	mvn.w	r2, #1
 801704c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8017050:	fb02 fc07 	mul.w	ip, r2, r7
 8017054:	0962      	lsrs	r2, r4, #5
 8017056:	f026 0607 	bic.w	r6, r6, #7
 801705a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801705e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8017062:	4316      	orrs	r6, r2
 8017064:	4326      	orrs	r6, r4
 8017066:	f825 600c 	strh.w	r6, [r5, ip]
 801706a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801706c:	3f01      	subs	r7, #1
 801706e:	4410      	add	r0, r2
 8017070:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017072:	4411      	add	r1, r2
 8017074:	e787      	b.n	8016f86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017076:	f06f 0601 	mvn.w	r6, #1
 801707a:	fa1f fa82 	uxth.w	sl, r2
 801707e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8017082:	43d2      	mvns	r2, r2
 8017084:	437e      	muls	r6, r7
 8017086:	b2e4      	uxtb	r4, r4
 8017088:	fb1c fc0a 	smulbb	ip, ip, sl
 801708c:	b2d2      	uxtb	r2, r2
 801708e:	f835 8006 	ldrh.w	r8, [r5, r6]
 8017092:	fb14 f40a 	smulbb	r4, r4, sl
 8017096:	9602      	str	r6, [sp, #8]
 8017098:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801709c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80170a0:	fb16 f60a 	smulbb	r6, r6, sl
 80170a4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80170a8:	fb0e ce02 	mla	lr, lr, r2, ip
 80170ac:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80170b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80170b4:	fa1f fe8e 	uxth.w	lr, lr
 80170b8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80170bc:	fa5f f888 	uxtb.w	r8, r8
 80170c0:	fb0c 6c02 	mla	ip, ip, r2, r6
 80170c4:	fb08 4402 	mla	r4, r8, r2, r4
 80170c8:	f10e 0201 	add.w	r2, lr, #1
 80170cc:	fa1f fc8c 	uxth.w	ip, ip
 80170d0:	b2a4      	uxth	r4, r4
 80170d2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80170d6:	9a02      	ldr	r2, [sp, #8]
 80170d8:	1c66      	adds	r6, r4, #1
 80170da:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 80170de:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80170e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80170e6:	ea46 0e0e 	orr.w	lr, r6, lr
 80170ea:	f10c 0601 	add.w	r6, ip, #1
 80170ee:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80170f2:	0976      	lsrs	r6, r6, #5
 80170f4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80170f8:	ea4e 0e06 	orr.w	lr, lr, r6
 80170fc:	f825 e002 	strh.w	lr, [r5, r2]
 8017100:	e7b3      	b.n	801706a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017102:	f04f 0800 	mov.w	r8, #0
 8017106:	eba3 0208 	sub.w	r2, r3, r8
 801710a:	2a00      	cmp	r2, #0
 801710c:	f77f af3e 	ble.w	8016f8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017110:	1404      	asrs	r4, r0, #16
 8017112:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8017116:	140a      	asrs	r2, r1, #16
 8017118:	fb06 4202 	mla	r2, r6, r2, r4
 801711c:	9c01      	ldr	r4, [sp, #4]
 801711e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8017122:	0e22      	lsrs	r2, r4, #24
 8017124:	d015      	beq.n	8017152 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8017126:	9e04      	ldr	r6, [sp, #16]
 8017128:	4372      	muls	r2, r6
 801712a:	1c56      	adds	r6, r2, #1
 801712c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017130:	0a26      	lsrs	r6, r4, #8
 8017132:	1212      	asrs	r2, r2, #8
 8017134:	2aff      	cmp	r2, #255	@ 0xff
 8017136:	d113      	bne.n	8017160 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8017138:	0962      	lsrs	r2, r4, #5
 801713a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801713e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017142:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8017146:	f026 0607 	bic.w	r6, r6, #7
 801714a:	4316      	orrs	r6, r2
 801714c:	4326      	orrs	r6, r4
 801714e:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8017152:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017154:	f108 0801 	add.w	r8, r8, #1
 8017158:	4410      	add	r0, r2
 801715a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801715c:	4411      	add	r1, r2
 801715e:	e7d2      	b.n	8017106 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8017160:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8017164:	fa1f fa82 	uxth.w	sl, r2
 8017168:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801716c:	43d2      	mvns	r2, r2
 801716e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8017172:	fb17 f70a 	smulbb	r7, r7, sl
 8017176:	b2d2      	uxtb	r2, r2
 8017178:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801717c:	b2e4      	uxtb	r4, r4
 801717e:	b2f6      	uxtb	r6, r6
 8017180:	fb0c 7c02 	mla	ip, ip, r2, r7
 8017184:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8017188:	fb14 f40a 	smulbb	r4, r4, sl
 801718c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017190:	fa1f fc8c 	uxth.w	ip, ip
 8017194:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8017198:	fb16 f60a 	smulbb	r6, r6, sl
 801719c:	fa5f fe8e 	uxtb.w	lr, lr
 80171a0:	fb0e 4402 	mla	r4, lr, r2, r4
 80171a4:	fb07 6702 	mla	r7, r7, r2, r6
 80171a8:	f10c 0201 	add.w	r2, ip, #1
 80171ac:	b2a4      	uxth	r4, r4
 80171ae:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80171b2:	1c66      	adds	r6, r4, #1
 80171b4:	b2bf      	uxth	r7, r7
 80171b6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80171ba:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80171be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80171c2:	ea46 0c0c 	orr.w	ip, r6, ip
 80171c6:	1c7e      	adds	r6, r7, #1
 80171c8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80171cc:	0976      	lsrs	r6, r6, #5
 80171ce:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80171d2:	ea4c 0c06 	orr.w	ip, ip, r6
 80171d6:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80171da:	e7ba      	b.n	8017152 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80171dc:	b007      	add	sp, #28
 80171de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080171e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80171e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e8:	b085      	sub	sp, #20
 80171ea:	468b      	mov	fp, r1
 80171ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80171f0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80171f2:	9203      	str	r2, [sp, #12]
 80171f4:	6841      	ldr	r1, [r0, #4]
 80171f6:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80171fa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80171fe:	fb01 2404 	mla	r4, r1, r4, r2
 8017202:	6802      	ldr	r2, [r0, #0]
 8017204:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017208:	f8d8 2000 	ldr.w	r2, [r8]
 801720c:	9201      	str	r2, [sp, #4]
 801720e:	f1bb 0f00 	cmp.w	fp, #0
 8017212:	dc03      	bgt.n	801721c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017214:	9a03      	ldr	r2, [sp, #12]
 8017216:	2a00      	cmp	r2, #0
 8017218:	f340 814f 	ble.w	80174ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801721c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801721e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8017222:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8017226:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017228:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801722c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017230:	2b00      	cmp	r3, #0
 8017232:	dd0e      	ble.n	8017252 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017234:	1408      	asrs	r0, r1, #16
 8017236:	d405      	bmi.n	8017244 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017238:	42b8      	cmp	r0, r7
 801723a:	da03      	bge.n	8017244 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801723c:	1410      	asrs	r0, r2, #16
 801723e:	d401      	bmi.n	8017244 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017240:	42b0      	cmp	r0, r6
 8017242:	db07      	blt.n	8017254 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017244:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017246:	3b01      	subs	r3, #1
 8017248:	3402      	adds	r4, #2
 801724a:	4401      	add	r1, r0
 801724c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801724e:	4402      	add	r2, r0
 8017250:	e7ee      	b.n	8017230 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017252:	d017      	beq.n	8017284 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017254:	1e58      	subs	r0, r3, #1
 8017256:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8017258:	fb05 1500 	mla	r5, r5, r0, r1
 801725c:	142d      	asrs	r5, r5, #16
 801725e:	d409      	bmi.n	8017274 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017260:	42bd      	cmp	r5, r7
 8017262:	da07      	bge.n	8017274 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017264:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017266:	fb05 2000 	mla	r0, r5, r0, r2
 801726a:	1400      	asrs	r0, r0, #16
 801726c:	d402      	bmi.n	8017274 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801726e:	42b0      	cmp	r0, r6
 8017270:	f2c0 80ba 	blt.w	80173e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8017274:	2600      	movs	r6, #0
 8017276:	1998      	adds	r0, r3, r6
 8017278:	2800      	cmp	r0, #0
 801727a:	dc3e      	bgt.n	80172fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801727c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017280:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017284:	f1bb 0f00 	cmp.w	fp, #0
 8017288:	f340 8117 	ble.w	80174ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801728c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017292:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017296:	f1bb 0b01 	subs.w	fp, fp, #1
 801729a:	eeb0 6a62 	vmov.f32	s12, s5
 801729e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80172a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80172a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80172aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80172ae:	eeb0 6a43 	vmov.f32	s12, s6
 80172b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80172b6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80172ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80172be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80172c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80172c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80172ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80172ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80172d2:	ee12 2a90 	vmov	r2, s5
 80172d6:	eef0 2a47 	vmov.f32	s5, s14
 80172da:	fb92 f3f3 	sdiv	r3, r2, r3
 80172de:	ee13 2a10 	vmov	r2, s6
 80172e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80172e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80172e6:	eeb0 3a67 	vmov.f32	s6, s15
 80172ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80172ee:	9a03      	ldr	r2, [sp, #12]
 80172f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80172f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80172f4:	bf08      	it	eq
 80172f6:	4613      	moveq	r3, r2
 80172f8:	e789      	b.n	801720e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80172fa:	140f      	asrs	r7, r1, #16
 80172fc:	d424      	bmi.n	8017348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80172fe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017302:	42bd      	cmp	r5, r7
 8017304:	dd20      	ble.n	8017348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017306:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801730a:	d41d      	bmi.n	8017348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801730c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8017310:	4560      	cmp	r0, ip
 8017312:	dd19      	ble.n	8017348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017314:	b22d      	sxth	r5, r5
 8017316:	9801      	ldr	r0, [sp, #4]
 8017318:	fb0c 7505 	mla	r5, ip, r5, r7
 801731c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017320:	0e07      	lsrs	r7, r0, #24
 8017322:	2fff      	cmp	r7, #255	@ 0xff
 8017324:	d116      	bne.n	8017354 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017326:	f06f 0501 	mvn.w	r5, #1
 801732a:	fb05 f706 	mul.w	r7, r5, r6
 801732e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8017332:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8017336:	0945      	lsrs	r5, r0, #5
 8017338:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801733c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8017340:	ea4c 0505 	orr.w	r5, ip, r5
 8017344:	4305      	orrs	r5, r0
 8017346:	53e5      	strh	r5, [r4, r7]
 8017348:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801734a:	3e01      	subs	r6, #1
 801734c:	4401      	add	r1, r0
 801734e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017350:	4402      	add	r2, r0
 8017352:	e790      	b.n	8017276 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017354:	b2fd      	uxtb	r5, r7
 8017356:	2f00      	cmp	r7, #0
 8017358:	d0f6      	beq.n	8017348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801735a:	f06f 0701 	mvn.w	r7, #1
 801735e:	fa1f f985 	uxth.w	r9, r5
 8017362:	43ed      	mvns	r5, r5
 8017364:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017368:	4377      	muls	r7, r6
 801736a:	fb1a fa09 	smulbb	sl, sl, r9
 801736e:	b2ed      	uxtb	r5, r5
 8017370:	f834 e007 	ldrh.w	lr, [r4, r7]
 8017374:	9702      	str	r7, [sp, #8]
 8017376:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801737a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801737e:	fb17 f709 	smulbb	r7, r7, r9
 8017382:	b2c0      	uxtb	r0, r0
 8017384:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8017388:	fb10 f009 	smulbb	r0, r0, r9
 801738c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8017390:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8017394:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017398:	fa1f fc8c 	uxth.w	ip, ip
 801739c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80173a0:	fa5f fe8e 	uxtb.w	lr, lr
 80173a4:	fb07 a705 	mla	r7, r7, r5, sl
 80173a8:	fb0e 0005 	mla	r0, lr, r5, r0
 80173ac:	f10c 0501 	add.w	r5, ip, #1
 80173b0:	b2bf      	uxth	r7, r7
 80173b2:	b280      	uxth	r0, r0
 80173b4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80173b8:	f100 0a01 	add.w	sl, r0, #1
 80173bc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80173c0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80173c4:	9802      	ldr	r0, [sp, #8]
 80173c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80173ca:	ea4a 0c0c 	orr.w	ip, sl, ip
 80173ce:	f107 0a01 	add.w	sl, r7, #1
 80173d2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80173d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80173da:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80173de:	ea4c 0c0a 	orr.w	ip, ip, sl
 80173e2:	f824 c000 	strh.w	ip, [r4, r0]
 80173e6:	e7af      	b.n	8017348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80173e8:	f04f 0e00 	mov.w	lr, #0
 80173ec:	eba3 000e 	sub.w	r0, r3, lr
 80173f0:	2800      	cmp	r0, #0
 80173f2:	f77f af43 	ble.w	801727c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80173f6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80173fa:	140d      	asrs	r5, r1, #16
 80173fc:	1410      	asrs	r0, r2, #16
 80173fe:	fb06 5000 	mla	r0, r6, r0, r5
 8017402:	9d01      	ldr	r5, [sp, #4]
 8017404:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8017408:	0e2e      	lsrs	r6, r5, #24
 801740a:	2eff      	cmp	r6, #255	@ 0xff
 801740c:	d112      	bne.n	8017434 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801740e:	482c      	ldr	r0, [pc, #176]	@ (80174c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8017410:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8017414:	0968      	lsrs	r0, r5, #5
 8017416:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801741a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801741e:	4330      	orrs	r0, r6
 8017420:	4328      	orrs	r0, r5
 8017422:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8017426:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017428:	f10e 0e01 	add.w	lr, lr, #1
 801742c:	4401      	add	r1, r0
 801742e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017430:	4402      	add	r2, r0
 8017432:	e7db      	b.n	80173ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017434:	b2f0      	uxtb	r0, r6
 8017436:	2e00      	cmp	r6, #0
 8017438:	d0f5      	beq.n	8017426 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801743a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801743e:	fa1f f980 	uxth.w	r9, r0
 8017442:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017446:	43c0      	mvns	r0, r0
 8017448:	ea4f 272c 	mov.w	r7, ip, asr #8
 801744c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017450:	fb16 f609 	smulbb	r6, r6, r9
 8017454:	b2c0      	uxtb	r0, r0
 8017456:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801745a:	b2ed      	uxtb	r5, r5
 801745c:	fb1a fa09 	smulbb	sl, sl, r9
 8017460:	fb07 6700 	mla	r7, r7, r0, r6
 8017464:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8017468:	fb15 f509 	smulbb	r5, r5, r9
 801746c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017470:	b2bf      	uxth	r7, r7
 8017472:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8017476:	fa5f fc8c 	uxtb.w	ip, ip
 801747a:	fb06 a600 	mla	r6, r6, r0, sl
 801747e:	fb0c 5500 	mla	r5, ip, r0, r5
 8017482:	1c78      	adds	r0, r7, #1
 8017484:	b2b6      	uxth	r6, r6
 8017486:	b2ad      	uxth	r5, r5
 8017488:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801748c:	f105 0a01 	add.w	sl, r5, #1
 8017490:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8017494:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017498:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801749c:	ea4a 0707 	orr.w	r7, sl, r7
 80174a0:	f106 0a01 	add.w	sl, r6, #1
 80174a4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80174a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80174ac:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80174b0:	ea47 070a 	orr.w	r7, r7, sl
 80174b4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80174b8:	e7b5      	b.n	8017426 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80174ba:	b005      	add	sp, #20
 80174bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c0:	fffff800 	.word	0xfffff800

080174c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80174c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c8:	b087      	sub	sp, #28
 80174ca:	468b      	mov	fp, r1
 80174cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80174d0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80174d2:	9203      	str	r2, [sp, #12]
 80174d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80174d8:	6841      	ldr	r1, [r0, #4]
 80174da:	9204      	str	r2, [sp, #16]
 80174dc:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 80174e0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 80174e4:	fb01 2404 	mla	r4, r1, r4, r2
 80174e8:	6802      	ldr	r2, [r0, #0]
 80174ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80174ee:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80174f2:	3201      	adds	r2, #1
 80174f4:	f022 0201 	bic.w	r2, r2, #1
 80174f8:	9200      	str	r2, [sp, #0]
 80174fa:	f8d9 2000 	ldr.w	r2, [r9]
 80174fe:	9201      	str	r2, [sp, #4]
 8017500:	f1bb 0f00 	cmp.w	fp, #0
 8017504:	dc03      	bgt.n	801750e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017506:	9a03      	ldr	r2, [sp, #12]
 8017508:	2a00      	cmp	r2, #0
 801750a:	f340 816a 	ble.w	80177e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801750e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017510:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8017514:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017518:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801751a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801751e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8017522:	2b00      	cmp	r3, #0
 8017524:	dd0e      	ble.n	8017544 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017526:	1402      	asrs	r2, r0, #16
 8017528:	d405      	bmi.n	8017536 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801752a:	42ba      	cmp	r2, r7
 801752c:	da03      	bge.n	8017536 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801752e:	140a      	asrs	r2, r1, #16
 8017530:	d401      	bmi.n	8017536 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017532:	42b2      	cmp	r2, r6
 8017534:	db07      	blt.n	8017546 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8017536:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017538:	3b01      	subs	r3, #1
 801753a:	3402      	adds	r4, #2
 801753c:	4410      	add	r0, r2
 801753e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017540:	4411      	add	r1, r2
 8017542:	e7ee      	b.n	8017522 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017544:	d017      	beq.n	8017576 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017546:	1e5a      	subs	r2, r3, #1
 8017548:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801754a:	fb05 0502 	mla	r5, r5, r2, r0
 801754e:	142d      	asrs	r5, r5, #16
 8017550:	d409      	bmi.n	8017566 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017552:	42bd      	cmp	r5, r7
 8017554:	da07      	bge.n	8017566 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017556:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017558:	fb05 1202 	mla	r2, r5, r2, r1
 801755c:	1412      	asrs	r2, r2, #16
 801755e:	d402      	bmi.n	8017566 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017560:	42b2      	cmp	r2, r6
 8017562:	f2c0 80c8 	blt.w	80176f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8017566:	2700      	movs	r7, #0
 8017568:	19da      	adds	r2, r3, r7
 801756a:	2a00      	cmp	r2, #0
 801756c:	dc3e      	bgt.n	80175ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801756e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017572:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017576:	f1bb 0f00 	cmp.w	fp, #0
 801757a:	f340 8132 	ble.w	80177e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801757e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017582:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017584:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017588:	f1bb 0b01 	subs.w	fp, fp, #1
 801758c:	eeb0 6a62 	vmov.f32	s12, s5
 8017590:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017594:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017598:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801759c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80175a0:	eeb0 6a43 	vmov.f32	s12, s6
 80175a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80175a8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80175ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80175b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80175b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80175b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80175bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80175c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80175c4:	ee12 2a90 	vmov	r2, s5
 80175c8:	eef0 2a47 	vmov.f32	s5, s14
 80175cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80175d0:	ee13 2a10 	vmov	r2, s6
 80175d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80175d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80175d8:	eeb0 3a67 	vmov.f32	s6, s15
 80175dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80175e0:	9a03      	ldr	r2, [sp, #12]
 80175e2:	9314      	str	r3, [sp, #80]	@ 0x50
 80175e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80175e6:	bf08      	it	eq
 80175e8:	4613      	moveq	r3, r2
 80175ea:	e789      	b.n	8017500 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80175ec:	1405      	asrs	r5, r0, #16
 80175ee:	d436      	bmi.n	801765e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80175f0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80175f4:	42aa      	cmp	r2, r5
 80175f6:	dd32      	ble.n	801765e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80175f8:	140e      	asrs	r6, r1, #16
 80175fa:	d430      	bmi.n	801765e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80175fc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017600:	42b2      	cmp	r2, r6
 8017602:	dd2c      	ble.n	801765e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8017604:	9a00      	ldr	r2, [sp, #0]
 8017606:	fb06 5502 	mla	r5, r6, r2, r5
 801760a:	9e01      	ldr	r6, [sp, #4]
 801760c:	086a      	lsrs	r2, r5, #1
 801760e:	5cb2      	ldrb	r2, [r6, r2]
 8017610:	07ee      	lsls	r6, r5, #31
 8017612:	bf54      	ite	pl
 8017614:	f002 020f 	andpl.w	r2, r2, #15
 8017618:	1112      	asrmi	r2, r2, #4
 801761a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801761e:	b2d2      	uxtb	r2, r2
 8017620:	b1ea      	cbz	r2, 801765e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8017622:	9d04      	ldr	r5, [sp, #16]
 8017624:	436a      	muls	r2, r5
 8017626:	1c55      	adds	r5, r2, #1
 8017628:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801762c:	4d6e      	ldr	r5, [pc, #440]	@ (80177e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801762e:	1212      	asrs	r2, r2, #8
 8017630:	682d      	ldr	r5, [r5, #0]
 8017632:	2aff      	cmp	r2, #255	@ 0xff
 8017634:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8017638:	9605      	str	r6, [sp, #20]
 801763a:	d116      	bne.n	801766a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801763c:	f06f 0201 	mvn.w	r2, #1
 8017640:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8017644:	fb02 fc07 	mul.w	ip, r2, r7
 8017648:	096a      	lsrs	r2, r5, #5
 801764a:	f026 0607 	bic.w	r6, r6, #7
 801764e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017652:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8017656:	4316      	orrs	r6, r2
 8017658:	432e      	orrs	r6, r5
 801765a:	f824 600c 	strh.w	r6, [r4, ip]
 801765e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017660:	3f01      	subs	r7, #1
 8017662:	4410      	add	r0, r2
 8017664:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017666:	4411      	add	r1, r2
 8017668:	e77e      	b.n	8017568 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801766a:	f06f 0601 	mvn.w	r6, #1
 801766e:	fa1f fa82 	uxth.w	sl, r2
 8017672:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8017676:	43d2      	mvns	r2, r2
 8017678:	437e      	muls	r6, r7
 801767a:	b2ed      	uxtb	r5, r5
 801767c:	fb1c fc0a 	smulbb	ip, ip, sl
 8017680:	b2d2      	uxtb	r2, r2
 8017682:	f834 8006 	ldrh.w	r8, [r4, r6]
 8017686:	fb15 f50a 	smulbb	r5, r5, sl
 801768a:	9602      	str	r6, [sp, #8]
 801768c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8017690:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8017694:	fb16 f60a 	smulbb	r6, r6, sl
 8017698:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801769c:	fb0e ce02 	mla	lr, lr, r2, ip
 80176a0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80176a4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80176a8:	fa1f fe8e 	uxth.w	lr, lr
 80176ac:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80176b0:	fa5f f888 	uxtb.w	r8, r8
 80176b4:	fb0c 6c02 	mla	ip, ip, r2, r6
 80176b8:	fb08 5502 	mla	r5, r8, r2, r5
 80176bc:	f10e 0201 	add.w	r2, lr, #1
 80176c0:	fa1f fc8c 	uxth.w	ip, ip
 80176c4:	b2ad      	uxth	r5, r5
 80176c6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80176ca:	9a02      	ldr	r2, [sp, #8]
 80176cc:	1c6e      	adds	r6, r5, #1
 80176ce:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 80176d2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80176d6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80176da:	ea46 0e0e 	orr.w	lr, r6, lr
 80176de:	f10c 0601 	add.w	r6, ip, #1
 80176e2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80176e6:	0976      	lsrs	r6, r6, #5
 80176e8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80176ec:	ea4e 0e06 	orr.w	lr, lr, r6
 80176f0:	f824 e002 	strh.w	lr, [r4, r2]
 80176f4:	e7b3      	b.n	801765e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80176f6:	f04f 0800 	mov.w	r8, #0
 80176fa:	eba3 0208 	sub.w	r2, r3, r8
 80176fe:	2a00      	cmp	r2, #0
 8017700:	f77f af35 	ble.w	801756e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8017704:	1402      	asrs	r2, r0, #16
 8017706:	9e00      	ldr	r6, [sp, #0]
 8017708:	140d      	asrs	r5, r1, #16
 801770a:	fb06 2505 	mla	r5, r6, r5, r2
 801770e:	9e01      	ldr	r6, [sp, #4]
 8017710:	086a      	lsrs	r2, r5, #1
 8017712:	07ed      	lsls	r5, r5, #31
 8017714:	5cb2      	ldrb	r2, [r6, r2]
 8017716:	bf54      	ite	pl
 8017718:	f002 020f 	andpl.w	r2, r2, #15
 801771c:	1112      	asrmi	r2, r2, #4
 801771e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017722:	b2d2      	uxtb	r2, r2
 8017724:	b1c2      	cbz	r2, 8017758 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017726:	9d04      	ldr	r5, [sp, #16]
 8017728:	436a      	muls	r2, r5
 801772a:	1c55      	adds	r5, r2, #1
 801772c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8017730:	4d2d      	ldr	r5, [pc, #180]	@ (80177e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8017732:	1212      	asrs	r2, r2, #8
 8017734:	682e      	ldr	r6, [r5, #0]
 8017736:	2aff      	cmp	r2, #255	@ 0xff
 8017738:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801773c:	d113      	bne.n	8017766 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801773e:	0972      	lsrs	r2, r6, #5
 8017740:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8017744:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8017748:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801774c:	f025 0507 	bic.w	r5, r5, #7
 8017750:	4315      	orrs	r5, r2
 8017752:	4335      	orrs	r5, r6
 8017754:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8017758:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801775a:	f108 0801 	add.w	r8, r8, #1
 801775e:	4410      	add	r0, r2
 8017760:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017762:	4411      	add	r1, r2
 8017764:	e7c9      	b.n	80176fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8017766:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801776a:	fa1f fa82 	uxth.w	sl, r2
 801776e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8017772:	43d2      	mvns	r2, r2
 8017774:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8017778:	fb17 f70a 	smulbb	r7, r7, sl
 801777c:	b2d2      	uxtb	r2, r2
 801777e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8017782:	b2f6      	uxtb	r6, r6
 8017784:	b2ed      	uxtb	r5, r5
 8017786:	fb0c 7c02 	mla	ip, ip, r2, r7
 801778a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801778e:	fb16 f60a 	smulbb	r6, r6, sl
 8017792:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017796:	fa1f fc8c 	uxth.w	ip, ip
 801779a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801779e:	fb15 f50a 	smulbb	r5, r5, sl
 80177a2:	fa5f fe8e 	uxtb.w	lr, lr
 80177a6:	fb0e 6602 	mla	r6, lr, r2, r6
 80177aa:	fb07 5702 	mla	r7, r7, r2, r5
 80177ae:	f10c 0201 	add.w	r2, ip, #1
 80177b2:	b2b6      	uxth	r6, r6
 80177b4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80177b8:	1c75      	adds	r5, r6, #1
 80177ba:	b2bf      	uxth	r7, r7
 80177bc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80177c0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80177c4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80177c8:	ea45 0c0c 	orr.w	ip, r5, ip
 80177cc:	1c7d      	adds	r5, r7, #1
 80177ce:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80177d2:	096d      	lsrs	r5, r5, #5
 80177d4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80177d8:	ea4c 0c05 	orr.w	ip, ip, r5
 80177dc:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80177e0:	e7ba      	b.n	8017758 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80177e2:	b007      	add	sp, #28
 80177e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177e8:	20001dfc 	.word	0x20001dfc

080177ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80177ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f0:	b087      	sub	sp, #28
 80177f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80177f6:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 8017b00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80177fa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80177fc:	9101      	str	r1, [sp, #4]
 80177fe:	9205      	str	r2, [sp, #20]
 8017800:	6841      	ldr	r1, [r0, #4]
 8017802:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8017806:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801780a:	fb01 2404 	mla	r4, r1, r4, r2
 801780e:	6802      	ldr	r2, [r0, #0]
 8017810:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017814:	f8db 2008 	ldr.w	r2, [fp, #8]
 8017818:	3201      	adds	r2, #1
 801781a:	f022 0201 	bic.w	r2, r2, #1
 801781e:	9202      	str	r2, [sp, #8]
 8017820:	f8db 2000 	ldr.w	r2, [fp]
 8017824:	9203      	str	r2, [sp, #12]
 8017826:	9a01      	ldr	r2, [sp, #4]
 8017828:	2a00      	cmp	r2, #0
 801782a:	dc03      	bgt.n	8017834 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801782c:	9a05      	ldr	r2, [sp, #20]
 801782e:	2a00      	cmp	r2, #0
 8017830:	f340 8162 	ble.w	8017af8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8017834:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017836:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801783a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801783e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017840:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8017844:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8017848:	2b00      	cmp	r3, #0
 801784a:	dd0e      	ble.n	801786a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801784c:	1402      	asrs	r2, r0, #16
 801784e:	d405      	bmi.n	801785c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017850:	42ba      	cmp	r2, r7
 8017852:	da03      	bge.n	801785c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017854:	140a      	asrs	r2, r1, #16
 8017856:	d401      	bmi.n	801785c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017858:	42b2      	cmp	r2, r6
 801785a:	db07      	blt.n	801786c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801785c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801785e:	3b01      	subs	r3, #1
 8017860:	3402      	adds	r4, #2
 8017862:	4410      	add	r0, r2
 8017864:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017866:	4411      	add	r1, r2
 8017868:	e7ee      	b.n	8017848 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801786a:	d017      	beq.n	801789c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801786c:	1e5a      	subs	r2, r3, #1
 801786e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017870:	fb05 0502 	mla	r5, r5, r2, r0
 8017874:	142d      	asrs	r5, r5, #16
 8017876:	d409      	bmi.n	801788c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017878:	42bd      	cmp	r5, r7
 801787a:	da07      	bge.n	801788c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801787c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801787e:	fb05 1202 	mla	r2, r5, r2, r1
 8017882:	1412      	asrs	r2, r2, #16
 8017884:	d402      	bmi.n	801788c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017886:	42b2      	cmp	r2, r6
 8017888:	f2c0 80c3 	blt.w	8017a12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801788c:	2500      	movs	r5, #0
 801788e:	195a      	adds	r2, r3, r5
 8017890:	2a00      	cmp	r2, #0
 8017892:	dc3f      	bgt.n	8017914 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8017894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017898:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801789c:	9b01      	ldr	r3, [sp, #4]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	f340 812a 	ble.w	8017af8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80178a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80178a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80178aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80178ae:	eeb0 6a62 	vmov.f32	s12, s5
 80178b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80178b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80178ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80178be:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80178c2:	eeb0 6a43 	vmov.f32	s12, s6
 80178c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80178ca:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80178ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80178d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80178d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80178da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80178de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80178e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80178e6:	ee12 2a90 	vmov	r2, s5
 80178ea:	eef0 2a47 	vmov.f32	s5, s14
 80178ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80178f2:	ee13 2a10 	vmov	r2, s6
 80178f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80178f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80178fa:	eeb0 3a67 	vmov.f32	s6, s15
 80178fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017902:	9314      	str	r3, [sp, #80]	@ 0x50
 8017904:	9b01      	ldr	r3, [sp, #4]
 8017906:	9a05      	ldr	r2, [sp, #20]
 8017908:	3b01      	subs	r3, #1
 801790a:	9301      	str	r3, [sp, #4]
 801790c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801790e:	bf08      	it	eq
 8017910:	4613      	moveq	r3, r2
 8017912:	e788      	b.n	8017826 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017914:	1406      	asrs	r6, r0, #16
 8017916:	d42c      	bmi.n	8017972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017918:	f8db 2008 	ldr.w	r2, [fp, #8]
 801791c:	42b2      	cmp	r2, r6
 801791e:	dd28      	ble.n	8017972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017920:	140f      	asrs	r7, r1, #16
 8017922:	d426      	bmi.n	8017972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017924:	f8db 200c 	ldr.w	r2, [fp, #12]
 8017928:	42ba      	cmp	r2, r7
 801792a:	dd22      	ble.n	8017972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801792c:	9a02      	ldr	r2, [sp, #8]
 801792e:	fb07 6602 	mla	r6, r7, r2, r6
 8017932:	9f03      	ldr	r7, [sp, #12]
 8017934:	0872      	lsrs	r2, r6, #1
 8017936:	07f6      	lsls	r6, r6, #31
 8017938:	5cba      	ldrb	r2, [r7, r2]
 801793a:	bf54      	ite	pl
 801793c:	f002 020f 	andpl.w	r2, r2, #15
 8017940:	1112      	asrmi	r2, r2, #4
 8017942:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017946:	b2d2      	uxtb	r2, r2
 8017948:	2aff      	cmp	r2, #255	@ 0xff
 801794a:	d118      	bne.n	801797e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801794c:	f06f 0601 	mvn.w	r6, #1
 8017950:	f8d8 2000 	ldr.w	r2, [r8]
 8017954:	fb06 f705 	mul.w	r7, r6, r5
 8017958:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801795c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8017960:	0956      	lsrs	r6, r2, #5
 8017962:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8017966:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801796a:	ea4c 0606 	orr.w	r6, ip, r6
 801796e:	4316      	orrs	r6, r2
 8017970:	53e6      	strh	r6, [r4, r7]
 8017972:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017974:	3d01      	subs	r5, #1
 8017976:	4410      	add	r0, r2
 8017978:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801797a:	4411      	add	r1, r2
 801797c:	e787      	b.n	801788e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801797e:	2a00      	cmp	r2, #0
 8017980:	d0f7      	beq.n	8017972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017982:	f06f 0601 	mvn.w	r6, #1
 8017986:	f8d8 c000 	ldr.w	ip, [r8]
 801798a:	fa1f f982 	uxth.w	r9, r2
 801798e:	43d2      	mvns	r2, r2
 8017990:	436e      	muls	r6, r5
 8017992:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8017996:	b2d2      	uxtb	r2, r2
 8017998:	f834 e006 	ldrh.w	lr, [r4, r6]
 801799c:	fb1a fa09 	smulbb	sl, sl, r9
 80179a0:	9604      	str	r6, [sp, #16]
 80179a2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80179a6:	ea4f 272e 	mov.w	r7, lr, asr #8
 80179aa:	fb16 f609 	smulbb	r6, r6, r9
 80179ae:	fa5f fc8c 	uxtb.w	ip, ip
 80179b2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80179b6:	fb1c fc09 	smulbb	ip, ip, r9
 80179ba:	fb07 6702 	mla	r7, r7, r2, r6
 80179be:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80179c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80179c6:	b2bf      	uxth	r7, r7
 80179c8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80179cc:	fa5f fe8e 	uxtb.w	lr, lr
 80179d0:	fb06 a602 	mla	r6, r6, r2, sl
 80179d4:	fb0e cc02 	mla	ip, lr, r2, ip
 80179d8:	1c7a      	adds	r2, r7, #1
 80179da:	b2b6      	uxth	r6, r6
 80179dc:	fa1f fc8c 	uxth.w	ip, ip
 80179e0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80179e4:	9a04      	ldr	r2, [sp, #16]
 80179e6:	f10c 0a01 	add.w	sl, ip, #1
 80179ea:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80179ee:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80179f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80179f6:	ea4a 0707 	orr.w	r7, sl, r7
 80179fa:	f106 0a01 	add.w	sl, r6, #1
 80179fe:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017a02:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017a06:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8017a0a:	ea47 070a 	orr.w	r7, r7, sl
 8017a0e:	52a7      	strh	r7, [r4, r2]
 8017a10:	e7af      	b.n	8017972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017a12:	f04f 0e00 	mov.w	lr, #0
 8017a16:	eba3 020e 	sub.w	r2, r3, lr
 8017a1a:	2a00      	cmp	r2, #0
 8017a1c:	f77f af3a 	ble.w	8017894 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017a20:	1402      	asrs	r2, r0, #16
 8017a22:	9e02      	ldr	r6, [sp, #8]
 8017a24:	140d      	asrs	r5, r1, #16
 8017a26:	fb06 2505 	mla	r5, r6, r5, r2
 8017a2a:	9e03      	ldr	r6, [sp, #12]
 8017a2c:	086a      	lsrs	r2, r5, #1
 8017a2e:	07ed      	lsls	r5, r5, #31
 8017a30:	5cb2      	ldrb	r2, [r6, r2]
 8017a32:	bf54      	ite	pl
 8017a34:	f002 020f 	andpl.w	r2, r2, #15
 8017a38:	1112      	asrmi	r2, r2, #4
 8017a3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017a3e:	b2d2      	uxtb	r2, r2
 8017a40:	2aff      	cmp	r2, #255	@ 0xff
 8017a42:	d115      	bne.n	8017a70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8017a44:	f8d8 5000 	ldr.w	r5, [r8]
 8017a48:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8017a4c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8017a50:	096a      	lsrs	r2, r5, #5
 8017a52:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017a56:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8017a5a:	4332      	orrs	r2, r6
 8017a5c:	432a      	orrs	r2, r5
 8017a5e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8017a62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017a64:	f10e 0e01 	add.w	lr, lr, #1
 8017a68:	4410      	add	r0, r2
 8017a6a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017a6c:	4411      	add	r1, r2
 8017a6e:	e7d2      	b.n	8017a16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8017a70:	2a00      	cmp	r2, #0
 8017a72:	d0f6      	beq.n	8017a62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017a74:	f8d8 7000 	ldr.w	r7, [r8]
 8017a78:	fa1f f982 	uxth.w	r9, r2
 8017a7c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8017a80:	43d2      	mvns	r2, r2
 8017a82:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8017a86:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8017a8a:	ea4f 262c 	mov.w	r6, ip, asr #8
 8017a8e:	fb15 f509 	smulbb	r5, r5, r9
 8017a92:	b2d2      	uxtb	r2, r2
 8017a94:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8017a98:	b2ff      	uxtb	r7, r7
 8017a9a:	fb1a fa09 	smulbb	sl, sl, r9
 8017a9e:	fb06 5602 	mla	r6, r6, r2, r5
 8017aa2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8017aa6:	fb17 f709 	smulbb	r7, r7, r9
 8017aaa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017aae:	b2b6      	uxth	r6, r6
 8017ab0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8017ab4:	fa5f fc8c 	uxtb.w	ip, ip
 8017ab8:	fb05 a502 	mla	r5, r5, r2, sl
 8017abc:	fb0c 7702 	mla	r7, ip, r2, r7
 8017ac0:	1c72      	adds	r2, r6, #1
 8017ac2:	b2ad      	uxth	r5, r5
 8017ac4:	b2bf      	uxth	r7, r7
 8017ac6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8017aca:	f107 0a01 	add.w	sl, r7, #1
 8017ace:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8017ad2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8017ad6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017ada:	ea4a 0606 	orr.w	r6, sl, r6
 8017ade:	f105 0a01 	add.w	sl, r5, #1
 8017ae2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017ae6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017aea:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8017aee:	ea46 060a 	orr.w	r6, r6, sl
 8017af2:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8017af6:	e7b4      	b.n	8017a62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017af8:	b007      	add	sp, #28
 8017afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017afe:	bf00      	nop
 8017b00:	20001dfc 	.word	0x20001dfc

08017b04 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 8017b04:	4770      	bx	lr

08017b06 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 8017b06:	4770      	bx	lr

08017b08 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 8017b08:	4770      	bx	lr

08017b0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8017b0a:	4770      	bx	lr

08017b0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8017b0c:	4770      	bx	lr

08017b0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8017b0e:	4770      	bx	lr

08017b10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8017b10:	4770      	bx	lr

08017b12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017b12:	4770      	bx	lr

08017b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017b14:	4770      	bx	lr

08017b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017b16:	4770      	bx	lr

08017b18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017b18:	4770      	bx	lr

08017b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017b1a:	4770      	bx	lr

08017b1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017b1c:	4770      	bx	lr

08017b1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8017b1e:	4770      	bx	lr

08017b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017b20:	4770      	bx	lr

08017b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017b22:	4770      	bx	lr

08017b24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017b24:	4770      	bx	lr

08017b26 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8017b26:	4770      	bx	lr

08017b28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017b28:	4770      	bx	lr

08017b2a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017b2a:	4770      	bx	lr

08017b2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017b2c:	4770      	bx	lr

08017b2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017b2e:	4770      	bx	lr

08017b30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017b30:	4770      	bx	lr

08017b32 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017b32:	4770      	bx	lr

08017b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017b34:	4770      	bx	lr

08017b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017b36:	4770      	bx	lr

08017b38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017b38:	4770      	bx	lr

08017b3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017b3a:	4770      	bx	lr

08017b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017b3c:	4770      	bx	lr

08017b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8017b3e:	4770      	bx	lr

08017b40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017b40:	4770      	bx	lr

08017b42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8017b42:	4770      	bx	lr

08017b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b48:	b088      	sub	sp, #32
 8017b4a:	4606      	mov	r6, r0
 8017b4c:	4688      	mov	r8, r1
 8017b4e:	4691      	mov	r9, r2
 8017b50:	ac08      	add	r4, sp, #32
 8017b52:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8017b56:	4620      	mov	r0, r4
 8017b58:	f7fd fc32 	bl	80153c0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017b5c:	6833      	ldr	r3, [r6, #0]
 8017b5e:	4605      	mov	r5, r0
 8017b60:	4620      	mov	r0, r4
 8017b62:	699f      	ldr	r7, [r3, #24]
 8017b64:	f7fd fb3a 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b68:	4682      	mov	sl, r0
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f7fd fb6a 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b70:	9500      	str	r5, [sp, #0]
 8017b72:	464b      	mov	r3, r9
 8017b74:	4642      	mov	r2, r8
 8017b76:	4631      	mov	r1, r6
 8017b78:	e9cd a001 	strd	sl, r0, [sp, #4]
 8017b7c:	a806      	add	r0, sp, #24
 8017b7e:	47b8      	blx	r7
 8017b80:	4628      	mov	r0, r5
 8017b82:	b008      	add	sp, #32
 8017b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017b88 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	9300      	str	r3, [sp, #0]
 8017b90:	4b3d      	ldr	r3, [pc, #244]	@ (8017c88 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d137      	bne.n	8017c08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8017b98:	4a3c      	ldr	r2, [pc, #240]	@ (8017c8c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8017b9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017b9e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d132      	bne.n	8017c0c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8017ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8017c90 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8017ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017bac:	ac02      	add	r4, sp, #8
 8017bae:	6808      	ldr	r0, [r1, #0]
 8017bb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017bb4:	ab02      	add	r3, sp, #8
 8017bb6:	6849      	ldr	r1, [r1, #4]
 8017bb8:	4d36      	ldr	r5, [pc, #216]	@ (8017c94 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8017bba:	c303      	stmia	r3!, {r0, r1}
 8017bbc:	4669      	mov	r1, sp
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	f7fa fd00 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017bc4:	4668      	mov	r0, sp
 8017bc6:	f7fa fcd5 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017bca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017bce:	f8bd 2000 	ldrh.w	r2, [sp]
 8017bd2:	462f      	mov	r7, r5
 8017bd4:	6828      	ldr	r0, [r5, #0]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017bdc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017be0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017be4:	4413      	add	r3, r2
 8017be6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017bea:	6803      	ldr	r3, [r0, #0]
 8017bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bee:	4798      	blx	r3
 8017bf0:	f010 0f01 	tst.w	r0, #1
 8017bf4:	d00c      	beq.n	8017c10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8017bf6:	6828      	ldr	r0, [r5, #0]
 8017bf8:	6803      	ldr	r3, [r0, #0]
 8017bfa:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017c00:	4798      	blx	r3
 8017c02:	b004      	add	sp, #16
 8017c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c08:	4a21      	ldr	r2, [pc, #132]	@ (8017c90 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8017c0a:	e7c6      	b.n	8017b9a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8017c8c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8017c0e:	e7cb      	b.n	8017ba8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8017c10:	6838      	ldr	r0, [r7, #0]
 8017c12:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017c16:	6803      	ldr	r3, [r0, #0]
 8017c18:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8017c1c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8017c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c22:	4798      	blx	r3
 8017c24:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017c28:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017c2c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8017c30:	fb16 3602 	smlabb	r6, r6, r2, r3
 8017c34:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017c38:	6838      	ldr	r0, [r7, #0]
 8017c3a:	6803      	ldr	r3, [r0, #0]
 8017c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c3e:	4798      	blx	r3
 8017c40:	4a12      	ldr	r2, [pc, #72]	@ (8017c8c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8017c42:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8017c46:	8813      	ldrh	r3, [r2, #0]
 8017c48:	4691      	mov	r9, r2
 8017c4a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8017c4e:	435d      	muls	r5, r3
 8017c50:	fb03 1404 	mla	r4, r3, r4, r1
 8017c54:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017c58:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8017c5c:	6838      	ldr	r0, [r7, #0]
 8017c5e:	42ac      	cmp	r4, r5
 8017c60:	6803      	ldr	r3, [r0, #0]
 8017c62:	d20e      	bcs.n	8017c82 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8017c64:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 8017c68:	4632      	mov	r2, r6
 8017c6a:	4643      	mov	r3, r8
 8017c6c:	4621      	mov	r1, r4
 8017c6e:	47d0      	blx	sl
 8017c70:	f8b9 3000 	ldrh.w	r3, [r9]
 8017c74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017c78:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017c7c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017c80:	e7ec      	b.n	8017c5c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8017c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c84:	4798      	blx	r3
 8017c86:	e7bc      	b.n	8017c02 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8017c88:	20001dec 	.word	0x20001dec
 8017c8c:	20001dee 	.word	0x20001dee
 8017c90:	20001df0 	.word	0x20001df0
 8017c94:	20001df4 	.word	0x20001df4

08017c98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8017c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c9c:	b08b      	sub	sp, #44	@ 0x2c
 8017c9e:	460f      	mov	r7, r1
 8017ca0:	4616      	mov	r6, r2
 8017ca2:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8017ca6:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8017caa:	f1bb 0f00 	cmp.w	fp, #0
 8017cae:	d04a      	beq.n	8017d46 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8017cb0:	6810      	ldr	r0, [r2, #0]
 8017cb2:	ad06      	add	r5, sp, #24
 8017cb4:	6851      	ldr	r1, [r2, #4]
 8017cb6:	c503      	stmia	r5!, {r0, r1}
 8017cb8:	6818      	ldr	r0, [r3, #0]
 8017cba:	ad08      	add	r5, sp, #32
 8017cbc:	6859      	ldr	r1, [r3, #4]
 8017cbe:	c503      	stmia	r5!, {r0, r1}
 8017cc0:	a806      	add	r0, sp, #24
 8017cc2:	f7fa fc57 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017cc6:	4631      	mov	r1, r6
 8017cc8:	a808      	add	r0, sp, #32
 8017cca:	f7fa fc7b 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017cce:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017cd2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017cd6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8017cda:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8017cde:	fb16 2103 	smlabb	r1, r6, r3, r2
 8017ce2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8017ce6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8017cea:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017cee:	4f5f      	ldr	r7, [pc, #380]	@ (8017e6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8017cf0:	440a      	add	r2, r1
 8017cf2:	6838      	ldr	r0, [r7, #0]
 8017cf4:	46b9      	mov	r9, r7
 8017cf6:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017cfa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017cfe:	4413      	add	r3, r2
 8017d00:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017d04:	6803      	ldr	r3, [r0, #0]
 8017d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017d08:	4798      	blx	r3
 8017d0a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8017d0e:	d11d      	bne.n	8017d4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8017d10:	b9fc      	cbnz	r4, 8017d52 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8017d12:	f010 0f01 	tst.w	r0, #1
 8017d16:	d01c      	beq.n	8017d52 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8017d18:	f8d9 0000 	ldr.w	r0, [r9]
 8017d1c:	2700      	movs	r7, #0
 8017d1e:	b2ad      	uxth	r5, r5
 8017d20:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8017d24:	6801      	ldr	r1, [r0, #0]
 8017d26:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017d2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8017d2e:	9501      	str	r5, [sp, #4]
 8017d30:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8017d34:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8017d38:	9402      	str	r4, [sp, #8]
 8017d3a:	fa1f f488 	uxth.w	r4, r8
 8017d3e:	9400      	str	r4, [sp, #0]
 8017d40:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8017d42:	4631      	mov	r1, r6
 8017d44:	47a0      	blx	r4
 8017d46:	b00b      	add	sp, #44	@ 0x2c
 8017d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4c:	f010 0f04 	tst.w	r0, #4
 8017d50:	e7e1      	b.n	8017d16 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8017d52:	f8d9 0000 	ldr.w	r0, [r9]
 8017d56:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8017d5a:	6803      	ldr	r3, [r0, #0]
 8017d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d5e:	4798      	blx	r3
 8017d60:	4b43      	ldr	r3, [pc, #268]	@ (8017e70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8017d62:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8017d66:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8017d6a:	881a      	ldrh	r2, [r3, #0]
 8017d6c:	469a      	mov	sl, r3
 8017d6e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8017d72:	fb05 f502 	mul.w	r5, r5, r2
 8017d76:	fb02 1404 	mla	r4, r2, r4, r1
 8017d7a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017d7e:	d059      	beq.n	8017e34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8017d80:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8017d84:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8017d88:	fa1f f28b 	uxth.w	r2, fp
 8017d8c:	469e      	mov	lr, r3
 8017d8e:	fa1f f989 	uxth.w	r9, r9
 8017d92:	42ac      	cmp	r4, r5
 8017d94:	d264      	bcs.n	8017e60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8017d96:	eb04 0a07 	add.w	sl, r4, r7
 8017d9a:	4554      	cmp	r4, sl
 8017d9c:	d23d      	bcs.n	8017e1a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8017d9e:	8821      	ldrh	r1, [r4, #0]
 8017da0:	f836 3b02 	ldrh.w	r3, [r6], #2
 8017da4:	1208      	asrs	r0, r1, #8
 8017da6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017daa:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8017dae:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8017db2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8017db6:	00c9      	lsls	r1, r1, #3
 8017db8:	fb10 f009 	smulbb	r0, r0, r9
 8017dbc:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8017dc0:	b2c9      	uxtb	r1, r1
 8017dc2:	fb0c 0c02 	mla	ip, ip, r2, r0
 8017dc6:	10d8      	asrs	r0, r3, #3
 8017dc8:	fb1b fb09 	smulbb	fp, fp, r9
 8017dcc:	00db      	lsls	r3, r3, #3
 8017dce:	fa1f fc8c 	uxth.w	ip, ip
 8017dd2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8017dd6:	fb11 f109 	smulbb	r1, r1, r9
 8017dda:	b2db      	uxtb	r3, r3
 8017ddc:	fb00 b002 	mla	r0, r0, r2, fp
 8017de0:	f10c 0b01 	add.w	fp, ip, #1
 8017de4:	fb03 1302 	mla	r3, r3, r2, r1
 8017de8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	b280      	uxth	r0, r0
 8017df0:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8017df4:	f103 0c01 	add.w	ip, r3, #1
 8017df8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8017dfc:	1c43      	adds	r3, r0, #1
 8017dfe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8017e02:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8017e06:	0940      	lsrs	r0, r0, #5
 8017e08:	ea4c 0c0b 	orr.w	ip, ip, fp
 8017e0c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8017e10:	ea4c 0c00 	orr.w	ip, ip, r0
 8017e14:	f824 cb02 	strh.w	ip, [r4], #2
 8017e18:	e7bf      	b.n	8017d9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8017e1a:	f8be 3000 	ldrh.w	r3, [lr]
 8017e1e:	eba3 0308 	sub.w	r3, r3, r8
 8017e22:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017e26:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017e2a:	eba3 0308 	sub.w	r3, r3, r8
 8017e2e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017e32:	e7ae      	b.n	8017d92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8017e34:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8017e38:	f8d9 0000 	ldr.w	r0, [r9]
 8017e3c:	42ac      	cmp	r4, r5
 8017e3e:	6803      	ldr	r3, [r0, #0]
 8017e40:	d20e      	bcs.n	8017e60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8017e42:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8017e46:	4632      	mov	r2, r6
 8017e48:	463b      	mov	r3, r7
 8017e4a:	4621      	mov	r1, r4
 8017e4c:	47c0      	blx	r8
 8017e4e:	f8ba 3000 	ldrh.w	r3, [sl]
 8017e52:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017e56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017e5a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017e5e:	e7eb      	b.n	8017e38 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8017e60:	4b02      	ldr	r3, [pc, #8]	@ (8017e6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8017e62:	6818      	ldr	r0, [r3, #0]
 8017e64:	6803      	ldr	r3, [r0, #0]
 8017e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e68:	4798      	blx	r3
 8017e6a:	e76c      	b.n	8017d46 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8017e6c:	20001df4 	.word	0x20001df4
 8017e70:	20001dee 	.word	0x20001dee

08017e74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8017e74:	b510      	push	{r4, lr}
 8017e76:	4604      	mov	r4, r0
 8017e78:	2104      	movs	r1, #4
 8017e7a:	f00b fc96 	bl	80237aa <_ZdlPvj>
 8017e7e:	4620      	mov	r0, r4
 8017e80:	bd10      	pop	{r4, pc}

08017e82 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 8017e82:	b510      	push	{r4, lr}
 8017e84:	4604      	mov	r4, r0
 8017e86:	2104      	movs	r1, #4
 8017e88:	f00b fc8f 	bl	80237aa <_ZdlPvj>
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	bd10      	pop	{r4, pc}

08017e90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 8017e90:	b510      	push	{r4, lr}
 8017e92:	4604      	mov	r4, r0
 8017e94:	f640 0144 	movw	r1, #2116	@ 0x844
 8017e98:	f00b fc87 	bl	80237aa <_ZdlPvj>
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	bd10      	pop	{r4, pc}

08017ea0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 8017ea0:	b510      	push	{r4, lr}
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8017ea8:	f00b fc7f 	bl	80237aa <_ZdlPvj>
 8017eac:	4620      	mov	r0, r4
 8017eae:	bd10      	pop	{r4, pc}

08017eb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017eb0:	b510      	push	{r4, lr}
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	2104      	movs	r1, #4
 8017eb6:	f00b fc78 	bl	80237aa <_ZdlPvj>
 8017eba:	4620      	mov	r0, r4
 8017ebc:	bd10      	pop	{r4, pc}

08017ebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8017ebe:	b510      	push	{r4, lr}
 8017ec0:	4604      	mov	r4, r0
 8017ec2:	2104      	movs	r1, #4
 8017ec4:	f00b fc71 	bl	80237aa <_ZdlPvj>
 8017ec8:	4620      	mov	r0, r4
 8017eca:	bd10      	pop	{r4, pc}

08017ecc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017ecc:	b510      	push	{r4, lr}
 8017ece:	4604      	mov	r4, r0
 8017ed0:	2104      	movs	r1, #4
 8017ed2:	f00b fc6a 	bl	80237aa <_ZdlPvj>
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	bd10      	pop	{r4, pc}

08017eda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8017eda:	b510      	push	{r4, lr}
 8017edc:	4604      	mov	r4, r0
 8017ede:	2104      	movs	r1, #4
 8017ee0:	f00b fc63 	bl	80237aa <_ZdlPvj>
 8017ee4:	4620      	mov	r0, r4
 8017ee6:	bd10      	pop	{r4, pc}

08017ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017ee8:	b510      	push	{r4, lr}
 8017eea:	4604      	mov	r4, r0
 8017eec:	2104      	movs	r1, #4
 8017eee:	f00b fc5c 	bl	80237aa <_ZdlPvj>
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	bd10      	pop	{r4, pc}

08017ef6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017ef6:	b510      	push	{r4, lr}
 8017ef8:	4604      	mov	r4, r0
 8017efa:	2104      	movs	r1, #4
 8017efc:	f00b fc55 	bl	80237aa <_ZdlPvj>
 8017f00:	4620      	mov	r0, r4
 8017f02:	bd10      	pop	{r4, pc}

08017f04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017f04:	b510      	push	{r4, lr}
 8017f06:	4604      	mov	r4, r0
 8017f08:	2104      	movs	r1, #4
 8017f0a:	f00b fc4e 	bl	80237aa <_ZdlPvj>
 8017f0e:	4620      	mov	r0, r4
 8017f10:	bd10      	pop	{r4, pc}

08017f12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017f12:	b510      	push	{r4, lr}
 8017f14:	4604      	mov	r4, r0
 8017f16:	2104      	movs	r1, #4
 8017f18:	f00b fc47 	bl	80237aa <_ZdlPvj>
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	bd10      	pop	{r4, pc}

08017f20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017f20:	b510      	push	{r4, lr}
 8017f22:	4604      	mov	r4, r0
 8017f24:	2104      	movs	r1, #4
 8017f26:	f00b fc40 	bl	80237aa <_ZdlPvj>
 8017f2a:	4620      	mov	r0, r4
 8017f2c:	bd10      	pop	{r4, pc}

08017f2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017f2e:	b510      	push	{r4, lr}
 8017f30:	4604      	mov	r4, r0
 8017f32:	2104      	movs	r1, #4
 8017f34:	f00b fc39 	bl	80237aa <_ZdlPvj>
 8017f38:	4620      	mov	r0, r4
 8017f3a:	bd10      	pop	{r4, pc}

08017f3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017f3c:	b510      	push	{r4, lr}
 8017f3e:	4604      	mov	r4, r0
 8017f40:	2104      	movs	r1, #4
 8017f42:	f00b fc32 	bl	80237aa <_ZdlPvj>
 8017f46:	4620      	mov	r0, r4
 8017f48:	bd10      	pop	{r4, pc}

08017f4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017f4a:	b510      	push	{r4, lr}
 8017f4c:	4604      	mov	r4, r0
 8017f4e:	2104      	movs	r1, #4
 8017f50:	f00b fc2b 	bl	80237aa <_ZdlPvj>
 8017f54:	4620      	mov	r0, r4
 8017f56:	bd10      	pop	{r4, pc}

08017f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017f58:	b510      	push	{r4, lr}
 8017f5a:	4604      	mov	r4, r0
 8017f5c:	2104      	movs	r1, #4
 8017f5e:	f00b fc24 	bl	80237aa <_ZdlPvj>
 8017f62:	4620      	mov	r0, r4
 8017f64:	bd10      	pop	{r4, pc}

08017f66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8017f66:	b510      	push	{r4, lr}
 8017f68:	4604      	mov	r4, r0
 8017f6a:	2104      	movs	r1, #4
 8017f6c:	f00b fc1d 	bl	80237aa <_ZdlPvj>
 8017f70:	4620      	mov	r0, r4
 8017f72:	bd10      	pop	{r4, pc}

08017f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017f74:	b510      	push	{r4, lr}
 8017f76:	4604      	mov	r4, r0
 8017f78:	2104      	movs	r1, #4
 8017f7a:	f00b fc16 	bl	80237aa <_ZdlPvj>
 8017f7e:	4620      	mov	r0, r4
 8017f80:	bd10      	pop	{r4, pc}

08017f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017f82:	b510      	push	{r4, lr}
 8017f84:	4604      	mov	r4, r0
 8017f86:	2104      	movs	r1, #4
 8017f88:	f00b fc0f 	bl	80237aa <_ZdlPvj>
 8017f8c:	4620      	mov	r0, r4
 8017f8e:	bd10      	pop	{r4, pc}

08017f90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017f90:	b510      	push	{r4, lr}
 8017f92:	4604      	mov	r4, r0
 8017f94:	2104      	movs	r1, #4
 8017f96:	f00b fc08 	bl	80237aa <_ZdlPvj>
 8017f9a:	4620      	mov	r0, r4
 8017f9c:	bd10      	pop	{r4, pc}

08017f9e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8017f9e:	b510      	push	{r4, lr}
 8017fa0:	4604      	mov	r4, r0
 8017fa2:	2104      	movs	r1, #4
 8017fa4:	f00b fc01 	bl	80237aa <_ZdlPvj>
 8017fa8:	4620      	mov	r0, r4
 8017faa:	bd10      	pop	{r4, pc}

08017fac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017fac:	b510      	push	{r4, lr}
 8017fae:	4604      	mov	r4, r0
 8017fb0:	2104      	movs	r1, #4
 8017fb2:	f00b fbfa 	bl	80237aa <_ZdlPvj>
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	bd10      	pop	{r4, pc}

08017fba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017fba:	b510      	push	{r4, lr}
 8017fbc:	4604      	mov	r4, r0
 8017fbe:	2104      	movs	r1, #4
 8017fc0:	f00b fbf3 	bl	80237aa <_ZdlPvj>
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	bd10      	pop	{r4, pc}

08017fc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017fc8:	b510      	push	{r4, lr}
 8017fca:	4604      	mov	r4, r0
 8017fcc:	2104      	movs	r1, #4
 8017fce:	f00b fbec 	bl	80237aa <_ZdlPvj>
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	bd10      	pop	{r4, pc}

08017fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017fd6:	b510      	push	{r4, lr}
 8017fd8:	4604      	mov	r4, r0
 8017fda:	2104      	movs	r1, #4
 8017fdc:	f00b fbe5 	bl	80237aa <_ZdlPvj>
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	bd10      	pop	{r4, pc}

08017fe4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017fe4:	b510      	push	{r4, lr}
 8017fe6:	4604      	mov	r4, r0
 8017fe8:	2104      	movs	r1, #4
 8017fea:	f00b fbde 	bl	80237aa <_ZdlPvj>
 8017fee:	4620      	mov	r0, r4
 8017ff0:	bd10      	pop	{r4, pc}

08017ff2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017ff2:	b510      	push	{r4, lr}
 8017ff4:	4604      	mov	r4, r0
 8017ff6:	2104      	movs	r1, #4
 8017ff8:	f00b fbd7 	bl	80237aa <_ZdlPvj>
 8017ffc:	4620      	mov	r0, r4
 8017ffe:	bd10      	pop	{r4, pc}

08018000 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8018000:	b510      	push	{r4, lr}
 8018002:	4604      	mov	r4, r0
 8018004:	2104      	movs	r1, #4
 8018006:	f00b fbd0 	bl	80237aa <_ZdlPvj>
 801800a:	4620      	mov	r0, r4
 801800c:	bd10      	pop	{r4, pc}

0801800e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801800e:	b510      	push	{r4, lr}
 8018010:	4604      	mov	r4, r0
 8018012:	2104      	movs	r1, #4
 8018014:	f00b fbc9 	bl	80237aa <_ZdlPvj>
 8018018:	4620      	mov	r0, r4
 801801a:	bd10      	pop	{r4, pc}

0801801c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801801c:	b510      	push	{r4, lr}
 801801e:	4604      	mov	r4, r0
 8018020:	2104      	movs	r1, #4
 8018022:	f00b fbc2 	bl	80237aa <_ZdlPvj>
 8018026:	4620      	mov	r0, r4
 8018028:	bd10      	pop	{r4, pc}

0801802a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801802a:	b510      	push	{r4, lr}
 801802c:	4604      	mov	r4, r0
 801802e:	2104      	movs	r1, #4
 8018030:	f00b fbbb 	bl	80237aa <_ZdlPvj>
 8018034:	4620      	mov	r0, r4
 8018036:	bd10      	pop	{r4, pc}

08018038 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8018038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801803c:	b08f      	sub	sp, #60	@ 0x3c
 801803e:	4616      	mov	r6, r2
 8018040:	4682      	mov	sl, r0
 8018042:	460d      	mov	r5, r1
 8018044:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8018048:	9205      	str	r2, [sp, #20]
 801804a:	2a00      	cmp	r2, #0
 801804c:	f000 82b7 	beq.w	80185be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 8018050:	6830      	ldr	r0, [r6, #0]
 8018052:	ac0a      	add	r4, sp, #40	@ 0x28
 8018054:	6871      	ldr	r1, [r6, #4]
 8018056:	c403      	stmia	r4!, {r0, r1}
 8018058:	6818      	ldr	r0, [r3, #0]
 801805a:	ac0c      	add	r4, sp, #48	@ 0x30
 801805c:	6859      	ldr	r1, [r3, #4]
 801805e:	c403      	stmia	r4!, {r0, r1}
 8018060:	a80a      	add	r0, sp, #40	@ 0x28
 8018062:	f7fa fa87 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018066:	4631      	mov	r1, r6
 8018068:	a80c      	add	r0, sp, #48	@ 0x30
 801806a:	f7fa faab 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801806e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8018072:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8018076:	bfdb      	ittet	le
 8018078:	b293      	uxthle	r3, r2
 801807a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801807e:	2301      	movgt	r3, #1
 8018080:	fb91 f3f3 	sdivle	r3, r1, r3
 8018084:	9300      	str	r3, [sp, #0]
 8018086:	f105 0308 	add.w	r3, r5, #8
 801808a:	9900      	ldr	r1, [sp, #0]
 801808c:	9306      	str	r3, [sp, #24]
 801808e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8018092:	440b      	add	r3, r1
 8018094:	3b01      	subs	r3, #1
 8018096:	fb93 f3f1 	sdiv	r3, r3, r1
 801809a:	3b01      	subs	r3, #1
 801809c:	9906      	ldr	r1, [sp, #24]
 801809e:	b29b      	uxth	r3, r3
 80180a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80180a4:	9900      	ldr	r1, [sp, #0]
 80180a6:	9307      	str	r3, [sp, #28]
 80180a8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80180ac:	fb93 f0f1 	sdiv	r0, r3, r1
 80180b0:	b284      	uxth	r4, r0
 80180b2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80180b6:	9402      	str	r4, [sp, #8]
 80180b8:	9d02      	ldr	r5, [sp, #8]
 80180ba:	9c00      	ldr	r4, [sp, #0]
 80180bc:	fb05 3414 	mls	r4, r5, r4, r3
 80180c0:	fb14 f402 	smulbb	r4, r4, r2
 80180c4:	440c      	add	r4, r1
 80180c6:	b2a4      	uxth	r4, r4
 80180c8:	2d00      	cmp	r5, #0
 80180ca:	d06c      	beq.n	80181a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 80180cc:	1e6a      	subs	r2, r5, #1
 80180ce:	9806      	ldr	r0, [sp, #24]
 80180d0:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 80180d4:	9a07      	ldr	r2, [sp, #28]
 80180d6:	ba36      	rev	r6, r6
 80180d8:	4416      	add	r6, r2
 80180da:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80180de:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 80180e2:	4411      	add	r1, r2
 80180e4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80180e8:	f8df 932c 	ldr.w	r9, [pc, #812]	@ 8018418 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 80180ec:	4413      	add	r3, r2
 80180ee:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 80180f2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80180f6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80180fa:	9301      	str	r3, [sp, #4]
 80180fc:	4bc4      	ldr	r3, [pc, #784]	@ (8018410 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 80180fe:	6818      	ldr	r0, [r3, #0]
 8018100:	6803      	ldr	r3, [r0, #0]
 8018102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018104:	4798      	blx	r3
 8018106:	4bc3      	ldr	r3, [pc, #780]	@ (8018414 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 8018108:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801810c:	881b      	ldrh	r3, [r3, #0]
 801810e:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 8018112:	fb03 2808 	mla	r8, r3, r8, r2
 8018116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801811a:	436b      	muls	r3, r5
 801811c:	2500      	movs	r5, #0
 801811e:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 8018122:	4629      	mov	r1, r5
 8018124:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018128:	9309      	str	r3, [sp, #36]	@ 0x24
 801812a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801812e:	fb94 f3f3 	sdiv	r3, r4, r3
 8018132:	9304      	str	r3, [sp, #16]
 8018134:	f10a 0304 	add.w	r3, sl, #4
 8018138:	4618      	mov	r0, r3
 801813a:	9308      	str	r3, [sp, #32]
 801813c:	f00b fd6b 	bl	8023c16 <memset>
 8018140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018142:	4543      	cmp	r3, r8
 8018144:	f240 8236 	bls.w	80185b4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 8018148:	2203      	movs	r2, #3
 801814a:	2107      	movs	r1, #7
 801814c:	200b      	movs	r0, #11
 801814e:	2c00      	cmp	r4, #0
 8018150:	f000 8131 	beq.w	80183b6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 8018154:	7833      	ldrb	r3, [r6, #0]
 8018156:	b2db      	uxtb	r3, r3
 8018158:	2bfe      	cmp	r3, #254	@ 0xfe
 801815a:	d126      	bne.n	80181aa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801815c:	f896 e001 	ldrb.w	lr, [r6, #1]
 8018160:	3c01      	subs	r4, #1
 8018162:	f896 c002 	ldrb.w	ip, [r6, #2]
 8018166:	1d37      	adds	r7, r6, #4
 8018168:	fa5f fe8e 	uxtb.w	lr, lr
 801816c:	f896 b003 	ldrb.w	fp, [r6, #3]
 8018170:	fa5f fc8c 	uxtb.w	ip, ip
 8018174:	f36e 0507 	bfi	r5, lr, #0, #8
 8018178:	fa5f fb8b 	uxtb.w	fp, fp
 801817c:	b2a4      	uxth	r4, r4
 801817e:	f36c 250f 	bfi	r5, ip, #8, #8
 8018182:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8018186:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801818a:	f36b 4517 	bfi	r5, fp, #16, #8
 801818e:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8018192:	0e2b      	lsrs	r3, r5, #24
 8018194:	fb10 c303 	smlabb	r3, r0, r3, ip
 8018198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801819c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80181a0:	605d      	str	r5, [r3, #4]
 80181a2:	463e      	mov	r6, r7
 80181a4:	e7d3      	b.n	801814e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 80181a6:	9e07      	ldr	r6, [sp, #28]
 80181a8:	e797      	b.n	80180da <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 80181aa:	2bff      	cmp	r3, #255	@ 0xff
 80181ac:	d127      	bne.n	80181fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 80181ae:	f896 c001 	ldrb.w	ip, [r6, #1]
 80181b2:	3c01      	subs	r4, #1
 80181b4:	78b3      	ldrb	r3, [r6, #2]
 80181b6:	1d77      	adds	r7, r6, #5
 80181b8:	fa5f fc8c 	uxtb.w	ip, ip
 80181bc:	f896 e003 	ldrb.w	lr, [r6, #3]
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	f896 b004 	ldrb.w	fp, [r6, #4]
 80181c6:	f36c 0507 	bfi	r5, ip, #0, #8
 80181ca:	fa5f fe8e 	uxtb.w	lr, lr
 80181ce:	fa5f fb8b 	uxtb.w	fp, fp
 80181d2:	f363 250f 	bfi	r5, r3, #8, #8
 80181d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80181da:	b2a4      	uxth	r4, r4
 80181dc:	fb12 330e 	smlabb	r3, r2, lr, r3
 80181e0:	f36e 4517 	bfi	r5, lr, #16, #8
 80181e4:	fb11 330c 	smlabb	r3, r1, ip, r3
 80181e8:	f36b 651f 	bfi	r5, fp, #24, #8
 80181ec:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 80181f0:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 80181f4:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 80181f8:	f8cb 5004 	str.w	r5, [fp, #4]
 80181fc:	e7d1      	b.n	80181a2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 80181fe:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 8018202:	f106 0701 	add.w	r7, r6, #1
 8018206:	d107      	bne.n	8018218 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 8018208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801820c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8018210:	685d      	ldr	r5, [r3, #4]
 8018212:	3c01      	subs	r4, #1
 8018214:	b2a4      	uxth	r4, r4
 8018216:	e7c4      	b.n	80181a2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8018218:	f1bc 0f01 	cmp.w	ip, #1
 801821c:	d12c      	bne.n	8018278 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801821e:	f003 0e03 	and.w	lr, r3, #3
 8018222:	f003 0c0c 	and.w	ip, r3, #12
 8018226:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801822a:	f1ae 0e02 	sub.w	lr, lr, #2
 801822e:	f1ac 0c08 	sub.w	ip, ip, #8
 8018232:	3b02      	subs	r3, #2
 8018234:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8018238:	fa5f fe8e 	uxtb.w	lr, lr
 801823c:	f36e 0507 	bfi	r5, lr, #0, #8
 8018240:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8018244:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8018248:	f36c 250f 	bfi	r5, ip, #8, #8
 801824c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8018250:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018254:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8018258:	b2db      	uxtb	r3, r3
 801825a:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801825e:	f363 4517 	bfi	r5, r3, #16, #8
 8018262:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8018266:	0e2e      	lsrs	r6, r5, #24
 8018268:	fb10 c606 	smlabb	r6, r0, r6, ip
 801826c:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8018270:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8018274:	6075      	str	r5, [r6, #4]
 8018276:	e7cc      	b.n	8018212 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 8018278:	f1bc 0f02 	cmp.w	ip, #2
 801827c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018280:	d12a      	bne.n	80182d8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 8018282:	1cb7      	adds	r7, r6, #2
 8018284:	7876      	ldrb	r6, [r6, #1]
 8018286:	3b20      	subs	r3, #32
 8018288:	b2f6      	uxtb	r6, r6
 801828a:	f006 0c0f 	and.w	ip, r6, #15
 801828e:	1136      	asrs	r6, r6, #4
 8018290:	f1ac 0c08 	sub.w	ip, ip, #8
 8018294:	3e08      	subs	r6, #8
 8018296:	449c      	add	ip, r3
 8018298:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801829c:	fa5f fc8c 	uxtb.w	ip, ip
 80182a0:	f36c 0507 	bfi	r5, ip, #0, #8
 80182a4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80182a8:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 80182ac:	4433      	add	r3, r6
 80182ae:	fa5f fe8e 	uxtb.w	lr, lr
 80182b2:	f36e 250f 	bfi	r5, lr, #8, #8
 80182b6:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80182ba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80182be:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80182c2:	b2db      	uxtb	r3, r3
 80182c4:	fb12 ee03 	smlabb	lr, r2, r3, lr
 80182c8:	f363 4517 	bfi	r5, r3, #16, #8
 80182cc:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 80182d0:	0e2e      	lsrs	r6, r5, #24
 80182d2:	fb10 e606 	smlabb	r6, r0, r6, lr
 80182d6:	e7c9      	b.n	801826c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 80182d8:	1c5e      	adds	r6, r3, #1
 80182da:	42a6      	cmp	r6, r4
 80182dc:	dd4e      	ble.n	801837c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 80182de:	1b36      	subs	r6, r6, r4
 80182e0:	2e00      	cmp	r6, #0
 80182e2:	dc4e      	bgt.n	8018382 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 80182e4:	f8dd b004 	ldr.w	fp, [sp, #4]
 80182e8:	2400      	movs	r4, #0
 80182ea:	f1bb 0f00 	cmp.w	fp, #0
 80182ee:	f340 8122 	ble.w	8018536 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 80182f2:	1c7b      	adds	r3, r7, #1
 80182f4:	9303      	str	r3, [sp, #12]
 80182f6:	783b      	ldrb	r3, [r7, #0]
 80182f8:	b2db      	uxtb	r3, r3
 80182fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80182fc:	d160      	bne.n	80183c0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 80182fe:	7879      	ldrb	r1, [r7, #1]
 8018300:	1d3b      	adds	r3, r7, #4
 8018302:	78ba      	ldrb	r2, [r7, #2]
 8018304:	b2c9      	uxtb	r1, r1
 8018306:	78f8      	ldrb	r0, [r7, #3]
 8018308:	b2d2      	uxtb	r2, r2
 801830a:	9303      	str	r3, [sp, #12]
 801830c:	f361 0507 	bfi	r5, r1, #0, #8
 8018310:	b2c0      	uxtb	r0, r0
 8018312:	2303      	movs	r3, #3
 8018314:	f362 250f 	bfi	r5, r2, #8, #8
 8018318:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801831c:	fb13 2200 	smlabb	r2, r3, r0, r2
 8018320:	f360 4517 	bfi	r5, r0, #16, #8
 8018324:	2307      	movs	r3, #7
 8018326:	0e2e      	lsrs	r6, r5, #24
 8018328:	fb13 2101 	smlabb	r1, r3, r1, r2
 801832c:	230b      	movs	r3, #11
 801832e:	fb13 1306 	smlabb	r3, r3, r6, r1
 8018332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018336:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801833a:	605d      	str	r5, [r3, #4]
 801833c:	2601      	movs	r6, #1
 801833e:	4637      	mov	r7, r6
 8018340:	0e2b      	lsrs	r3, r5, #24
 8018342:	ebab 0b07 	sub.w	fp, fp, r7
 8018346:	eba6 0607 	sub.w	r6, r6, r7
 801834a:	f040 80d3 	bne.w	80184f4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801834e:	b18c      	cbz	r4, 8018374 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 8018350:	4648      	mov	r0, r9
 8018352:	00a1      	lsls	r1, r4, #2
 8018354:	f7f6 fdf0 	bl	800ef38 <_ZN8touchgfx5paint9flushLineEPmi>
 8018358:	9b05      	ldr	r3, [sp, #20]
 801835a:	4622      	mov	r2, r4
 801835c:	4649      	mov	r1, r9
 801835e:	4640      	mov	r0, r8
 8018360:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8018364:	f7f6 fe4e 	bl	800f004 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8018368:	4b2b      	ldr	r3, [pc, #172]	@ (8018418 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801836a:	4a2c      	ldr	r2, [pc, #176]	@ (801841c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801836c:	4599      	cmp	r9, r3
 801836e:	bf08      	it	eq
 8018370:	4613      	moveq	r3, r2
 8018372:	4699      	mov	r9, r3
 8018374:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 8018378:	2400      	movs	r4, #0
 801837a:	e0da      	b.n	8018532 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801837c:	1ba6      	subs	r6, r4, r6
 801837e:	b2b4      	uxth	r4, r6
 8018380:	e70f      	b.n	80181a2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8018382:	9b01      	ldr	r3, [sp, #4]
 8018384:	9a01      	ldr	r2, [sp, #4]
 8018386:	42b3      	cmp	r3, r6
 8018388:	bfa8      	it	ge
 801838a:	4633      	movge	r3, r6
 801838c:	0e2c      	lsrs	r4, r5, #24
 801838e:	eba2 0b03 	sub.w	fp, r2, r3
 8018392:	eba6 0603 	sub.w	r6, r6, r3
 8018396:	d00b      	beq.n	80183b0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 8018398:	f1a9 0104 	sub.w	r1, r9, #4
 801839c:	461a      	mov	r2, r3
 801839e:	2a00      	cmp	r2, #0
 80183a0:	dc02      	bgt.n	80183a8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 80183a2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80183a6:	e7a0      	b.n	80182ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 80183a8:	f841 5f04 	str.w	r5, [r1, #4]!
 80183ac:	3a01      	subs	r2, #1
 80183ae:	e7f6      	b.n	801839e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 80183b0:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 80183b4:	e799      	b.n	80182ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 80183b6:	4637      	mov	r7, r6
 80183b8:	f8dd b004 	ldr.w	fp, [sp, #4]
 80183bc:	4626      	mov	r6, r4
 80183be:	e794      	b.n	80182ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 80183c0:	2bff      	cmp	r3, #255	@ 0xff
 80183c2:	d11d      	bne.n	8018400 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 80183c4:	7878      	ldrb	r0, [r7, #1]
 80183c6:	1d7b      	adds	r3, r7, #5
 80183c8:	78ba      	ldrb	r2, [r7, #2]
 80183ca:	b2c0      	uxtb	r0, r0
 80183cc:	78fe      	ldrb	r6, [r7, #3]
 80183ce:	b2d2      	uxtb	r2, r2
 80183d0:	9303      	str	r3, [sp, #12]
 80183d2:	f360 0507 	bfi	r5, r0, #0, #8
 80183d6:	793b      	ldrb	r3, [r7, #4]
 80183d8:	b2f6      	uxtb	r6, r6
 80183da:	b2d9      	uxtb	r1, r3
 80183dc:	f362 250f 	bfi	r5, r2, #8, #8
 80183e0:	2303      	movs	r3, #3
 80183e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80183e6:	f366 4517 	bfi	r5, r6, #16, #8
 80183ea:	fb13 2206 	smlabb	r2, r3, r6, r2
 80183ee:	2307      	movs	r3, #7
 80183f0:	f361 651f 	bfi	r5, r1, #24, #8
 80183f4:	fb13 2000 	smlabb	r0, r3, r0, r2
 80183f8:	230b      	movs	r3, #11
 80183fa:	fb13 0301 	smlabb	r3, r3, r1, r0
 80183fe:	e798      	b.n	8018332 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 8018400:	119e      	asrs	r6, r3, #6
 8018402:	d10d      	bne.n	8018420 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8018404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018408:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801840c:	685d      	ldr	r5, [r3, #4]
 801840e:	e795      	b.n	801833c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8018410:	20001df4 	.word	0x20001df4
 8018414:	20001dee 	.word	0x20001dee
 8018418:	20000280 	.word	0x20000280
 801841c:	20000380 	.word	0x20000380
 8018420:	2e01      	cmp	r6, #1
 8018422:	ea4f 6115 	mov.w	r1, r5, lsr #24
 8018426:	d12b      	bne.n	8018480 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 8018428:	f003 0003 	and.w	r0, r3, #3
 801842c:	f003 020c 	and.w	r2, r3, #12
 8018430:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018434:	3802      	subs	r0, #2
 8018436:	3a08      	subs	r2, #8
 8018438:	1e9f      	subs	r7, r3, #2
 801843a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801843e:	b2c0      	uxtb	r0, r0
 8018440:	f360 0507 	bfi	r5, r0, #0, #8
 8018444:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8018448:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801844c:	f362 250f 	bfi	r5, r2, #8, #8
 8018450:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018454:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018458:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801845c:	2703      	movs	r7, #3
 801845e:	b2db      	uxtb	r3, r3
 8018460:	fb17 2203 	smlabb	r2, r7, r3, r2
 8018464:	2707      	movs	r7, #7
 8018466:	f363 4517 	bfi	r5, r3, #16, #8
 801846a:	230b      	movs	r3, #11
 801846c:	fb17 2000 	smlabb	r0, r7, r0, r2
 8018470:	fb13 0101 	smlabb	r1, r3, r1, r0
 8018474:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8018478:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801847c:	604d      	str	r5, [r1, #4]
 801847e:	e75e      	b.n	801833e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8018480:	2e02      	cmp	r6, #2
 8018482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018486:	d12f      	bne.n	80184e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 8018488:	7878      	ldrb	r0, [r7, #1]
 801848a:	1cba      	adds	r2, r7, #2
 801848c:	3b20      	subs	r3, #32
 801848e:	b2c0      	uxtb	r0, r0
 8018490:	9203      	str	r2, [sp, #12]
 8018492:	f000 020f 	and.w	r2, r0, #15
 8018496:	1100      	asrs	r0, r0, #4
 8018498:	3a08      	subs	r2, #8
 801849a:	3808      	subs	r0, #8
 801849c:	441a      	add	r2, r3
 801849e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80184a2:	b2d2      	uxtb	r2, r2
 80184a4:	f362 0507 	bfi	r5, r2, #0, #8
 80184a8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80184ac:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80184b0:	4403      	add	r3, r0
 80184b2:	b2f6      	uxtb	r6, r6
 80184b4:	f366 250f 	bfi	r5, r6, #8, #8
 80184b8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80184bc:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80184c0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80184c4:	2003      	movs	r0, #3
 80184c6:	b2db      	uxtb	r3, r3
 80184c8:	fb10 6603 	smlabb	r6, r0, r3, r6
 80184cc:	2007      	movs	r0, #7
 80184ce:	f363 4517 	bfi	r5, r3, #16, #8
 80184d2:	230b      	movs	r3, #11
 80184d4:	fb10 6202 	smlabb	r2, r0, r2, r6
 80184d8:	fb13 2101 	smlabb	r1, r3, r1, r2
 80184dc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80184e0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80184e4:	604d      	str	r5, [r1, #4]
 80184e6:	e729      	b.n	801833c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 80184e8:	1c5e      	adds	r6, r3, #1
 80184ea:	465f      	mov	r7, fp
 80184ec:	45b3      	cmp	fp, r6
 80184ee:	bfa8      	it	ge
 80184f0:	4637      	movge	r7, r6
 80184f2:	e725      	b.n	8018340 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 80184f4:	193b      	adds	r3, r7, r4
 80184f6:	2b40      	cmp	r3, #64	@ 0x40
 80184f8:	dd13      	ble.n	8018522 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 80184fa:	4648      	mov	r0, r9
 80184fc:	00a1      	lsls	r1, r4, #2
 80184fe:	f7f6 fd1b 	bl	800ef38 <_ZN8touchgfx5paint9flushLineEPmi>
 8018502:	4649      	mov	r1, r9
 8018504:	9b05      	ldr	r3, [sp, #20]
 8018506:	4622      	mov	r2, r4
 8018508:	4640      	mov	r0, r8
 801850a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801850e:	f7f6 fd79 	bl	800f004 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8018512:	4b2c      	ldr	r3, [pc, #176]	@ (80185c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 8018514:	2400      	movs	r4, #0
 8018516:	4599      	cmp	r9, r3
 8018518:	bf0c      	ite	eq
 801851a:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 80185d0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801851e:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 80185c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 8018522:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 8018526:	463b      	mov	r3, r7
 8018528:	3b01      	subs	r3, #1
 801852a:	f842 5b04 	str.w	r5, [r2], #4
 801852e:	d1fb      	bne.n	8018528 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 8018530:	443c      	add	r4, r7
 8018532:	9f03      	ldr	r7, [sp, #12]
 8018534:	e6d9      	b.n	80182ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8018536:	b15c      	cbz	r4, 8018550 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 8018538:	00a1      	lsls	r1, r4, #2
 801853a:	4648      	mov	r0, r9
 801853c:	f7f6 fcfc 	bl	800ef38 <_ZN8touchgfx5paint9flushLineEPmi>
 8018540:	4640      	mov	r0, r8
 8018542:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8018546:	9b05      	ldr	r3, [sp, #20]
 8018548:	4622      	mov	r2, r4
 801854a:	4649      	mov	r1, r9
 801854c:	f7f6 fd5a 	bl	800f004 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8018550:	4b1d      	ldr	r3, [pc, #116]	@ (80185c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 8018552:	9a01      	ldr	r2, [sp, #4]
 8018554:	881b      	ldrh	r3, [r3, #0]
 8018556:	1a9b      	subs	r3, r3, r2
 8018558:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801855c:	9b04      	ldr	r3, [sp, #16]
 801855e:	3301      	adds	r3, #1
 8018560:	9304      	str	r3, [sp, #16]
 8018562:	9a04      	ldr	r2, [sp, #16]
 8018564:	9b00      	ldr	r3, [sp, #0]
 8018566:	4293      	cmp	r3, r2
 8018568:	d11d      	bne.n	80185a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801856a:	9b02      	ldr	r3, [sp, #8]
 801856c:	2500      	movs	r5, #0
 801856e:	9a02      	ldr	r2, [sp, #8]
 8018570:	f103 0b01 	add.w	fp, r3, #1
 8018574:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 8018578:	9b06      	ldr	r3, [sp, #24]
 801857a:	4629      	mov	r1, r5
 801857c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 8018580:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8018584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018588:	1ba4      	subs	r4, r4, r6
 801858a:	9b07      	ldr	r3, [sp, #28]
 801858c:	ba3f      	rev	r7, r7
 801858e:	9808      	ldr	r0, [sp, #32]
 8018590:	b2a4      	uxth	r4, r4
 8018592:	441f      	add	r7, r3
 8018594:	f00b fb3f 	bl	8023c16 <memset>
 8018598:	f8cd b008 	str.w	fp, [sp, #8]
 801859c:	9504      	str	r5, [sp, #16]
 801859e:	f7f6 fcb3 	bl	800ef08 <_ZN8touchgfx5paint8tearDownEv>
 80185a2:	463e      	mov	r6, r7
 80185a4:	e5cc      	b.n	8018140 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 80185a6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80185aa:	9b01      	ldr	r3, [sp, #4]
 80185ac:	1ae4      	subs	r4, r4, r3
 80185ae:	1ba4      	subs	r4, r4, r6
 80185b0:	b2a4      	uxth	r4, r4
 80185b2:	e7f4      	b.n	801859e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 80185b4:	4b05      	ldr	r3, [pc, #20]	@ (80185cc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 80185b6:	6818      	ldr	r0, [r3, #0]
 80185b8:	6803      	ldr	r3, [r0, #0]
 80185ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185bc:	4798      	blx	r3
 80185be:	b00f      	add	sp, #60	@ 0x3c
 80185c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c4:	20000280 	.word	0x20000280
 80185c8:	20001dee 	.word	0x20001dee
 80185cc:	20001df4 	.word	0x20001df4
 80185d0:	20000380 	.word	0x20000380

080185d4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80185d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d8:	b08f      	sub	sp, #60	@ 0x3c
 80185da:	461c      	mov	r4, r3
 80185dc:	9205      	str	r2, [sp, #20]
 80185de:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80185e2:	9100      	str	r1, [sp, #0]
 80185e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80185e6:	9201      	str	r2, [sp, #4]
 80185e8:	2a00      	cmp	r2, #0
 80185ea:	f000 8116 	beq.w	801881a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 80185ee:	6820      	ldr	r0, [r4, #0]
 80185f0:	aa0a      	add	r2, sp, #40	@ 0x28
 80185f2:	6861      	ldr	r1, [r4, #4]
 80185f4:	c203      	stmia	r2!, {r0, r1}
 80185f6:	6818      	ldr	r0, [r3, #0]
 80185f8:	aa0c      	add	r2, sp, #48	@ 0x30
 80185fa:	6859      	ldr	r1, [r3, #4]
 80185fc:	c203      	stmia	r2!, {r0, r1}
 80185fe:	a80a      	add	r0, sp, #40	@ 0x28
 8018600:	f7f9 ffb8 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018604:	4621      	mov	r1, r4
 8018606:	a80c      	add	r0, sp, #48	@ 0x30
 8018608:	f7f9 ffdc 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801860c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8018610:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8018614:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8018618:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801861c:	bfdb      	ittet	le
 801861e:	b2b3      	uxthle	r3, r6
 8018620:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8018624:	2301      	movgt	r3, #1
 8018626:	fb92 f3f3 	sdivle	r3, r2, r3
 801862a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801862e:	441d      	add	r5, r3
 8018630:	fb92 f1f3 	sdiv	r1, r2, r3
 8018634:	fa1f fc81 	uxth.w	ip, r1
 8018638:	3d01      	subs	r5, #1
 801863a:	fb0c 2413 	mls	r4, ip, r3, r2
 801863e:	4661      	mov	r1, ip
 8018640:	fb14 f406 	smulbb	r4, r4, r6
 8018644:	4404      	add	r4, r0
 8018646:	fb95 f5f3 	sdiv	r5, r5, r3
 801864a:	b2a4      	uxth	r4, r4
 801864c:	b131      	cbz	r1, 801865c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801864e:	9b05      	ldr	r3, [sp, #20]
 8018650:	9900      	ldr	r1, [sp, #0]
 8018652:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8018656:	ba1b      	rev	r3, r3
 8018658:	4419      	add	r1, r3
 801865a:	9100      	str	r1, [sp, #0]
 801865c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018660:	b2ad      	uxth	r5, r5
 8018662:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8018666:	4418      	add	r0, r3
 8018668:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801866c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8018670:	00ad      	lsls	r5, r5, #2
 8018672:	441a      	add	r2, r3
 8018674:	4b6a      	ldr	r3, [pc, #424]	@ (8018820 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8018676:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801867a:	6818      	ldr	r0, [r3, #0]
 801867c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8018680:	6803      	ldr	r3, [r0, #0]
 8018682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018684:	4798      	blx	r3
 8018686:	4967      	ldr	r1, [pc, #412]	@ (8018824 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8018688:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801868c:	2c00      	cmp	r4, #0
 801868e:	880b      	ldrh	r3, [r1, #0]
 8018690:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8018694:	bf0c      	ite	eq
 8018696:	46c6      	moveq	lr, r8
 8018698:	f04f 0e00 	movne.w	lr, #0
 801869c:	9109      	str	r1, [sp, #36]	@ 0x24
 801869e:	fb03 c202 	mla	r2, r3, r2, ip
 80186a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80186a6:	4373      	muls	r3, r6
 80186a8:	fa1f fe8e 	uxth.w	lr, lr
 80186ac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80186b0:	9103      	str	r1, [sp, #12]
 80186b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80186b6:	9306      	str	r3, [sp, #24]
 80186b8:	1d2b      	adds	r3, r5, #4
 80186ba:	9307      	str	r3, [sp, #28]
 80186bc:	9b01      	ldr	r3, [sp, #4]
 80186be:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80186c2:	2300      	movs	r3, #0
 80186c4:	b292      	uxth	r2, r2
 80186c6:	9302      	str	r3, [sp, #8]
 80186c8:	9204      	str	r2, [sp, #16]
 80186ca:	9a06      	ldr	r2, [sp, #24]
 80186cc:	4282      	cmp	r2, r0
 80186ce:	f240 809f 	bls.w	8018810 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 80186d2:	b963      	cbnz	r3, 80186ee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 80186d4:	9b00      	ldr	r3, [sp, #0]
 80186d6:	781a      	ldrb	r2, [r3, #0]
 80186d8:	0993      	lsrs	r3, r2, #6
 80186da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80186de:	9202      	str	r2, [sp, #8]
 80186e0:	1e5a      	subs	r2, r3, #1
 80186e2:	2a02      	cmp	r2, #2
 80186e4:	d815      	bhi.n	8018712 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 80186e6:	9a00      	ldr	r2, [sp, #0]
 80186e8:	b29b      	uxth	r3, r3
 80186ea:	3201      	adds	r2, #1
 80186ec:	9200      	str	r2, [sp, #0]
 80186ee:	b1b4      	cbz	r4, 801871e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 80186f0:	429c      	cmp	r4, r3
 80186f2:	bf91      	iteee	ls
 80186f4:	1b1c      	subls	r4, r3, r4
 80186f6:	1ae4      	subhi	r4, r4, r3
 80186f8:	4671      	movhi	r1, lr
 80186fa:	f04f 0a00 	movhi.w	sl, #0
 80186fe:	bf9b      	ittet	ls
 8018700:	fa1f fa84 	uxthls.w	sl, r4
 8018704:	2400      	movls	r4, #0
 8018706:	b2a4      	uxthhi	r4, r4
 8018708:	fa1f f188 	uxthls.w	r1, r8
 801870c:	4653      	mov	r3, sl
 801870e:	468e      	mov	lr, r1
 8018710:	e7db      	b.n	80186ca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 8018712:	9a00      	ldr	r2, [sp, #0]
 8018714:	9b00      	ldr	r3, [sp, #0]
 8018716:	3202      	adds	r2, #2
 8018718:	785b      	ldrb	r3, [r3, #1]
 801871a:	9200      	str	r2, [sp, #0]
 801871c:	e7e7      	b.n	80186ee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801871e:	2202      	movs	r2, #2
 8018720:	9907      	ldr	r1, [sp, #28]
 8018722:	4573      	cmp	r3, lr
 8018724:	4615      	mov	r5, r2
 8018726:	9a02      	ldr	r2, [sp, #8]
 8018728:	bf24      	itt	cs
 801872a:	eba3 0a0e 	subcs.w	sl, r3, lr
 801872e:	46f1      	movcs	r9, lr
 8018730:	fb15 1202 	smlabb	r2, r5, r2, r1
 8018734:	9905      	ldr	r1, [sp, #20]
 8018736:	bf34      	ite	cc
 8018738:	4699      	movcc	r9, r3
 801873a:	fa1f fa8a 	uxthcs.w	sl, sl
 801873e:	f831 c002 	ldrh.w	ip, [r1, r2]
 8018742:	bf38      	it	cc
 8018744:	ebae 0103 	subcc.w	r1, lr, r3
 8018748:	9a01      	ldr	r2, [sp, #4]
 801874a:	bf2e      	itee	cs
 801874c:	4621      	movcs	r1, r4
 801874e:	b289      	uxthcc	r1, r1
 8018750:	46a2      	movcc	sl, r4
 8018752:	2aff      	cmp	r2, #255	@ 0xff
 8018754:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018758:	d105      	bne.n	8018766 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801875a:	4481      	add	r9, r0
 801875c:	4581      	cmp	r9, r0
 801875e:	d045      	beq.n	80187ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8018760:	f820 cb02 	strh.w	ip, [r0], #2
 8018764:	e7fa      	b.n	801875c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 8018766:	ea4f 222c 	mov.w	r2, ip, asr #8
 801876a:	9d03      	ldr	r5, [sp, #12]
 801876c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8018770:	4481      	add	r9, r0
 8018772:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018776:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801877a:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801877e:	fa5f fc8c 	uxtb.w	ip, ip
 8018782:	436a      	muls	r2, r5
 8018784:	fb0b fb05 	mul.w	fp, fp, r5
 8018788:	fb0c fc05 	mul.w	ip, ip, r5
 801878c:	9208      	str	r2, [sp, #32]
 801878e:	4581      	cmp	r9, r0
 8018790:	d02c      	beq.n	80187ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8018792:	8802      	ldrh	r2, [r0, #0]
 8018794:	9d04      	ldr	r5, [sp, #16]
 8018796:	1216      	asrs	r6, r2, #8
 8018798:	9f04      	ldr	r7, [sp, #16]
 801879a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801879e:	fb16 f605 	smulbb	r6, r6, r5
 80187a2:	9d08      	ldr	r5, [sp, #32]
 80187a4:	442e      	add	r6, r5
 80187a6:	10d5      	asrs	r5, r2, #3
 80187a8:	00d2      	lsls	r2, r2, #3
 80187aa:	b2b6      	uxth	r6, r6
 80187ac:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80187b0:	b2d2      	uxtb	r2, r2
 80187b2:	fb15 f507 	smulbb	r5, r5, r7
 80187b6:	fb12 f207 	smulbb	r2, r2, r7
 80187ba:	1c77      	adds	r7, r6, #1
 80187bc:	445d      	add	r5, fp
 80187be:	4462      	add	r2, ip
 80187c0:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80187c4:	b2ad      	uxth	r5, r5
 80187c6:	b292      	uxth	r2, r2
 80187c8:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80187cc:	1c57      	adds	r7, r2, #1
 80187ce:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 80187d2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80187d6:	4316      	orrs	r6, r2
 80187d8:	1c6a      	adds	r2, r5, #1
 80187da:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80187de:	096d      	lsrs	r5, r5, #5
 80187e0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80187e4:	432e      	orrs	r6, r5
 80187e6:	f820 6b02 	strh.w	r6, [r0], #2
 80187ea:	e7d0      	b.n	801878e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 80187ec:	4573      	cmp	r3, lr
 80187ee:	d38d      	bcc.n	801870c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 80187f0:	fa1f f188 	uxth.w	r1, r8
 80187f4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80187f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187fa:	1a64      	subs	r4, r4, r1
 80187fc:	881b      	ldrh	r3, [r3, #0]
 80187fe:	b2a4      	uxth	r4, r4
 8018800:	eba3 0308 	sub.w	r3, r3, r8
 8018804:	2c00      	cmp	r4, #0
 8018806:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801880a:	bf18      	it	ne
 801880c:	2100      	movne	r1, #0
 801880e:	e77d      	b.n	801870c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8018810:	4b03      	ldr	r3, [pc, #12]	@ (8018820 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8018812:	6818      	ldr	r0, [r3, #0]
 8018814:	6803      	ldr	r3, [r0, #0]
 8018816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018818:	4798      	blx	r3
 801881a:	b00f      	add	sp, #60	@ 0x3c
 801881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018820:	20001df4 	.word	0x20001df4
 8018824:	20001dee 	.word	0x20001dee

08018828 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8018828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801882c:	b09f      	sub	sp, #124	@ 0x7c
 801882e:	461d      	mov	r5, r3
 8018830:	4604      	mov	r4, r0
 8018832:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8018834:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8018838:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801883c:	9209      	str	r2, [sp, #36]	@ 0x24
 801883e:	2a00      	cmp	r2, #0
 8018840:	f000 81ed 	beq.w	8018c1e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 8018844:	6828      	ldr	r0, [r5, #0]
 8018846:	aa1a      	add	r2, sp, #104	@ 0x68
 8018848:	6869      	ldr	r1, [r5, #4]
 801884a:	c203      	stmia	r2!, {r0, r1}
 801884c:	6818      	ldr	r0, [r3, #0]
 801884e:	aa1c      	add	r2, sp, #112	@ 0x70
 8018850:	6859      	ldr	r1, [r3, #4]
 8018852:	c203      	stmia	r2!, {r0, r1}
 8018854:	a81a      	add	r0, sp, #104	@ 0x68
 8018856:	f7f9 fe8d 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801885a:	4629      	mov	r1, r5
 801885c:	a81c      	add	r0, sp, #112	@ 0x70
 801885e:	f7f9 feb1 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018862:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8018866:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801886a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801886e:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 8018872:	bfdb      	ittet	le
 8018874:	b29a      	uxthle	r2, r3
 8018876:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801887a:	2201      	movgt	r2, #1
 801887c:	fb91 f2f2 	sdivle	r2, r1, r2
 8018880:	9202      	str	r2, [sp, #8]
 8018882:	9802      	ldr	r0, [sp, #8]
 8018884:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8018888:	9902      	ldr	r1, [sp, #8]
 801888a:	fb92 f0f0 	sdiv	r0, r2, r0
 801888e:	b280      	uxth	r0, r0
 8018890:	4488      	add	r8, r1
 8018892:	9010      	str	r0, [sp, #64]	@ 0x40
 8018894:	f108 38ff 	add.w	r8, r8, #4294967295
 8018898:	9802      	ldr	r0, [sp, #8]
 801889a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801889c:	fb05 2510 	mls	r5, r5, r0, r2
 80188a0:	fb98 f8f1 	sdiv	r8, r8, r1
 80188a4:	fb15 f503 	smulbb	r5, r5, r3
 80188a8:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80188ac:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80188b0:	f108 0801 	add.w	r8, r8, #1
 80188b4:	440d      	add	r5, r1
 80188b6:	4419      	add	r1, r3
 80188b8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80188bc:	fa1f f888 	uxth.w	r8, r8
 80188c0:	441a      	add	r2, r3
 80188c2:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80188c6:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80188ca:	b2ad      	uxth	r5, r5
 80188cc:	9304      	str	r3, [sp, #16]
 80188ce:	4b94      	ldr	r3, [pc, #592]	@ (8018b20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 80188d0:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80188d4:	6818      	ldr	r0, [r3, #0]
 80188d6:	6803      	ldr	r3, [r0, #0]
 80188d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188da:	4798      	blx	r3
 80188dc:	4b91      	ldr	r3, [pc, #580]	@ (8018b24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 80188de:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 80188e2:	2d00      	cmp	r5, #0
 80188e4:	881a      	ldrh	r2, [r3, #0]
 80188e6:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80188ea:	fb02 f606 	mul.w	r6, r2, r6
 80188ee:	fb02 7101 	mla	r1, r2, r1, r7
 80188f2:	9318      	str	r3, [sp, #96]	@ 0x60
 80188f4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80188f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 80188fc:	f04f 0100 	mov.w	r1, #0
 8018900:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 8018904:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018906:	4b88      	ldr	r3, [pc, #544]	@ (8018b28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 8018908:	920a      	str	r2, [sp, #40]	@ 0x28
 801890a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801890c:	eba3 0304 	sub.w	r3, r3, r4
 8018910:	910d      	str	r1, [sp, #52]	@ 0x34
 8018912:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8018916:	9319      	str	r3, [sp, #100]	@ 0x64
 8018918:	f108 0204 	add.w	r2, r8, #4
 801891c:	9211      	str	r2, [sp, #68]	@ 0x44
 801891e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018920:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8018924:	9215      	str	r2, [sp, #84]	@ 0x54
 8018926:	9a04      	ldr	r2, [sp, #16]
 8018928:	bf18      	it	ne
 801892a:	2200      	movne	r2, #0
 801892c:	b292      	uxth	r2, r2
 801892e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018930:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018932:	fa11 f383 	uxtah	r3, r1, r3
 8018936:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8018938:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801893c:	3304      	adds	r3, #4
 801893e:	9306      	str	r3, [sp, #24]
 8018940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018942:	4283      	cmp	r3, r0
 8018944:	f240 8166 	bls.w	8018c14 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 8018948:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801894c:	f04f 0a01 	mov.w	sl, #1
 8018950:	9902      	ldr	r1, [sp, #8]
 8018952:	9e06      	ldr	r6, [sp, #24]
 8018954:	46d3      	mov	fp, sl
 8018956:	4657      	mov	r7, sl
 8018958:	7836      	ldrb	r6, [r6, #0]
 801895a:	fbb5 f3f3 	udiv	r3, r5, r3
 801895e:	1acb      	subs	r3, r1, r3
 8018960:	9612      	str	r6, [sp, #72]	@ 0x48
 8018962:	3601      	adds	r6, #1
 8018964:	b29b      	uxth	r3, r3
 8018966:	9605      	str	r6, [sp, #20]
 8018968:	9316      	str	r3, [sp, #88]	@ 0x58
 801896a:	9b06      	ldr	r3, [sp, #24]
 801896c:	7859      	ldrb	r1, [r3, #1]
 801896e:	789b      	ldrb	r3, [r3, #2]
 8018970:	021b      	lsls	r3, r3, #8
 8018972:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018976:	9906      	ldr	r1, [sp, #24]
 8018978:	78c9      	ldrb	r1, [r1, #3]
 801897a:	430b      	orrs	r3, r1
 801897c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801897e:	4419      	add	r1, r3
 8018980:	1c4e      	adds	r6, r1, #1
 8018982:	7849      	ldrb	r1, [r1, #1]
 8018984:	9603      	str	r6, [sp, #12]
 8018986:	0209      	lsls	r1, r1, #8
 8018988:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801898a:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801898e:	5cf3      	ldrb	r3, [r6, r3]
 8018990:	4319      	orrs	r1, r3
 8018992:	b28b      	uxth	r3, r1
 8018994:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8018998:	930c      	str	r3, [sp, #48]	@ 0x30
 801899a:	2300      	movs	r3, #0
 801899c:	9307      	str	r3, [sp, #28]
 801899e:	469c      	mov	ip, r3
 80189a0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80189a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80189a6:	2d00      	cmp	r5, #0
 80189a8:	d07e      	beq.n	8018aa8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 80189aa:	42af      	cmp	r7, r5
 80189ac:	d26e      	bcs.n	8018a8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 80189ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80189b0:	1bed      	subs	r5, r5, r7
 80189b2:	9201      	str	r2, [sp, #4]
 80189b4:	4283      	cmp	r3, r0
 80189b6:	b2ad      	uxth	r5, r5
 80189b8:	d802      	bhi.n	80189c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 80189ba:	e073      	b.n	8018aa4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d15f      	bne.n	8018a80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 80189c0:	9b03      	ldr	r3, [sp, #12]
 80189c2:	f1cb 0207 	rsb	r2, fp, #7
 80189c6:	785b      	ldrb	r3, [r3, #1]
 80189c8:	4093      	lsls	r3, r2
 80189ca:	005b      	lsls	r3, r3, #1
 80189cc:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80189d0:	9b03      	ldr	r3, [sp, #12]
 80189d2:	781b      	ldrb	r3, [r3, #0]
 80189d4:	fa43 f30b 	asr.w	r3, r3, fp
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	4313      	orrs	r3, r2
 80189dc:	f10b 0201 	add.w	r2, fp, #1
 80189e0:	fa5f fb82 	uxtb.w	fp, r2
 80189e4:	9a03      	ldr	r2, [sp, #12]
 80189e6:	b29f      	uxth	r7, r3
 80189e8:	f1bb 0f08 	cmp.w	fp, #8
 80189ec:	bf13      	iteet	ne
 80189ee:	3201      	addne	r2, #1
 80189f0:	3202      	addeq	r2, #2
 80189f2:	f04f 0b00 	moveq.w	fp, #0
 80189f6:	9203      	strne	r2, [sp, #12]
 80189f8:	bf08      	it	eq
 80189fa:	9203      	streq	r2, [sp, #12]
 80189fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80189fe:	42ba      	cmp	r2, r7
 8018a00:	d309      	bcc.n	8018a16 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 8018a02:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018a06:	2301      	movs	r3, #1
 8018a08:	9a05      	ldr	r2, [sp, #20]
 8018a0a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8018a0e:	d30e      	bcc.n	8018a2e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8018a10:	469a      	mov	sl, r3
 8018a12:	2600      	movs	r6, #0
 8018a14:	e035      	b.n	8018a82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 8018a16:	9b05      	ldr	r3, [sp, #20]
 8018a18:	429f      	cmp	r7, r3
 8018a1a:	d318      	bcc.n	8018a4e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 8018a1c:	eb04 030a 	add.w	r3, r4, sl
 8018a20:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8018a24:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8018a28:	f10a 0301 	add.w	r3, sl, #1
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	9a05      	ldr	r2, [sp, #20]
 8018a30:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8018a34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018a38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018a3a:	7116      	strb	r6, [r2, #4]
 8018a3c:	f10a 0601 	add.w	r6, sl, #1
 8018a40:	80d1      	strh	r1, [r2, #6]
 8018a42:	7156      	strb	r6, [r2, #5]
 8018a44:	9a05      	ldr	r2, [sp, #20]
 8018a46:	3201      	adds	r2, #1
 8018a48:	b292      	uxth	r2, r2
 8018a4a:	9205      	str	r2, [sp, #20]
 8018a4c:	e7e0      	b.n	8018a10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 8018a4e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8018a52:	463a      	mov	r2, r7
 8018a54:	795b      	ldrb	r3, [r3, #5]
 8018a56:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8018a5a:	4426      	add	r6, r4
 8018a5c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8018a5e:	eb01 0c06 	add.w	ip, r1, r6
 8018a62:	f1bc 0f00 	cmp.w	ip, #0
 8018a66:	dd07      	ble.n	8018a78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 8018a68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018a6c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8018a70:	f806 cd01 	strb.w	ip, [r6, #-1]!
 8018a74:	88d2      	ldrh	r2, [r2, #6]
 8018a76:	e7f1      	b.n	8018a5c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 8018a78:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8018a7c:	b29b      	uxth	r3, r3
 8018a7e:	e7c3      	b.n	8018a08 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 8018a80:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018a82:	970c      	str	r7, [sp, #48]	@ 0x30
 8018a84:	46b4      	mov	ip, r6
 8018a86:	9a01      	ldr	r2, [sp, #4]
 8018a88:	461f      	mov	r7, r3
 8018a8a:	e78c      	b.n	80189a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 8018a8c:	1b7b      	subs	r3, r7, r5
 8018a8e:	eb0c 0605 	add.w	r6, ip, r5
 8018a92:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018a96:	b29b      	uxth	r3, r3
 8018a98:	b2b6      	uxth	r6, r6
 8018a9a:	9201      	str	r2, [sp, #4]
 8018a9c:	2500      	movs	r5, #0
 8018a9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018aa0:	4282      	cmp	r2, r0
 8018aa2:	d88b      	bhi.n	80189bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 8018aa4:	9a01      	ldr	r2, [sp, #4]
 8018aa6:	e74b      	b.n	8018940 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 8018aa8:	4297      	cmp	r7, r2
 8018aaa:	d332      	bcc.n	8018b12 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 8018aac:	1abb      	subs	r3, r7, r2
 8018aae:	9208      	str	r2, [sp, #32]
 8018ab0:	9501      	str	r5, [sp, #4]
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018ab6:	29ff      	cmp	r1, #255	@ 0xff
 8018ab8:	9908      	ldr	r1, [sp, #32]
 8018aba:	eb0c 0601 	add.w	r6, ip, r1
 8018abe:	d135      	bne.n	8018b2c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 8018ac0:	f1a0 0e02 	sub.w	lr, r0, #2
 8018ac4:	b2b6      	uxth	r6, r6
 8018ac6:	45b4      	cmp	ip, r6
 8018ac8:	f040 808c 	bne.w	8018be4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 8018acc:	9908      	ldr	r1, [sp, #32]
 8018ace:	4297      	cmp	r7, r2
 8018ad0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8018ad4:	d3e2      	bcc.n	8018a9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 8018ad6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018ad8:	9904      	ldr	r1, [sp, #16]
 8018ada:	8812      	ldrh	r2, [r2, #0]
 8018adc:	1a52      	subs	r2, r2, r1
 8018ade:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018ae0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8018ae4:	9a07      	ldr	r2, [sp, #28]
 8018ae6:	3201      	adds	r2, #1
 8018ae8:	428a      	cmp	r2, r1
 8018aea:	9207      	str	r2, [sp, #28]
 8018aec:	f040 8087 	bne.w	8018bfe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 8018af0:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8018af4:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8018af8:	9b04      	ldr	r3, [sp, #16]
 8018afa:	1bed      	subs	r5, r5, r7
 8018afc:	b2ad      	uxth	r5, r5
 8018afe:	2d00      	cmp	r5, #0
 8018b00:	bf08      	it	eq
 8018b02:	461a      	moveq	r2, r3
 8018b04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018b06:	bf18      	it	ne
 8018b08:	2200      	movne	r2, #0
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	b292      	uxth	r2, r2
 8018b0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018b10:	e70d      	b.n	801892e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 8018b12:	1bd1      	subs	r1, r2, r7
 8018b14:	9708      	str	r7, [sp, #32]
 8018b16:	b28b      	uxth	r3, r1
 8018b18:	9301      	str	r3, [sp, #4]
 8018b1a:	462b      	mov	r3, r5
 8018b1c:	e7ca      	b.n	8018ab4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 8018b1e:	bf00      	nop
 8018b20:	20001df4 	.word	0x20001df4
 8018b24:	20001dee 	.word	0x20001dee
 8018b28:	fffff7fb 	.word	0xfffff7fb
 8018b2c:	b2b6      	uxth	r6, r6
 8018b2e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018b30:	45b4      	cmp	ip, r6
 8018b32:	d0cb      	beq.n	8018acc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 8018b34:	f10c 0101 	add.w	r1, ip, #1
 8018b38:	44a4      	add	ip, r4
 8018b3a:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018b3c:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 8018b40:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018b42:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8018b46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018b48:	ea4f 2825 	mov.w	r8, r5, asr #8
 8018b4c:	f8b1 c000 	ldrh.w	ip, [r1]
 8018b50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018b52:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8018b56:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8018b5a:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8018b5e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8018b62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018b66:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8018b6a:	fb1e fe01 	smulbb	lr, lr, r1
 8018b6e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018b70:	fa5f fc8c 	uxtb.w	ip, ip
 8018b74:	fb08 e801 	mla	r8, r8, r1, lr
 8018b78:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8018b7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018b7e:	00ed      	lsls	r5, r5, #3
 8018b80:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8018b84:	fa1f f888 	uxth.w	r8, r8
 8018b88:	fb19 f901 	smulbb	r9, r9, r1
 8018b8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018b8e:	b2ed      	uxtb	r5, r5
 8018b90:	fb0e 9e01 	mla	lr, lr, r1, r9
 8018b94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018b96:	fb1c fc01 	smulbb	ip, ip, r1
 8018b9a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018b9c:	fa1f fe8e 	uxth.w	lr, lr
 8018ba0:	fb05 c501 	mla	r5, r5, r1, ip
 8018ba4:	f108 0c01 	add.w	ip, r8, #1
 8018ba8:	f10e 0901 	add.w	r9, lr, #1
 8018bac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018bae:	b2ad      	uxth	r5, r5
 8018bb0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8018bb4:	f105 0c01 	add.w	ip, r5, #1
 8018bb8:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 8018bbc:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8018bc0:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8018bc4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018bc8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018bcc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8018bd0:	ea4c 0808 	orr.w	r8, ip, r8
 8018bd4:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 8018bd8:	ea48 0809 	orr.w	r8, r8, r9
 8018bdc:	f821 8b02 	strh.w	r8, [r1], #2
 8018be0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018be2:	e7a5      	b.n	8018b30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 8018be4:	f10c 0801 	add.w	r8, ip, #1
 8018be8:	44a4      	add	ip, r4
 8018bea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018bec:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 8018bf0:	fa1f fc88 	uxth.w	ip, r8
 8018bf4:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8018bf8:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8018bfc:	e763      	b.n	8018ac6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 8018bfe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018c02:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8018c06:	1aad      	subs	r5, r5, r2
 8018c08:	b2ad      	uxth	r5, r5
 8018c0a:	2d00      	cmp	r5, #0
 8018c0c:	bf18      	it	ne
 8018c0e:	2200      	movne	r2, #0
 8018c10:	9201      	str	r2, [sp, #4]
 8018c12:	e744      	b.n	8018a9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 8018c14:	4b03      	ldr	r3, [pc, #12]	@ (8018c24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 8018c16:	6818      	ldr	r0, [r3, #0]
 8018c18:	6803      	ldr	r3, [r0, #0]
 8018c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c1c:	4798      	blx	r3
 8018c1e:	b01f      	add	sp, #124	@ 0x7c
 8018c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c24:	20001df4 	.word	0x20001df4

08018c28 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 8018c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c2c:	b093      	sub	sp, #76	@ 0x4c
 8018c2e:	4616      	mov	r6, r2
 8018c30:	460d      	mov	r5, r1
 8018c32:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8018c36:	9003      	str	r0, [sp, #12]
 8018c38:	9201      	str	r2, [sp, #4]
 8018c3a:	2a00      	cmp	r2, #0
 8018c3c:	f000 8303 	beq.w	8019246 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x61e>
 8018c40:	6830      	ldr	r0, [r6, #0]
 8018c42:	ac0e      	add	r4, sp, #56	@ 0x38
 8018c44:	6871      	ldr	r1, [r6, #4]
 8018c46:	c403      	stmia	r4!, {r0, r1}
 8018c48:	6818      	ldr	r0, [r3, #0]
 8018c4a:	ac10      	add	r4, sp, #64	@ 0x40
 8018c4c:	6859      	ldr	r1, [r3, #4]
 8018c4e:	c403      	stmia	r4!, {r0, r1}
 8018c50:	a80e      	add	r0, sp, #56	@ 0x38
 8018c52:	f7f9 fc8f 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018c56:	4631      	mov	r1, r6
 8018c58:	a810      	add	r0, sp, #64	@ 0x40
 8018c5a:	f7f9 fcb3 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018c5e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8018c62:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8018c66:	bfdb      	ittet	le
 8018c68:	b293      	uxthle	r3, r2
 8018c6a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018c6e:	2301      	movgt	r3, #1
 8018c70:	fb91 f3f3 	sdivle	r3, r1, r3
 8018c74:	9304      	str	r3, [sp, #16]
 8018c76:	f105 0308 	add.w	r3, r5, #8
 8018c7a:	9904      	ldr	r1, [sp, #16]
 8018c7c:	9308      	str	r3, [sp, #32]
 8018c7e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8018c82:	440b      	add	r3, r1
 8018c84:	3b01      	subs	r3, #1
 8018c86:	fb93 f3f1 	sdiv	r3, r3, r1
 8018c8a:	3b01      	subs	r3, #1
 8018c8c:	9908      	ldr	r1, [sp, #32]
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018c94:	9904      	ldr	r1, [sp, #16]
 8018c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c98:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8018c9c:	fb93 f0f1 	sdiv	r0, r3, r1
 8018ca0:	b284      	uxth	r4, r0
 8018ca2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8018ca6:	9405      	str	r4, [sp, #20]
 8018ca8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018cac:	fb05 3914 	mls	r9, r5, r4, r3
 8018cb0:	fb19 f902 	smulbb	r9, r9, r2
 8018cb4:	4489      	add	r9, r1
 8018cb6:	fa1f f989 	uxth.w	r9, r9
 8018cba:	2d00      	cmp	r5, #0
 8018cbc:	d05d      	beq.n	8018d7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 8018cbe:	1e6a      	subs	r2, r5, #1
 8018cc0:	9808      	ldr	r0, [sp, #32]
 8018cc2:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 8018cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018cc8:	fa9a fa8a 	rev.w	sl, sl
 8018ccc:	4492      	add	sl, r2
 8018cce:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8018cd2:	f04f 0600 	mov.w	r6, #0
 8018cd6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8018cda:	4411      	add	r1, r2
 8018cdc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018ce0:	4413      	add	r3, r2
 8018ce2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8018ce6:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8018cea:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8018cee:	9302      	str	r3, [sp, #8]
 8018cf0:	4bca      	ldr	r3, [pc, #808]	@ (801901c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 8018cf2:	6818      	ldr	r0, [r3, #0]
 8018cf4:	6803      	ldr	r3, [r0, #0]
 8018cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cf8:	4798      	blx	r3
 8018cfa:	4bc9      	ldr	r3, [pc, #804]	@ (8019020 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 8018cfc:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8018d00:	2100      	movs	r1, #0
 8018d02:	881b      	ldrh	r3, [r3, #0]
 8018d04:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8018d08:	fb03 2404 	mla	r4, r3, r4, r2
 8018d0c:	2280      	movs	r2, #128	@ 0x80
 8018d0e:	436b      	muls	r3, r5
 8018d10:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018d14:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018d18:	930d      	str	r3, [sp, #52]	@ 0x34
 8018d1a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8018d1e:	fb99 f3f3 	sdiv	r3, r9, r3
 8018d22:	9306      	str	r3, [sp, #24]
 8018d24:	9b01      	ldr	r3, [sp, #4]
 8018d26:	43db      	mvns	r3, r3
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d2c:	9b03      	ldr	r3, [sp, #12]
 8018d2e:	3304      	adds	r3, #4
 8018d30:	4618      	mov	r0, r3
 8018d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018d34:	f00a ff6f 	bl	8023c16 <memset>
 8018d38:	4bba      	ldr	r3, [pc, #744]	@ (8019024 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 8018d3a:	9300      	str	r3, [sp, #0]
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	9307      	str	r3, [sp, #28]
 8018d40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018d42:	42a3      	cmp	r3, r4
 8018d44:	f240 827a 	bls.w	801923c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x614>
 8018d48:	f04f 0e07 	mov.w	lr, #7
 8018d4c:	f1b9 0f00 	cmp.w	r9, #0
 8018d50:	f000 8159 	beq.w	8019006 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8018d54:	f89a 5000 	ldrb.w	r5, [sl]
 8018d58:	f10a 0701 	add.w	r7, sl, #1
 8018d5c:	b2ed      	uxtb	r5, r5
 8018d5e:	11aa      	asrs	r2, r5, #6
 8018d60:	d10e      	bne.n	8018d80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 8018d62:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8018d66:	9b03      	ldr	r3, [sp, #12]
 8018d68:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8018d6c:	88ae      	ldrh	r6, [r5, #4]
 8018d6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8018d72:	fa1f f989 	uxth.w	r9, r9
 8018d76:	46ba      	mov	sl, r7
 8018d78:	e7e8      	b.n	8018d4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 8018d7a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8018d7e:	e7a6      	b.n	8018cce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 8018d80:	2a01      	cmp	r2, #1
 8018d82:	d129      	bne.n	8018dd8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 8018d84:	f3c6 0304 	ubfx	r3, r6, #0, #5
 8018d88:	f005 0203 	and.w	r2, r5, #3
 8018d8c:	2103      	movs	r1, #3
 8018d8e:	3b02      	subs	r3, #2
 8018d90:	4413      	add	r3, r2
 8018d92:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8018d96:	f3c5 1501 	ubfx	r5, r5, #4, #2
 8018d9a:	f003 031f 	and.w	r3, r3, #31
 8018d9e:	3a02      	subs	r2, #2
 8018da0:	3d02      	subs	r5, #2
 8018da2:	f363 0604 	bfi	r6, r3, #0, #5
 8018da6:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 8018daa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018dae:	f362 164a 	bfi	r6, r2, #5, #6
 8018db2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018db6:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 8018dba:	f005 051f 	and.w	r5, r5, #31
 8018dbe:	fb11 2205 	smlabb	r2, r1, r5, r2
 8018dc2:	f365 26cf 	bfi	r6, r5, #11, #5
 8018dc6:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8018dca:	9a03      	ldr	r2, [sp, #12]
 8018dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018dd0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018dd4:	809e      	strh	r6, [r3, #4]
 8018dd6:	e7ca      	b.n	8018d6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 8018dd8:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8018ddc:	2a02      	cmp	r2, #2
 8018dde:	b2ab      	uxth	r3, r5
 8018de0:	d136      	bne.n	8018e50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8018de2:	2101      	movs	r1, #1
 8018de4:	fb12 1205 	smlabb	r2, r2, r5, r1
 8018de8:	4492      	add	sl, r2
 8018dea:	463a      	mov	r2, r7
 8018dec:	4552      	cmp	r2, sl
 8018dee:	d01c      	beq.n	8018e2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 8018df0:	4694      	mov	ip, r2
 8018df2:	f04f 0b03 	mov.w	fp, #3
 8018df6:	f81c 1b02 	ldrb.w	r1, [ip], #2
 8018dfa:	7852      	ldrb	r2, [r2, #1]
 8018dfc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8018e00:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8018e04:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 8018e08:	f001 021f 	and.w	r2, r1, #31
 8018e0c:	460e      	mov	r6, r1
 8018e0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018e12:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8018e16:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8018e1a:	9a03      	ldr	r2, [sp, #12]
 8018e1c:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8018e20:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018e24:	4662      	mov	r2, ip
 8018e26:	8081      	strh	r1, [r0, #4]
 8018e28:	e7e0      	b.n	8018dec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 8018e2a:	4599      	cmp	r9, r3
 8018e2c:	d20b      	bcs.n	8018e46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 8018e2e:	eba5 0509 	sub.w	r5, r5, r9
 8018e32:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8018e36:	2d00      	cmp	r5, #0
 8018e38:	f300 8208 	bgt.w	801924c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x624>
 8018e3c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018e40:	2301      	movs	r3, #1
 8018e42:	9307      	str	r3, [sp, #28]
 8018e44:	e00c      	b.n	8018e60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8018e46:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8018e4a:	eba9 0903 	sub.w	r9, r9, r3
 8018e4e:	e790      	b.n	8018d72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 8018e50:	4599      	cmp	r9, r3
 8018e52:	d2fa      	bcs.n	8018e4a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8018e54:	eba5 0509 	sub.w	r5, r5, r9
 8018e58:	2d00      	cmp	r5, #0
 8018e5a:	dc1d      	bgt.n	8018e98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 8018e5c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018e60:	f04f 0b00 	mov.w	fp, #0
 8018e64:	f1b8 0f00 	cmp.w	r8, #0
 8018e68:	f340 81a0 	ble.w	80191ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x584>
 8018e6c:	783b      	ldrb	r3, [r7, #0]
 8018e6e:	f107 0a01 	add.w	sl, r7, #1
 8018e72:	b2db      	uxtb	r3, r3
 8018e74:	119a      	asrs	r2, r3, #6
 8018e76:	f040 80d7 	bne.w	8019028 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 8018e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018e7e:	9a03      	ldr	r2, [sp, #12]
 8018e80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018e84:	889e      	ldrh	r6, [r3, #4]
 8018e86:	9b01      	ldr	r3, [sp, #4]
 8018e88:	2bff      	cmp	r3, #255	@ 0xff
 8018e8a:	f040 81e8 	bne.w	801925e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x636>
 8018e8e:	8026      	strh	r6, [r4, #0]
 8018e90:	f108 38ff 	add.w	r8, r8, #4294967295
 8018e94:	3402      	adds	r4, #2
 8018e96:	e0be      	b.n	8019016 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8018e98:	9b02      	ldr	r3, [sp, #8]
 8018e9a:	9a02      	ldr	r2, [sp, #8]
 8018e9c:	42ab      	cmp	r3, r5
 8018e9e:	bfa8      	it	ge
 8018ea0:	462b      	movge	r3, r5
 8018ea2:	eba2 0803 	sub.w	r8, r2, r3
 8018ea6:	9a07      	ldr	r2, [sp, #28]
 8018ea8:	1aed      	subs	r5, r5, r3
 8018eaa:	2a00      	cmp	r2, #0
 8018eac:	d05a      	beq.n	8018f64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 8018eae:	9a01      	ldr	r2, [sp, #4]
 8018eb0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018eb4:	2aff      	cmp	r2, #255	@ 0xff
 8018eb6:	d049      	beq.n	8018f4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8018eb8:	f8bd e004 	ldrh.w	lr, [sp, #4]
 8018ebc:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8018ec0:	42a3      	cmp	r3, r4
 8018ec2:	f240 80a5 	bls.w	8019010 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8018ec6:	46bc      	mov	ip, r7
 8018ec8:	8820      	ldrh	r0, [r4, #0]
 8018eca:	f81c 2b02 	ldrb.w	r2, [ip], #2
 8018ece:	ea4f 2a20 	mov.w	sl, r0, asr #8
 8018ed2:	7879      	ldrb	r1, [r7, #1]
 8018ed4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8018ed8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8018edc:	fb1a fa09 	smulbb	sl, sl, r9
 8018ee0:	b212      	sxth	r2, r2
 8018ee2:	b291      	uxth	r1, r2
 8018ee4:	00d2      	lsls	r2, r2, #3
 8018ee6:	120f      	asrs	r7, r1, #8
 8018ee8:	10c9      	asrs	r1, r1, #3
 8018eea:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8018eee:	b2d2      	uxtb	r2, r2
 8018ef0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8018ef4:	fb07 a70e 	mla	r7, r7, lr, sl
 8018ef8:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 8018efc:	00c0      	lsls	r0, r0, #3
 8018efe:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8018f02:	b2bf      	uxth	r7, r7
 8018f04:	b2c0      	uxtb	r0, r0
 8018f06:	fb1a fa09 	smulbb	sl, sl, r9
 8018f0a:	fb10 f009 	smulbb	r0, r0, r9
 8018f0e:	fb01 a10e 	mla	r1, r1, lr, sl
 8018f12:	fb02 020e 	mla	r2, r2, lr, r0
 8018f16:	1c78      	adds	r0, r7, #1
 8018f18:	b289      	uxth	r1, r1
 8018f1a:	b292      	uxth	r2, r2
 8018f1c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018f20:	f101 0a01 	add.w	sl, r1, #1
 8018f24:	1c50      	adds	r0, r2, #1
 8018f26:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 8018f2a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8018f2e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8018f32:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018f36:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8018f3a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8018f3e:	4307      	orrs	r7, r0
 8018f40:	ea47 070a 	orr.w	r7, r7, sl
 8018f44:	f824 7b02 	strh.w	r7, [r4], #2
 8018f48:	4667      	mov	r7, ip
 8018f4a:	e7b9      	b.n	8018ec0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8018f4c:	42a3      	cmp	r3, r4
 8018f4e:	d95f      	bls.n	8019010 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8018f50:	463a      	mov	r2, r7
 8018f52:	f812 1b02 	ldrb.w	r1, [r2], #2
 8018f56:	7878      	ldrb	r0, [r7, #1]
 8018f58:	4617      	mov	r7, r2
 8018f5a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8018f5e:	f824 1b02 	strh.w	r1, [r4], #2
 8018f62:	e7f3      	b.n	8018f4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8018f64:	9901      	ldr	r1, [sp, #4]
 8018f66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018f6a:	b2b2      	uxth	r2, r6
 8018f6c:	29ff      	cmp	r1, #255	@ 0xff
 8018f6e:	d044      	beq.n	8018ffa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8018f70:	ea4f 2922 	mov.w	r9, r2, asr #8
 8018f74:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8018f78:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8018f7c:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 8018f80:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8018f84:	4608      	mov	r0, r1
 8018f86:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8018f8a:	fb09 f901 	mul.w	r9, r9, r1
 8018f8e:	fb0e fe01 	mul.w	lr, lr, r1
 8018f92:	00d1      	lsls	r1, r2, #3
 8018f94:	b2c9      	uxtb	r1, r1
 8018f96:	4341      	muls	r1, r0
 8018f98:	429c      	cmp	r4, r3
 8018f9a:	f4bf af61 	bcs.w	8018e60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8018f9e:	8822      	ldrh	r2, [r4, #0]
 8018fa0:	1210      	asrs	r0, r2, #8
 8018fa2:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8018fa6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8018faa:	00d2      	lsls	r2, r2, #3
 8018fac:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8018fb0:	fb00 900a 	mla	r0, r0, sl, r9
 8018fb4:	b2d2      	uxtb	r2, r2
 8018fb6:	fb0c ec0a 	mla	ip, ip, sl, lr
 8018fba:	b280      	uxth	r0, r0
 8018fbc:	fb02 120a 	mla	r2, r2, sl, r1
 8018fc0:	fa1f fc8c 	uxth.w	ip, ip
 8018fc4:	b292      	uxth	r2, r2
 8018fc6:	f100 0b01 	add.w	fp, r0, #1
 8018fca:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8018fce:	1c50      	adds	r0, r2, #1
 8018fd0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8018fd4:	f10c 0201 	add.w	r2, ip, #1
 8018fd8:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8018fdc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018fe0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8018fe4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8018fe8:	ea40 0b0b 	orr.w	fp, r0, fp
 8018fec:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8018ff0:	ea4b 0b0c 	orr.w	fp, fp, ip
 8018ff4:	f824 bb02 	strh.w	fp, [r4], #2
 8018ff8:	e7ce      	b.n	8018f98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 8018ffa:	429c      	cmp	r4, r3
 8018ffc:	f4bf af30 	bcs.w	8018e60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8019000:	f824 2b02 	strh.w	r2, [r4], #2
 8019004:	e7f9      	b.n	8018ffa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8019006:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801900a:	4657      	mov	r7, sl
 801900c:	464d      	mov	r5, r9
 801900e:	e727      	b.n	8018e60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8019010:	2300      	movs	r3, #0
 8019012:	e716      	b.n	8018e42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8019014:	44bb      	add	fp, r7
 8019016:	4657      	mov	r7, sl
 8019018:	e724      	b.n	8018e64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 801901a:	bf00      	nop
 801901c:	20001df4 	.word	0x20001df4
 8019020:	20001dee 	.word	0x20001dee
 8019024:	20000280 	.word	0x20000280
 8019028:	2a01      	cmp	r2, #1
 801902a:	d12a      	bne.n	8019082 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 801902c:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8019030:	f003 0203 	and.w	r2, r3, #3
 8019034:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8019038:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801903c:	3902      	subs	r1, #2
 801903e:	3802      	subs	r0, #2
 8019040:	3b02      	subs	r3, #2
 8019042:	4411      	add	r1, r2
 8019044:	f001 011f 	and.w	r1, r1, #31
 8019048:	f361 0604 	bfi	r6, r1, #0, #5
 801904c:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8019050:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8019054:	f360 164a 	bfi	r6, r0, #5, #6
 8019058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801905c:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 8019060:	f002 031f 	and.w	r3, r2, #31
 8019064:	2203      	movs	r2, #3
 8019066:	f363 26cf 	bfi	r6, r3, #11, #5
 801906a:	fb12 0303 	smlabb	r3, r2, r3, r0
 801906e:	2207      	movs	r2, #7
 8019070:	fb12 3301 	smlabb	r3, r2, r1, r3
 8019074:	9a03      	ldr	r2, [sp, #12]
 8019076:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801907a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801907e:	809e      	strh	r6, [r3, #4]
 8019080:	e701      	b.n	8018e86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 8019082:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8019086:	4647      	mov	r7, r8
 8019088:	45a8      	cmp	r8, r5
 801908a:	bfa8      	it	ge
 801908c:	462f      	movge	r7, r5
 801908e:	2a02      	cmp	r2, #2
 8019090:	d154      	bne.n	801913c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 8019092:	9b01      	ldr	r3, [sp, #4]
 8019094:	2bff      	cmp	r3, #255	@ 0xff
 8019096:	d01a      	beq.n	80190ce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8019098:	eb0b 0307 	add.w	r3, fp, r7
 801909c:	2b40      	cmp	r3, #64	@ 0x40
 801909e:	dd16      	ble.n	80190ce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 80190a0:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80190a4:	9800      	ldr	r0, [sp, #0]
 80190a6:	4649      	mov	r1, r9
 80190a8:	f7f5 ff46 	bl	800ef38 <_ZN8touchgfx5paint9flushLineEPmi>
 80190ac:	465a      	mov	r2, fp
 80190ae:	9b01      	ldr	r3, [sp, #4]
 80190b0:	4620      	mov	r0, r4
 80190b2:	9900      	ldr	r1, [sp, #0]
 80190b4:	444c      	add	r4, r9
 80190b6:	f7f5 ff59 	bl	800ef6c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 80190ba:	9b00      	ldr	r3, [sp, #0]
 80190bc:	f04f 0b00 	mov.w	fp, #0
 80190c0:	461a      	mov	r2, r3
 80190c2:	4b6a      	ldr	r3, [pc, #424]	@ (801926c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 80190c4:	429a      	cmp	r2, r3
 80190c6:	bf0c      	ite	eq
 80190c8:	4b69      	ldreq	r3, [pc, #420]	@ (8019270 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 80190ca:	4b68      	ldrne	r3, [pc, #416]	@ (801926c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 80190cc:	9300      	str	r3, [sp, #0]
 80190ce:	4652      	mov	r2, sl
 80190d0:	2100      	movs	r1, #0
 80190d2:	42a9      	cmp	r1, r5
 80190d4:	da2c      	bge.n	8019130 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 80190d6:	4694      	mov	ip, r2
 80190d8:	f04f 0903 	mov.w	r9, #3
 80190dc:	42b9      	cmp	r1, r7
 80190de:	f81c 3b02 	ldrb.w	r3, [ip], #2
 80190e2:	7852      	ldrb	r2, [r2, #1]
 80190e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80190e8:	f3c3 1045 	ubfx	r0, r3, #5, #6
 80190ec:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 80190f0:	f003 021f 	and.w	r2, r3, #31
 80190f4:	461e      	mov	r6, r3
 80190f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80190fa:	fb19 000e 	smlabb	r0, r9, lr, r0
 80190fe:	f04f 0e07 	mov.w	lr, #7
 8019102:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8019106:	9a03      	ldr	r2, [sp, #12]
 8019108:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801910c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019110:	8083      	strh	r3, [r0, #4]
 8019112:	da0a      	bge.n	801912a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8019114:	9a01      	ldr	r2, [sp, #4]
 8019116:	2aff      	cmp	r2, #255	@ 0xff
 8019118:	bf13      	iteet	ne
 801911a:	9a00      	ldrne	r2, [sp, #0]
 801911c:	8023      	strheq	r3, [r4, #0]
 801911e:	3402      	addeq	r4, #2
 8019120:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8019124:	bf18      	it	ne
 8019126:	f10b 0b01 	addne.w	fp, fp, #1
 801912a:	3101      	adds	r1, #1
 801912c:	4662      	mov	r2, ip
 801912e:	e7d0      	b.n	80190d2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8019130:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8019134:	eba8 0807 	sub.w	r8, r8, r7
 8019138:	1bed      	subs	r5, r5, r7
 801913a:	e76c      	b.n	8019016 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801913c:	9b01      	ldr	r3, [sp, #4]
 801913e:	eba8 0807 	sub.w	r8, r8, r7
 8019142:	1bed      	subs	r5, r5, r7
 8019144:	fa1f f986 	uxth.w	r9, r6
 8019148:	2bff      	cmp	r3, #255	@ 0xff
 801914a:	d027      	beq.n	801919c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x574>
 801914c:	eb0b 0307 	add.w	r3, fp, r7
 8019150:	2b40      	cmp	r3, #64	@ 0x40
 8019152:	dd18      	ble.n	8019186 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x55e>
 8019154:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8019158:	9800      	ldr	r0, [sp, #0]
 801915a:	4619      	mov	r1, r3
 801915c:	930c      	str	r3, [sp, #48]	@ 0x30
 801915e:	f7f5 feeb 	bl	800ef38 <_ZN8touchgfx5paint9flushLineEPmi>
 8019162:	465a      	mov	r2, fp
 8019164:	9b01      	ldr	r3, [sp, #4]
 8019166:	4620      	mov	r0, r4
 8019168:	9900      	ldr	r1, [sp, #0]
 801916a:	f04f 0b00 	mov.w	fp, #0
 801916e:	f7f5 fefd 	bl	800ef6c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8019172:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019174:	441c      	add	r4, r3
 8019176:	9b00      	ldr	r3, [sp, #0]
 8019178:	461a      	mov	r2, r3
 801917a:	4b3c      	ldr	r3, [pc, #240]	@ (801926c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801917c:	429a      	cmp	r2, r3
 801917e:	bf0c      	ite	eq
 8019180:	4b3b      	ldreq	r3, [pc, #236]	@ (8019270 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8019182:	4b3a      	ldrne	r3, [pc, #232]	@ (801926c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 8019184:	9300      	str	r3, [sp, #0]
 8019186:	9b00      	ldr	r3, [sp, #0]
 8019188:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 801918c:	463b      	mov	r3, r7
 801918e:	2b00      	cmp	r3, #0
 8019190:	f43f af40 	beq.w	8019014 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8019194:	f822 9b02 	strh.w	r9, [r2], #2
 8019198:	3b01      	subs	r3, #1
 801919a:	e7f8      	b.n	801918e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x566>
 801919c:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 80191a0:	42a7      	cmp	r7, r4
 80191a2:	f67f af38 	bls.w	8019016 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 80191a6:	f824 9b02 	strh.w	r9, [r4], #2
 80191aa:	e7f9      	b.n	80191a0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x578>
 80191ac:	f1bb 0f00 	cmp.w	fp, #0
 80191b0:	d00c      	beq.n	80191cc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a4>
 80191b2:	ea4f 084b 	mov.w	r8, fp, lsl #1
 80191b6:	9800      	ldr	r0, [sp, #0]
 80191b8:	4641      	mov	r1, r8
 80191ba:	f7f5 febd 	bl	800ef38 <_ZN8touchgfx5paint9flushLineEPmi>
 80191be:	4620      	mov	r0, r4
 80191c0:	4444      	add	r4, r8
 80191c2:	9b01      	ldr	r3, [sp, #4]
 80191c4:	465a      	mov	r2, fp
 80191c6:	9900      	ldr	r1, [sp, #0]
 80191c8:	f7f5 fed0 	bl	800ef6c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 80191cc:	4b29      	ldr	r3, [pc, #164]	@ (8019274 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 80191ce:	9a02      	ldr	r2, [sp, #8]
 80191d0:	881b      	ldrh	r3, [r3, #0]
 80191d2:	1a9b      	subs	r3, r3, r2
 80191d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80191d8:	9b06      	ldr	r3, [sp, #24]
 80191da:	3301      	adds	r3, #1
 80191dc:	9306      	str	r3, [sp, #24]
 80191de:	9a06      	ldr	r2, [sp, #24]
 80191e0:	9b04      	ldr	r3, [sp, #16]
 80191e2:	4293      	cmp	r3, r2
 80191e4:	d120      	bne.n	8019228 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x600>
 80191e6:	9b05      	ldr	r3, [sp, #20]
 80191e8:	2100      	movs	r1, #0
 80191ea:	9a05      	ldr	r2, [sp, #20]
 80191ec:	f04f 0600 	mov.w	r6, #0
 80191f0:	f103 0801 	add.w	r8, r3, #1
 80191f4:	9b08      	ldr	r3, [sp, #32]
 80191f6:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 80191fa:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80191fe:	2280      	movs	r2, #128	@ 0x80
 8019200:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8019204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019206:	ba3f      	rev	r7, r7
 8019208:	eba9 0905 	sub.w	r9, r9, r5
 801920c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801920e:	441f      	add	r7, r3
 8019210:	f00a fd01 	bl	8023c16 <memset>
 8019214:	fa1f f989 	uxth.w	r9, r9
 8019218:	2300      	movs	r3, #0
 801921a:	f8cd 8014 	str.w	r8, [sp, #20]
 801921e:	9306      	str	r3, [sp, #24]
 8019220:	f7f5 fe72 	bl	800ef08 <_ZN8touchgfx5paint8tearDownEv>
 8019224:	46ba      	mov	sl, r7
 8019226:	e58b      	b.n	8018d40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8019228:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 801922c:	9b02      	ldr	r3, [sp, #8]
 801922e:	eba9 0903 	sub.w	r9, r9, r3
 8019232:	eba9 0505 	sub.w	r5, r9, r5
 8019236:	fa1f f985 	uxth.w	r9, r5
 801923a:	e7f1      	b.n	8019220 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5f8>
 801923c:	4b0e      	ldr	r3, [pc, #56]	@ (8019278 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 801923e:	6818      	ldr	r0, [r3, #0]
 8019240:	6803      	ldr	r3, [r0, #0]
 8019242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019244:	4798      	blx	r3
 8019246:	b013      	add	sp, #76	@ 0x4c
 8019248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801924c:	9b02      	ldr	r3, [sp, #8]
 801924e:	9a02      	ldr	r2, [sp, #8]
 8019250:	42ab      	cmp	r3, r5
 8019252:	bfa8      	it	ge
 8019254:	462b      	movge	r3, r5
 8019256:	eba2 0803 	sub.w	r8, r2, r3
 801925a:	1aed      	subs	r5, r5, r3
 801925c:	e627      	b.n	8018eae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 801925e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019262:	fa1f f986 	uxth.w	r9, r6
 8019266:	2500      	movs	r5, #0
 8019268:	2701      	movs	r7, #1
 801926a:	e76f      	b.n	801914c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x524>
 801926c:	20000280 	.word	0x20000280
 8019270:	20000380 	.word	0x20000380
 8019274:	20001dee 	.word	0x20001dee
 8019278:	20001df4 	.word	0x20001df4

0801927c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019280:	b08f      	sub	sp, #60	@ 0x3c
 8019282:	461c      	mov	r4, r3
 8019284:	460f      	mov	r7, r1
 8019286:	9203      	str	r2, [sp, #12]
 8019288:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801928c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801928e:	9202      	str	r2, [sp, #8]
 8019290:	2a00      	cmp	r2, #0
 8019292:	f000 8128 	beq.w	80194e6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8019296:	6820      	ldr	r0, [r4, #0]
 8019298:	aa0a      	add	r2, sp, #40	@ 0x28
 801929a:	6861      	ldr	r1, [r4, #4]
 801929c:	c203      	stmia	r2!, {r0, r1}
 801929e:	6818      	ldr	r0, [r3, #0]
 80192a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80192a2:	6859      	ldr	r1, [r3, #4]
 80192a4:	c203      	stmia	r2!, {r0, r1}
 80192a6:	a80a      	add	r0, sp, #40	@ 0x28
 80192a8:	f7f9 f964 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80192ac:	4621      	mov	r1, r4
 80192ae:	a80c      	add	r0, sp, #48	@ 0x30
 80192b0:	f7f9 f988 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80192b4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80192b8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80192bc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80192c0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80192c4:	bfdb      	ittet	le
 80192c6:	b2b3      	uxthle	r3, r6
 80192c8:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80192cc:	2301      	movgt	r3, #1
 80192ce:	fb92 f3f3 	sdivle	r3, r2, r3
 80192d2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80192d6:	441d      	add	r5, r3
 80192d8:	fb92 f1f3 	sdiv	r1, r2, r3
 80192dc:	fa1f fc81 	uxth.w	ip, r1
 80192e0:	3d01      	subs	r5, #1
 80192e2:	fb0c 2413 	mls	r4, ip, r3, r2
 80192e6:	4661      	mov	r1, ip
 80192e8:	fb14 f406 	smulbb	r4, r4, r6
 80192ec:	4404      	add	r4, r0
 80192ee:	fb95 f5f3 	sdiv	r5, r5, r3
 80192f2:	b2a4      	uxth	r4, r4
 80192f4:	b121      	cbz	r1, 8019300 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 80192f6:	9b03      	ldr	r3, [sp, #12]
 80192f8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80192fc:	ba1b      	rev	r3, r3
 80192fe:	441f      	add	r7, r3
 8019300:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019304:	b2ad      	uxth	r5, r5
 8019306:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801930a:	4418      	add	r0, r3
 801930c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019310:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8019314:	00ad      	lsls	r5, r5, #2
 8019316:	441a      	add	r2, r3
 8019318:	4b74      	ldr	r3, [pc, #464]	@ (80194ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801931a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801931e:	6818      	ldr	r0, [r3, #0]
 8019320:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019324:	6803      	ldr	r3, [r0, #0]
 8019326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019328:	4798      	blx	r3
 801932a:	4a71      	ldr	r2, [pc, #452]	@ (80194f0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801932c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019330:	2c00      	cmp	r4, #0
 8019332:	8813      	ldrh	r3, [r2, #0]
 8019334:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8019338:	bf0c      	ite	eq
 801933a:	46c8      	moveq	r8, r9
 801933c:	f04f 0800 	movne.w	r8, #0
 8019340:	9209      	str	r2, [sp, #36]	@ 0x24
 8019342:	fb03 c101 	mla	r1, r3, r1, ip
 8019346:	4373      	muls	r3, r6
 8019348:	fa1f f888 	uxth.w	r8, r8
 801934c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019350:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019354:	9304      	str	r3, [sp, #16]
 8019356:	1d2b      	adds	r3, r5, #4
 8019358:	9305      	str	r3, [sp, #20]
 801935a:	2300      	movs	r3, #0
 801935c:	9301      	str	r3, [sp, #4]
 801935e:	9a04      	ldr	r2, [sp, #16]
 8019360:	4282      	cmp	r2, r0
 8019362:	f240 80bb 	bls.w	80194dc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8019366:	b95b      	cbnz	r3, 8019380 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 8019368:	783a      	ldrb	r2, [r7, #0]
 801936a:	0993      	lsrs	r3, r2, #6
 801936c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019370:	9201      	str	r2, [sp, #4]
 8019372:	1e5a      	subs	r2, r3, #1
 8019374:	2a02      	cmp	r2, #2
 8019376:	bf8d      	iteet	hi
 8019378:	787b      	ldrbhi	r3, [r7, #1]
 801937a:	3701      	addls	r7, #1
 801937c:	b29b      	uxthls	r3, r3
 801937e:	3702      	addhi	r7, #2
 8019380:	b184      	cbz	r4, 80193a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 8019382:	429c      	cmp	r4, r3
 8019384:	bf91      	iteee	ls
 8019386:	1b1c      	subls	r4, r3, r4
 8019388:	1ae4      	subhi	r4, r4, r3
 801938a:	46c4      	movhi	ip, r8
 801938c:	f04f 0a00 	movhi.w	sl, #0
 8019390:	bf9b      	ittet	ls
 8019392:	fa1f fa84 	uxthls.w	sl, r4
 8019396:	2400      	movls	r4, #0
 8019398:	b2a4      	uxthhi	r4, r4
 801939a:	fa1f fc89 	uxthls.w	ip, r9
 801939e:	4653      	mov	r3, sl
 80193a0:	46e0      	mov	r8, ip
 80193a2:	e7dc      	b.n	801935e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 80193a4:	2204      	movs	r2, #4
 80193a6:	9905      	ldr	r1, [sp, #20]
 80193a8:	4543      	cmp	r3, r8
 80193aa:	4615      	mov	r5, r2
 80193ac:	9a01      	ldr	r2, [sp, #4]
 80193ae:	bf24      	itt	cs
 80193b0:	eba3 0a08 	subcs.w	sl, r3, r8
 80193b4:	46c6      	movcs	lr, r8
 80193b6:	fb15 1202 	smlabb	r2, r5, r2, r1
 80193ba:	9903      	ldr	r1, [sp, #12]
 80193bc:	bf3c      	itt	cc
 80193be:	eba8 0c03 	subcc.w	ip, r8, r3
 80193c2:	469e      	movcc	lr, r3
 80193c4:	588a      	ldr	r2, [r1, r2]
 80193c6:	bf26      	itte	cs
 80193c8:	fa1f fa8a 	uxthcs.w	sl, sl
 80193cc:	46a4      	movcs	ip, r4
 80193ce:	fa1f fc8c 	uxthcc.w	ip, ip
 80193d2:	ea4f 6112 	mov.w	r1, r2, lsr #24
 80193d6:	bf38      	it	cc
 80193d8:	46a2      	movcc	sl, r4
 80193da:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80193de:	2900      	cmp	r1, #0
 80193e0:	d066      	beq.n	80194b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 80193e2:	29ff      	cmp	r1, #255	@ 0xff
 80193e4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80193e8:	d114      	bne.n	8019414 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 80193ea:	9d02      	ldr	r5, [sp, #8]
 80193ec:	2dff      	cmp	r5, #255	@ 0xff
 80193ee:	d111      	bne.n	8019414 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 80193f0:	0951      	lsrs	r1, r2, #5
 80193f2:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80193f6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80193fa:	4486      	add	lr, r0
 80193fc:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8019400:	f026 0607 	bic.w	r6, r6, #7
 8019404:	430e      	orrs	r6, r1
 8019406:	4316      	orrs	r6, r2
 8019408:	b2b6      	uxth	r6, r6
 801940a:	4586      	cmp	lr, r0
 801940c:	d051      	beq.n	80194b2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801940e:	f820 6b02 	strh.w	r6, [r0], #2
 8019412:	e7fa      	b.n	801940a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8019414:	9d02      	ldr	r5, [sp, #8]
 8019416:	b2f6      	uxtb	r6, r6
 8019418:	4486      	add	lr, r0
 801941a:	4369      	muls	r1, r5
 801941c:	1c4d      	adds	r5, r1, #1
 801941e:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8019422:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8019426:	b2d2      	uxtb	r2, r2
 8019428:	122d      	asrs	r5, r5, #8
 801942a:	ea6f 0b05 	mvn.w	fp, r5
 801942e:	b2ad      	uxth	r5, r5
 8019430:	fb11 f105 	smulbb	r1, r1, r5
 8019434:	fa5f fb8b 	uxtb.w	fp, fp
 8019438:	fb16 f605 	smulbb	r6, r6, r5
 801943c:	fb12 f205 	smulbb	r2, r2, r5
 8019440:	b289      	uxth	r1, r1
 8019442:	b2b6      	uxth	r6, r6
 8019444:	b292      	uxth	r2, r2
 8019446:	9106      	str	r1, [sp, #24]
 8019448:	9607      	str	r6, [sp, #28]
 801944a:	9208      	str	r2, [sp, #32]
 801944c:	4586      	cmp	lr, r0
 801944e:	d030      	beq.n	80194b2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8019450:	8802      	ldrh	r2, [r0, #0]
 8019452:	9906      	ldr	r1, [sp, #24]
 8019454:	1216      	asrs	r6, r2, #8
 8019456:	10d5      	asrs	r5, r2, #3
 8019458:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801945c:	00d2      	lsls	r2, r2, #3
 801945e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8019462:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019466:	b2d2      	uxtb	r2, r2
 8019468:	fb06 160b 	mla	r6, r6, fp, r1
 801946c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019470:	9907      	ldr	r1, [sp, #28]
 8019472:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019476:	b2b6      	uxth	r6, r6
 8019478:	fb05 150b 	mla	r5, r5, fp, r1
 801947c:	9908      	ldr	r1, [sp, #32]
 801947e:	fb02 120b 	mla	r2, r2, fp, r1
 8019482:	1c71      	adds	r1, r6, #1
 8019484:	b2ad      	uxth	r5, r5
 8019486:	b292      	uxth	r2, r2
 8019488:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801948c:	1c51      	adds	r1, r2, #1
 801948e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8019492:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019496:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801949a:	4316      	orrs	r6, r2
 801949c:	1c6a      	adds	r2, r5, #1
 801949e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80194a2:	096d      	lsrs	r5, r5, #5
 80194a4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80194a8:	432e      	orrs	r6, r5
 80194aa:	f820 6b02 	strh.w	r6, [r0], #2
 80194ae:	e7cd      	b.n	801944c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 80194b0:	4470      	add	r0, lr
 80194b2:	4543      	cmp	r3, r8
 80194b4:	f4ff af73 	bcc.w	801939e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80194b8:	fa1f fc89 	uxth.w	ip, r9
 80194bc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80194c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194c2:	eba4 040c 	sub.w	r4, r4, ip
 80194c6:	881b      	ldrh	r3, [r3, #0]
 80194c8:	b2a4      	uxth	r4, r4
 80194ca:	eba3 0309 	sub.w	r3, r3, r9
 80194ce:	2c00      	cmp	r4, #0
 80194d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80194d4:	bf18      	it	ne
 80194d6:	f04f 0c00 	movne.w	ip, #0
 80194da:	e760      	b.n	801939e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80194dc:	4b03      	ldr	r3, [pc, #12]	@ (80194ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 80194de:	6818      	ldr	r0, [r3, #0]
 80194e0:	6803      	ldr	r3, [r0, #0]
 80194e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194e4:	4798      	blx	r3
 80194e6:	b00f      	add	sp, #60	@ 0x3c
 80194e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194ec:	20001df4 	.word	0x20001df4
 80194f0:	20001dee 	.word	0x20001dee

080194f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80194f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f8:	b093      	sub	sp, #76	@ 0x4c
 80194fa:	461c      	mov	r4, r3
 80194fc:	9205      	str	r2, [sp, #20]
 80194fe:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8019502:	9101      	str	r1, [sp, #4]
 8019504:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8019506:	9202      	str	r2, [sp, #8]
 8019508:	2a00      	cmp	r2, #0
 801950a:	f000 812e 	beq.w	801976a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801950e:	6820      	ldr	r0, [r4, #0]
 8019510:	aa0e      	add	r2, sp, #56	@ 0x38
 8019512:	6861      	ldr	r1, [r4, #4]
 8019514:	c203      	stmia	r2!, {r0, r1}
 8019516:	6818      	ldr	r0, [r3, #0]
 8019518:	aa10      	add	r2, sp, #64	@ 0x40
 801951a:	6859      	ldr	r1, [r3, #4]
 801951c:	c203      	stmia	r2!, {r0, r1}
 801951e:	a80e      	add	r0, sp, #56	@ 0x38
 8019520:	f7f9 f828 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019524:	4621      	mov	r1, r4
 8019526:	a810      	add	r0, sp, #64	@ 0x40
 8019528:	f7f9 f84c 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801952c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8019530:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8019534:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8019538:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801953c:	bfdb      	ittet	le
 801953e:	b2b3      	uxthle	r3, r6
 8019540:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8019544:	2301      	movgt	r3, #1
 8019546:	fb92 f3f3 	sdivle	r3, r2, r3
 801954a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801954e:	441d      	add	r5, r3
 8019550:	fb92 f1f3 	sdiv	r1, r2, r3
 8019554:	fa1f fc81 	uxth.w	ip, r1
 8019558:	3d01      	subs	r5, #1
 801955a:	fb0c 2413 	mls	r4, ip, r3, r2
 801955e:	4661      	mov	r1, ip
 8019560:	fb14 f406 	smulbb	r4, r4, r6
 8019564:	4404      	add	r4, r0
 8019566:	fb95 f5f3 	sdiv	r5, r5, r3
 801956a:	b2a4      	uxth	r4, r4
 801956c:	b131      	cbz	r1, 801957c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801956e:	9b05      	ldr	r3, [sp, #20]
 8019570:	9901      	ldr	r1, [sp, #4]
 8019572:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019576:	ba1b      	rev	r3, r3
 8019578:	4419      	add	r1, r3
 801957a:	9101      	str	r1, [sp, #4]
 801957c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019580:	b2ad      	uxth	r5, r5
 8019582:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8019586:	4418      	add	r0, r3
 8019588:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801958c:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8019590:	00ad      	lsls	r5, r5, #2
 8019592:	441a      	add	r2, r3
 8019594:	4b76      	ldr	r3, [pc, #472]	@ (8019770 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8019596:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801959a:	6818      	ldr	r0, [r3, #0]
 801959c:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80195a0:	6803      	ldr	r3, [r0, #0]
 80195a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195a4:	4798      	blx	r3
 80195a6:	4973      	ldr	r1, [pc, #460]	@ (8019774 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 80195a8:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 80195ac:	2c00      	cmp	r4, #0
 80195ae:	880b      	ldrh	r3, [r1, #0]
 80195b0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80195b4:	910d      	str	r1, [sp, #52]	@ 0x34
 80195b6:	fb03 c202 	mla	r2, r3, r2, ip
 80195ba:	bf08      	it	eq
 80195bc:	46dc      	moveq	ip, fp
 80195be:	fb03 f306 	mul.w	r3, r3, r6
 80195c2:	bf18      	it	ne
 80195c4:	f04f 0c00 	movne.w	ip, #0
 80195c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80195cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80195d0:	fa1f fc8c 	uxth.w	ip, ip
 80195d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80195d8:	9106      	str	r1, [sp, #24]
 80195da:	9308      	str	r3, [sp, #32]
 80195dc:	1d2b      	adds	r3, r5, #4
 80195de:	9309      	str	r3, [sp, #36]	@ 0x24
 80195e0:	9b02      	ldr	r3, [sp, #8]
 80195e2:	43da      	mvns	r2, r3
 80195e4:	2300      	movs	r3, #0
 80195e6:	b2d2      	uxtb	r2, r2
 80195e8:	9303      	str	r3, [sp, #12]
 80195ea:	9207      	str	r2, [sp, #28]
 80195ec:	9a08      	ldr	r2, [sp, #32]
 80195ee:	4282      	cmp	r2, r0
 80195f0:	f240 80b6 	bls.w	8019760 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 80195f4:	b963      	cbnz	r3, 8019610 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 80195f6:	9b01      	ldr	r3, [sp, #4]
 80195f8:	781a      	ldrb	r2, [r3, #0]
 80195fa:	0993      	lsrs	r3, r2, #6
 80195fc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019600:	9203      	str	r2, [sp, #12]
 8019602:	1e5a      	subs	r2, r3, #1
 8019604:	2a02      	cmp	r2, #2
 8019606:	d815      	bhi.n	8019634 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 8019608:	9a01      	ldr	r2, [sp, #4]
 801960a:	b29b      	uxth	r3, r3
 801960c:	3201      	adds	r2, #1
 801960e:	9201      	str	r2, [sp, #4]
 8019610:	b1b4      	cbz	r4, 8019640 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 8019612:	429c      	cmp	r4, r3
 8019614:	bf91      	iteee	ls
 8019616:	1b1c      	subls	r4, r3, r4
 8019618:	1ae4      	subhi	r4, r4, r3
 801961a:	4666      	movhi	r6, ip
 801961c:	f04f 0800 	movhi.w	r8, #0
 8019620:	bf9b      	ittet	ls
 8019622:	fa1f f884 	uxthls.w	r8, r4
 8019626:	2400      	movls	r4, #0
 8019628:	b2a4      	uxthhi	r4, r4
 801962a:	fa1f f68b 	uxthls.w	r6, fp
 801962e:	4643      	mov	r3, r8
 8019630:	46b4      	mov	ip, r6
 8019632:	e7db      	b.n	80195ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 8019634:	9a01      	ldr	r2, [sp, #4]
 8019636:	9b01      	ldr	r3, [sp, #4]
 8019638:	3202      	adds	r2, #2
 801963a:	785b      	ldrb	r3, [r3, #1]
 801963c:	9201      	str	r2, [sp, #4]
 801963e:	e7e7      	b.n	8019610 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8019640:	2203      	movs	r2, #3
 8019642:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019644:	4563      	cmp	r3, ip
 8019646:	4615      	mov	r5, r2
 8019648:	9a03      	ldr	r2, [sp, #12]
 801964a:	bf2c      	ite	cs
 801964c:	eba3 080c 	subcs.w	r8, r3, ip
 8019650:	ebac 0603 	subcc.w	r6, ip, r3
 8019654:	fb15 1202 	smlabb	r2, r5, r2, r1
 8019658:	9905      	ldr	r1, [sp, #20]
 801965a:	bf24      	itt	cs
 801965c:	fa1f f888 	uxthcs.w	r8, r8
 8019660:	46e1      	movcs	r9, ip
 8019662:	eb01 0502 	add.w	r5, r1, r2
 8019666:	9902      	ldr	r1, [sp, #8]
 8019668:	bf2f      	iteee	cs
 801966a:	4626      	movcs	r6, r4
 801966c:	b2b6      	uxthcc	r6, r6
 801966e:	4699      	movcc	r9, r3
 8019670:	46a0      	movcc	r8, r4
 8019672:	29ff      	cmp	r1, #255	@ 0xff
 8019674:	d04a      	beq.n	801970c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 8019676:	9f06      	ldr	r7, [sp, #24]
 8019678:	46ca      	mov	sl, r9
 801967a:	78a9      	ldrb	r1, [r5, #2]
 801967c:	9004      	str	r0, [sp, #16]
 801967e:	4379      	muls	r1, r7
 8019680:	910a      	str	r1, [sp, #40]	@ 0x28
 8019682:	7869      	ldrb	r1, [r5, #1]
 8019684:	4379      	muls	r1, r7
 8019686:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019688:	9905      	ldr	r1, [sp, #20]
 801968a:	5c8a      	ldrb	r2, [r1, r2]
 801968c:	437a      	muls	r2, r7
 801968e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019690:	f1ba 0f00 	cmp.w	sl, #0
 8019694:	d03d      	beq.n	8019712 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 8019696:	9a04      	ldr	r2, [sp, #16]
 8019698:	f10a 3aff 	add.w	sl, sl, #4294967295
 801969c:	9f07      	ldr	r7, [sp, #28]
 801969e:	8812      	ldrh	r2, [r2, #0]
 80196a0:	fa1f fa8a 	uxth.w	sl, sl
 80196a4:	46be      	mov	lr, r7
 80196a6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80196a8:	1215      	asrs	r5, r2, #8
 80196aa:	10d1      	asrs	r1, r2, #3
 80196ac:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80196b0:	00d2      	lsls	r2, r2, #3
 80196b2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80196b6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80196ba:	b2d2      	uxtb	r2, r2
 80196bc:	fb05 750e 	mla	r5, r5, lr, r7
 80196c0:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80196c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80196c6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80196ca:	b2ad      	uxth	r5, r5
 80196cc:	fb01 710e 	mla	r1, r1, lr, r7
 80196d0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80196d2:	fb02 720e 	mla	r2, r2, lr, r7
 80196d6:	f105 0e01 	add.w	lr, r5, #1
 80196da:	b289      	uxth	r1, r1
 80196dc:	b292      	uxth	r2, r2
 80196de:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80196e2:	f102 0e01 	add.w	lr, r2, #1
 80196e6:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80196ea:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80196ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80196f2:	4315      	orrs	r5, r2
 80196f4:	1c4a      	adds	r2, r1, #1
 80196f6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80196fa:	9a04      	ldr	r2, [sp, #16]
 80196fc:	0949      	lsrs	r1, r1, #5
 80196fe:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8019702:	430d      	orrs	r5, r1
 8019704:	f822 5b02 	strh.w	r5, [r2], #2
 8019708:	9204      	str	r2, [sp, #16]
 801970a:	e7c1      	b.n	8019690 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801970c:	4649      	mov	r1, r9
 801970e:	4686      	mov	lr, r0
 8019710:	b999      	cbnz	r1, 801973a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 8019712:	4563      	cmp	r3, ip
 8019714:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8019718:	d389      	bcc.n	801962e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801971a:	fa1f f68b 	uxth.w	r6, fp
 801971e:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8019722:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019724:	1ba4      	subs	r4, r4, r6
 8019726:	881b      	ldrh	r3, [r3, #0]
 8019728:	b2a4      	uxth	r4, r4
 801972a:	eba3 030b 	sub.w	r3, r3, fp
 801972e:	2c00      	cmp	r4, #0
 8019730:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019734:	bf18      	it	ne
 8019736:	2600      	movne	r6, #0
 8019738:	e779      	b.n	801962e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801973a:	78aa      	ldrb	r2, [r5, #2]
 801973c:	3901      	subs	r1, #1
 801973e:	4f0e      	ldr	r7, [pc, #56]	@ (8019778 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8019740:	b289      	uxth	r1, r1
 8019742:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8019746:	786a      	ldrb	r2, [r5, #1]
 8019748:	00d2      	lsls	r2, r2, #3
 801974a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801974e:	ea4a 0202 	orr.w	r2, sl, r2
 8019752:	f895 a000 	ldrb.w	sl, [r5]
 8019756:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801975a:	f82e 2b02 	strh.w	r2, [lr], #2
 801975e:	e7d7      	b.n	8019710 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 8019760:	4b03      	ldr	r3, [pc, #12]	@ (8019770 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8019762:	6818      	ldr	r0, [r3, #0]
 8019764:	6803      	ldr	r3, [r0, #0]
 8019766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019768:	4798      	blx	r3
 801976a:	b013      	add	sp, #76	@ 0x4c
 801976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019770:	20001df4 	.word	0x20001df4
 8019774:	20001dee 	.word	0x20001dee
 8019778:	fffff800 	.word	0xfffff800

0801977c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019780:	b09d      	sub	sp, #116	@ 0x74
 8019782:	461c      	mov	r4, r3
 8019784:	4683      	mov	fp, r0
 8019786:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019788:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 801978c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8019790:	920e      	str	r2, [sp, #56]	@ 0x38
 8019792:	2a00      	cmp	r2, #0
 8019794:	f000 81e4 	beq.w	8019b60 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 8019798:	6820      	ldr	r0, [r4, #0]
 801979a:	aa18      	add	r2, sp, #96	@ 0x60
 801979c:	6861      	ldr	r1, [r4, #4]
 801979e:	c203      	stmia	r2!, {r0, r1}
 80197a0:	6818      	ldr	r0, [r3, #0]
 80197a2:	aa1a      	add	r2, sp, #104	@ 0x68
 80197a4:	6859      	ldr	r1, [r3, #4]
 80197a6:	c203      	stmia	r2!, {r0, r1}
 80197a8:	a818      	add	r0, sp, #96	@ 0x60
 80197aa:	f7f8 fee3 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80197ae:	4621      	mov	r1, r4
 80197b0:	a81a      	add	r0, sp, #104	@ 0x68
 80197b2:	f7f8 ff07 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80197b6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80197ba:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80197be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80197c2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80197c6:	bfdb      	ittet	le
 80197c8:	b29a      	uxthle	r2, r3
 80197ca:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80197ce:	2201      	movgt	r2, #1
 80197d0:	fb91 f2f2 	sdivle	r2, r1, r2
 80197d4:	9202      	str	r2, [sp, #8]
 80197d6:	9802      	ldr	r0, [sp, #8]
 80197d8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80197dc:	9902      	ldr	r1, [sp, #8]
 80197de:	fb92 f0f0 	sdiv	r0, r2, r0
 80197e2:	b280      	uxth	r0, r0
 80197e4:	440c      	add	r4, r1
 80197e6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80197e8:	3c01      	subs	r4, #1
 80197ea:	9802      	ldr	r0, [sp, #8]
 80197ec:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80197ee:	fb05 2510 	mls	r5, r5, r0, r2
 80197f2:	fb94 f4f1 	sdiv	r4, r4, r1
 80197f6:	fb15 f503 	smulbb	r5, r5, r3
 80197fa:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80197fe:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8019802:	3401      	adds	r4, #1
 8019804:	440d      	add	r5, r1
 8019806:	4419      	add	r1, r3
 8019808:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801980c:	b2a4      	uxth	r4, r4
 801980e:	441a      	add	r2, r3
 8019810:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8019814:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8019818:	00a4      	lsls	r4, r4, #2
 801981a:	9306      	str	r3, [sp, #24]
 801981c:	b2ad      	uxth	r5, r5
 801981e:	4bb3      	ldr	r3, [pc, #716]	@ (8019aec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8019820:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8019824:	6818      	ldr	r0, [r3, #0]
 8019826:	6803      	ldr	r3, [r0, #0]
 8019828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801982a:	4798      	blx	r3
 801982c:	4bb0      	ldr	r3, [pc, #704]	@ (8019af0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801982e:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8019832:	2d00      	cmp	r5, #0
 8019834:	881a      	ldrh	r2, [r3, #0]
 8019836:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801983a:	fb02 f606 	mul.w	r6, r2, r6
 801983e:	fb02 7101 	mla	r1, r2, r1, r7
 8019842:	9316      	str	r3, [sp, #88]	@ 0x58
 8019844:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8019848:	4baa      	ldr	r3, [pc, #680]	@ (8019af4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801984a:	bf18      	it	ne
 801984c:	2100      	movne	r1, #0
 801984e:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8019852:	eba3 030b 	sub.w	r3, r3, fp
 8019856:	920a      	str	r2, [sp, #40]	@ 0x28
 8019858:	f104 0204 	add.w	r2, r4, #4
 801985c:	9317      	str	r3, [sp, #92]	@ 0x5c
 801985e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8019860:	9a06      	ldr	r2, [sp, #24]
 8019862:	bf08      	it	eq
 8019864:	4611      	moveq	r1, r2
 8019866:	2200      	movs	r2, #0
 8019868:	b289      	uxth	r1, r1
 801986a:	920d      	str	r2, [sp, #52]	@ 0x34
 801986c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801986e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019870:	fa12 f383 	uxtah	r3, r2, r3
 8019874:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019876:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801987a:	3304      	adds	r3, #4
 801987c:	9308      	str	r3, [sp, #32]
 801987e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019880:	4543      	cmp	r3, r8
 8019882:	f240 8168 	bls.w	8019b56 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 8019886:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801988a:	f04f 0e01 	mov.w	lr, #1
 801988e:	9a02      	ldr	r2, [sp, #8]
 8019890:	9808      	ldr	r0, [sp, #32]
 8019892:	fbb5 f3f3 	udiv	r3, r5, r3
 8019896:	1ad3      	subs	r3, r2, r3
 8019898:	7800      	ldrb	r0, [r0, #0]
 801989a:	b29b      	uxth	r3, r3
 801989c:	9010      	str	r0, [sp, #64]	@ 0x40
 801989e:	3001      	adds	r0, #1
 80198a0:	9314      	str	r3, [sp, #80]	@ 0x50
 80198a2:	9b08      	ldr	r3, [sp, #32]
 80198a4:	9007      	str	r0, [sp, #28]
 80198a6:	785a      	ldrb	r2, [r3, #1]
 80198a8:	789b      	ldrb	r3, [r3, #2]
 80198aa:	021b      	lsls	r3, r3, #8
 80198ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80198b0:	9a08      	ldr	r2, [sp, #32]
 80198b2:	78d2      	ldrb	r2, [r2, #3]
 80198b4:	4313      	orrs	r3, r2
 80198b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80198b8:	441a      	add	r2, r3
 80198ba:	1c50      	adds	r0, r2, #1
 80198bc:	7852      	ldrb	r2, [r2, #1]
 80198be:	9005      	str	r0, [sp, #20]
 80198c0:	0212      	lsls	r2, r2, #8
 80198c2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80198c4:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80198c8:	5cc3      	ldrb	r3, [r0, r3]
 80198ca:	431a      	orrs	r2, r3
 80198cc:	b293      	uxth	r3, r2
 80198ce:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 80198d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80198d4:	2300      	movs	r3, #0
 80198d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80198d8:	2301      	movs	r3, #1
 80198da:	9301      	str	r3, [sp, #4]
 80198dc:	9304      	str	r3, [sp, #16]
 80198de:	2300      	movs	r3, #0
 80198e0:	9303      	str	r3, [sp, #12]
 80198e2:	2d00      	cmp	r5, #0
 80198e4:	d07d      	beq.n	80199e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 80198e6:	45ae      	cmp	lr, r5
 80198e8:	d26c      	bcs.n	80199c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 80198ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80198ec:	eba5 050e 	sub.w	r5, r5, lr
 80198f0:	460c      	mov	r4, r1
 80198f2:	4543      	cmp	r3, r8
 80198f4:	b2ad      	uxth	r5, r5
 80198f6:	d802      	bhi.n	80198fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 80198f8:	e071      	b.n	80199de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d15d      	bne.n	80199ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 80198fe:	9b05      	ldr	r3, [sp, #20]
 8019900:	9a04      	ldr	r2, [sp, #16]
 8019902:	785b      	ldrb	r3, [r3, #1]
 8019904:	f1c2 0207 	rsb	r2, r2, #7
 8019908:	9904      	ldr	r1, [sp, #16]
 801990a:	4093      	lsls	r3, r2
 801990c:	005b      	lsls	r3, r3, #1
 801990e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019912:	9b05      	ldr	r3, [sp, #20]
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	410b      	asrs	r3, r1
 8019918:	3101      	adds	r1, #1
 801991a:	b2c9      	uxtb	r1, r1
 801991c:	b2db      	uxtb	r3, r3
 801991e:	2908      	cmp	r1, #8
 8019920:	9104      	str	r1, [sp, #16]
 8019922:	9905      	ldr	r1, [sp, #20]
 8019924:	ea43 0302 	orr.w	r3, r3, r2
 8019928:	bf0c      	ite	eq
 801992a:	3102      	addeq	r1, #2
 801992c:	3101      	addne	r1, #1
 801992e:	b29a      	uxth	r2, r3
 8019930:	bf05      	ittet	eq
 8019932:	9105      	streq	r1, [sp, #20]
 8019934:	2100      	moveq	r1, #0
 8019936:	9105      	strne	r1, [sp, #20]
 8019938:	9104      	streq	r1, [sp, #16]
 801993a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801993c:	4291      	cmp	r1, r2
 801993e:	d30a      	bcc.n	8019956 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 8019940:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8019944:	2301      	movs	r3, #1
 8019946:	9907      	ldr	r1, [sp, #28]
 8019948:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801994c:	d30f      	bcc.n	801996e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801994e:	2100      	movs	r1, #0
 8019950:	9301      	str	r3, [sp, #4]
 8019952:	9103      	str	r1, [sp, #12]
 8019954:	e032      	b.n	80199bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 8019956:	9b07      	ldr	r3, [sp, #28]
 8019958:	429a      	cmp	r2, r3
 801995a:	d318      	bcc.n	801998e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801995c:	9b01      	ldr	r3, [sp, #4]
 801995e:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 8019962:	445b      	add	r3, fp
 8019964:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8019968:	9b01      	ldr	r3, [sp, #4]
 801996a:	3301      	adds	r3, #1
 801996c:	b29b      	uxth	r3, r3
 801996e:	9907      	ldr	r1, [sp, #28]
 8019970:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 8019974:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8019978:	7108      	strb	r0, [r1, #4]
 801997a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801997c:	80c8      	strh	r0, [r1, #6]
 801997e:	9801      	ldr	r0, [sp, #4]
 8019980:	3001      	adds	r0, #1
 8019982:	7148      	strb	r0, [r1, #5]
 8019984:	9907      	ldr	r1, [sp, #28]
 8019986:	3101      	adds	r1, #1
 8019988:	b289      	uxth	r1, r1
 801998a:	9107      	str	r1, [sp, #28]
 801998c:	e7df      	b.n	801994e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801998e:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8019992:	4611      	mov	r1, r2
 8019994:	795b      	ldrb	r3, [r3, #5]
 8019996:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 801999a:	4458      	add	r0, fp
 801999c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801999e:	4406      	add	r6, r0
 80199a0:	2e00      	cmp	r6, #0
 80199a2:	dd06      	ble.n	80199b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80199a4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80199a8:	790e      	ldrb	r6, [r1, #4]
 80199aa:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80199ae:	88c9      	ldrh	r1, [r1, #6]
 80199b0:	e7f4      	b.n	801999c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 80199b2:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80199b6:	b29b      	uxth	r3, r3
 80199b8:	e7c5      	b.n	8019946 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 80199ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80199bc:	4621      	mov	r1, r4
 80199be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80199c0:	469e      	mov	lr, r3
 80199c2:	e78e      	b.n	80198e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 80199c4:	9a03      	ldr	r2, [sp, #12]
 80199c6:	ebae 0305 	sub.w	r3, lr, r5
 80199ca:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80199ce:	442a      	add	r2, r5
 80199d0:	b29b      	uxth	r3, r3
 80199d2:	b292      	uxth	r2, r2
 80199d4:	9203      	str	r2, [sp, #12]
 80199d6:	2500      	movs	r5, #0
 80199d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80199da:	4542      	cmp	r2, r8
 80199dc:	d88d      	bhi.n	80198fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 80199de:	4621      	mov	r1, r4
 80199e0:	e74d      	b.n	801987e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 80199e2:	458e      	cmp	lr, r1
 80199e4:	f04f 0900 	mov.w	r9, #0
 80199e8:	bf2b      	itete	cs
 80199ea:	ebae 0301 	subcs.w	r3, lr, r1
 80199ee:	eba1 040e 	subcc.w	r4, r1, lr
 80199f2:	462c      	movcs	r4, r5
 80199f4:	462b      	movcc	r3, r5
 80199f6:	bf27      	ittee	cs
 80199f8:	b29b      	uxthcs	r3, r3
 80199fa:	910c      	strcs	r1, [sp, #48]	@ 0x30
 80199fc:	b2a4      	uxthcc	r4, r4
 80199fe:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8019a02:	9a03      	ldr	r2, [sp, #12]
 8019a04:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019a06:	444a      	add	r2, r9
 8019a08:	4548      	cmp	r0, r9
 8019a0a:	b292      	uxth	r2, r2
 8019a0c:	d074      	beq.n	8019af8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 8019a0e:	2004      	movs	r0, #4
 8019a10:	445a      	add	r2, fp
 8019a12:	4605      	mov	r5, r0
 8019a14:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8019a18:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019a1a:	fb15 0202 	smlabb	r2, r5, r2, r0
 8019a1e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019a20:	5880      	ldr	r0, [r0, r2]
 8019a22:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8019a26:	d014      	beq.n	8019a52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8019a28:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8019a2c:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8019a30:	d112      	bne.n	8019a58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 8019a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019a34:	2aff      	cmp	r2, #255	@ 0xff
 8019a36:	d10f      	bne.n	8019a58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 8019a38:	0942      	lsrs	r2, r0, #5
 8019a3a:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8019a3e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019a42:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8019a46:	f025 0507 	bic.w	r5, r5, #7
 8019a4a:	4315      	orrs	r5, r2
 8019a4c:	4305      	orrs	r5, r0
 8019a4e:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8019a52:	f109 0901 	add.w	r9, r9, #1
 8019a56:	e7d4      	b.n	8019a02 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 8019a58:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 8019a5c:	b2ed      	uxtb	r5, r5
 8019a5e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019a62:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019a66:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8019a6a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019a6e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8019a72:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8019a76:	9215      	str	r2, [sp, #84]	@ 0x54
 8019a78:	fa5f fc8c 	uxtb.w	ip, ip
 8019a7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019a7e:	b2c0      	uxtb	r0, r0
 8019a80:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8019a84:	fb02 fa0a 	mul.w	sl, r2, sl
 8019a88:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8019a8c:	f10a 0201 	add.w	r2, sl, #1
 8019a90:	eb02 222a 	add.w	r2, r2, sl, asr #8
 8019a94:	1212      	asrs	r2, r2, #8
 8019a96:	fa1f fa82 	uxth.w	sl, r2
 8019a9a:	43d2      	mvns	r2, r2
 8019a9c:	fb16 f60a 	smulbb	r6, r6, sl
 8019aa0:	b2d2      	uxtb	r2, r2
 8019aa2:	fb10 f00a 	smulbb	r0, r0, sl
 8019aa6:	fb07 6702 	mla	r7, r7, r2, r6
 8019aaa:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8019aac:	fb0c 0002 	mla	r0, ip, r2, r0
 8019ab0:	fb15 f50a 	smulbb	r5, r5, sl
 8019ab4:	b2bf      	uxth	r7, r7
 8019ab6:	b280      	uxth	r0, r0
 8019ab8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8019abc:	fb06 5602 	mla	r6, r6, r2, r5
 8019ac0:	1c7a      	adds	r2, r7, #1
 8019ac2:	1c45      	adds	r5, r0, #1
 8019ac4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019ac8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019acc:	b2b6      	uxth	r6, r6
 8019ace:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8019ad2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019ad6:	432f      	orrs	r7, r5
 8019ad8:	1c75      	adds	r5, r6, #1
 8019ada:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8019ade:	096d      	lsrs	r5, r5, #5
 8019ae0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8019ae4:	432f      	orrs	r7, r5
 8019ae6:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8019aea:	e7b2      	b.n	8019a52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8019aec:	20001df4 	.word	0x20001df4
 8019af0:	20001dee 	.word	0x20001dee
 8019af4:	fffff7fb 	.word	0xfffff7fb
 8019af8:	9203      	str	r2, [sp, #12]
 8019afa:	458e      	cmp	lr, r1
 8019afc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019afe:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8019b02:	f4ff af68 	bcc.w	80199d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8019b06:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019b08:	9906      	ldr	r1, [sp, #24]
 8019b0a:	8812      	ldrh	r2, [r2, #0]
 8019b0c:	1a52      	subs	r2, r2, r1
 8019b0e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8019b10:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8019b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019b16:	3201      	adds	r2, #1
 8019b18:	428a      	cmp	r2, r1
 8019b1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8019b1c:	d111      	bne.n	8019b42 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 8019b1e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8019b22:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8019b26:	9b06      	ldr	r3, [sp, #24]
 8019b28:	eba5 0509 	sub.w	r5, r5, r9
 8019b2c:	b2ad      	uxth	r5, r5
 8019b2e:	2d00      	cmp	r5, #0
 8019b30:	bf08      	it	eq
 8019b32:	4619      	moveq	r1, r3
 8019b34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b36:	bf18      	it	ne
 8019b38:	2100      	movne	r1, #0
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	b289      	uxth	r1, r1
 8019b3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019b40:	e694      	b.n	801986c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 8019b42:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8019b46:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8019b4a:	1b2d      	subs	r5, r5, r4
 8019b4c:	b2ad      	uxth	r5, r5
 8019b4e:	2d00      	cmp	r5, #0
 8019b50:	bf18      	it	ne
 8019b52:	2400      	movne	r4, #0
 8019b54:	e740      	b.n	80199d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 8019b56:	4b04      	ldr	r3, [pc, #16]	@ (8019b68 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 8019b58:	6818      	ldr	r0, [r3, #0]
 8019b5a:	6803      	ldr	r3, [r0, #0]
 8019b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b5e:	4798      	blx	r3
 8019b60:	b01d      	add	sp, #116	@ 0x74
 8019b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b66:	bf00      	nop
 8019b68:	20001df4 	.word	0x20001df4

08019b6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8019b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b70:	b09f      	sub	sp, #124	@ 0x7c
 8019b72:	461d      	mov	r5, r3
 8019b74:	4604      	mov	r4, r0
 8019b76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019b78:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8019b7c:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 8019b80:	920a      	str	r2, [sp, #40]	@ 0x28
 8019b82:	2a00      	cmp	r2, #0
 8019b84:	f000 81fe 	beq.w	8019f84 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 8019b88:	6828      	ldr	r0, [r5, #0]
 8019b8a:	aa1a      	add	r2, sp, #104	@ 0x68
 8019b8c:	6869      	ldr	r1, [r5, #4]
 8019b8e:	c203      	stmia	r2!, {r0, r1}
 8019b90:	6818      	ldr	r0, [r3, #0]
 8019b92:	aa1c      	add	r2, sp, #112	@ 0x70
 8019b94:	6859      	ldr	r1, [r3, #4]
 8019b96:	c203      	stmia	r2!, {r0, r1}
 8019b98:	a81a      	add	r0, sp, #104	@ 0x68
 8019b9a:	f7f8 fceb 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b9e:	4629      	mov	r1, r5
 8019ba0:	a81c      	add	r0, sp, #112	@ 0x70
 8019ba2:	f7f8 fd0f 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019ba6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8019baa:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8019bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019bb2:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 8019bb6:	bfdb      	ittet	le
 8019bb8:	b29a      	uxthle	r2, r3
 8019bba:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8019bbe:	2201      	movgt	r2, #1
 8019bc0:	fb91 f2f2 	sdivle	r2, r1, r2
 8019bc4:	9201      	str	r2, [sp, #4]
 8019bc6:	9801      	ldr	r0, [sp, #4]
 8019bc8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8019bcc:	9901      	ldr	r1, [sp, #4]
 8019bce:	fb92 f0f0 	sdiv	r0, r2, r0
 8019bd2:	b280      	uxth	r0, r0
 8019bd4:	440e      	add	r6, r1
 8019bd6:	9010      	str	r0, [sp, #64]	@ 0x40
 8019bd8:	3e01      	subs	r6, #1
 8019bda:	9801      	ldr	r0, [sp, #4]
 8019bdc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8019bde:	fb05 2510 	mls	r5, r5, r0, r2
 8019be2:	fb96 f6f1 	sdiv	r6, r6, r1
 8019be6:	fb15 f503 	smulbb	r5, r5, r3
 8019bea:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8019bee:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8019bf2:	3601      	adds	r6, #1
 8019bf4:	440d      	add	r5, r1
 8019bf6:	4419      	add	r1, r3
 8019bf8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8019bfc:	b2b6      	uxth	r6, r6
 8019bfe:	441a      	add	r2, r3
 8019c00:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8019c04:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8019c08:	b2ad      	uxth	r5, r5
 8019c0a:	9304      	str	r3, [sp, #16]
 8019c0c:	4b96      	ldr	r3, [pc, #600]	@ (8019e68 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8019c0e:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8019c12:	6818      	ldr	r0, [r3, #0]
 8019c14:	6803      	ldr	r3, [r0, #0]
 8019c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019c18:	4798      	blx	r3
 8019c1a:	4b94      	ldr	r3, [pc, #592]	@ (8019e6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 8019c1c:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8019c20:	2d00      	cmp	r5, #0
 8019c22:	881a      	ldrh	r2, [r3, #0]
 8019c24:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8019c28:	fb02 f707 	mul.w	r7, r2, r7
 8019c2c:	fb02 c101 	mla	r1, r2, r1, ip
 8019c30:	9318      	str	r3, [sp, #96]	@ 0x60
 8019c32:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8019c36:	4b8e      	ldr	r3, [pc, #568]	@ (8019e70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8019c38:	bf18      	it	ne
 8019c3a:	2100      	movne	r1, #0
 8019c3c:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8019c40:	eba3 0304 	sub.w	r3, r3, r4
 8019c44:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019c46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019c48:	9319      	str	r3, [sp, #100]	@ 0x64
 8019c4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019c4e:	f106 0204 	add.w	r2, r6, #4
 8019c52:	9206      	str	r2, [sp, #24]
 8019c54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c56:	ea6f 0202 	mvn.w	r2, r2
 8019c5a:	b2d2      	uxtb	r2, r2
 8019c5c:	9215      	str	r2, [sp, #84]	@ 0x54
 8019c5e:	9a04      	ldr	r2, [sp, #16]
 8019c60:	bf08      	it	eq
 8019c62:	4611      	moveq	r1, r2
 8019c64:	2200      	movs	r2, #0
 8019c66:	b289      	uxth	r1, r1
 8019c68:	920d      	str	r2, [sp, #52]	@ 0x34
 8019c6a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019c6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019c6e:	fa12 f383 	uxtah	r3, r2, r3
 8019c72:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019c74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019c78:	3304      	adds	r3, #4
 8019c7a:	9307      	str	r3, [sp, #28]
 8019c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019c7e:	455b      	cmp	r3, fp
 8019c80:	f240 817b 	bls.w	8019f7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 8019c84:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8019c88:	f04f 0801 	mov.w	r8, #1
 8019c8c:	9a01      	ldr	r2, [sp, #4]
 8019c8e:	9807      	ldr	r0, [sp, #28]
 8019c90:	46c4      	mov	ip, r8
 8019c92:	f8cd 8008 	str.w	r8, [sp, #8]
 8019c96:	7800      	ldrb	r0, [r0, #0]
 8019c98:	fbb5 f3f3 	udiv	r3, r5, r3
 8019c9c:	1ad3      	subs	r3, r2, r3
 8019c9e:	9011      	str	r0, [sp, #68]	@ 0x44
 8019ca0:	3001      	adds	r0, #1
 8019ca2:	b29b      	uxth	r3, r3
 8019ca4:	9005      	str	r0, [sp, #20]
 8019ca6:	9316      	str	r3, [sp, #88]	@ 0x58
 8019ca8:	9b07      	ldr	r3, [sp, #28]
 8019caa:	785a      	ldrb	r2, [r3, #1]
 8019cac:	789b      	ldrb	r3, [r3, #2]
 8019cae:	021b      	lsls	r3, r3, #8
 8019cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019cb4:	9a07      	ldr	r2, [sp, #28]
 8019cb6:	78d2      	ldrb	r2, [r2, #3]
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019cbc:	441a      	add	r2, r3
 8019cbe:	1c50      	adds	r0, r2, #1
 8019cc0:	7852      	ldrb	r2, [r2, #1]
 8019cc2:	9003      	str	r0, [sp, #12]
 8019cc4:	0212      	lsls	r2, r2, #8
 8019cc6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019cc8:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8019ccc:	5cc3      	ldrb	r3, [r0, r3]
 8019cce:	431a      	orrs	r2, r3
 8019cd0:	b293      	uxth	r3, r2
 8019cd2:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019cd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8019cd8:	2300      	movs	r3, #0
 8019cda:	9308      	str	r3, [sp, #32]
 8019cdc:	461a      	mov	r2, r3
 8019cde:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019ce2:	930e      	str	r3, [sp, #56]	@ 0x38
 8019ce4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8019ce8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019cea:	2d00      	cmp	r5, #0
 8019cec:	d07d      	beq.n	8019dea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 8019cee:	45ac      	cmp	ip, r5
 8019cf0:	d26d      	bcs.n	8019dce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 8019cf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019cf4:	eba5 050c 	sub.w	r5, r5, ip
 8019cf8:	4608      	mov	r0, r1
 8019cfa:	455b      	cmp	r3, fp
 8019cfc:	b2ad      	uxth	r5, r5
 8019cfe:	d802      	bhi.n	8019d06 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8019d00:	e071      	b.n	8019de6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d15d      	bne.n	8019dc2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8019d06:	9b03      	ldr	r3, [sp, #12]
 8019d08:	9a02      	ldr	r2, [sp, #8]
 8019d0a:	785b      	ldrb	r3, [r3, #1]
 8019d0c:	f1c2 0207 	rsb	r2, r2, #7
 8019d10:	9902      	ldr	r1, [sp, #8]
 8019d12:	4093      	lsls	r3, r2
 8019d14:	005b      	lsls	r3, r3, #1
 8019d16:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019d1a:	9b03      	ldr	r3, [sp, #12]
 8019d1c:	781b      	ldrb	r3, [r3, #0]
 8019d1e:	410b      	asrs	r3, r1
 8019d20:	3101      	adds	r1, #1
 8019d22:	b2c9      	uxtb	r1, r1
 8019d24:	b2db      	uxtb	r3, r3
 8019d26:	2908      	cmp	r1, #8
 8019d28:	9102      	str	r1, [sp, #8]
 8019d2a:	9903      	ldr	r1, [sp, #12]
 8019d2c:	ea43 0302 	orr.w	r3, r3, r2
 8019d30:	bf0c      	ite	eq
 8019d32:	3102      	addeq	r1, #2
 8019d34:	3101      	addne	r1, #1
 8019d36:	b29a      	uxth	r2, r3
 8019d38:	bf05      	ittet	eq
 8019d3a:	9103      	streq	r1, [sp, #12]
 8019d3c:	2100      	moveq	r1, #0
 8019d3e:	9103      	strne	r1, [sp, #12]
 8019d40:	9102      	streq	r1, [sp, #8]
 8019d42:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019d44:	4291      	cmp	r1, r2
 8019d46:	d30a      	bcc.n	8019d5e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8019d48:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8019d4c:	2301      	movs	r3, #1
 8019d4e:	9905      	ldr	r1, [sp, #20]
 8019d50:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019d54:	d30f      	bcc.n	8019d76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8019d56:	2100      	movs	r1, #0
 8019d58:	4698      	mov	r8, r3
 8019d5a:	9100      	str	r1, [sp, #0]
 8019d5c:	e032      	b.n	8019dc4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 8019d5e:	9b05      	ldr	r3, [sp, #20]
 8019d60:	429a      	cmp	r2, r3
 8019d62:	d318      	bcc.n	8019d96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8019d64:	eb04 0308 	add.w	r3, r4, r8
 8019d68:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8019d6c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8019d70:	f108 0301 	add.w	r3, r8, #1
 8019d74:	b29b      	uxth	r3, r3
 8019d76:	9905      	ldr	r1, [sp, #20]
 8019d78:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8019d7c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019d80:	710e      	strb	r6, [r1, #4]
 8019d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019d84:	80ce      	strh	r6, [r1, #6]
 8019d86:	f108 0601 	add.w	r6, r8, #1
 8019d8a:	714e      	strb	r6, [r1, #5]
 8019d8c:	9905      	ldr	r1, [sp, #20]
 8019d8e:	3101      	adds	r1, #1
 8019d90:	b289      	uxth	r1, r1
 8019d92:	9105      	str	r1, [sp, #20]
 8019d94:	e7df      	b.n	8019d56 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 8019d96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019d9a:	4611      	mov	r1, r2
 8019d9c:	795b      	ldrb	r3, [r3, #5]
 8019d9e:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8019da2:	4426      	add	r6, r4
 8019da4:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8019da6:	4437      	add	r7, r6
 8019da8:	2f00      	cmp	r7, #0
 8019daa:	dd06      	ble.n	8019dba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 8019dac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019db0:	790f      	ldrb	r7, [r1, #4]
 8019db2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019db6:	88c9      	ldrh	r1, [r1, #6]
 8019db8:	e7f4      	b.n	8019da4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8019dba:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8019dbe:	b29b      	uxth	r3, r3
 8019dc0:	e7c5      	b.n	8019d4e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 8019dc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019dc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8019dc6:	4601      	mov	r1, r0
 8019dc8:	9a00      	ldr	r2, [sp, #0]
 8019dca:	469c      	mov	ip, r3
 8019dcc:	e78d      	b.n	8019cea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8019dce:	ebac 0305 	sub.w	r3, ip, r5
 8019dd2:	1957      	adds	r7, r2, r5
 8019dd4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019dd8:	b2ba      	uxth	r2, r7
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	9200      	str	r2, [sp, #0]
 8019dde:	2500      	movs	r5, #0
 8019de0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019de2:	455a      	cmp	r2, fp
 8019de4:	d88d      	bhi.n	8019d02 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8019de6:	4601      	mov	r1, r0
 8019de8:	e748      	b.n	8019c7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 8019dea:	458c      	cmp	ip, r1
 8019dec:	bf27      	ittee	cs
 8019dee:	ebac 0301 	subcs.w	r3, ip, r1
 8019df2:	4628      	movcs	r0, r5
 8019df4:	eba1 000c 	subcc.w	r0, r1, ip
 8019df8:	462b      	movcc	r3, r5
 8019dfa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019dfc:	bf27      	ittee	cs
 8019dfe:	b29b      	uxthcs	r3, r3
 8019e00:	9109      	strcs	r1, [sp, #36]	@ 0x24
 8019e02:	b280      	uxthcc	r0, r0
 8019e04:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8019e08:	2dff      	cmp	r5, #255	@ 0xff
 8019e0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019e0c:	eb02 0705 	add.w	r7, r2, r5
 8019e10:	b2bd      	uxth	r5, r7
 8019e12:	9500      	str	r5, [sp, #0]
 8019e14:	d12e      	bne.n	8019e74 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 8019e16:	465e      	mov	r6, fp
 8019e18:	9d00      	ldr	r5, [sp, #0]
 8019e1a:	42aa      	cmp	r2, r5
 8019e1c:	f040 8083 	bne.w	8019f26 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8019e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e22:	458c      	cmp	ip, r1
 8019e24:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8019e28:	d3d9      	bcc.n	8019dde <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8019e2a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019e2c:	9904      	ldr	r1, [sp, #16]
 8019e2e:	8812      	ldrh	r2, [r2, #0]
 8019e30:	1a52      	subs	r2, r2, r1
 8019e32:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8019e34:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8019e38:	9a08      	ldr	r2, [sp, #32]
 8019e3a:	3201      	adds	r2, #1
 8019e3c:	428a      	cmp	r2, r1
 8019e3e:	9208      	str	r2, [sp, #32]
 8019e40:	f040 8091 	bne.w	8019f66 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 8019e44:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8019e48:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8019e4c:	9b04      	ldr	r3, [sp, #16]
 8019e4e:	eba5 050c 	sub.w	r5, r5, ip
 8019e52:	b2ad      	uxth	r5, r5
 8019e54:	2d00      	cmp	r5, #0
 8019e56:	bf08      	it	eq
 8019e58:	4619      	moveq	r1, r3
 8019e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019e5c:	bf18      	it	ne
 8019e5e:	2100      	movne	r1, #0
 8019e60:	3301      	adds	r3, #1
 8019e62:	b289      	uxth	r1, r1
 8019e64:	930d      	str	r3, [sp, #52]	@ 0x34
 8019e66:	e700      	b.n	8019c6a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 8019e68:	20001df4 	.word	0x20001df4
 8019e6c:	20001dee 	.word	0x20001dee
 8019e70:	fffff7fb 	.word	0xfffff7fb
 8019e74:	46d9      	mov	r9, fp
 8019e76:	9d00      	ldr	r5, [sp, #0]
 8019e78:	42aa      	cmp	r2, r5
 8019e7a:	d0d1      	beq.n	8019e20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 8019e7c:	1c55      	adds	r5, r2, #1
 8019e7e:	4422      	add	r2, r4
 8019e80:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 8019e84:	9a06      	ldr	r2, [sp, #24]
 8019e86:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019e8a:	9517      	str	r5, [sp, #92]	@ 0x5c
 8019e8c:	4472      	add	r2, lr
 8019e8e:	9212      	str	r2, [sp, #72]	@ 0x48
 8019e90:	f8b9 2000 	ldrh.w	r2, [r9]
 8019e94:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8019e96:	1216      	asrs	r6, r2, #8
 8019e98:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019e9c:	10d5      	asrs	r5, r2, #3
 8019e9e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8019ea0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8019ea4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8019ea8:	00d2      	lsls	r2, r2, #3
 8019eaa:	fb1a fa07 	smulbb	sl, sl, r7
 8019eae:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019eb2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019eb4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019eb8:	b2d2      	uxtb	r2, r2
 8019eba:	fb06 a607 	mla	r6, r6, r7, sl
 8019ebe:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8019ec0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019ec4:	f897 a001 	ldrb.w	sl, [r7, #1]
 8019ec8:	b2b6      	uxth	r6, r6
 8019eca:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8019ecc:	fb1a fa07 	smulbb	sl, sl, r7
 8019ed0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019ed2:	fb05 a507 	mla	r5, r5, r7, sl
 8019ed6:	9f06      	ldr	r7, [sp, #24]
 8019ed8:	f106 0a01 	add.w	sl, r6, #1
 8019edc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019ee0:	b2ad      	uxth	r5, r5
 8019ee2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8019ee4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8019ee8:	f105 0a01 	add.w	sl, r5, #1
 8019eec:	fb1e fe07 	smulbb	lr, lr, r7
 8019ef0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019ef2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019ef6:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8019efa:	fb02 e207 	mla	r2, r2, r7, lr
 8019efe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019f02:	b292      	uxth	r2, r2
 8019f04:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8019f08:	f102 0e01 	add.w	lr, r2, #1
 8019f0c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8019f10:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8019f14:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019f18:	ea4e 0606 	orr.w	r6, lr, r6
 8019f1c:	ea46 060a 	orr.w	r6, r6, sl
 8019f20:	f829 6b02 	strh.w	r6, [r9], #2
 8019f24:	e7a7      	b.n	8019e76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 8019f26:	f102 0e01 	add.w	lr, r2, #1
 8019f2a:	4422      	add	r2, r4
 8019f2c:	9f06      	ldr	r7, [sp, #24]
 8019f2e:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8019f32:	9a06      	ldr	r2, [sp, #24]
 8019f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f38:	eb02 0a05 	add.w	sl, r2, r5
 8019f3c:	4a13      	ldr	r2, [pc, #76]	@ (8019f8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 8019f3e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019f42:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8019f46:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8019f4a:	00d2      	lsls	r2, r2, #3
 8019f4c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8019f50:	ea49 0202 	orr.w	r2, r9, r2
 8019f54:	f817 9005 	ldrb.w	r9, [r7, r5]
 8019f58:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8019f5c:	f826 2b02 	strh.w	r2, [r6], #2
 8019f60:	fa1f f28e 	uxth.w	r2, lr
 8019f64:	e758      	b.n	8019e18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 8019f66:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019f6a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8019f6e:	1a2d      	subs	r5, r5, r0
 8019f70:	b2ad      	uxth	r5, r5
 8019f72:	2d00      	cmp	r5, #0
 8019f74:	bf18      	it	ne
 8019f76:	2000      	movne	r0, #0
 8019f78:	e732      	b.n	8019de0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8019f7a:	4b05      	ldr	r3, [pc, #20]	@ (8019f90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 8019f7c:	6818      	ldr	r0, [r3, #0]
 8019f7e:	6803      	ldr	r3, [r0, #0]
 8019f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f82:	4798      	blx	r3
 8019f84:	b01f      	add	sp, #124	@ 0x7c
 8019f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f8a:	bf00      	nop
 8019f8c:	fffff800 	.word	0xfffff800
 8019f90:	20001df4 	.word	0x20001df4

08019f94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8019f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f98:	b091      	sub	sp, #68	@ 0x44
 8019f9a:	469b      	mov	fp, r3
 8019f9c:	4616      	mov	r6, r2
 8019f9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fa2:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8019fa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019faa:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8019fae:	4604      	mov	r4, r0
 8019fb0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8019fb4:	4640      	mov	r0, r8
 8019fb6:	460d      	mov	r5, r1
 8019fb8:	4659      	mov	r1, fp
 8019fba:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8019fbe:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019fc2:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8019fc6:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8019fca:	f7f6 f933 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8019fce:	4631      	mov	r1, r6
 8019fd0:	4640      	mov	r0, r8
 8019fd2:	f7f6 f92f 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 8019fd6:	4b74      	ldr	r3, [pc, #464]	@ (801a1a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8019fd8:	8818      	ldrh	r0, [r3, #0]
 8019fda:	4b74      	ldr	r3, [pc, #464]	@ (801a1ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8019fdc:	b202      	sxth	r2, r0
 8019fde:	8819      	ldrh	r1, [r3, #0]
 8019fe0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8019fe4:	b20e      	sxth	r6, r1
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	da07      	bge.n	8019ffa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8019fea:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8019fee:	4463      	add	r3, ip
 8019ff0:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8019ffa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8019ffe:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801a002:	1ad2      	subs	r2, r2, r3
 801a004:	4594      	cmp	ip, r2
 801a006:	bfc4      	itt	gt
 801a008:	1ac2      	subgt	r2, r0, r3
 801a00a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801a00e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801a012:	2a00      	cmp	r2, #0
 801a014:	da07      	bge.n	801a026 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801a016:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801a01a:	4462      	add	r2, ip
 801a01c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801a020:	2200      	movs	r2, #0
 801a022:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801a026:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801a02a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801a02e:	eba6 060a 	sub.w	r6, r6, sl
 801a032:	42b2      	cmp	r2, r6
 801a034:	bfc4      	itt	gt
 801a036:	eba1 020a 	subgt.w	r2, r1, sl
 801a03a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801a03e:	4a5c      	ldr	r2, [pc, #368]	@ (801a1b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801a040:	7812      	ldrb	r2, [r2, #0]
 801a042:	b9a2      	cbnz	r2, 801a06e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801a044:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801a048:	4286      	cmp	r6, r0
 801a04a:	4640      	mov	r0, r8
 801a04c:	9303      	str	r3, [sp, #12]
 801a04e:	bf14      	ite	ne
 801a050:	2600      	movne	r6, #0
 801a052:	2601      	moveq	r6, #1
 801a054:	f7f6 f931 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801a058:	9b03      	ldr	r3, [sp, #12]
 801a05a:	b160      	cbz	r0, 801a076 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801a05c:	2300      	movs	r3, #0
 801a05e:	8023      	strh	r3, [r4, #0]
 801a060:	8063      	strh	r3, [r4, #2]
 801a062:	80a3      	strh	r3, [r4, #4]
 801a064:	4620      	mov	r0, r4
 801a066:	80e3      	strh	r3, [r4, #6]
 801a068:	b011      	add	sp, #68	@ 0x44
 801a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a06e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801a072:	428e      	cmp	r6, r1
 801a074:	e7e9      	b.n	801a04a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801a076:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801a07a:	a90e      	add	r1, sp, #56	@ 0x38
 801a07c:	900e      	str	r0, [sp, #56]	@ 0x38
 801a07e:	a80c      	add	r0, sp, #48	@ 0x30
 801a080:	9205      	str	r2, [sp, #20]
 801a082:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801a086:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801a08a:	9206      	str	r2, [sp, #24]
 801a08c:	f8bb 2000 	ldrh.w	r2, [fp]
 801a090:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801a094:	1a9b      	subs	r3, r3, r2
 801a096:	b21b      	sxth	r3, r3
 801a098:	9303      	str	r3, [sp, #12]
 801a09a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a09e:	f8df b118 	ldr.w	fp, [pc, #280]	@ 801a1b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a0a2:	ebaa 0a03 	sub.w	sl, sl, r3
 801a0a6:	fa0f f38a 	sxth.w	r3, sl
 801a0aa:	9304      	str	r3, [sp, #16]
 801a0ac:	9b03      	ldr	r3, [sp, #12]
 801a0ae:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801a0b2:	9b04      	ldr	r3, [sp, #16]
 801a0b4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a0b8:	9b05      	ldr	r3, [sp, #20]
 801a0ba:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801a0be:	9b06      	ldr	r3, [sp, #24]
 801a0c0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a0c4:	f7f8 fa7e 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0c8:	4640      	mov	r0, r8
 801a0ca:	f7f8 fa53 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0ce:	a80e      	add	r0, sp, #56	@ 0x38
 801a0d0:	f7f8 fa50 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0d4:	4b37      	ldr	r3, [pc, #220]	@ (801a1b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a0d6:	4628      	mov	r0, r5
 801a0d8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801a0dc:	881b      	ldrh	r3, [r3, #0]
 801a0de:	9307      	str	r3, [sp, #28]
 801a0e0:	682b      	ldr	r3, [r5, #0]
 801a0e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0e4:	4798      	blx	r3
 801a0e6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801a0ea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801a0ee:	4681      	mov	r9, r0
 801a0f0:	f8db 0000 	ldr.w	r0, [fp]
 801a0f4:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801a0f8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801a0fa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a0fe:	6803      	ldr	r3, [r0, #0]
 801a100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a102:	4798      	blx	r3
 801a104:	4607      	mov	r7, r0
 801a106:	f8db 0000 	ldr.w	r0, [fp]
 801a10a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801a10e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801a112:	6803      	ldr	r3, [r0, #0]
 801a114:	9109      	str	r1, [sp, #36]	@ 0x24
 801a116:	9208      	str	r2, [sp, #32]
 801a118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a11a:	4798      	blx	r3
 801a11c:	f010 0f01 	tst.w	r0, #1
 801a120:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a124:	d012      	beq.n	801a14c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801a126:	f8db 0000 	ldr.w	r0, [fp]
 801a12a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801a12e:	6803      	ldr	r3, [r0, #0]
 801a130:	9200      	str	r2, [sp, #0]
 801a132:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801a134:	462b      	mov	r3, r5
 801a136:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a13a:	47b0      	blx	r6
 801a13c:	9b03      	ldr	r3, [sp, #12]
 801a13e:	8023      	strh	r3, [r4, #0]
 801a140:	9b04      	ldr	r3, [sp, #16]
 801a142:	8063      	strh	r3, [r4, #2]
 801a144:	9b05      	ldr	r3, [sp, #20]
 801a146:	80a3      	strh	r3, [r4, #4]
 801a148:	9b06      	ldr	r3, [sp, #24]
 801a14a:	e78b      	b.n	801a064 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801a14c:	fb09 f202 	mul.w	r2, r9, r2
 801a150:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801a154:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a158:	440f      	add	r7, r1
 801a15a:	b166      	cbz	r6, 801a176 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a15c:	9a07      	ldr	r2, [sp, #28]
 801a15e:	4592      	cmp	sl, r2
 801a160:	d109      	bne.n	801a176 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a162:	f8db 0000 	ldr.w	r0, [fp]
 801a166:	fb09 f303 	mul.w	r3, r9, r3
 801a16a:	4629      	mov	r1, r5
 801a16c:	6802      	ldr	r2, [r0, #0]
 801a16e:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 801a170:	463a      	mov	r2, r7
 801a172:	47b0      	blx	r6
 801a174:	e7e2      	b.n	801a13c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a176:	fb0a f303 	mul.w	r3, sl, r3
 801a17a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801a17e:	f8df b038 	ldr.w	fp, [pc, #56]	@ 801a1b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a182:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801a186:	4545      	cmp	r5, r8
 801a188:	d2d8      	bcs.n	801a13c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a18a:	f8db 0000 	ldr.w	r0, [fp]
 801a18e:	4629      	mov	r1, r5
 801a190:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a194:	4435      	add	r5, r6
 801a196:	6802      	ldr	r2, [r0, #0]
 801a198:	005b      	lsls	r3, r3, #1
 801a19a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801a19e:	463a      	mov	r2, r7
 801a1a0:	47d0      	blx	sl
 801a1a2:	444f      	add	r7, r9
 801a1a4:	e7ef      	b.n	801a186 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801a1a6:	bf00      	nop
 801a1a8:	20001de8 	.word	0x20001de8
 801a1ac:	20001dea 	.word	0x20001dea
 801a1b0:	20001dec 	.word	0x20001dec
 801a1b4:	20001dee 	.word	0x20001dee
 801a1b8:	20001df4 	.word	0x20001df4

0801a1bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1be:	4606      	mov	r6, r0
 801a1c0:	b087      	sub	sp, #28
 801a1c2:	460c      	mov	r4, r1
 801a1c4:	4617      	mov	r7, r2
 801a1c6:	461d      	mov	r5, r3
 801a1c8:	b333      	cbz	r3, 801a218 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a1ca:	4608      	mov	r0, r1
 801a1cc:	f7f6 f875 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801a1d0:	bb10      	cbnz	r0, 801a218 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a1d2:	6820      	ldr	r0, [r4, #0]
 801a1d4:	ab04      	add	r3, sp, #16
 801a1d6:	6861      	ldr	r1, [r4, #4]
 801a1d8:	4c1b      	ldr	r4, [pc, #108]	@ (801a248 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801a1da:	c303      	stmia	r3!, {r0, r1}
 801a1dc:	a804      	add	r0, sp, #16
 801a1de:	f7f8 f9c9 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1e2:	6820      	ldr	r0, [r4, #0]
 801a1e4:	6803      	ldr	r3, [r0, #0]
 801a1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a1e8:	4798      	blx	r3
 801a1ea:	2dff      	cmp	r5, #255	@ 0xff
 801a1ec:	d016      	beq.n	801a21c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801a1ee:	f010 0f08 	tst.w	r0, #8
 801a1f2:	6820      	ldr	r0, [r4, #0]
 801a1f4:	d015      	beq.n	801a222 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a1f6:	2400      	movs	r4, #0
 801a1f8:	6801      	ldr	r1, [r0, #0]
 801a1fa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a1fe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a202:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801a206:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a20a:	9401      	str	r4, [sp, #4]
 801a20c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a210:	9400      	str	r4, [sp, #0]
 801a212:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801a214:	4639      	mov	r1, r7
 801a216:	47a0      	blx	r4
 801a218:	b007      	add	sp, #28
 801a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a21c:	f010 0f02 	tst.w	r0, #2
 801a220:	e7e7      	b.n	801a1f2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801a222:	6803      	ldr	r3, [r0, #0]
 801a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a226:	4798      	blx	r3
 801a228:	4b08      	ldr	r3, [pc, #32]	@ (801a24c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a22a:	4601      	mov	r1, r0
 801a22c:	4630      	mov	r0, r6
 801a22e:	881a      	ldrh	r2, [r3, #0]
 801a230:	6833      	ldr	r3, [r6, #0]
 801a232:	e9cd 7500 	strd	r7, r5, [sp]
 801a236:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801a238:	ab04      	add	r3, sp, #16
 801a23a:	47a8      	blx	r5
 801a23c:	6820      	ldr	r0, [r4, #0]
 801a23e:	6803      	ldr	r3, [r0, #0]
 801a240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a242:	4798      	blx	r3
 801a244:	e7e8      	b.n	801a218 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a246:	bf00      	nop
 801a248:	20001df4 	.word	0x20001df4
 801a24c:	20001dee 	.word	0x20001dee

0801a250 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a254:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801a258:	4688      	mov	r8, r1
 801a25a:	4614      	mov	r4, r2
 801a25c:	461d      	mov	r5, r3
 801a25e:	9e08      	ldr	r6, [sp, #32]
 801a260:	2f00      	cmp	r7, #0
 801a262:	f000 80ab 	beq.w	801a3bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a266:	4618      	mov	r0, r3
 801a268:	f7f6 f827 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801a26c:	2800      	cmp	r0, #0
 801a26e:	f040 80a5 	bne.w	801a3bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a272:	f9b5 1000 	ldrsh.w	r1, [r5]
 801a276:	2fff      	cmp	r7, #255	@ 0xff
 801a278:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a27c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801a280:	fb04 1303 	mla	r3, r4, r3, r1
 801a284:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801a288:	eba4 0200 	sub.w	r2, r4, r0
 801a28c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801a290:	fb04 f505 	mul.w	r5, r4, r5
 801a294:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801a298:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801a29c:	d04a      	beq.n	801a334 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801a29e:	b2bc      	uxth	r4, r7
 801a2a0:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801a2a4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801a2a8:	fa5f f788 	uxtb.w	r7, r8
 801a2ac:	b2f3      	uxtb	r3, r6
 801a2ae:	0040      	lsls	r0, r0, #1
 801a2b0:	fb0e fe04 	mul.w	lr, lr, r4
 801a2b4:	4367      	muls	r7, r4
 801a2b6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801a2ba:	4363      	muls	r3, r4
 801a2bc:	fa1f fc8c 	uxth.w	ip, ip
 801a2c0:	42a9      	cmp	r1, r5
 801a2c2:	d27b      	bcs.n	801a3bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a2c4:	eb01 0900 	add.w	r9, r1, r0
 801a2c8:	4549      	cmp	r1, r9
 801a2ca:	d231      	bcs.n	801a330 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801a2cc:	880a      	ldrh	r2, [r1, #0]
 801a2ce:	1214      	asrs	r4, r2, #8
 801a2d0:	10d6      	asrs	r6, r2, #3
 801a2d2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801a2d6:	00d2      	lsls	r2, r2, #3
 801a2d8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a2dc:	b2d2      	uxtb	r2, r2
 801a2de:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a2e2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a2e6:	fb14 f40c 	smulbb	r4, r4, ip
 801a2ea:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801a2ee:	fb12 f20c 	smulbb	r2, r2, ip
 801a2f2:	fb16 f60c 	smulbb	r6, r6, ip
 801a2f6:	4474      	add	r4, lr
 801a2f8:	441a      	add	r2, r3
 801a2fa:	b2a4      	uxth	r4, r4
 801a2fc:	443e      	add	r6, r7
 801a2fe:	b292      	uxth	r2, r2
 801a300:	f104 0a01 	add.w	sl, r4, #1
 801a304:	b2b6      	uxth	r6, r6
 801a306:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a30a:	f102 0a01 	add.w	sl, r2, #1
 801a30e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801a312:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801a316:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a31a:	4322      	orrs	r2, r4
 801a31c:	1c74      	adds	r4, r6, #1
 801a31e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801a322:	0976      	lsrs	r6, r6, #5
 801a324:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801a328:	4332      	orrs	r2, r6
 801a32a:	f821 2b02 	strh.w	r2, [r1], #2
 801a32e:	e7cb      	b.n	801a2c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801a330:	4441      	add	r1, r8
 801a332:	e7c5      	b.n	801a2c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801a334:	0973      	lsrs	r3, r6, #5
 801a336:	4f22      	ldr	r7, [pc, #136]	@ (801a3c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801a338:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801a33c:	ea08 0707 	and.w	r7, r8, r7
 801a340:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801a344:	433b      	orrs	r3, r7
 801a346:	07e7      	lsls	r7, r4, #31
 801a348:	ea43 0306 	orr.w	r3, r3, r6
 801a34c:	b29b      	uxth	r3, r3
 801a34e:	d50b      	bpl.n	801a368 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801a350:	0040      	lsls	r0, r0, #1
 801a352:	0052      	lsls	r2, r2, #1
 801a354:	42a9      	cmp	r1, r5
 801a356:	d231      	bcs.n	801a3bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a358:	180c      	adds	r4, r1, r0
 801a35a:	42a1      	cmp	r1, r4
 801a35c:	d202      	bcs.n	801a364 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801a35e:	f821 3b02 	strh.w	r3, [r1], #2
 801a362:	e7fa      	b.n	801a35a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801a364:	4411      	add	r1, r2
 801a366:	e7f5      	b.n	801a354 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801a368:	078e      	lsls	r6, r1, #30
 801a36a:	d008      	beq.n	801a37e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801a36c:	0066      	lsls	r6, r4, #1
 801a36e:	460a      	mov	r2, r1
 801a370:	42aa      	cmp	r2, r5
 801a372:	d202      	bcs.n	801a37a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801a374:	8013      	strh	r3, [r2, #0]
 801a376:	4432      	add	r2, r6
 801a378:	e7fa      	b.n	801a370 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801a37a:	3102      	adds	r1, #2
 801a37c:	3801      	subs	r0, #1
 801a37e:	07c2      	lsls	r2, r0, #31
 801a380:	d50b      	bpl.n	801a39a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801a382:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801a386:	0066      	lsls	r6, r4, #1
 801a388:	3a01      	subs	r2, #1
 801a38a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801a38e:	42aa      	cmp	r2, r5
 801a390:	d202      	bcs.n	801a398 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801a392:	8013      	strh	r3, [r2, #0]
 801a394:	4432      	add	r2, r6
 801a396:	e7fa      	b.n	801a38e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801a398:	3801      	subs	r0, #1
 801a39a:	b178      	cbz	r0, 801a3bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a39c:	1040      	asrs	r0, r0, #1
 801a39e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801a3a2:	0080      	lsls	r0, r0, #2
 801a3a4:	0064      	lsls	r4, r4, #1
 801a3a6:	42a9      	cmp	r1, r5
 801a3a8:	d208      	bcs.n	801a3bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a3aa:	180e      	adds	r6, r1, r0
 801a3ac:	460a      	mov	r2, r1
 801a3ae:	42b2      	cmp	r2, r6
 801a3b0:	d202      	bcs.n	801a3b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801a3b2:	f842 3b04 	str.w	r3, [r2], #4
 801a3b6:	e7fa      	b.n	801a3ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801a3b8:	4421      	add	r1, r4
 801a3ba:	e7f4      	b.n	801a3a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801a3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3c0:	00fff800 	.word	0x00fff800

0801a3c4 <_ZN8touchgfx8LCD16bppC1Ev>:
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	4912      	ldr	r1, [pc, #72]	@ (801a410 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801a3c8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801a3cc:	6001      	str	r1, [r0, #0]
 801a3ce:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a3d2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a3d6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801a3da:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801a3de:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801a3e2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801a3e6:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801a3ea:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801a3ee:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801a3f2:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801a3f6:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801a3fa:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801a3fe:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 801a402:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 801a406:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 801a40a:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 801a40e:	4770      	bx	lr
 801a410:	08026350 	.word	0x08026350

0801a414 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a418:	b08d      	sub	sp, #52	@ 0x34
 801a41a:	460d      	mov	r5, r1
 801a41c:	4604      	mov	r4, r0
 801a41e:	4699      	mov	r9, r3
 801a420:	6808      	ldr	r0, [r1, #0]
 801a422:	ab08      	add	r3, sp, #32
 801a424:	6849      	ldr	r1, [r1, #4]
 801a426:	c303      	stmia	r3!, {r0, r1}
 801a428:	6810      	ldr	r0, [r2, #0]
 801a42a:	ab0a      	add	r3, sp, #40	@ 0x28
 801a42c:	6851      	ldr	r1, [r2, #4]
 801a42e:	c303      	stmia	r3!, {r0, r1}
 801a430:	a808      	add	r0, sp, #32
 801a432:	f7f8 f89f 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a436:	4629      	mov	r1, r5
 801a438:	a80a      	add	r0, sp, #40	@ 0x28
 801a43a:	4d67      	ldr	r5, [pc, #412]	@ (801a5d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a43c:	f7f8 f8c2 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a440:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801a444:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801a448:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801a44c:	6828      	ldr	r0, [r5, #0]
 801a44e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a452:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 801a456:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801a45a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a45e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801a462:	440a      	add	r2, r1
 801a464:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801a468:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801a46c:	4413      	add	r3, r2
 801a46e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801a472:	6803      	ldr	r3, [r0, #0]
 801a474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a476:	4798      	blx	r3
 801a478:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801a47c:	d119      	bne.n	801a4b2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801a47e:	f010 0f20 	tst.w	r0, #32
 801a482:	6828      	ldr	r0, [r5, #0]
 801a484:	d018      	beq.n	801a4b8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801a486:	2500      	movs	r5, #0
 801a488:	6801      	ldr	r1, [r0, #0]
 801a48a:	b2b6      	uxth	r6, r6
 801a48c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a490:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801a494:	9601      	str	r6, [sp, #4]
 801a496:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801a49a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801a49e:	9502      	str	r5, [sp, #8]
 801a4a0:	fa1f f588 	uxth.w	r5, r8
 801a4a4:	9500      	str	r5, [sp, #0]
 801a4a6:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801a4a8:	4621      	mov	r1, r4
 801a4aa:	47a8      	blx	r5
 801a4ac:	b00d      	add	sp, #52	@ 0x34
 801a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4b2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801a4b6:	e7e4      	b.n	801a482 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801a4b8:	6803      	ldr	r3, [r0, #0]
 801a4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a4bc:	4798      	blx	r3
 801a4be:	4947      	ldr	r1, [pc, #284]	@ (801a5dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801a4c0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801a4c4:	880b      	ldrh	r3, [r1, #0]
 801a4c6:	468a      	mov	sl, r1
 801a4c8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 801a4cc:	fb03 5202 	mla	r2, r3, r2, r5
 801a4d0:	4373      	muls	r3, r6
 801a4d2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a4d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a4da:	9307      	str	r3, [sp, #28]
 801a4dc:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a4e0:	9306      	str	r3, [sp, #24]
 801a4e2:	9b07      	ldr	r3, [sp, #28]
 801a4e4:	4298      	cmp	r0, r3
 801a4e6:	d270      	bcs.n	801a5ca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801a4e8:	9b06      	ldr	r3, [sp, #24]
 801a4ea:	4621      	mov	r1, r4
 801a4ec:	eb00 0b03 	add.w	fp, r0, r3
 801a4f0:	4558      	cmp	r0, fp
 801a4f2:	d25d      	bcs.n	801a5b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801a4f4:	f851 4b04 	ldr.w	r4, [r1], #4
 801a4f8:	0e23      	lsrs	r3, r4, #24
 801a4fa:	d014      	beq.n	801a526 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a4fc:	2bff      	cmp	r3, #255	@ 0xff
 801a4fe:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801a502:	d112      	bne.n	801a52a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a504:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801a508:	d10f      	bne.n	801a52a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a50a:	0963      	lsrs	r3, r4, #5
 801a50c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801a510:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a514:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801a518:	f02c 0c07 	bic.w	ip, ip, #7
 801a51c:	ea43 0c0c 	orr.w	ip, r3, ip
 801a520:	ea4c 0404 	orr.w	r4, ip, r4
 801a524:	8004      	strh	r4, [r0, #0]
 801a526:	3002      	adds	r0, #2
 801a528:	e7e2      	b.n	801a4f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801a52a:	fb09 f303 	mul.w	r3, r9, r3
 801a52e:	8807      	ldrh	r7, [r0, #0]
 801a530:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801a534:	fa5f fc8c 	uxtb.w	ip, ip
 801a538:	1c5a      	adds	r2, r3, #1
 801a53a:	123e      	asrs	r6, r7, #8
 801a53c:	10fd      	asrs	r5, r7, #3
 801a53e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801a542:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801a546:	00ff      	lsls	r7, r7, #3
 801a548:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801a54c:	1212      	asrs	r2, r2, #8
 801a54e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a552:	b293      	uxth	r3, r2
 801a554:	43d2      	mvns	r2, r2
 801a556:	b2ff      	uxtb	r7, r7
 801a558:	fb1e fe03 	smulbb	lr, lr, r3
 801a55c:	b2d2      	uxtb	r2, r2
 801a55e:	fb1c fc03 	smulbb	ip, ip, r3
 801a562:	b2e4      	uxtb	r4, r4
 801a564:	fb06 e602 	mla	r6, r6, r2, lr
 801a568:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a56c:	fb14 f403 	smulbb	r4, r4, r3
 801a570:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801a574:	b2b6      	uxth	r6, r6
 801a576:	fb05 c502 	mla	r5, r5, r2, ip
 801a57a:	fb07 4702 	mla	r7, r7, r2, r4
 801a57e:	f106 0e01 	add.w	lr, r6, #1
 801a582:	b2ad      	uxth	r5, r5
 801a584:	b2bf      	uxth	r7, r7
 801a586:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801a58a:	f105 0c01 	add.w	ip, r5, #1
 801a58e:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801a592:	1c7e      	adds	r6, r7, #1
 801a594:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a598:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801a59c:	096d      	lsrs	r5, r5, #5
 801a59e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a5a2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801a5a6:	ea46 060e 	orr.w	r6, r6, lr
 801a5aa:	432e      	orrs	r6, r5
 801a5ac:	8006      	strh	r6, [r0, #0]
 801a5ae:	e7ba      	b.n	801a526 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a5b0:	f8ba 3000 	ldrh.w	r3, [sl]
 801a5b4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 801a5b8:	eba3 0308 	sub.w	r3, r3, r8
 801a5bc:	eba4 0408 	sub.w	r4, r4, r8
 801a5c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a5c4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801a5c8:	e78b      	b.n	801a4e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801a5ca:	4b03      	ldr	r3, [pc, #12]	@ (801a5d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a5cc:	6818      	ldr	r0, [r3, #0]
 801a5ce:	6803      	ldr	r3, [r0, #0]
 801a5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5d2:	4798      	blx	r3
 801a5d4:	e76a      	b.n	801a4ac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801a5d6:	bf00      	nop
 801a5d8:	20001df4 	.word	0x20001df4
 801a5dc:	20001dee 	.word	0x20001dee

0801a5e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5e4:	b085      	sub	sp, #20
 801a5e6:	6810      	ldr	r0, [r2, #0]
 801a5e8:	460c      	mov	r4, r1
 801a5ea:	6851      	ldr	r1, [r2, #4]
 801a5ec:	466d      	mov	r5, sp
 801a5ee:	4616      	mov	r6, r2
 801a5f0:	c503      	stmia	r5!, {r0, r1}
 801a5f2:	6818      	ldr	r0, [r3, #0]
 801a5f4:	6859      	ldr	r1, [r3, #4]
 801a5f6:	c503      	stmia	r5!, {r0, r1}
 801a5f8:	4668      	mov	r0, sp
 801a5fa:	4d2e      	ldr	r5, [pc, #184]	@ (801a6b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801a5fc:	f7f7 ffba 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a600:	4631      	mov	r1, r6
 801a602:	a802      	add	r0, sp, #8
 801a604:	4e2c      	ldr	r6, [pc, #176]	@ (801a6b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801a606:	f7f7 ffdd 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a60a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a60e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a612:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801a616:	6828      	ldr	r0, [r5, #0]
 801a618:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a61c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a620:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801a624:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a628:	f8bd 1000 	ldrh.w	r1, [sp]
 801a62c:	440a      	add	r2, r1
 801a62e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801a632:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a636:	4413      	add	r3, r2
 801a638:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a63c:	6803      	ldr	r3, [r0, #0]
 801a63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a640:	4798      	blx	r3
 801a642:	8833      	ldrh	r3, [r6, #0]
 801a644:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a648:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801a64c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a650:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801a6bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801a654:	fb03 1202 	mla	r2, r3, r2, r1
 801a658:	fb08 f303 	mul.w	r3, r8, r3
 801a65c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a660:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a664:	4298      	cmp	r0, r3
 801a666:	d21d      	bcs.n	801a6a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801a668:	eb00 080c 	add.w	r8, r0, ip
 801a66c:	4540      	cmp	r0, r8
 801a66e:	d20f      	bcs.n	801a690 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801a670:	f854 1b04 	ldr.w	r1, [r4], #4
 801a674:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801a678:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801a67c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801a680:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801a684:	ea42 0209 	orr.w	r2, r2, r9
 801a688:	430a      	orrs	r2, r1
 801a68a:	f820 2b02 	strh.w	r2, [r0], #2
 801a68e:	e7ed      	b.n	801a66c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801a690:	8832      	ldrh	r2, [r6, #0]
 801a692:	1bd2      	subs	r2, r2, r7
 801a694:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a698:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a69c:	1bd2      	subs	r2, r2, r7
 801a69e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801a6a2:	e7df      	b.n	801a664 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801a6a4:	6828      	ldr	r0, [r5, #0]
 801a6a6:	6803      	ldr	r3, [r0, #0]
 801a6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a6aa:	4798      	blx	r3
 801a6ac:	b005      	add	sp, #20
 801a6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6b2:	bf00      	nop
 801a6b4:	20001df4 	.word	0x20001df4
 801a6b8:	20001dee 	.word	0x20001dee
 801a6bc:	fffff800 	.word	0xfffff800

0801a6c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6c4:	b08e      	sub	sp, #56	@ 0x38
 801a6c6:	460e      	mov	r6, r1
 801a6c8:	4604      	mov	r4, r0
 801a6ca:	461d      	mov	r5, r3
 801a6cc:	6808      	ldr	r0, [r1, #0]
 801a6ce:	ab0a      	add	r3, sp, #40	@ 0x28
 801a6d0:	6849      	ldr	r1, [r1, #4]
 801a6d2:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 801a8a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801a6d6:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 801a8ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801a6da:	c303      	stmia	r3!, {r0, r1}
 801a6dc:	6810      	ldr	r0, [r2, #0]
 801a6de:	ab0c      	add	r3, sp, #48	@ 0x30
 801a6e0:	6851      	ldr	r1, [r2, #4]
 801a6e2:	c303      	stmia	r3!, {r0, r1}
 801a6e4:	a80a      	add	r0, sp, #40	@ 0x28
 801a6e6:	f7f7 ff45 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a6ea:	4631      	mov	r1, r6
 801a6ec:	a80c      	add	r0, sp, #48	@ 0x30
 801a6ee:	f7f7 ff69 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a6f2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a6f6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a6fa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a6fe:	f8d8 0000 	ldr.w	r0, [r8]
 801a702:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a706:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801a70a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801a70e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a712:	440c      	add	r4, r1
 801a714:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801a718:	440a      	add	r2, r1
 801a71a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a71e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801a722:	4413      	add	r3, r2
 801a724:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a728:	6803      	ldr	r3, [r0, #0]
 801a72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a72c:	4798      	blx	r3
 801a72e:	2dff      	cmp	r5, #255	@ 0xff
 801a730:	d124      	bne.n	801a77c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801a732:	f010 0f01 	tst.w	r0, #1
 801a736:	f8d8 0000 	ldr.w	r0, [r8]
 801a73a:	d022      	beq.n	801a782 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801a73c:	2100      	movs	r1, #0
 801a73e:	f04f 0e01 	mov.w	lr, #1
 801a742:	f8d0 c000 	ldr.w	ip, [r0]
 801a746:	b2b6      	uxth	r6, r6
 801a748:	f8cd e018 	str.w	lr, [sp, #24]
 801a74c:	b2bf      	uxth	r7, r7
 801a74e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a752:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a756:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801a75a:	f8b9 e000 	ldrh.w	lr, [r9]
 801a75e:	9503      	str	r5, [sp, #12]
 801a760:	9601      	str	r6, [sp, #4]
 801a762:	9700      	str	r7, [sp, #0]
 801a764:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801a768:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a76c:	9102      	str	r1, [sp, #8]
 801a76e:	4621      	mov	r1, r4
 801a770:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 801a774:	47a8      	blx	r5
 801a776:	b00e      	add	sp, #56	@ 0x38
 801a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a77c:	f010 0f04 	tst.w	r0, #4
 801a780:	e7d9      	b.n	801a736 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801a782:	6803      	ldr	r3, [r0, #0]
 801a784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a786:	4798      	blx	r3
 801a788:	f8b9 3000 	ldrh.w	r3, [r9]
 801a78c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a790:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801a794:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801a798:	435e      	muls	r6, r3
 801a79a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801a79e:	2dff      	cmp	r5, #255	@ 0xff
 801a7a0:	fb03 1202 	mla	r2, r3, r2, r1
 801a7a4:	ebac 0c07 	sub.w	ip, ip, r7
 801a7a8:	eba3 0707 	sub.w	r7, r3, r7
 801a7ac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a7b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a7b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a7b8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801a7bc:	d049      	beq.n	801a852 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801a7be:	43eb      	mvns	r3, r5
 801a7c0:	fa1f f985 	uxth.w	r9, r5
 801a7c4:	b2db      	uxtb	r3, r3
 801a7c6:	42b0      	cmp	r0, r6
 801a7c8:	d266      	bcs.n	801a898 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a7ca:	eb00 0a0e 	add.w	sl, r0, lr
 801a7ce:	4550      	cmp	r0, sl
 801a7d0:	4621      	mov	r1, r4
 801a7d2:	f104 0403 	add.w	r4, r4, #3
 801a7d6:	d25b      	bcs.n	801a890 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801a7d8:	8802      	ldrh	r2, [r0, #0]
 801a7da:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a7de:	ea4f 2822 	mov.w	r8, r2, asr #8
 801a7e2:	fb11 f109 	smulbb	r1, r1, r9
 801a7e6:	10d5      	asrs	r5, r2, #3
 801a7e8:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801a7ec:	00d2      	lsls	r2, r2, #3
 801a7ee:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801a7f2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801a7f6:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a7fa:	fb08 1803 	mla	r8, r8, r3, r1
 801a7fe:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801a802:	b2d2      	uxtb	r2, r2
 801a804:	fb11 f109 	smulbb	r1, r1, r9
 801a808:	fa1f f888 	uxth.w	r8, r8
 801a80c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a810:	fb05 1503 	mla	r5, r5, r3, r1
 801a814:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a818:	fb11 f109 	smulbb	r1, r1, r9
 801a81c:	b2ad      	uxth	r5, r5
 801a81e:	fb02 1203 	mla	r2, r2, r3, r1
 801a822:	f108 0101 	add.w	r1, r8, #1
 801a826:	b292      	uxth	r2, r2
 801a828:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801a82c:	1c51      	adds	r1, r2, #1
 801a82e:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801a832:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a836:	1c69      	adds	r1, r5, #1
 801a838:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801a83c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a840:	096d      	lsrs	r5, r5, #5
 801a842:	ea42 0208 	orr.w	r2, r2, r8
 801a846:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801a84a:	432a      	orrs	r2, r5
 801a84c:	f820 2b02 	strh.w	r2, [r0], #2
 801a850:	e7bd      	b.n	801a7ce <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801a852:	4a14      	ldr	r2, [pc, #80]	@ (801a8a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801a854:	42b0      	cmp	r0, r6
 801a856:	d21f      	bcs.n	801a898 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a858:	eb00 050e 	add.w	r5, r0, lr
 801a85c:	42a8      	cmp	r0, r5
 801a85e:	4621      	mov	r1, r4
 801a860:	f104 0403 	add.w	r4, r4, #3
 801a864:	d210      	bcs.n	801a888 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801a866:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801a86a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a86e:	00db      	lsls	r3, r3, #3
 801a870:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801a874:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801a878:	430b      	orrs	r3, r1
 801a87a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a87e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801a882:	f820 3b02 	strh.w	r3, [r0], #2
 801a886:	e7e9      	b.n	801a85c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801a888:	4438      	add	r0, r7
 801a88a:	eb01 040c 	add.w	r4, r1, ip
 801a88e:	e7e1      	b.n	801a854 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801a890:	4438      	add	r0, r7
 801a892:	eb01 040c 	add.w	r4, r1, ip
 801a896:	e796      	b.n	801a7c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801a898:	4b03      	ldr	r3, [pc, #12]	@ (801a8a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801a89a:	6818      	ldr	r0, [r3, #0]
 801a89c:	6803      	ldr	r3, [r0, #0]
 801a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a8a0:	4798      	blx	r3
 801a8a2:	e768      	b.n	801a776 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801a8a4:	fffff800 	.word	0xfffff800
 801a8a8:	20001df4 	.word	0x20001df4
 801a8ac:	20001dee 	.word	0x20001dee

0801a8b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801a8b0:	b4f0      	push	{r4, r5, r6, r7}
 801a8b2:	4616      	mov	r6, r2
 801a8b4:	461c      	mov	r4, r3
 801a8b6:	460d      	mov	r5, r1
 801a8b8:	9a04      	ldr	r2, [sp, #16]
 801a8ba:	2e01      	cmp	r6, #1
 801a8bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a8c0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801a8c4:	d012      	beq.n	801a8ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801a8c6:	d303      	bcc.n	801a8d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801a8c8:	2e02      	cmp	r6, #2
 801a8ca:	d00a      	beq.n	801a8e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801a8cc:	bcf0      	pop	{r4, r5, r6, r7}
 801a8ce:	4770      	bx	lr
 801a8d0:	6805      	ldr	r5, [r0, #0]
 801a8d2:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801a8d6:	68ed      	ldr	r5, [r5, #12]
 801a8d8:	4613      	mov	r3, r2
 801a8da:	4622      	mov	r2, r4
 801a8dc:	46ac      	mov	ip, r5
 801a8de:	bcf0      	pop	{r4, r5, r6, r7}
 801a8e0:	4760      	bx	ip
 801a8e2:	4621      	mov	r1, r4
 801a8e4:	4628      	mov	r0, r5
 801a8e6:	bcf0      	pop	{r4, r5, r6, r7}
 801a8e8:	f7ff bd94 	b.w	801a414 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a8ec:	4621      	mov	r1, r4
 801a8ee:	4628      	mov	r0, r5
 801a8f0:	bcf0      	pop	{r4, r5, r6, r7}
 801a8f2:	f7ff bee5 	b.w	801a6c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801a8f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8fc:	b093      	sub	sp, #76	@ 0x4c
 801a8fe:	4681      	mov	r9, r0
 801a900:	4688      	mov	r8, r1
 801a902:	6810      	ldr	r0, [r2, #0]
 801a904:	6851      	ldr	r1, [r2, #4]
 801a906:	ac0e      	add	r4, sp, #56	@ 0x38
 801a908:	4616      	mov	r6, r2
 801a90a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 801a90e:	4f6b      	ldr	r7, [pc, #428]	@ (801aabc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801a910:	c403      	stmia	r4!, {r0, r1}
 801a912:	6818      	ldr	r0, [r3, #0]
 801a914:	ac10      	add	r4, sp, #64	@ 0x40
 801a916:	6859      	ldr	r1, [r3, #4]
 801a918:	c403      	stmia	r4!, {r0, r1}
 801a91a:	a80e      	add	r0, sp, #56	@ 0x38
 801a91c:	f7f7 fe2a 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a920:	4631      	mov	r1, r6
 801a922:	a810      	add	r0, sp, #64	@ 0x40
 801a924:	4e66      	ldr	r6, [pc, #408]	@ (801aac0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801a926:	f7f7 fe4d 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a92a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801a92e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801a932:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 801a936:	6830      	ldr	r0, [r6, #0]
 801a938:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a93c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 801a940:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801a944:	4489      	add	r9, r1
 801a946:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 801a94a:	440a      	add	r2, r1
 801a94c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801a950:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a954:	4413      	add	r3, r2
 801a956:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801a95a:	6803      	ldr	r3, [r0, #0]
 801a95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a95e:	4798      	blx	r3
 801a960:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a964:	6830      	ldr	r0, [r6, #0]
 801a966:	d01d      	beq.n	801a9a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a968:	2200      	movs	r2, #0
 801a96a:	6801      	ldr	r1, [r0, #0]
 801a96c:	b2a4      	uxth	r4, r4
 801a96e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801a972:	b2ad      	uxth	r5, r5
 801a974:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a978:	220b      	movs	r2, #11
 801a97a:	9207      	str	r2, [sp, #28]
 801a97c:	883a      	ldrh	r2, [r7, #0]
 801a97e:	9502      	str	r5, [sp, #8]
 801a980:	9206      	str	r2, [sp, #24]
 801a982:	2201      	movs	r2, #1
 801a984:	9401      	str	r4, [sp, #4]
 801a986:	e9cd a204 	strd	sl, r2, [sp, #16]
 801a98a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 801a98e:	9203      	str	r2, [sp, #12]
 801a990:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801a994:	9200      	str	r2, [sp, #0]
 801a996:	4642      	mov	r2, r8
 801a998:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801a99a:	4649      	mov	r1, r9
 801a99c:	47a0      	blx	r4
 801a99e:	b013      	add	sp, #76	@ 0x4c
 801a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a4:	6803      	ldr	r3, [r0, #0]
 801a9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a9a8:	4798      	blx	r3
 801a9aa:	883b      	ldrh	r3, [r7, #0]
 801a9ac:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801a9b0:	f04f 0e04 	mov.w	lr, #4
 801a9b4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 801a9b8:	435d      	muls	r5, r3
 801a9ba:	fb03 1202 	mla	r2, r3, r2, r1
 801a9be:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a9c2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801a9c6:	920c      	str	r2, [sp, #48]	@ 0x30
 801a9c8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801a9cc:	1b12      	subs	r2, r2, r4
 801a9ce:	920d      	str	r2, [sp, #52]	@ 0x34
 801a9d0:	0062      	lsls	r2, r4, #1
 801a9d2:	1b1c      	subs	r4, r3, r4
 801a9d4:	920a      	str	r2, [sp, #40]	@ 0x28
 801a9d6:	0063      	lsls	r3, r4, #1
 801a9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a9dc:	4298      	cmp	r0, r3
 801a9de:	d266      	bcs.n	801aaae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801a9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a9e2:	eb00 0b03 	add.w	fp, r0, r3
 801a9e6:	4558      	cmp	r0, fp
 801a9e8:	d25c      	bcs.n	801aaa4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a9ea:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a9ee:	fb1e e303 	smlabb	r3, lr, r3, lr
 801a9f2:	f858 2003 	ldr.w	r2, [r8, r3]
 801a9f6:	0e11      	lsrs	r1, r2, #24
 801a9f8:	d012      	beq.n	801aa20 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a9fa:	29ff      	cmp	r1, #255	@ 0xff
 801a9fc:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801aa00:	d110      	bne.n	801aa24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801aa02:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801aa06:	d10d      	bne.n	801aa24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801aa08:	0953      	lsrs	r3, r2, #5
 801aa0a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801aa0e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801aa12:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801aa16:	f027 0707 	bic.w	r7, r7, #7
 801aa1a:	431f      	orrs	r7, r3
 801aa1c:	433a      	orrs	r2, r7
 801aa1e:	8002      	strh	r2, [r0, #0]
 801aa20:	3002      	adds	r0, #2
 801aa22:	e7e0      	b.n	801a9e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801aa24:	fb0a f101 	mul.w	r1, sl, r1
 801aa28:	8806      	ldrh	r6, [r0, #0]
 801aa2a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801aa2e:	b2d2      	uxtb	r2, r2
 801aa30:	1c4b      	adds	r3, r1, #1
 801aa32:	1235      	asrs	r5, r6, #8
 801aa34:	10f4      	asrs	r4, r6, #3
 801aa36:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801aa3a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801aa3e:	00f6      	lsls	r6, r6, #3
 801aa40:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801aa44:	121b      	asrs	r3, r3, #8
 801aa46:	b2f6      	uxtb	r6, r6
 801aa48:	b299      	uxth	r1, r3
 801aa4a:	43db      	mvns	r3, r3
 801aa4c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801aa50:	fb1c fc01 	smulbb	ip, ip, r1
 801aa54:	b2db      	uxtb	r3, r3
 801aa56:	fb12 f201 	smulbb	r2, r2, r1
 801aa5a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801aa5e:	fb05 c503 	mla	r5, r5, r3, ip
 801aa62:	b2ff      	uxtb	r7, r7
 801aa64:	fb06 2203 	mla	r2, r6, r3, r2
 801aa68:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801aa6c:	fb17 f701 	smulbb	r7, r7, r1
 801aa70:	b2ad      	uxth	r5, r5
 801aa72:	b292      	uxth	r2, r2
 801aa74:	fb04 7403 	mla	r4, r4, r3, r7
 801aa78:	f105 0c01 	add.w	ip, r5, #1
 801aa7c:	1c57      	adds	r7, r2, #1
 801aa7e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801aa82:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801aa86:	b2a4      	uxth	r4, r4
 801aa88:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801aa8c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801aa90:	433d      	orrs	r5, r7
 801aa92:	1c67      	adds	r7, r4, #1
 801aa94:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801aa98:	0964      	lsrs	r4, r4, #5
 801aa9a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801aa9e:	4325      	orrs	r5, r4
 801aaa0:	8005      	strh	r5, [r0, #0]
 801aaa2:	e7bd      	b.n	801aa20 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801aaa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aaa6:	4418      	add	r0, r3
 801aaa8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aaaa:	4499      	add	r9, r3
 801aaac:	e795      	b.n	801a9da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801aaae:	4b04      	ldr	r3, [pc, #16]	@ (801aac0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801aab0:	6818      	ldr	r0, [r3, #0]
 801aab2:	6803      	ldr	r3, [r0, #0]
 801aab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aab6:	4798      	blx	r3
 801aab8:	e771      	b.n	801a99e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801aaba:	bf00      	nop
 801aabc:	20001dee 	.word	0x20001dee
 801aac0:	20001df4 	.word	0x20001df4

0801aac4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac8:	b087      	sub	sp, #28
 801aaca:	4680      	mov	r8, r0
 801aacc:	460d      	mov	r5, r1
 801aace:	4614      	mov	r4, r2
 801aad0:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801aad4:	2e00      	cmp	r6, #0
 801aad6:	f000 80b9 	beq.w	801ac4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801aada:	6810      	ldr	r0, [r2, #0]
 801aadc:	af02      	add	r7, sp, #8
 801aade:	6851      	ldr	r1, [r2, #4]
 801aae0:	c703      	stmia	r7!, {r0, r1}
 801aae2:	6818      	ldr	r0, [r3, #0]
 801aae4:	af04      	add	r7, sp, #16
 801aae6:	6859      	ldr	r1, [r3, #4]
 801aae8:	c703      	stmia	r7!, {r0, r1}
 801aaea:	a802      	add	r0, sp, #8
 801aaec:	f7f7 fd42 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aaf0:	4621      	mov	r1, r4
 801aaf2:	a804      	add	r0, sp, #16
 801aaf4:	f7f7 fd66 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aaf8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801aafc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ab00:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801ab04:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801ab08:	fb14 2103 	smlabb	r1, r4, r3, r2
 801ab0c:	eb08 0401 	add.w	r4, r8, r1
 801ab10:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ab14:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801ab18:	440a      	add	r2, r1
 801ab1a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801ab1e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ab22:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ab26:	4413      	add	r3, r2
 801ab28:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ab2c:	4b49      	ldr	r3, [pc, #292]	@ (801ac54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801ab2e:	6818      	ldr	r0, [r3, #0]
 801ab30:	6803      	ldr	r3, [r0, #0]
 801ab32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ab34:	4798      	blx	r3
 801ab36:	4b48      	ldr	r3, [pc, #288]	@ (801ac58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801ab38:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801ab3c:	2eff      	cmp	r6, #255	@ 0xff
 801ab3e:	881a      	ldrh	r2, [r3, #0]
 801ab40:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801ab44:	fb02 c101 	mla	r1, r2, r1, ip
 801ab48:	fb02 f207 	mul.w	r2, r2, r7
 801ab4c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801ab50:	f105 0104 	add.w	r1, r5, #4
 801ab54:	461d      	mov	r5, r3
 801ab56:	d05a      	beq.n	801ac0e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801ab58:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 801ab5c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ab60:	b2b6      	uxth	r6, r6
 801ab62:	9301      	str	r3, [sp, #4]
 801ab64:	fa1f fe8e 	uxth.w	lr, lr
 801ab68:	4282      	cmp	r2, r0
 801ab6a:	d96a      	bls.n	801ac42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801ab6c:	eb00 0b0a 	add.w	fp, r0, sl
 801ab70:	4583      	cmp	fp, r0
 801ab72:	d940      	bls.n	801abf6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801ab74:	8805      	ldrh	r5, [r0, #0]
 801ab76:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ab7a:	122f      	asrs	r7, r5, #8
 801ab7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ab80:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ab84:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ab88:	00ed      	lsls	r5, r5, #3
 801ab8a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ab8e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801ab92:	fb17 f70e 	smulbb	r7, r7, lr
 801ab96:	b2ed      	uxtb	r5, r5
 801ab98:	fb19 f90e 	smulbb	r9, r9, lr
 801ab9c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801aba0:	fb15 f50e 	smulbb	r5, r5, lr
 801aba4:	fb0c 7c06 	mla	ip, ip, r6, r7
 801aba8:	10df      	asrs	r7, r3, #3
 801abaa:	00db      	lsls	r3, r3, #3
 801abac:	fa1f fc8c 	uxth.w	ip, ip
 801abb0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801abb4:	b2db      	uxtb	r3, r3
 801abb6:	fb07 9706 	mla	r7, r7, r6, r9
 801abba:	f10c 0901 	add.w	r9, ip, #1
 801abbe:	fb03 5306 	mla	r3, r3, r6, r5
 801abc2:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801abc6:	b29b      	uxth	r3, r3
 801abc8:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 801abcc:	b2bf      	uxth	r7, r7
 801abce:	f103 0c01 	add.w	ip, r3, #1
 801abd2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801abd6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801abda:	ea4c 0c09 	orr.w	ip, ip, r9
 801abde:	f107 0901 	add.w	r9, r7, #1
 801abe2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801abe6:	097f      	lsrs	r7, r7, #5
 801abe8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801abec:	ea4c 0c07 	orr.w	ip, ip, r7
 801abf0:	f820 cb02 	strh.w	ip, [r0], #2
 801abf4:	e7bc      	b.n	801ab70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801abf6:	9b01      	ldr	r3, [sp, #4]
 801abf8:	881b      	ldrh	r3, [r3, #0]
 801abfa:	eba3 0308 	sub.w	r3, r3, r8
 801abfe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ac02:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ac06:	eba3 0308 	sub.w	r3, r3, r8
 801ac0a:	441c      	add	r4, r3
 801ac0c:	e7ac      	b.n	801ab68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801ac0e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ac12:	4282      	cmp	r2, r0
 801ac14:	d915      	bls.n	801ac42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801ac16:	eb00 060a 	add.w	r6, r0, sl
 801ac1a:	4286      	cmp	r6, r0
 801ac1c:	d906      	bls.n	801ac2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801ac1e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ac22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ac26:	f820 3b02 	strh.w	r3, [r0], #2
 801ac2a:	e7f6      	b.n	801ac1a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801ac2c:	882b      	ldrh	r3, [r5, #0]
 801ac2e:	eba3 0308 	sub.w	r3, r3, r8
 801ac32:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ac36:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ac3a:	eba3 0308 	sub.w	r3, r3, r8
 801ac3e:	441c      	add	r4, r3
 801ac40:	e7e7      	b.n	801ac12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801ac42:	4b04      	ldr	r3, [pc, #16]	@ (801ac54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801ac44:	6818      	ldr	r0, [r3, #0]
 801ac46:	6803      	ldr	r3, [r0, #0]
 801ac48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac4a:	4798      	blx	r3
 801ac4c:	b007      	add	sp, #28
 801ac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac52:	bf00      	nop
 801ac54:	20001df4 	.word	0x20001df4
 801ac58:	20001dee 	.word	0x20001dee

0801ac5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ac5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac60:	b091      	sub	sp, #68	@ 0x44
 801ac62:	4680      	mov	r8, r0
 801ac64:	460f      	mov	r7, r1
 801ac66:	4614      	mov	r4, r2
 801ac68:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 801ac6c:	2d00      	cmp	r5, #0
 801ac6e:	d051      	beq.n	801ad14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801ac70:	6810      	ldr	r0, [r2, #0]
 801ac72:	ae0c      	add	r6, sp, #48	@ 0x30
 801ac74:	6851      	ldr	r1, [r2, #4]
 801ac76:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 801ae78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801ac7a:	c603      	stmia	r6!, {r0, r1}
 801ac7c:	6818      	ldr	r0, [r3, #0]
 801ac7e:	ae0e      	add	r6, sp, #56	@ 0x38
 801ac80:	6859      	ldr	r1, [r3, #4]
 801ac82:	c603      	stmia	r6!, {r0, r1}
 801ac84:	a80c      	add	r0, sp, #48	@ 0x30
 801ac86:	f7f7 fc75 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac8a:	4621      	mov	r1, r4
 801ac8c:	a80e      	add	r0, sp, #56	@ 0x38
 801ac8e:	f7f7 fc99 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ac92:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ac96:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ac9a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801ac9e:	f8d9 0000 	ldr.w	r0, [r9]
 801aca2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aca6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801acaa:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 801acae:	eb08 0401 	add.w	r4, r8, r1
 801acb2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801acb6:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 801ae7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801acba:	440a      	add	r2, r1
 801acbc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801acc0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801acc4:	4413      	add	r3, r2
 801acc6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801acca:	6803      	ldr	r3, [r0, #0]
 801accc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801acce:	4798      	blx	r3
 801acd0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801acd4:	f8d9 0000 	ldr.w	r0, [r9]
 801acd8:	d01f      	beq.n	801ad1a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801acda:	2200      	movs	r2, #0
 801acdc:	6801      	ldr	r1, [r0, #0]
 801acde:	b2b6      	uxth	r6, r6
 801ace0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801ace4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ace8:	220b      	movs	r2, #11
 801acea:	9207      	str	r2, [sp, #28]
 801acec:	f8b8 2000 	ldrh.w	r2, [r8]
 801acf0:	9601      	str	r6, [sp, #4]
 801acf2:	9206      	str	r2, [sp, #24]
 801acf4:	2201      	movs	r2, #1
 801acf6:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801acfa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801acfe:	9203      	str	r2, [sp, #12]
 801ad00:	fa1f f28a 	uxth.w	r2, sl
 801ad04:	9202      	str	r2, [sp, #8]
 801ad06:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801ad0a:	9200      	str	r2, [sp, #0]
 801ad0c:	463a      	mov	r2, r7
 801ad0e:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801ad10:	4621      	mov	r1, r4
 801ad12:	47a8      	blx	r5
 801ad14:	b011      	add	sp, #68	@ 0x44
 801ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad1a:	6803      	ldr	r3, [r0, #0]
 801ad1c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ad22:	4798      	blx	r3
 801ad24:	f8b8 2000 	ldrh.w	r2, [r8]
 801ad28:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ad2c:	2dff      	cmp	r5, #255	@ 0xff
 801ad2e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801ad32:	fb0a fa02 	mul.w	sl, sl, r2
 801ad36:	fb02 1303 	mla	r3, r2, r3, r1
 801ad3a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad3e:	d062      	beq.n	801ae06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801ad40:	ea6f 0c05 	mvn.w	ip, r5
 801ad44:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801ad48:	b2ad      	uxth	r5, r5
 801ad4a:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801ad4e:	fa5f fc8c 	uxtb.w	ip, ip
 801ad52:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad56:	4298      	cmp	r0, r3
 801ad58:	f080 8085 	bcs.w	801ae66 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801ad5c:	eb00 0b09 	add.w	fp, r0, r9
 801ad60:	4558      	cmp	r0, fp
 801ad62:	d246      	bcs.n	801adf2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801ad64:	f814 eb01 	ldrb.w	lr, [r4], #1
 801ad68:	2303      	movs	r3, #3
 801ad6a:	2204      	movs	r2, #4
 801ad6c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801ad70:	8803      	ldrh	r3, [r0, #0]
 801ad72:	eb07 0a0e 	add.w	sl, r7, lr
 801ad76:	1219      	asrs	r1, r3, #8
 801ad78:	10da      	asrs	r2, r3, #3
 801ad7a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ad7e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801ad82:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801ad86:	00db      	lsls	r3, r3, #3
 801ad88:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801ad8c:	fb18 f805 	smulbb	r8, r8, r5
 801ad90:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801ad94:	fb1e fe05 	smulbb	lr, lr, r5
 801ad98:	b2db      	uxtb	r3, r3
 801ad9a:	fb01 810c 	mla	r1, r1, ip, r8
 801ad9e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ada2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ada6:	fb18 f805 	smulbb	r8, r8, r5
 801adaa:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801adae:	b289      	uxth	r1, r1
 801adb0:	fb02 820c 	mla	r2, r2, ip, r8
 801adb4:	fb03 e30c 	mla	r3, r3, ip, lr
 801adb8:	f101 0801 	add.w	r8, r1, #1
 801adbc:	b292      	uxth	r2, r2
 801adbe:	b29b      	uxth	r3, r3
 801adc0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801adc4:	f102 0801 	add.w	r8, r2, #1
 801adc8:	f103 0e01 	add.w	lr, r3, #1
 801adcc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801add0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801add4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801add8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801addc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ade0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801ade4:	ea4e 0101 	orr.w	r1, lr, r1
 801ade8:	ea41 0108 	orr.w	r1, r1, r8
 801adec:	f820 1b02 	strh.w	r1, [r0], #2
 801adf0:	e7b6      	b.n	801ad60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801adf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801adf4:	881b      	ldrh	r3, [r3, #0]
 801adf6:	1b9b      	subs	r3, r3, r6
 801adf8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801adfc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ae00:	1b9b      	subs	r3, r3, r6
 801ae02:	441c      	add	r4, r3
 801ae04:	e7a6      	b.n	801ad54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801ae06:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801ae0a:	2203      	movs	r2, #3
 801ae0c:	2504      	movs	r5, #4
 801ae0e:	4919      	ldr	r1, [pc, #100]	@ (801ae74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801ae10:	4550      	cmp	r0, sl
 801ae12:	d228      	bcs.n	801ae66 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801ae14:	eb00 0c09 	add.w	ip, r0, r9
 801ae18:	4560      	cmp	r0, ip
 801ae1a:	4623      	mov	r3, r4
 801ae1c:	d219      	bcs.n	801ae52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801ae1e:	f893 e000 	ldrb.w	lr, [r3]
 801ae22:	3401      	adds	r4, #1
 801ae24:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801ae28:	eb07 0b0e 	add.w	fp, r7, lr
 801ae2c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ae30:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801ae34:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ae38:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801ae3c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801ae40:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801ae44:	ea43 030b 	orr.w	r3, r3, fp
 801ae48:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801ae4c:	f820 3b02 	strh.w	r3, [r0], #2
 801ae50:	e7e2      	b.n	801ae18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801ae52:	f8b8 3000 	ldrh.w	r3, [r8]
 801ae56:	1b9b      	subs	r3, r3, r6
 801ae58:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ae5c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ae60:	1b9b      	subs	r3, r3, r6
 801ae62:	441c      	add	r4, r3
 801ae64:	e7d4      	b.n	801ae10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801ae66:	4b04      	ldr	r3, [pc, #16]	@ (801ae78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801ae68:	6818      	ldr	r0, [r3, #0]
 801ae6a:	6803      	ldr	r3, [r0, #0]
 801ae6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae6e:	4798      	blx	r3
 801ae70:	e750      	b.n	801ad14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801ae72:	bf00      	nop
 801ae74:	fffff800 	.word	0xfffff800
 801ae78:	20001df4 	.word	0x20001df4
 801ae7c:	20001dee 	.word	0x20001dee

0801ae80 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ae80:	b4f0      	push	{r4, r5, r6, r7}
 801ae82:	460c      	mov	r4, r1
 801ae84:	4611      	mov	r1, r2
 801ae86:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ae8a:	461a      	mov	r2, r3
 801ae8c:	780f      	ldrb	r7, [r1, #0]
 801ae8e:	9b04      	ldr	r3, [sp, #16]
 801ae90:	2f01      	cmp	r7, #1
 801ae92:	784e      	ldrb	r6, [r1, #1]
 801ae94:	d038      	beq.n	801af08 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 801ae96:	d31f      	bcc.n	801aed8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 801ae98:	2f02      	cmp	r7, #2
 801ae9a:	d14d      	bne.n	801af38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801ae9c:	2e03      	cmp	r6, #3
 801ae9e:	d84b      	bhi.n	801af38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801aea0:	e8df f006 	tbb	[pc, r6]
 801aea4:	17140702 	.word	0x17140702
 801aea8:	9504      	str	r5, [sp, #16]
 801aeaa:	4620      	mov	r0, r4
 801aeac:	bcf0      	pop	{r4, r5, r6, r7}
 801aeae:	f7ff be09 	b.w	801aac4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801aeb2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801aeb4:	2800      	cmp	r0, #0
 801aeb6:	d03f      	beq.n	801af38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801aeb8:	6806      	ldr	r6, [r0, #0]
 801aeba:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801aebe:	68b5      	ldr	r5, [r6, #8]
 801aec0:	4613      	mov	r3, r2
 801aec2:	46ac      	mov	ip, r5
 801aec4:	460a      	mov	r2, r1
 801aec6:	4621      	mov	r1, r4
 801aec8:	bcf0      	pop	{r4, r5, r6, r7}
 801aeca:	4760      	bx	ip
 801aecc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801aed0:	e7f0      	b.n	801aeb4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801aed2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801aed6:	e7ed      	b.n	801aeb4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801aed8:	2e03      	cmp	r6, #3
 801aeda:	d82d      	bhi.n	801af38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801aedc:	e8df f006 	tbb	[pc, r6]
 801aee0:	110e0702 	.word	0x110e0702
 801aee4:	9504      	str	r5, [sp, #16]
 801aee6:	4620      	mov	r0, r4
 801aee8:	bcf0      	pop	{r4, r5, r6, r7}
 801aeea:	f7ff bd05 	b.w	801a8f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801aeee:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801aef0:	b310      	cbz	r0, 801af38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801aef2:	6806      	ldr	r6, [r0, #0]
 801aef4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801aef8:	68f5      	ldr	r5, [r6, #12]
 801aefa:	e7e1      	b.n	801aec0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801aefc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801af00:	e7f6      	b.n	801aef0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801af02:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801af06:	e7f3      	b.n	801aef0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801af08:	2e03      	cmp	r6, #3
 801af0a:	d815      	bhi.n	801af38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801af0c:	e8df f006 	tbb	[pc, r6]
 801af10:	110e0702 	.word	0x110e0702
 801af14:	9504      	str	r5, [sp, #16]
 801af16:	4620      	mov	r0, r4
 801af18:	bcf0      	pop	{r4, r5, r6, r7}
 801af1a:	f7ff be9f 	b.w	801ac5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801af1e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801af20:	b150      	cbz	r0, 801af38 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801af22:	6806      	ldr	r6, [r0, #0]
 801af24:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801af28:	6935      	ldr	r5, [r6, #16]
 801af2a:	e7c9      	b.n	801aec0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801af2c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801af30:	e7f6      	b.n	801af20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801af32:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801af36:	e7f3      	b.n	801af20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801af38:	bcf0      	pop	{r4, r5, r6, r7}
 801af3a:	4770      	bx	lr

0801af3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af40:	b087      	sub	sp, #28
 801af42:	4604      	mov	r4, r0
 801af44:	460e      	mov	r6, r1
 801af46:	6810      	ldr	r0, [r2, #0]
 801af48:	6851      	ldr	r1, [r2, #4]
 801af4a:	ad02      	add	r5, sp, #8
 801af4c:	4617      	mov	r7, r2
 801af4e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 801af52:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 801b184 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801af56:	c503      	stmia	r5!, {r0, r1}
 801af58:	6818      	ldr	r0, [r3, #0]
 801af5a:	ad04      	add	r5, sp, #16
 801af5c:	6859      	ldr	r1, [r3, #4]
 801af5e:	c503      	stmia	r5!, {r0, r1}
 801af60:	a802      	add	r0, sp, #8
 801af62:	f7f7 fb07 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801af66:	4639      	mov	r1, r7
 801af68:	a804      	add	r0, sp, #16
 801af6a:	f7f7 fb2b 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801af6e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801af72:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801af76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801af7a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801af7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801af82:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801af86:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801af8a:	440e      	add	r6, r1
 801af8c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801af90:	440a      	add	r2, r1
 801af92:	f8ad 2010 	strh.w	r2, [sp, #16]
 801af96:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801af9a:	4413      	add	r3, r2
 801af9c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801afa0:	4b77      	ldr	r3, [pc, #476]	@ (801b180 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801afa2:	6818      	ldr	r0, [r3, #0]
 801afa4:	6803      	ldr	r3, [r0, #0]
 801afa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afa8:	4798      	blx	r3
 801afaa:	f8b9 b000 	ldrh.w	fp, [r9]
 801afae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801afb2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801afb6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801afba:	fb05 f50b 	mul.w	r5, r5, fp
 801afbe:	fb0b 2303 	mla	r3, fp, r3, r2
 801afc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801afc6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801afca:	9300      	str	r3, [sp, #0]
 801afcc:	d069      	beq.n	801b0a2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801afce:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801afd2:	4558      	cmp	r0, fp
 801afd4:	f080 80cc 	bcs.w	801b170 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801afd8:	9b00      	ldr	r3, [sp, #0]
 801afda:	4631      	mov	r1, r6
 801afdc:	18c3      	adds	r3, r0, r3
 801afde:	9301      	str	r3, [sp, #4]
 801afe0:	9b01      	ldr	r3, [sp, #4]
 801afe2:	4298      	cmp	r0, r3
 801afe4:	d24f      	bcs.n	801b086 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801afe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801afea:	2a00      	cmp	r2, #0
 801afec:	d048      	beq.n	801b080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801afee:	fb0a f202 	mul.w	r2, sl, r2
 801aff2:	1c53      	adds	r3, r2, #1
 801aff4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aff8:	121b      	asrs	r3, r3, #8
 801affa:	d041      	beq.n	801b080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801affc:	8802      	ldrh	r2, [r0, #0]
 801affe:	b29e      	uxth	r6, r3
 801b000:	f8b4 c000 	ldrh.w	ip, [r4]
 801b004:	43db      	mvns	r3, r3
 801b006:	1215      	asrs	r5, r2, #8
 801b008:	b2db      	uxtb	r3, r3
 801b00a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b00e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801b012:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801b016:	fb15 f503 	smulbb	r5, r5, r3
 801b01a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b01e:	00d2      	lsls	r2, r2, #3
 801b020:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801b024:	fb07 5706 	mla	r7, r7, r6, r5
 801b028:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b02c:	b2d2      	uxtb	r2, r2
 801b02e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b032:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801b036:	fb1e fe03 	smulbb	lr, lr, r3
 801b03a:	b2bf      	uxth	r7, r7
 801b03c:	fb12 f203 	smulbb	r2, r2, r3
 801b040:	fa5f fc8c 	uxtb.w	ip, ip
 801b044:	fb05 e506 	mla	r5, r5, r6, lr
 801b048:	f107 0e01 	add.w	lr, r7, #1
 801b04c:	fb0c 2c06 	mla	ip, ip, r6, r2
 801b050:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b054:	fa1f fc8c 	uxth.w	ip, ip
 801b058:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 801b05c:	b2ad      	uxth	r5, r5
 801b05e:	f10c 0701 	add.w	r7, ip, #1
 801b062:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b066:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b06a:	ea47 070e 	orr.w	r7, r7, lr
 801b06e:	f105 0e01 	add.w	lr, r5, #1
 801b072:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801b076:	096d      	lsrs	r5, r5, #5
 801b078:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801b07c:	432f      	orrs	r7, r5
 801b07e:	8007      	strh	r7, [r0, #0]
 801b080:	3002      	adds	r0, #2
 801b082:	3402      	adds	r4, #2
 801b084:	e7ac      	b.n	801afe0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801b086:	f8b9 3000 	ldrh.w	r3, [r9]
 801b08a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b08e:	eba3 0308 	sub.w	r3, r3, r8
 801b092:	eba6 0608 	sub.w	r6, r6, r8
 801b096:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b09a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b09e:	440e      	add	r6, r1
 801b0a0:	e797      	b.n	801afd2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801b0a2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801b0a6:	42a8      	cmp	r0, r5
 801b0a8:	d262      	bcs.n	801b170 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b0aa:	9b00      	ldr	r3, [sp, #0]
 801b0ac:	4631      	mov	r1, r6
 801b0ae:	eb00 0b03 	add.w	fp, r0, r3
 801b0b2:	4558      	cmp	r0, fp
 801b0b4:	d24e      	bcs.n	801b154 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801b0b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b0ba:	b12b      	cbz	r3, 801b0c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b0bc:	2bff      	cmp	r3, #255	@ 0xff
 801b0be:	f8b4 e000 	ldrh.w	lr, [r4]
 801b0c2:	d104      	bne.n	801b0ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801b0c4:	f8a0 e000 	strh.w	lr, [r0]
 801b0c8:	3002      	adds	r0, #2
 801b0ca:	3402      	adds	r4, #2
 801b0cc:	e7f1      	b.n	801b0b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801b0ce:	8802      	ldrh	r2, [r0, #0]
 801b0d0:	b29f      	uxth	r7, r3
 801b0d2:	43db      	mvns	r3, r3
 801b0d4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b0d8:	1216      	asrs	r6, r2, #8
 801b0da:	b2db      	uxtb	r3, r3
 801b0dc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b0e0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801b0e4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801b0e8:	00d2      	lsls	r2, r2, #3
 801b0ea:	fb16 f603 	smulbb	r6, r6, r3
 801b0ee:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801b0f2:	b2d2      	uxtb	r2, r2
 801b0f4:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b0f8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b0fc:	fb1a fa03 	smulbb	sl, sl, r3
 801b100:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b104:	fa1f fc8c 	uxth.w	ip, ip
 801b108:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b10c:	fb12 f303 	smulbb	r3, r2, r3
 801b110:	fa5f fe8e 	uxtb.w	lr, lr
 801b114:	fb06 a607 	mla	r6, r6, r7, sl
 801b118:	f10c 0201 	add.w	r2, ip, #1
 801b11c:	fb0e 3307 	mla	r3, lr, r7, r3
 801b120:	b2b6      	uxth	r6, r6
 801b122:	b29b      	uxth	r3, r3
 801b124:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b128:	f106 0a01 	add.w	sl, r6, #1
 801b12c:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 801b130:	f103 0c01 	add.w	ip, r3, #1
 801b134:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801b138:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b13c:	0976      	lsrs	r6, r6, #5
 801b13e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b142:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b146:	ea4c 0c02 	orr.w	ip, ip, r2
 801b14a:	ea4c 0c06 	orr.w	ip, ip, r6
 801b14e:	f8a0 c000 	strh.w	ip, [r0]
 801b152:	e7b9      	b.n	801b0c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b154:	f8b9 3000 	ldrh.w	r3, [r9]
 801b158:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b15c:	eba3 0308 	sub.w	r3, r3, r8
 801b160:	eba6 0608 	sub.w	r6, r6, r8
 801b164:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b168:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b16c:	440e      	add	r6, r1
 801b16e:	e79a      	b.n	801b0a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801b170:	4b03      	ldr	r3, [pc, #12]	@ (801b180 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b172:	6818      	ldr	r0, [r3, #0]
 801b174:	6803      	ldr	r3, [r0, #0]
 801b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b178:	4798      	blx	r3
 801b17a:	b007      	add	sp, #28
 801b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b180:	20001df4 	.word	0x20001df4
 801b184:	20001dee 	.word	0x20001dee

0801b188 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b18c:	b089      	sub	sp, #36	@ 0x24
 801b18e:	4607      	mov	r7, r0
 801b190:	4688      	mov	r8, r1
 801b192:	4692      	mov	sl, r2
 801b194:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801b198:	4699      	mov	r9, r3
 801b19a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b19c:	2e00      	cmp	r6, #0
 801b19e:	d048      	beq.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b1a0:	4608      	mov	r0, r1
 801b1a2:	f7fa f81b 	bl	80151dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b1a6:	4605      	mov	r5, r0
 801b1a8:	4640      	mov	r0, r8
 801b1aa:	f7fa f84b 	bl	8015244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b1ae:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b1b2:	4640      	mov	r0, r8
 801b1b4:	f8ad a008 	strh.w	sl, [sp, #8]
 801b1b8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b1bc:	f8ad 900a 	strh.w	r9, [sp, #10]
 801b1c0:	f7fa f8fe 	bl	80153c0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b1c4:	4605      	mov	r5, r0
 801b1c6:	4640      	mov	r0, r8
 801b1c8:	f7fa f92a 	bl	8015420 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b1cc:	4682      	mov	sl, r0
 801b1ce:	4640      	mov	r0, r8
 801b1d0:	f7fa f97a 	bl	80154c8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b1d4:	2810      	cmp	r0, #16
 801b1d6:	d82c      	bhi.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b1d8:	e8df f010 	tbh	[pc, r0, lsl #1]
 801b1dc:	00ba00ca 	.word	0x00ba00ca
 801b1e0:	002b0011 	.word	0x002b0011
 801b1e4:	002b002b 	.word	0x002b002b
 801b1e8:	002b002b 	.word	0x002b002b
 801b1ec:	002b002b 	.word	0x002b002b
 801b1f0:	00c1002b 	.word	0x00c1002b
 801b1f4:	002b002b 	.word	0x002b002b
 801b1f8:	002b0180 	.word	0x002b0180
 801b1fc:	0173      	.short	0x0173
 801b1fe:	4bbc      	ldr	r3, [pc, #752]	@ (801b4f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 801b200:	6818      	ldr	r0, [r3, #0]
 801b202:	6803      	ldr	r3, [r0, #0]
 801b204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b206:	4798      	blx	r3
 801b208:	2eff      	cmp	r6, #255	@ 0xff
 801b20a:	d101      	bne.n	801b210 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801b20c:	0683      	lsls	r3, r0, #26
 801b20e:	d506      	bpl.n	801b21e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 801b210:	4633      	mov	r3, r6
 801b212:	4622      	mov	r2, r4
 801b214:	a902      	add	r1, sp, #8
 801b216:	4628      	mov	r0, r5
 801b218:	f7ff f8fc 	bl	801a414 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b21c:	e009      	b.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b21e:	4640      	mov	r0, r8
 801b220:	f7fa f896 	bl	8015350 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b224:	b940      	cbnz	r0, 801b238 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 801b226:	4623      	mov	r3, r4
 801b228:	aa02      	add	r2, sp, #8
 801b22a:	4629      	mov	r1, r5
 801b22c:	4638      	mov	r0, r7
 801b22e:	f7ff f9d7 	bl	801a5e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b232:	b009      	add	sp, #36	@ 0x24
 801b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b238:	f10d 0918 	add.w	r9, sp, #24
 801b23c:	4641      	mov	r1, r8
 801b23e:	f10d 0810 	add.w	r8, sp, #16
 801b242:	4648      	mov	r0, r9
 801b244:	f7fa f832 	bl	80152ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b248:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b24c:	e888 0003 	stmia.w	r8, {r0, r1}
 801b250:	4640      	mov	r0, r8
 801b252:	4621      	mov	r1, r4
 801b254:	f7f4 ffee 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 801b258:	4640      	mov	r0, r8
 801b25a:	f7f5 f82e 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801b25e:	2800      	cmp	r0, #0
 801b260:	d1d6      	bne.n	801b210 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801b262:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b266:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b26a:	4293      	cmp	r3, r2
 801b26c:	dd12      	ble.n	801b294 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 801b26e:	1a9b      	subs	r3, r3, r2
 801b270:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b274:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b278:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b27c:	4628      	mov	r0, r5
 801b27e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b282:	464a      	mov	r2, r9
 801b284:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b288:	a902      	add	r1, sp, #8
 801b28a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b28e:	4633      	mov	r3, r6
 801b290:	f7ff f8c0 	bl	801a414 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b294:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b298:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b29c:	4293      	cmp	r3, r2
 801b29e:	dd12      	ble.n	801b2c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 801b2a0:	1a9b      	subs	r3, r3, r2
 801b2a2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b2a6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b2aa:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b2ae:	464a      	mov	r2, r9
 801b2b0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b2b4:	4628      	mov	r0, r5
 801b2b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b2ba:	23ff      	movs	r3, #255	@ 0xff
 801b2bc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b2c0:	a902      	add	r1, sp, #8
 801b2c2:	f7ff f8a7 	bl	801a414 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b2c6:	4643      	mov	r3, r8
 801b2c8:	aa02      	add	r2, sp, #8
 801b2ca:	4629      	mov	r1, r5
 801b2cc:	4638      	mov	r0, r7
 801b2ce:	f7ff f987 	bl	801a5e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b2d2:	88a2      	ldrh	r2, [r4, #4]
 801b2d4:	8823      	ldrh	r3, [r4, #0]
 801b2d6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b2da:	4413      	add	r3, r2
 801b2dc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b2e0:	440a      	add	r2, r1
 801b2e2:	b29b      	uxth	r3, r3
 801b2e4:	b292      	uxth	r2, r2
 801b2e6:	b218      	sxth	r0, r3
 801b2e8:	b211      	sxth	r1, r2
 801b2ea:	4288      	cmp	r0, r1
 801b2ec:	dd12      	ble.n	801b314 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 801b2ee:	1a9b      	subs	r3, r3, r2
 801b2f0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b2f4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801b2f8:	464a      	mov	r2, r9
 801b2fa:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b2fe:	a902      	add	r1, sp, #8
 801b300:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b304:	23ff      	movs	r3, #255	@ 0xff
 801b306:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b30a:	4628      	mov	r0, r5
 801b30c:	f8ad 601a 	strh.w	r6, [sp, #26]
 801b310:	f7ff f880 	bl	801a414 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b314:	88e2      	ldrh	r2, [r4, #6]
 801b316:	8863      	ldrh	r3, [r4, #2]
 801b318:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b31c:	4413      	add	r3, r2
 801b31e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b322:	440a      	add	r2, r1
 801b324:	b29b      	uxth	r3, r3
 801b326:	b292      	uxth	r2, r2
 801b328:	b218      	sxth	r0, r3
 801b32a:	b211      	sxth	r1, r2
 801b32c:	4288      	cmp	r0, r1
 801b32e:	dd80      	ble.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b330:	1a9b      	subs	r3, r3, r2
 801b332:	f9b4 6000 	ldrsh.w	r6, [r4]
 801b336:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b33a:	464a      	mov	r2, r9
 801b33c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b340:	23ff      	movs	r3, #255	@ 0xff
 801b342:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b346:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b34a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b34e:	e761      	b.n	801b214 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801b350:	4633      	mov	r3, r6
 801b352:	4622      	mov	r2, r4
 801b354:	a902      	add	r1, sp, #8
 801b356:	4628      	mov	r0, r5
 801b358:	f7ff f9b2 	bl	801a6c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801b35c:	e769      	b.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b35e:	e9cd 4600 	strd	r4, r6, [sp]
 801b362:	ab02      	add	r3, sp, #8
 801b364:	4652      	mov	r2, sl
 801b366:	4629      	mov	r1, r5
 801b368:	4638      	mov	r0, r7
 801b36a:	f7ff fd89 	bl	801ae80 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b36e:	e760      	b.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b370:	4640      	mov	r0, r8
 801b372:	f7f9 ffed 	bl	8015350 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b376:	b948      	cbnz	r0, 801b38c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 801b378:	683b      	ldr	r3, [r7, #0]
 801b37a:	aa02      	add	r2, sp, #8
 801b37c:	4629      	mov	r1, r5
 801b37e:	e9cd 6000 	strd	r6, r0, [sp]
 801b382:	4638      	mov	r0, r7
 801b384:	68de      	ldr	r6, [r3, #12]
 801b386:	4623      	mov	r3, r4
 801b388:	47b0      	blx	r6
 801b38a:	e752      	b.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b38c:	f10d 0918 	add.w	r9, sp, #24
 801b390:	4641      	mov	r1, r8
 801b392:	f10d 0810 	add.w	r8, sp, #16
 801b396:	4648      	mov	r0, r9
 801b398:	f7f9 ff88 	bl	80152ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b39c:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b3a0:	e888 0003 	stmia.w	r8, {r0, r1}
 801b3a4:	4640      	mov	r0, r8
 801b3a6:	4621      	mov	r1, r4
 801b3a8:	f7f4 ff44 	bl	8010234 <_ZN8touchgfx4RectaNERKS0_>
 801b3ac:	4640      	mov	r0, r8
 801b3ae:	f7f4 ff84 	bl	80102ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3b2:	b138      	cbz	r0, 801b3c4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 801b3b4:	4623      	mov	r3, r4
 801b3b6:	9600      	str	r6, [sp, #0]
 801b3b8:	aa02      	add	r2, sp, #8
 801b3ba:	4651      	mov	r1, sl
 801b3bc:	4628      	mov	r0, r5
 801b3be:	f7ff fdbd 	bl	801af3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b3c2:	e736      	b.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b3c4:	683b      	ldr	r3, [r7, #0]
 801b3c6:	aa02      	add	r2, sp, #8
 801b3c8:	4629      	mov	r1, r5
 801b3ca:	e9cd 6000 	strd	r6, r0, [sp]
 801b3ce:	4638      	mov	r0, r7
 801b3d0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801b3d4:	4643      	mov	r3, r8
 801b3d6:	47d8      	blx	fp
 801b3d8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b3dc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	dd13      	ble.n	801b40c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 801b3e4:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b3e8:	1a9b      	subs	r3, r3, r2
 801b3ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b3ee:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b3f8:	aa02      	add	r2, sp, #8
 801b3fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b3fe:	4651      	mov	r1, sl
 801b400:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b404:	464b      	mov	r3, r9
 801b406:	9600      	str	r6, [sp, #0]
 801b408:	f7ff fd98 	bl	801af3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b40c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b410:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b414:	4293      	cmp	r3, r2
 801b416:	dd13      	ble.n	801b440 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 801b418:	1a9b      	subs	r3, r3, r2
 801b41a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b41e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b422:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b426:	aa02      	add	r2, sp, #8
 801b428:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b42c:	4628      	mov	r0, r5
 801b42e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b432:	464b      	mov	r3, r9
 801b434:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b438:	4651      	mov	r1, sl
 801b43a:	9600      	str	r6, [sp, #0]
 801b43c:	f7ff fd7e 	bl	801af3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b440:	88a2      	ldrh	r2, [r4, #4]
 801b442:	8823      	ldrh	r3, [r4, #0]
 801b444:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b448:	4413      	add	r3, r2
 801b44a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b44e:	440a      	add	r2, r1
 801b450:	b29b      	uxth	r3, r3
 801b452:	b292      	uxth	r2, r2
 801b454:	b218      	sxth	r0, r3
 801b456:	b211      	sxth	r1, r2
 801b458:	4288      	cmp	r0, r1
 801b45a:	dd13      	ble.n	801b484 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 801b45c:	1a9b      	subs	r3, r3, r2
 801b45e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b462:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801b466:	aa02      	add	r2, sp, #8
 801b468:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b46c:	4651      	mov	r1, sl
 801b46e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b472:	464b      	mov	r3, r9
 801b474:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b478:	4628      	mov	r0, r5
 801b47a:	9600      	str	r6, [sp, #0]
 801b47c:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b480:	f7ff fd5c 	bl	801af3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b484:	88e2      	ldrh	r2, [r4, #6]
 801b486:	8863      	ldrh	r3, [r4, #2]
 801b488:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b48c:	4413      	add	r3, r2
 801b48e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b492:	440a      	add	r2, r1
 801b494:	b29b      	uxth	r3, r3
 801b496:	b292      	uxth	r2, r2
 801b498:	b218      	sxth	r0, r3
 801b49a:	b211      	sxth	r1, r2
 801b49c:	4288      	cmp	r0, r1
 801b49e:	f77f aec8 	ble.w	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b4a2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801b4a6:	1a9b      	subs	r3, r3, r2
 801b4a8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b4ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b4b0:	464b      	mov	r3, r9
 801b4b2:	f8ad 7018 	strh.w	r7, [sp, #24]
 801b4b6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b4ba:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b4be:	9600      	str	r6, [sp, #0]
 801b4c0:	e77a      	b.n	801b3b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801b4c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801b4c6:	2800      	cmp	r0, #0
 801b4c8:	f43f aeb3 	beq.w	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b4cc:	6803      	ldr	r3, [r0, #0]
 801b4ce:	9600      	str	r6, [sp, #0]
 801b4d0:	68de      	ldr	r6, [r3, #12]
 801b4d2:	4623      	mov	r3, r4
 801b4d4:	aa02      	add	r2, sp, #8
 801b4d6:	4629      	mov	r1, r5
 801b4d8:	47b0      	blx	r6
 801b4da:	e6aa      	b.n	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b4dc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801b4e0:	2800      	cmp	r0, #0
 801b4e2:	f43f aea6 	beq.w	801b232 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801b4e6:	6803      	ldr	r3, [r0, #0]
 801b4e8:	9600      	str	r6, [sp, #0]
 801b4ea:	689e      	ldr	r6, [r3, #8]
 801b4ec:	e7f1      	b.n	801b4d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 801b4ee:	bf00      	nop
 801b4f0:	20001df4 	.word	0x20001df4

0801b4f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801b4f4:	b180      	cbz	r0, 801b518 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801b4f6:	2903      	cmp	r1, #3
 801b4f8:	d81c      	bhi.n	801b534 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b4fa:	e8df f001 	tbb	[pc, r1]
 801b4fe:	1d02      	.short	0x1d02
 801b500:	1f08      	.short	0x1f08
 801b502:	4b10      	ldr	r3, [pc, #64]	@ (801b544 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b504:	8818      	ldrh	r0, [r3, #0]
 801b506:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b50a:	4240      	negs	r0, r0
 801b50c:	4770      	bx	lr
 801b50e:	4b0d      	ldr	r3, [pc, #52]	@ (801b544 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b510:	8818      	ldrh	r0, [r3, #0]
 801b512:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b516:	4770      	bx	lr
 801b518:	2903      	cmp	r1, #3
 801b51a:	d80b      	bhi.n	801b534 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b51c:	a301      	add	r3, pc, #4	@ (adr r3, 801b524 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801b51e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b522:	bf00      	nop
 801b524:	0801b539 	.word	0x0801b539
 801b528:	0801b50f 	.word	0x0801b50f
 801b52c:	0801b53d 	.word	0x0801b53d
 801b530:	0801b503 	.word	0x0801b503
 801b534:	2000      	movs	r0, #0
 801b536:	4770      	bx	lr
 801b538:	2001      	movs	r0, #1
 801b53a:	4770      	bx	lr
 801b53c:	f04f 30ff 	mov.w	r0, #4294967295
 801b540:	4770      	bx	lr
 801b542:	bf00      	nop
 801b544:	20001dee 	.word	0x20001dee

0801b548 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801b548:	b180      	cbz	r0, 801b56c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801b54a:	2903      	cmp	r1, #3
 801b54c:	d81c      	bhi.n	801b588 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801b54e:	e8df f001 	tbb	[pc, r1]
 801b552:	021d      	.short	0x021d
 801b554:	071f      	.short	0x071f
 801b556:	4b10      	ldr	r3, [pc, #64]	@ (801b598 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b558:	8818      	ldrh	r0, [r3, #0]
 801b55a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b55e:	4770      	bx	lr
 801b560:	4b0d      	ldr	r3, [pc, #52]	@ (801b598 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b562:	8818      	ldrh	r0, [r3, #0]
 801b564:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b568:	4240      	negs	r0, r0
 801b56a:	4770      	bx	lr
 801b56c:	2903      	cmp	r1, #3
 801b56e:	d80b      	bhi.n	801b588 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801b570:	a301      	add	r3, pc, #4	@ (adr r3, 801b578 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801b572:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b576:	bf00      	nop
 801b578:	0801b557 	.word	0x0801b557
 801b57c:	0801b591 	.word	0x0801b591
 801b580:	0801b561 	.word	0x0801b561
 801b584:	0801b58d 	.word	0x0801b58d
 801b588:	2000      	movs	r0, #0
 801b58a:	4770      	bx	lr
 801b58c:	2001      	movs	r0, #1
 801b58e:	4770      	bx	lr
 801b590:	f04f 30ff 	mov.w	r0, #4294967295
 801b594:	4770      	bx	lr
 801b596:	bf00      	nop
 801b598:	20001dee 	.word	0x20001dee

0801b59c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5a0:	b099      	sub	sp, #100	@ 0x64
 801b5a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b5a4:	a914      	add	r1, sp, #80	@ 0x50
 801b5a6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 801b5aa:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 801b5ae:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 801b5b2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 801b5b6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 801b5ba:	e881 000c 	stmia.w	r1, {r2, r3}
 801b5be:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801b5c2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 801b5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b5c8:	f891 900d 	ldrb.w	r9, [r1, #13]
 801b5cc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801b5d0:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801b5d4:	9310      	str	r3, [sp, #64]	@ 0x40
 801b5d6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 801b5da:	930c      	str	r3, [sp, #48]	@ 0x30
 801b5dc:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 801b5e0:	798f      	ldrb	r7, [r1, #6]
 801b5e2:	431f      	orrs	r7, r3
 801b5e4:	f000 8195 	beq.w	801b912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b5e8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801b5ec:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801b5f0:	f891 9007 	ldrb.w	r9, [r1, #7]
 801b5f4:	ea59 0903 	orrs.w	r9, r9, r3
 801b5f8:	f000 818b 	beq.w	801b912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b5fc:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b600:	b29b      	uxth	r3, r3
 801b602:	2d00      	cmp	r5, #0
 801b604:	f000 812e 	beq.w	801b864 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801b608:	1aed      	subs	r5, r5, r3
 801b60a:	b2ad      	uxth	r5, r5
 801b60c:	042b      	lsls	r3, r5, #16
 801b60e:	d502      	bpl.n	801b616 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801b610:	1b64      	subs	r4, r4, r5
 801b612:	2500      	movs	r5, #0
 801b614:	b224      	sxth	r4, r4
 801b616:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b61a:	a814      	add	r0, sp, #80	@ 0x50
 801b61c:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801b620:	428c      	cmp	r4, r1
 801b622:	b28b      	uxth	r3, r1
 801b624:	bfbf      	itttt	lt
 801b626:	18ed      	addlt	r5, r5, r3
 801b628:	1b2c      	sublt	r4, r5, r4
 801b62a:	b2a5      	uxthlt	r5, r4
 801b62c:	460c      	movlt	r4, r1
 801b62e:	8891      	ldrh	r1, [r2, #4]
 801b630:	440b      	add	r3, r1
 801b632:	4621      	mov	r1, r4
 801b634:	b21b      	sxth	r3, r3
 801b636:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b638:	88d3      	ldrh	r3, [r2, #6]
 801b63a:	8852      	ldrh	r2, [r2, #2]
 801b63c:	4413      	add	r3, r2
 801b63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b640:	b21b      	sxth	r3, r3
 801b642:	930d      	str	r3, [sp, #52]	@ 0x34
 801b644:	4bbd      	ldr	r3, [pc, #756]	@ (801b93c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801b646:	f893 b000 	ldrb.w	fp, [r3]
 801b64a:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b64e:	f1dc 0300 	rsbs	r3, ip, #0
 801b652:	eb43 030c 	adc.w	r3, r3, ip
 801b656:	930e      	str	r3, [sp, #56]	@ 0x38
 801b658:	4653      	mov	r3, sl
 801b65a:	f7f6 fdff 	bl	801225c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b65e:	4621      	mov	r1, r4
 801b660:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 801b664:	4653      	mov	r3, sl
 801b666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b668:	a814      	add	r0, sp, #80	@ 0x50
 801b66a:	f7f6 fe14 	bl	8012296 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b66e:	a918      	add	r1, sp, #96	@ 0x60
 801b670:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b674:	a817      	add	r0, sp, #92	@ 0x5c
 801b676:	f7f6 ff3b 	bl	80124f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b67a:	f1ba 0f00 	cmp.w	sl, #0
 801b67e:	f040 80f4 	bne.w	801b86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801b682:	f1bb 0f01 	cmp.w	fp, #1
 801b686:	f040 80f8 	bne.w	801b87a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801b68a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	f040 8145 	bne.w	801b91c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801b692:	b2ba      	uxth	r2, r7
 801b694:	b905      	cbnz	r5, 801b698 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801b696:	b16e      	cbz	r6, 801b6b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801b698:	fb06 5302 	mla	r3, r6, r2, r5
 801b69c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801b69e:	4631      	mov	r1, r6
 801b6a0:	fb08 f303 	mul.w	r3, r8, r3
 801b6a4:	f003 0607 	and.w	r6, r3, #7
 801b6a8:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801b6ac:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b6ae:	eba9 0301 	sub.w	r3, r9, r1
 801b6b2:	930a      	str	r3, [sp, #40]	@ 0x28
 801b6b4:	4651      	mov	r1, sl
 801b6b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b6b8:	f7ff ff1c 	bl	801b4f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801b6bc:	4681      	mov	r9, r0
 801b6be:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b6c0:	f7ff ff42 	bl	801b548 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801b6c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b6c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b6c8:	4683      	mov	fp, r0
 801b6ca:	eba3 0a01 	sub.w	sl, r3, r1
 801b6ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b6d0:	459a      	cmp	sl, r3
 801b6d2:	bfa8      	it	ge
 801b6d4:	469a      	movge	sl, r3
 801b6d6:	f1ba 0f00 	cmp.w	sl, #0
 801b6da:	f340 811a 	ble.w	801b912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b6de:	1b64      	subs	r4, r4, r5
 801b6e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b6e2:	1b1c      	subs	r4, r3, r4
 801b6e4:	42bc      	cmp	r4, r7
 801b6e6:	bfd4      	ite	le
 801b6e8:	ebc5 0504 	rsble	r5, r5, r4
 801b6ec:	ebc5 0507 	rsbgt	r5, r5, r7
 801b6f0:	2d00      	cmp	r5, #0
 801b6f2:	f340 810e 	ble.w	801b912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b6f6:	1b52      	subs	r2, r2, r5
 801b6f8:	fb08 f302 	mul.w	r3, r8, r2
 801b6fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b700:	2b00      	cmp	r3, #0
 801b702:	f040 8116 	bne.w	801b932 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801b706:	4b8e      	ldr	r3, [pc, #568]	@ (801b940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801b708:	6818      	ldr	r0, [r3, #0]
 801b70a:	6803      	ldr	r3, [r0, #0]
 801b70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b70e:	4798      	blx	r3
 801b710:	2301      	movs	r3, #1
 801b712:	4a8c      	ldr	r2, [pc, #560]	@ (801b944 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801b714:	fa03 f308 	lsl.w	r3, r3, r8
 801b718:	8811      	ldrh	r1, [r2, #0]
 801b71a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 801b71e:	3b01      	subs	r3, #1
 801b720:	b2db      	uxtb	r3, r3
 801b722:	930e      	str	r3, [sp, #56]	@ 0x38
 801b724:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801b728:	fb01 2303 	mla	r3, r1, r3, r2
 801b72c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b730:	930a      	str	r3, [sp, #40]	@ 0x28
 801b732:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b734:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b738:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b73a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b73c:	0a19      	lsrs	r1, r3, #8
 801b73e:	b2cb      	uxtb	r3, r1
 801b740:	9312      	str	r3, [sp, #72]	@ 0x48
 801b742:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b744:	b2db      	uxtb	r3, r3
 801b746:	9311      	str	r3, [sp, #68]	@ 0x44
 801b748:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b74a:	095a      	lsrs	r2, r3, #5
 801b74c:	4b7e      	ldr	r3, [pc, #504]	@ (801b948 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b74e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801b752:	400b      	ands	r3, r1
 801b754:	4313      	orrs	r3, r2
 801b756:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801b758:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b75c:	4313      	orrs	r3, r2
 801b75e:	b29b      	uxth	r3, r3
 801b760:	9310      	str	r3, [sp, #64]	@ 0x40
 801b762:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b764:	781a      	ldrb	r2, [r3, #0]
 801b766:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801b76a:	fb05 b919 	mls	r9, r5, r9, fp
 801b76e:	4132      	asrs	r2, r6
 801b770:	fb03 fb05 	mul.w	fp, r3, r5
 801b774:	930d      	str	r3, [sp, #52]	@ 0x34
 801b776:	b2d2      	uxtb	r2, r2
 801b778:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801b77c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b780:	f0c0 80f5 	bcc.w	801b96e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801b784:	46ae      	mov	lr, r5
 801b786:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 801b78a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b78e:	f0c0 80dd 	bcc.w	801b94c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801b792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b794:	4013      	ands	r3, r2
 801b796:	d055      	beq.n	801b844 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801b798:	20ff      	movs	r0, #255	@ 0xff
 801b79a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b79c:	fb90 f1f1 	sdiv	r1, r0, r1
 801b7a0:	434b      	muls	r3, r1
 801b7a2:	2bfe      	cmp	r3, #254	@ 0xfe
 801b7a4:	dd03      	ble.n	801b7ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801b7a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b7a8:	4281      	cmp	r1, r0
 801b7aa:	f000 80c4 	beq.w	801b936 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801b7ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b7b0:	f8bc 4000 	ldrh.w	r4, [ip]
 801b7b4:	fb11 f303 	smulbb	r3, r1, r3
 801b7b8:	1220      	asrs	r0, r4, #8
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801b7c0:	1c59      	adds	r1, r3, #1
 801b7c2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801b7c6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b7ca:	10e1      	asrs	r1, r4, #3
 801b7cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b7d0:	00e4      	lsls	r4, r4, #3
 801b7d2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801b7d6:	b29f      	uxth	r7, r3
 801b7d8:	43db      	mvns	r3, r3
 801b7da:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801b7de:	b2db      	uxtb	r3, r3
 801b7e0:	b2e4      	uxtb	r4, r4
 801b7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b7e6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801b7ea:	fb13 f907 	smulbb	r9, r3, r7
 801b7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7f0:	fb00 9003 	mla	r0, r0, r3, r9
 801b7f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b7f6:	fb13 f907 	smulbb	r9, r3, r7
 801b7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7fc:	b280      	uxth	r0, r0
 801b7fe:	fb01 9103 	mla	r1, r1, r3, r9
 801b802:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b804:	fb13 f707 	smulbb	r7, r3, r7
 801b808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b80a:	b289      	uxth	r1, r1
 801b80c:	fb04 7403 	mla	r4, r4, r3, r7
 801b810:	1c43      	adds	r3, r0, #1
 801b812:	b2a4      	uxth	r4, r4
 801b814:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b818:	f104 0901 	add.w	r9, r4, #1
 801b81c:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801b820:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801b824:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801b828:	ea49 0000 	orr.w	r0, r9, r0
 801b82c:	f101 0901 	add.w	r9, r1, #1
 801b830:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801b834:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b838:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801b83c:	ea40 0009 	orr.w	r0, r0, r9
 801b840:	f8ac 0000 	strh.w	r0, [ip]
 801b844:	4446      	add	r6, r8
 801b846:	b2b6      	uxth	r6, r6
 801b848:	2e07      	cmp	r6, #7
 801b84a:	bf89      	itett	hi
 801b84c:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801b84e:	fa42 f208 	asrls.w	r2, r2, r8
 801b852:	2600      	movhi	r6, #0
 801b854:	785a      	ldrbhi	r2, [r3, #1]
 801b856:	bf8a      	itet	hi
 801b858:	3301      	addhi	r3, #1
 801b85a:	b2d2      	uxtbls	r2, r2
 801b85c:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 801b85e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b860:	449c      	add	ip, r3
 801b862:	e792      	b.n	801b78a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801b864:	441c      	add	r4, r3
 801b866:	b224      	sxth	r4, r4
 801b868:	e6d5      	b.n	801b616 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801b86a:	f1ba 0f01 	cmp.w	sl, #1
 801b86e:	f47f af0c 	bne.w	801b68a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b872:	f1bb 0f01 	cmp.w	fp, #1
 801b876:	f47f af08 	bne.w	801b68a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b87a:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 801b940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801b87e:	f8db 0000 	ldr.w	r0, [fp]
 801b882:	6803      	ldr	r3, [r0, #0]
 801b884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b886:	4798      	blx	r3
 801b888:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801b88c:	465a      	mov	r2, fp
 801b88e:	d006      	beq.n	801b89e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801b890:	f1b8 0f04 	cmp.w	r8, #4
 801b894:	d140      	bne.n	801b918 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801b896:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b898:	3300      	adds	r3, #0
 801b89a:	bf18      	it	ne
 801b89c:	2301      	movne	r3, #1
 801b89e:	0580      	lsls	r0, r0, #22
 801b8a0:	d56e      	bpl.n	801b980 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801b8a2:	f1b8 0f08 	cmp.w	r8, #8
 801b8a6:	d16b      	bne.n	801b980 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	bf0c      	ite	eq
 801b8ac:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801b8b0:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801b8b4:	2d00      	cmp	r5, #0
 801b8b6:	f47f aee8 	bne.w	801b68a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8ba:	2e00      	cmp	r6, #0
 801b8bc:	f47f aee5 	bne.w	801b68a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8c0:	19e3      	adds	r3, r4, r7
 801b8c2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b8c4:	4283      	cmp	r3, r0
 801b8c6:	f73f aee0 	bgt.w	801b68a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b8ce:	444b      	add	r3, r9
 801b8d0:	4283      	cmp	r3, r0
 801b8d2:	f73f aeda 	bgt.w	801b68a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8d6:	b2bf      	uxth	r7, r7
 801b8d8:	f1b8 0f08 	cmp.w	r8, #8
 801b8dc:	6810      	ldr	r0, [r2, #0]
 801b8de:	f04f 0500 	mov.w	r5, #0
 801b8e2:	bf18      	it	ne
 801b8e4:	3701      	addne	r7, #1
 801b8e6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 801b8ea:	6804      	ldr	r4, [r0, #0]
 801b8ec:	bf18      	it	ne
 801b8ee:	f027 0701 	bicne.w	r7, r7, #1
 801b8f2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801b8f6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801b8fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b8fc:	bf18      	it	ne
 801b8fe:	b2bf      	uxthne	r7, r7
 801b900:	9104      	str	r1, [sp, #16]
 801b902:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801b904:	e9cd 7900 	strd	r7, r9, [sp]
 801b908:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801b90c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801b90e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801b910:	47a0      	blx	r4
 801b912:	b019      	add	sp, #100	@ 0x64
 801b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b918:	2300      	movs	r3, #0
 801b91a:	e7c0      	b.n	801b89e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801b91c:	2208      	movs	r2, #8
 801b91e:	fb92 f3f8 	sdiv	r3, r2, r8
 801b922:	1e5a      	subs	r2, r3, #1
 801b924:	443a      	add	r2, r7
 801b926:	fb92 f2f3 	sdiv	r2, r2, r3
 801b92a:	fb12 f203 	smulbb	r2, r2, r3
 801b92e:	b292      	uxth	r2, r2
 801b930:	e6b0      	b.n	801b694 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801b932:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b934:	e6ec      	b.n	801b710 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801b936:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b938:	e782      	b.n	801b840 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801b93a:	bf00      	nop
 801b93c:	20001dec 	.word	0x20001dec
 801b940:	20001df4 	.word	0x20001df4
 801b944:	20001dee 	.word	0x20001dee
 801b948:	00fff800 	.word	0x00fff800
 801b94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b94e:	b153      	cbz	r3, 801b966 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801b950:	441e      	add	r6, r3
 801b952:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b954:	b2b6      	uxth	r6, r6
 801b956:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801b95a:	f006 0607 	and.w	r6, r6, #7
 801b95e:	781a      	ldrb	r2, [r3, #0]
 801b960:	9328      	str	r3, [sp, #160]	@ 0xa0
 801b962:	4132      	asrs	r2, r6
 801b964:	b2d2      	uxtb	r2, r2
 801b966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b968:	445b      	add	r3, fp
 801b96a:	930a      	str	r3, [sp, #40]	@ 0x28
 801b96c:	e706      	b.n	801b77c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801b96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b970:	2b00      	cmp	r3, #0
 801b972:	d1ce      	bne.n	801b912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b974:	4b05      	ldr	r3, [pc, #20]	@ (801b98c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801b976:	6818      	ldr	r0, [r3, #0]
 801b978:	6803      	ldr	r3, [r0, #0]
 801b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b97c:	4798      	blx	r3
 801b97e:	e7c8      	b.n	801b912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b980:	2b00      	cmp	r3, #0
 801b982:	f43f ae82 	beq.w	801b68a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b986:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b98a:	e793      	b.n	801b8b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801b98c:	20001df4 	.word	0x20001df4

0801b990 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801b990:	b538      	push	{r3, r4, r5, lr}
 801b992:	4c15      	ldr	r4, [pc, #84]	@ (801b9e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801b994:	4605      	mov	r5, r0
 801b996:	7823      	ldrb	r3, [r4, #0]
 801b998:	f3bf 8f5b 	dmb	ish
 801b99c:	07da      	lsls	r2, r3, #31
 801b99e:	d40b      	bmi.n	801b9b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b9a0:	4620      	mov	r0, r4
 801b9a2:	f007 ff04 	bl	80237ae <__cxa_guard_acquire>
 801b9a6:	b138      	cbz	r0, 801b9b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	f007 ff0c 	bl	80237c6 <__cxa_guard_release>
 801b9ae:	4a0f      	ldr	r2, [pc, #60]	@ (801b9ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b9b0:	490f      	ldr	r1, [pc, #60]	@ (801b9f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801b9b2:	4810      	ldr	r0, [pc, #64]	@ (801b9f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b9b4:	f007 fef4 	bl	80237a0 <__aeabi_atexit>
 801b9b8:	4c0f      	ldr	r4, [pc, #60]	@ (801b9f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801b9ba:	7823      	ldrb	r3, [r4, #0]
 801b9bc:	f3bf 8f5b 	dmb	ish
 801b9c0:	07db      	lsls	r3, r3, #31
 801b9c2:	d40b      	bmi.n	801b9dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	f007 fef2 	bl	80237ae <__cxa_guard_acquire>
 801b9ca:	b138      	cbz	r0, 801b9dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	f007 fefa 	bl	80237c6 <__cxa_guard_release>
 801b9d2:	4a06      	ldr	r2, [pc, #24]	@ (801b9ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b9d4:	4909      	ldr	r1, [pc, #36]	@ (801b9fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801b9d6:	480a      	ldr	r0, [pc, #40]	@ (801ba00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b9d8:	f007 fee2 	bl	80237a0 <__aeabi_atexit>
 801b9dc:	4b05      	ldr	r3, [pc, #20]	@ (801b9f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b9de:	616b      	str	r3, [r5, #20]
 801b9e0:	4b07      	ldr	r3, [pc, #28]	@ (801ba00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b9e2:	61ab      	str	r3, [r5, #24]
 801b9e4:	bd38      	pop	{r3, r4, r5, pc}
 801b9e6:	bf00      	nop
 801b9e8:	20001ed0 	.word	0x20001ed0
 801b9ec:	20000000 	.word	0x20000000
 801b9f0:	08017b3f 	.word	0x08017b3f
 801b9f4:	200001ec 	.word	0x200001ec
 801b9f8:	20001ed4 	.word	0x20001ed4
 801b9fc:	08017b3d 	.word	0x08017b3d
 801ba00:	200001f0 	.word	0x200001f0

0801ba04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ba04:	b538      	push	{r3, r4, r5, lr}
 801ba06:	4c15      	ldr	r4, [pc, #84]	@ (801ba5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ba08:	4605      	mov	r5, r0
 801ba0a:	7823      	ldrb	r3, [r4, #0]
 801ba0c:	f3bf 8f5b 	dmb	ish
 801ba10:	07da      	lsls	r2, r3, #31
 801ba12:	d40b      	bmi.n	801ba2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ba14:	4620      	mov	r0, r4
 801ba16:	f007 feca 	bl	80237ae <__cxa_guard_acquire>
 801ba1a:	b138      	cbz	r0, 801ba2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	f007 fed2 	bl	80237c6 <__cxa_guard_release>
 801ba22:	4a0f      	ldr	r2, [pc, #60]	@ (801ba60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ba24:	490f      	ldr	r1, [pc, #60]	@ (801ba64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ba26:	4810      	ldr	r0, [pc, #64]	@ (801ba68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ba28:	f007 feba 	bl	80237a0 <__aeabi_atexit>
 801ba2c:	4c0f      	ldr	r4, [pc, #60]	@ (801ba6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801ba2e:	7823      	ldrb	r3, [r4, #0]
 801ba30:	f3bf 8f5b 	dmb	ish
 801ba34:	07db      	lsls	r3, r3, #31
 801ba36:	d40b      	bmi.n	801ba50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ba38:	4620      	mov	r0, r4
 801ba3a:	f007 feb8 	bl	80237ae <__cxa_guard_acquire>
 801ba3e:	b138      	cbz	r0, 801ba50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ba40:	4620      	mov	r0, r4
 801ba42:	f007 fec0 	bl	80237c6 <__cxa_guard_release>
 801ba46:	4a06      	ldr	r2, [pc, #24]	@ (801ba60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ba48:	4909      	ldr	r1, [pc, #36]	@ (801ba70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801ba4a:	480a      	ldr	r0, [pc, #40]	@ (801ba74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ba4c:	f007 fea8 	bl	80237a0 <__aeabi_atexit>
 801ba50:	4b05      	ldr	r3, [pc, #20]	@ (801ba68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ba52:	60eb      	str	r3, [r5, #12]
 801ba54:	4b07      	ldr	r3, [pc, #28]	@ (801ba74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ba56:	612b      	str	r3, [r5, #16]
 801ba58:	bd38      	pop	{r3, r4, r5, pc}
 801ba5a:	bf00      	nop
 801ba5c:	20001ea8 	.word	0x20001ea8
 801ba60:	20000000 	.word	0x20000000
 801ba64:	08017b43 	.word	0x08017b43
 801ba68:	200001c4 	.word	0x200001c4
 801ba6c:	20001eac 	.word	0x20001eac
 801ba70:	08017b41 	.word	0x08017b41
 801ba74:	200001c8 	.word	0x200001c8

0801ba78 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801ba78:	b510      	push	{r4, lr}
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	f7ff ff88 	bl	801b990 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801ba80:	4620      	mov	r0, r4
 801ba82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba86:	f7ff bfbd 	b.w	801ba04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801ba8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ba8c:	b538      	push	{r3, r4, r5, lr}
 801ba8e:	4c15      	ldr	r4, [pc, #84]	@ (801bae4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ba90:	4605      	mov	r5, r0
 801ba92:	7823      	ldrb	r3, [r4, #0]
 801ba94:	f3bf 8f5b 	dmb	ish
 801ba98:	07da      	lsls	r2, r3, #31
 801ba9a:	d40b      	bmi.n	801bab4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ba9c:	4620      	mov	r0, r4
 801ba9e:	f007 fe86 	bl	80237ae <__cxa_guard_acquire>
 801baa2:	b138      	cbz	r0, 801bab4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801baa4:	4620      	mov	r0, r4
 801baa6:	f007 fe8e 	bl	80237c6 <__cxa_guard_release>
 801baaa:	4a0f      	ldr	r2, [pc, #60]	@ (801bae8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801baac:	490f      	ldr	r1, [pc, #60]	@ (801baec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801baae:	4810      	ldr	r0, [pc, #64]	@ (801baf0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bab0:	f007 fe76 	bl	80237a0 <__aeabi_atexit>
 801bab4:	4c0f      	ldr	r4, [pc, #60]	@ (801baf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bab6:	7823      	ldrb	r3, [r4, #0]
 801bab8:	f3bf 8f5b 	dmb	ish
 801babc:	07db      	lsls	r3, r3, #31
 801babe:	d40b      	bmi.n	801bad8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bac0:	4620      	mov	r0, r4
 801bac2:	f007 fe74 	bl	80237ae <__cxa_guard_acquire>
 801bac6:	b138      	cbz	r0, 801bad8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bac8:	4620      	mov	r0, r4
 801baca:	f007 fe7c 	bl	80237c6 <__cxa_guard_release>
 801bace:	4a06      	ldr	r2, [pc, #24]	@ (801bae8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bad0:	4909      	ldr	r1, [pc, #36]	@ (801baf8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bad2:	480a      	ldr	r0, [pc, #40]	@ (801bafc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bad4:	f007 fe64 	bl	80237a0 <__aeabi_atexit>
 801bad8:	4b05      	ldr	r3, [pc, #20]	@ (801baf0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bada:	626b      	str	r3, [r5, #36]	@ 0x24
 801badc:	4b07      	ldr	r3, [pc, #28]	@ (801bafc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bade:	62ab      	str	r3, [r5, #40]	@ 0x28
 801bae0:	bd38      	pop	{r3, r4, r5, pc}
 801bae2:	bf00      	nop
 801bae4:	20001ed8 	.word	0x20001ed8
 801bae8:	20000000 	.word	0x20000000
 801baec:	08017b37 	.word	0x08017b37
 801baf0:	200001f4 	.word	0x200001f4
 801baf4:	20001edc 	.word	0x20001edc
 801baf8:	08017b35 	.word	0x08017b35
 801bafc:	200001f8 	.word	0x200001f8

0801bb00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bb00:	b538      	push	{r3, r4, r5, lr}
 801bb02:	4c15      	ldr	r4, [pc, #84]	@ (801bb58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bb04:	4605      	mov	r5, r0
 801bb06:	7823      	ldrb	r3, [r4, #0]
 801bb08:	f3bf 8f5b 	dmb	ish
 801bb0c:	07da      	lsls	r2, r3, #31
 801bb0e:	d40b      	bmi.n	801bb28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bb10:	4620      	mov	r0, r4
 801bb12:	f007 fe4c 	bl	80237ae <__cxa_guard_acquire>
 801bb16:	b138      	cbz	r0, 801bb28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bb18:	4620      	mov	r0, r4
 801bb1a:	f007 fe54 	bl	80237c6 <__cxa_guard_release>
 801bb1e:	4a0f      	ldr	r2, [pc, #60]	@ (801bb5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bb20:	490f      	ldr	r1, [pc, #60]	@ (801bb60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bb22:	4810      	ldr	r0, [pc, #64]	@ (801bb64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bb24:	f007 fe3c 	bl	80237a0 <__aeabi_atexit>
 801bb28:	4c0f      	ldr	r4, [pc, #60]	@ (801bb68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bb2a:	7823      	ldrb	r3, [r4, #0]
 801bb2c:	f3bf 8f5b 	dmb	ish
 801bb30:	07db      	lsls	r3, r3, #31
 801bb32:	d40b      	bmi.n	801bb4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bb34:	4620      	mov	r0, r4
 801bb36:	f007 fe3a 	bl	80237ae <__cxa_guard_acquire>
 801bb3a:	b138      	cbz	r0, 801bb4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	f007 fe42 	bl	80237c6 <__cxa_guard_release>
 801bb42:	4a06      	ldr	r2, [pc, #24]	@ (801bb5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bb44:	4909      	ldr	r1, [pc, #36]	@ (801bb6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801bb46:	480a      	ldr	r0, [pc, #40]	@ (801bb70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bb48:	f007 fe2a 	bl	80237a0 <__aeabi_atexit>
 801bb4c:	4b05      	ldr	r3, [pc, #20]	@ (801bb64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bb4e:	61eb      	str	r3, [r5, #28]
 801bb50:	4b07      	ldr	r3, [pc, #28]	@ (801bb70 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bb52:	622b      	str	r3, [r5, #32]
 801bb54:	bd38      	pop	{r3, r4, r5, pc}
 801bb56:	bf00      	nop
 801bb58:	20001eb0 	.word	0x20001eb0
 801bb5c:	20000000 	.word	0x20000000
 801bb60:	08017b3b 	.word	0x08017b3b
 801bb64:	200001cc 	.word	0x200001cc
 801bb68:	20001eb4 	.word	0x20001eb4
 801bb6c:	08017b39 	.word	0x08017b39
 801bb70:	200001d0 	.word	0x200001d0

0801bb74 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801bb74:	b510      	push	{r4, lr}
 801bb76:	4604      	mov	r4, r0
 801bb78:	f7ff ff88 	bl	801ba8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bb7c:	4620      	mov	r0, r4
 801bb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb82:	f7ff bfbd 	b.w	801bb00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bb88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bb88:	b538      	push	{r3, r4, r5, lr}
 801bb8a:	4c15      	ldr	r4, [pc, #84]	@ (801bbe0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bb8c:	4605      	mov	r5, r0
 801bb8e:	7823      	ldrb	r3, [r4, #0]
 801bb90:	f3bf 8f5b 	dmb	ish
 801bb94:	07da      	lsls	r2, r3, #31
 801bb96:	d40b      	bmi.n	801bbb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bb98:	4620      	mov	r0, r4
 801bb9a:	f007 fe08 	bl	80237ae <__cxa_guard_acquire>
 801bb9e:	b138      	cbz	r0, 801bbb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bba0:	4620      	mov	r0, r4
 801bba2:	f007 fe10 	bl	80237c6 <__cxa_guard_release>
 801bba6:	4a0f      	ldr	r2, [pc, #60]	@ (801bbe4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bba8:	490f      	ldr	r1, [pc, #60]	@ (801bbe8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bbaa:	4810      	ldr	r0, [pc, #64]	@ (801bbec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bbac:	f007 fdf8 	bl	80237a0 <__aeabi_atexit>
 801bbb0:	4c0f      	ldr	r4, [pc, #60]	@ (801bbf0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bbb2:	7823      	ldrb	r3, [r4, #0]
 801bbb4:	f3bf 8f5b 	dmb	ish
 801bbb8:	07db      	lsls	r3, r3, #31
 801bbba:	d40b      	bmi.n	801bbd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	f007 fdf6 	bl	80237ae <__cxa_guard_acquire>
 801bbc2:	b138      	cbz	r0, 801bbd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	f007 fdfe 	bl	80237c6 <__cxa_guard_release>
 801bbca:	4a06      	ldr	r2, [pc, #24]	@ (801bbe4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bbcc:	4909      	ldr	r1, [pc, #36]	@ (801bbf4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bbce:	480a      	ldr	r0, [pc, #40]	@ (801bbf8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bbd0:	f007 fde6 	bl	80237a0 <__aeabi_atexit>
 801bbd4:	4b05      	ldr	r3, [pc, #20]	@ (801bbec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bbd6:	636b      	str	r3, [r5, #52]	@ 0x34
 801bbd8:	4b07      	ldr	r3, [pc, #28]	@ (801bbf8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bbda:	63ab      	str	r3, [r5, #56]	@ 0x38
 801bbdc:	bd38      	pop	{r3, r4, r5, pc}
 801bbde:	bf00      	nop
 801bbe0:	20001ee8 	.word	0x20001ee8
 801bbe4:	20000000 	.word	0x20000000
 801bbe8:	08017b2f 	.word	0x08017b2f
 801bbec:	20000204 	.word	0x20000204
 801bbf0:	20001eec 	.word	0x20001eec
 801bbf4:	08017b2d 	.word	0x08017b2d
 801bbf8:	20000208 	.word	0x20000208

0801bbfc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801bbfc:	b538      	push	{r3, r4, r5, lr}
 801bbfe:	4c15      	ldr	r4, [pc, #84]	@ (801bc54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801bc00:	4605      	mov	r5, r0
 801bc02:	7823      	ldrb	r3, [r4, #0]
 801bc04:	f3bf 8f5b 	dmb	ish
 801bc08:	07da      	lsls	r2, r3, #31
 801bc0a:	d40b      	bmi.n	801bc24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bc0c:	4620      	mov	r0, r4
 801bc0e:	f007 fdce 	bl	80237ae <__cxa_guard_acquire>
 801bc12:	b138      	cbz	r0, 801bc24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bc14:	4620      	mov	r0, r4
 801bc16:	f007 fdd6 	bl	80237c6 <__cxa_guard_release>
 801bc1a:	4a0f      	ldr	r2, [pc, #60]	@ (801bc58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bc1c:	490f      	ldr	r1, [pc, #60]	@ (801bc5c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801bc1e:	4810      	ldr	r0, [pc, #64]	@ (801bc60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bc20:	f007 fdbe 	bl	80237a0 <__aeabi_atexit>
 801bc24:	4c0f      	ldr	r4, [pc, #60]	@ (801bc64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801bc26:	7823      	ldrb	r3, [r4, #0]
 801bc28:	f3bf 8f5b 	dmb	ish
 801bc2c:	07db      	lsls	r3, r3, #31
 801bc2e:	d40b      	bmi.n	801bc48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bc30:	4620      	mov	r0, r4
 801bc32:	f007 fdbc 	bl	80237ae <__cxa_guard_acquire>
 801bc36:	b138      	cbz	r0, 801bc48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bc38:	4620      	mov	r0, r4
 801bc3a:	f007 fdc4 	bl	80237c6 <__cxa_guard_release>
 801bc3e:	4a06      	ldr	r2, [pc, #24]	@ (801bc58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bc40:	4909      	ldr	r1, [pc, #36]	@ (801bc68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801bc42:	480a      	ldr	r0, [pc, #40]	@ (801bc6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bc44:	f007 fdac 	bl	80237a0 <__aeabi_atexit>
 801bc48:	4b05      	ldr	r3, [pc, #20]	@ (801bc60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bc4a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801bc4c:	4b07      	ldr	r3, [pc, #28]	@ (801bc6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bc4e:	632b      	str	r3, [r5, #48]	@ 0x30
 801bc50:	bd38      	pop	{r3, r4, r5, pc}
 801bc52:	bf00      	nop
 801bc54:	20001eb8 	.word	0x20001eb8
 801bc58:	20000000 	.word	0x20000000
 801bc5c:	08017b33 	.word	0x08017b33
 801bc60:	200001d4 	.word	0x200001d4
 801bc64:	20001ebc 	.word	0x20001ebc
 801bc68:	08017b31 	.word	0x08017b31
 801bc6c:	200001d8 	.word	0x200001d8

0801bc70 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bc70:	b510      	push	{r4, lr}
 801bc72:	4604      	mov	r4, r0
 801bc74:	f7ff ff88 	bl	801bb88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801bc78:	4620      	mov	r0, r4
 801bc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc7e:	f7ff bfbd 	b.w	801bbfc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bc84 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801bc84:	b538      	push	{r3, r4, r5, lr}
 801bc86:	4c15      	ldr	r4, [pc, #84]	@ (801bcdc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801bc88:	4605      	mov	r5, r0
 801bc8a:	7823      	ldrb	r3, [r4, #0]
 801bc8c:	f3bf 8f5b 	dmb	ish
 801bc90:	07da      	lsls	r2, r3, #31
 801bc92:	d40b      	bmi.n	801bcac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801bc94:	4620      	mov	r0, r4
 801bc96:	f007 fd8a 	bl	80237ae <__cxa_guard_acquire>
 801bc9a:	b138      	cbz	r0, 801bcac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	f007 fd92 	bl	80237c6 <__cxa_guard_release>
 801bca2:	4a0f      	ldr	r2, [pc, #60]	@ (801bce0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bca4:	490f      	ldr	r1, [pc, #60]	@ (801bce4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801bca6:	4810      	ldr	r0, [pc, #64]	@ (801bce8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801bca8:	f007 fd7a 	bl	80237a0 <__aeabi_atexit>
 801bcac:	4c0f      	ldr	r4, [pc, #60]	@ (801bcec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801bcae:	7823      	ldrb	r3, [r4, #0]
 801bcb0:	f3bf 8f5b 	dmb	ish
 801bcb4:	07db      	lsls	r3, r3, #31
 801bcb6:	d40b      	bmi.n	801bcd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801bcb8:	4620      	mov	r0, r4
 801bcba:	f007 fd78 	bl	80237ae <__cxa_guard_acquire>
 801bcbe:	b138      	cbz	r0, 801bcd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801bcc0:	4620      	mov	r0, r4
 801bcc2:	f007 fd80 	bl	80237c6 <__cxa_guard_release>
 801bcc6:	4a06      	ldr	r2, [pc, #24]	@ (801bce0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bcc8:	4909      	ldr	r1, [pc, #36]	@ (801bcf0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801bcca:	480a      	ldr	r0, [pc, #40]	@ (801bcf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bccc:	f007 fd68 	bl	80237a0 <__aeabi_atexit>
 801bcd0:	4b05      	ldr	r3, [pc, #20]	@ (801bce8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801bcd2:	656b      	str	r3, [r5, #84]	@ 0x54
 801bcd4:	4b07      	ldr	r3, [pc, #28]	@ (801bcf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bcd6:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bcd8:	bd38      	pop	{r3, r4, r5, pc}
 801bcda:	bf00      	nop
 801bcdc:	20001ef0 	.word	0x20001ef0
 801bce0:	20000000 	.word	0x20000000
 801bce4:	08017b1f 	.word	0x08017b1f
 801bce8:	2000020c 	.word	0x2000020c
 801bcec:	20001ef4 	.word	0x20001ef4
 801bcf0:	08017b1d 	.word	0x08017b1d
 801bcf4:	20000210 	.word	0x20000210

0801bcf8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801bcf8:	b538      	push	{r3, r4, r5, lr}
 801bcfa:	4c15      	ldr	r4, [pc, #84]	@ (801bd50 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801bcfc:	4605      	mov	r5, r0
 801bcfe:	7823      	ldrb	r3, [r4, #0]
 801bd00:	f3bf 8f5b 	dmb	ish
 801bd04:	07da      	lsls	r2, r3, #31
 801bd06:	d40b      	bmi.n	801bd20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bd08:	4620      	mov	r0, r4
 801bd0a:	f007 fd50 	bl	80237ae <__cxa_guard_acquire>
 801bd0e:	b138      	cbz	r0, 801bd20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bd10:	4620      	mov	r0, r4
 801bd12:	f007 fd58 	bl	80237c6 <__cxa_guard_release>
 801bd16:	4a0f      	ldr	r2, [pc, #60]	@ (801bd54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bd18:	490f      	ldr	r1, [pc, #60]	@ (801bd58 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801bd1a:	4810      	ldr	r0, [pc, #64]	@ (801bd5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bd1c:	f007 fd40 	bl	80237a0 <__aeabi_atexit>
 801bd20:	4c0f      	ldr	r4, [pc, #60]	@ (801bd60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801bd22:	7823      	ldrb	r3, [r4, #0]
 801bd24:	f3bf 8f5b 	dmb	ish
 801bd28:	07db      	lsls	r3, r3, #31
 801bd2a:	d40b      	bmi.n	801bd44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bd2c:	4620      	mov	r0, r4
 801bd2e:	f007 fd3e 	bl	80237ae <__cxa_guard_acquire>
 801bd32:	b138      	cbz	r0, 801bd44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bd34:	4620      	mov	r0, r4
 801bd36:	f007 fd46 	bl	80237c6 <__cxa_guard_release>
 801bd3a:	4a06      	ldr	r2, [pc, #24]	@ (801bd54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bd3c:	4909      	ldr	r1, [pc, #36]	@ (801bd64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801bd3e:	480a      	ldr	r0, [pc, #40]	@ (801bd68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bd40:	f007 fd2e 	bl	80237a0 <__aeabi_atexit>
 801bd44:	4b05      	ldr	r3, [pc, #20]	@ (801bd5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bd46:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801bd48:	4b07      	ldr	r3, [pc, #28]	@ (801bd68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bd4a:	652b      	str	r3, [r5, #80]	@ 0x50
 801bd4c:	bd38      	pop	{r3, r4, r5, pc}
 801bd4e:	bf00      	nop
 801bd50:	20001ef8 	.word	0x20001ef8
 801bd54:	20000000 	.word	0x20000000
 801bd58:	08017b23 	.word	0x08017b23
 801bd5c:	20000214 	.word	0x20000214
 801bd60:	20001efc 	.word	0x20001efc
 801bd64:	08017b21 	.word	0x08017b21
 801bd68:	20000218 	.word	0x20000218

0801bd6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801bd6c:	b538      	push	{r3, r4, r5, lr}
 801bd6e:	4c15      	ldr	r4, [pc, #84]	@ (801bdc4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801bd70:	4605      	mov	r5, r0
 801bd72:	7823      	ldrb	r3, [r4, #0]
 801bd74:	f3bf 8f5b 	dmb	ish
 801bd78:	07da      	lsls	r2, r3, #31
 801bd7a:	d40b      	bmi.n	801bd94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bd7c:	4620      	mov	r0, r4
 801bd7e:	f007 fd16 	bl	80237ae <__cxa_guard_acquire>
 801bd82:	b138      	cbz	r0, 801bd94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bd84:	4620      	mov	r0, r4
 801bd86:	f007 fd1e 	bl	80237c6 <__cxa_guard_release>
 801bd8a:	4a0f      	ldr	r2, [pc, #60]	@ (801bdc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801bd8c:	490f      	ldr	r1, [pc, #60]	@ (801bdcc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801bd8e:	4810      	ldr	r0, [pc, #64]	@ (801bdd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801bd90:	f007 fd06 	bl	80237a0 <__aeabi_atexit>
 801bd94:	4c0f      	ldr	r4, [pc, #60]	@ (801bdd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801bd96:	7823      	ldrb	r3, [r4, #0]
 801bd98:	f3bf 8f5b 	dmb	ish
 801bd9c:	07db      	lsls	r3, r3, #31
 801bd9e:	d40b      	bmi.n	801bdb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bda0:	4620      	mov	r0, r4
 801bda2:	f007 fd04 	bl	80237ae <__cxa_guard_acquire>
 801bda6:	b138      	cbz	r0, 801bdb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bda8:	4620      	mov	r0, r4
 801bdaa:	f007 fd0c 	bl	80237c6 <__cxa_guard_release>
 801bdae:	4a06      	ldr	r2, [pc, #24]	@ (801bdc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801bdb0:	4909      	ldr	r1, [pc, #36]	@ (801bdd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801bdb2:	480a      	ldr	r0, [pc, #40]	@ (801bddc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801bdb4:	f007 fcf4 	bl	80237a0 <__aeabi_atexit>
 801bdb8:	4b05      	ldr	r3, [pc, #20]	@ (801bdd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801bdba:	646b      	str	r3, [r5, #68]	@ 0x44
 801bdbc:	4b07      	ldr	r3, [pc, #28]	@ (801bddc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801bdbe:	64ab      	str	r3, [r5, #72]	@ 0x48
 801bdc0:	bd38      	pop	{r3, r4, r5, pc}
 801bdc2:	bf00      	nop
 801bdc4:	20001ec0 	.word	0x20001ec0
 801bdc8:	20000000 	.word	0x20000000
 801bdcc:	08017b27 	.word	0x08017b27
 801bdd0:	200001dc 	.word	0x200001dc
 801bdd4:	20001ec4 	.word	0x20001ec4
 801bdd8:	08017b25 	.word	0x08017b25
 801bddc:	200001e0 	.word	0x200001e0

0801bde0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801bde0:	b538      	push	{r3, r4, r5, lr}
 801bde2:	4c15      	ldr	r4, [pc, #84]	@ (801be38 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801bde4:	4605      	mov	r5, r0
 801bde6:	7823      	ldrb	r3, [r4, #0]
 801bde8:	f3bf 8f5b 	dmb	ish
 801bdec:	07da      	lsls	r2, r3, #31
 801bdee:	d40b      	bmi.n	801be08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801bdf0:	4620      	mov	r0, r4
 801bdf2:	f007 fcdc 	bl	80237ae <__cxa_guard_acquire>
 801bdf6:	b138      	cbz	r0, 801be08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f007 fce4 	bl	80237c6 <__cxa_guard_release>
 801bdfe:	4a0f      	ldr	r2, [pc, #60]	@ (801be3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801be00:	490f      	ldr	r1, [pc, #60]	@ (801be40 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801be02:	4810      	ldr	r0, [pc, #64]	@ (801be44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801be04:	f007 fccc 	bl	80237a0 <__aeabi_atexit>
 801be08:	4c0f      	ldr	r4, [pc, #60]	@ (801be48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801be0a:	7823      	ldrb	r3, [r4, #0]
 801be0c:	f3bf 8f5b 	dmb	ish
 801be10:	07db      	lsls	r3, r3, #31
 801be12:	d40b      	bmi.n	801be2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801be14:	4620      	mov	r0, r4
 801be16:	f007 fcca 	bl	80237ae <__cxa_guard_acquire>
 801be1a:	b138      	cbz	r0, 801be2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801be1c:	4620      	mov	r0, r4
 801be1e:	f007 fcd2 	bl	80237c6 <__cxa_guard_release>
 801be22:	4a06      	ldr	r2, [pc, #24]	@ (801be3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801be24:	4909      	ldr	r1, [pc, #36]	@ (801be4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801be26:	480a      	ldr	r0, [pc, #40]	@ (801be50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801be28:	f007 fcba 	bl	80237a0 <__aeabi_atexit>
 801be2c:	4b05      	ldr	r3, [pc, #20]	@ (801be44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801be2e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801be30:	4b07      	ldr	r3, [pc, #28]	@ (801be50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801be32:	642b      	str	r3, [r5, #64]	@ 0x40
 801be34:	bd38      	pop	{r3, r4, r5, pc}
 801be36:	bf00      	nop
 801be38:	20001ee0 	.word	0x20001ee0
 801be3c:	20000000 	.word	0x20000000
 801be40:	08017b2b 	.word	0x08017b2b
 801be44:	200001fc 	.word	0x200001fc
 801be48:	20001ee4 	.word	0x20001ee4
 801be4c:	08017b29 	.word	0x08017b29
 801be50:	20000200 	.word	0x20000200

0801be54 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801be54:	b510      	push	{r4, lr}
 801be56:	4604      	mov	r4, r0
 801be58:	f7ff ff14 	bl	801bc84 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801be5c:	4620      	mov	r0, r4
 801be5e:	f7ff ff85 	bl	801bd6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801be62:	4620      	mov	r0, r4
 801be64:	f7ff ff48 	bl	801bcf8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801be68:	4620      	mov	r0, r4
 801be6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be6e:	f7ff bfb7 	b.w	801bde0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801be74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801be74:	b538      	push	{r3, r4, r5, lr}
 801be76:	4c15      	ldr	r4, [pc, #84]	@ (801becc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801be78:	4605      	mov	r5, r0
 801be7a:	7823      	ldrb	r3, [r4, #0]
 801be7c:	f3bf 8f5b 	dmb	ish
 801be80:	07da      	lsls	r2, r3, #31
 801be82:	d40b      	bmi.n	801be9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801be84:	4620      	mov	r0, r4
 801be86:	f007 fc92 	bl	80237ae <__cxa_guard_acquire>
 801be8a:	b138      	cbz	r0, 801be9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801be8c:	4620      	mov	r0, r4
 801be8e:	f007 fc9a 	bl	80237c6 <__cxa_guard_release>
 801be92:	4a0f      	ldr	r2, [pc, #60]	@ (801bed0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801be94:	490f      	ldr	r1, [pc, #60]	@ (801bed4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801be96:	4810      	ldr	r0, [pc, #64]	@ (801bed8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801be98:	f007 fc82 	bl	80237a0 <__aeabi_atexit>
 801be9c:	4c0f      	ldr	r4, [pc, #60]	@ (801bedc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801be9e:	7823      	ldrb	r3, [r4, #0]
 801bea0:	f3bf 8f5b 	dmb	ish
 801bea4:	07db      	lsls	r3, r3, #31
 801bea6:	d40b      	bmi.n	801bec0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bea8:	4620      	mov	r0, r4
 801beaa:	f007 fc80 	bl	80237ae <__cxa_guard_acquire>
 801beae:	b138      	cbz	r0, 801bec0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801beb0:	4620      	mov	r0, r4
 801beb2:	f007 fc88 	bl	80237c6 <__cxa_guard_release>
 801beb6:	4a06      	ldr	r2, [pc, #24]	@ (801bed0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801beb8:	4909      	ldr	r1, [pc, #36]	@ (801bee0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801beba:	480a      	ldr	r0, [pc, #40]	@ (801bee4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bebc:	f007 fc70 	bl	80237a0 <__aeabi_atexit>
 801bec0:	4b05      	ldr	r3, [pc, #20]	@ (801bed8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bec2:	666b      	str	r3, [r5, #100]	@ 0x64
 801bec4:	4b07      	ldr	r3, [pc, #28]	@ (801bee4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bec6:	66ab      	str	r3, [r5, #104]	@ 0x68
 801bec8:	bd38      	pop	{r3, r4, r5, pc}
 801beca:	bf00      	nop
 801becc:	20001ec8 	.word	0x20001ec8
 801bed0:	20000000 	.word	0x20000000
 801bed4:	08017b17 	.word	0x08017b17
 801bed8:	200001e4 	.word	0x200001e4
 801bedc:	20001ecc 	.word	0x20001ecc
 801bee0:	08017b15 	.word	0x08017b15
 801bee4:	200001e8 	.word	0x200001e8

0801bee8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801bee8:	b538      	push	{r3, r4, r5, lr}
 801beea:	4c15      	ldr	r4, [pc, #84]	@ (801bf40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801beec:	4605      	mov	r5, r0
 801beee:	7823      	ldrb	r3, [r4, #0]
 801bef0:	f3bf 8f5b 	dmb	ish
 801bef4:	07da      	lsls	r2, r3, #31
 801bef6:	d40b      	bmi.n	801bf10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bef8:	4620      	mov	r0, r4
 801befa:	f007 fc58 	bl	80237ae <__cxa_guard_acquire>
 801befe:	b138      	cbz	r0, 801bf10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bf00:	4620      	mov	r0, r4
 801bf02:	f007 fc60 	bl	80237c6 <__cxa_guard_release>
 801bf06:	4a0f      	ldr	r2, [pc, #60]	@ (801bf44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bf08:	490f      	ldr	r1, [pc, #60]	@ (801bf48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801bf0a:	4810      	ldr	r0, [pc, #64]	@ (801bf4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bf0c:	f007 fc48 	bl	80237a0 <__aeabi_atexit>
 801bf10:	4c0f      	ldr	r4, [pc, #60]	@ (801bf50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801bf12:	7823      	ldrb	r3, [r4, #0]
 801bf14:	f3bf 8f5b 	dmb	ish
 801bf18:	07db      	lsls	r3, r3, #31
 801bf1a:	d40b      	bmi.n	801bf34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f007 fc46 	bl	80237ae <__cxa_guard_acquire>
 801bf22:	b138      	cbz	r0, 801bf34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bf24:	4620      	mov	r0, r4
 801bf26:	f007 fc4e 	bl	80237c6 <__cxa_guard_release>
 801bf2a:	4a06      	ldr	r2, [pc, #24]	@ (801bf44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bf2c:	4909      	ldr	r1, [pc, #36]	@ (801bf54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801bf2e:	480a      	ldr	r0, [pc, #40]	@ (801bf58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bf30:	f007 fc36 	bl	80237a0 <__aeabi_atexit>
 801bf34:	4b05      	ldr	r3, [pc, #20]	@ (801bf4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bf36:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801bf38:	4b07      	ldr	r3, [pc, #28]	@ (801bf58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bf3a:	662b      	str	r3, [r5, #96]	@ 0x60
 801bf3c:	bd38      	pop	{r3, r4, r5, pc}
 801bf3e:	bf00      	nop
 801bf40:	20001ea0 	.word	0x20001ea0
 801bf44:	20000000 	.word	0x20000000
 801bf48:	08017b1b 	.word	0x08017b1b
 801bf4c:	200001bc 	.word	0x200001bc
 801bf50:	20001ea4 	.word	0x20001ea4
 801bf54:	08017b19 	.word	0x08017b19
 801bf58:	200001c0 	.word	0x200001c0

0801bf5c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801bf5c:	b510      	push	{r4, lr}
 801bf5e:	4604      	mov	r4, r0
 801bf60:	f7ff ff88 	bl	801be74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801bf64:	4620      	mov	r0, r4
 801bf66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf6a:	f7ff bfbd 	b.w	801bee8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801bf70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801bf70:	b538      	push	{r3, r4, r5, lr}
 801bf72:	4c15      	ldr	r4, [pc, #84]	@ (801bfc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801bf74:	4605      	mov	r5, r0
 801bf76:	7823      	ldrb	r3, [r4, #0]
 801bf78:	f3bf 8f5b 	dmb	ish
 801bf7c:	07da      	lsls	r2, r3, #31
 801bf7e:	d40b      	bmi.n	801bf98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bf80:	4620      	mov	r0, r4
 801bf82:	f007 fc14 	bl	80237ae <__cxa_guard_acquire>
 801bf86:	b138      	cbz	r0, 801bf98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f007 fc1c 	bl	80237c6 <__cxa_guard_release>
 801bf8e:	4a0f      	ldr	r2, [pc, #60]	@ (801bfcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bf90:	490f      	ldr	r1, [pc, #60]	@ (801bfd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801bf92:	4810      	ldr	r0, [pc, #64]	@ (801bfd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bf94:	f007 fc04 	bl	80237a0 <__aeabi_atexit>
 801bf98:	4c0f      	ldr	r4, [pc, #60]	@ (801bfd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801bf9a:	7823      	ldrb	r3, [r4, #0]
 801bf9c:	f3bf 8f5b 	dmb	ish
 801bfa0:	07db      	lsls	r3, r3, #31
 801bfa2:	d40b      	bmi.n	801bfbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	f007 fc02 	bl	80237ae <__cxa_guard_acquire>
 801bfaa:	b138      	cbz	r0, 801bfbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bfac:	4620      	mov	r0, r4
 801bfae:	f007 fc0a 	bl	80237c6 <__cxa_guard_release>
 801bfb2:	4a06      	ldr	r2, [pc, #24]	@ (801bfcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bfb4:	4909      	ldr	r1, [pc, #36]	@ (801bfdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801bfb6:	480a      	ldr	r0, [pc, #40]	@ (801bfe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bfb8:	f007 fbf2 	bl	80237a0 <__aeabi_atexit>
 801bfbc:	4b05      	ldr	r3, [pc, #20]	@ (801bfd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bfbe:	676b      	str	r3, [r5, #116]	@ 0x74
 801bfc0:	4b07      	ldr	r3, [pc, #28]	@ (801bfe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bfc2:	67ab      	str	r3, [r5, #120]	@ 0x78
 801bfc4:	bd38      	pop	{r3, r4, r5, pc}
 801bfc6:	bf00      	nop
 801bfc8:	20001e98 	.word	0x20001e98
 801bfcc:	20000000 	.word	0x20000000
 801bfd0:	08017b0f 	.word	0x08017b0f
 801bfd4:	200001b4 	.word	0x200001b4
 801bfd8:	20001e9c 	.word	0x20001e9c
 801bfdc:	08017b0d 	.word	0x08017b0d
 801bfe0:	200001b8 	.word	0x200001b8

0801bfe4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801bfe4:	b538      	push	{r3, r4, r5, lr}
 801bfe6:	4c15      	ldr	r4, [pc, #84]	@ (801c03c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801bfe8:	4605      	mov	r5, r0
 801bfea:	7823      	ldrb	r3, [r4, #0]
 801bfec:	f3bf 8f5b 	dmb	ish
 801bff0:	07da      	lsls	r2, r3, #31
 801bff2:	d40b      	bmi.n	801c00c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801bff4:	4620      	mov	r0, r4
 801bff6:	f007 fbda 	bl	80237ae <__cxa_guard_acquire>
 801bffa:	b138      	cbz	r0, 801c00c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801bffc:	4620      	mov	r0, r4
 801bffe:	f007 fbe2 	bl	80237c6 <__cxa_guard_release>
 801c002:	4a0f      	ldr	r2, [pc, #60]	@ (801c040 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c004:	490f      	ldr	r1, [pc, #60]	@ (801c044 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c006:	4810      	ldr	r0, [pc, #64]	@ (801c048 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c008:	f007 fbca 	bl	80237a0 <__aeabi_atexit>
 801c00c:	4c0f      	ldr	r4, [pc, #60]	@ (801c04c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c00e:	7823      	ldrb	r3, [r4, #0]
 801c010:	f3bf 8f5b 	dmb	ish
 801c014:	07db      	lsls	r3, r3, #31
 801c016:	d40b      	bmi.n	801c030 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c018:	4620      	mov	r0, r4
 801c01a:	f007 fbc8 	bl	80237ae <__cxa_guard_acquire>
 801c01e:	b138      	cbz	r0, 801c030 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c020:	4620      	mov	r0, r4
 801c022:	f007 fbd0 	bl	80237c6 <__cxa_guard_release>
 801c026:	4a06      	ldr	r2, [pc, #24]	@ (801c040 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c028:	4909      	ldr	r1, [pc, #36]	@ (801c050 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c02a:	480a      	ldr	r0, [pc, #40]	@ (801c054 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c02c:	f007 fbb8 	bl	80237a0 <__aeabi_atexit>
 801c030:	4b05      	ldr	r3, [pc, #20]	@ (801c048 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c032:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801c034:	4b07      	ldr	r3, [pc, #28]	@ (801c054 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c036:	672b      	str	r3, [r5, #112]	@ 0x70
 801c038:	bd38      	pop	{r3, r4, r5, pc}
 801c03a:	bf00      	nop
 801c03c:	20001e90 	.word	0x20001e90
 801c040:	20000000 	.word	0x20000000
 801c044:	08017b13 	.word	0x08017b13
 801c048:	200001ac 	.word	0x200001ac
 801c04c:	20001e94 	.word	0x20001e94
 801c050:	08017b11 	.word	0x08017b11
 801c054:	200001b0 	.word	0x200001b0

0801c058 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801c058:	b510      	push	{r4, lr}
 801c05a:	4604      	mov	r4, r0
 801c05c:	f7ff ff88 	bl	801bf70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c060:	4620      	mov	r0, r4
 801c062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c066:	f7ff bfbd 	b.w	801bfe4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801c06a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801c06a:	b510      	push	{r4, lr}
 801c06c:	4604      	mov	r4, r0
 801c06e:	f7ff fff3 	bl	801c058 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801c072:	4620      	mov	r0, r4
 801c074:	f7ff ff72 	bl	801bf5c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801c078:	4620      	mov	r0, r4
 801c07a:	f7ff fdf9 	bl	801bc70 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801c07e:	4620      	mov	r0, r4
 801c080:	f7ff fcfa 	bl	801ba78 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801c084:	4620      	mov	r0, r4
 801c086:	f7ff fd75 	bl	801bb74 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801c08a:	4620      	mov	r0, r4
 801c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c090:	f7ff bee0 	b.w	801be54 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801c094 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801c094:	b538      	push	{r3, r4, r5, lr}
 801c096:	4c0b      	ldr	r4, [pc, #44]	@ (801c0c4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801c098:	4605      	mov	r5, r0
 801c09a:	7823      	ldrb	r3, [r4, #0]
 801c09c:	f3bf 8f5b 	dmb	ish
 801c0a0:	07db      	lsls	r3, r3, #31
 801c0a2:	d40b      	bmi.n	801c0bc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	f007 fb82 	bl	80237ae <__cxa_guard_acquire>
 801c0aa:	b138      	cbz	r0, 801c0bc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	f007 fb8a 	bl	80237c6 <__cxa_guard_release>
 801c0b2:	4a05      	ldr	r2, [pc, #20]	@ (801c0c8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801c0b4:	4905      	ldr	r1, [pc, #20]	@ (801c0cc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801c0b6:	4806      	ldr	r0, [pc, #24]	@ (801c0d0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801c0b8:	f007 fb72 	bl	80237a0 <__aeabi_atexit>
 801c0bc:	4b04      	ldr	r3, [pc, #16]	@ (801c0d0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801c0be:	67eb      	str	r3, [r5, #124]	@ 0x7c
 801c0c0:	bd38      	pop	{r3, r4, r5, pc}
 801c0c2:	bf00      	nop
 801c0c4:	20001e84 	.word	0x20001e84
 801c0c8:	20000000 	.word	0x20000000
 801c0cc:	08017b0b 	.word	0x08017b0b
 801c0d0:	200001a4 	.word	0x200001a4

0801c0d4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 801c0d4:	b538      	push	{r3, r4, r5, lr}
 801c0d6:	4c0b      	ldr	r4, [pc, #44]	@ (801c104 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 801c0d8:	4605      	mov	r5, r0
 801c0da:	7823      	ldrb	r3, [r4, #0]
 801c0dc:	f3bf 8f5b 	dmb	ish
 801c0e0:	07db      	lsls	r3, r3, #31
 801c0e2:	d40b      	bmi.n	801c0fc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	f007 fb62 	bl	80237ae <__cxa_guard_acquire>
 801c0ea:	b138      	cbz	r0, 801c0fc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	f007 fb6a 	bl	80237c6 <__cxa_guard_release>
 801c0f2:	4a05      	ldr	r2, [pc, #20]	@ (801c108 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 801c0f4:	4905      	ldr	r1, [pc, #20]	@ (801c10c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801c0f6:	4806      	ldr	r0, [pc, #24]	@ (801c110 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801c0f8:	f007 fb52 	bl	80237a0 <__aeabi_atexit>
 801c0fc:	4b04      	ldr	r3, [pc, #16]	@ (801c110 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801c0fe:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 801c102:	bd38      	pop	{r3, r4, r5, pc}
 801c104:	20001e88 	.word	0x20001e88
 801c108:	20000000 	.word	0x20000000
 801c10c:	08017b09 	.word	0x08017b09
 801c110:	200001a8 	.word	0x200001a8

0801c114 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 801c114:	b570      	push	{r4, r5, r6, lr}
 801c116:	4d0d      	ldr	r5, [pc, #52]	@ (801c14c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801c118:	4606      	mov	r6, r0
 801c11a:	4c0d      	ldr	r4, [pc, #52]	@ (801c150 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801c11c:	782b      	ldrb	r3, [r5, #0]
 801c11e:	f3bf 8f5b 	dmb	ish
 801c122:	f013 0f01 	tst.w	r3, #1
 801c126:	d10d      	bne.n	801c144 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801c128:	4628      	mov	r0, r5
 801c12a:	f007 fb40 	bl	80237ae <__cxa_guard_acquire>
 801c12e:	b148      	cbz	r0, 801c144 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801c130:	4b08      	ldr	r3, [pc, #32]	@ (801c154 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801c132:	4628      	mov	r0, r5
 801c134:	6023      	str	r3, [r4, #0]
 801c136:	f007 fb46 	bl	80237c6 <__cxa_guard_release>
 801c13a:	4a07      	ldr	r2, [pc, #28]	@ (801c158 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801c13c:	4620      	mov	r0, r4
 801c13e:	4907      	ldr	r1, [pc, #28]	@ (801c15c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 801c140:	f007 fb2e 	bl	80237a0 <__aeabi_atexit>
 801c144:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 801c148:	bd70      	pop	{r4, r5, r6, pc}
 801c14a:	bf00      	nop
 801c14c:	20001e8c 	.word	0x20001e8c
 801c150:	20002004 	.word	0x20002004
 801c154:	080260ec 	.word	0x080260ec
 801c158:	20000000 	.word	0x20000000
 801c15c:	08017b07 	.word	0x08017b07

0801c160 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 801c160:	b510      	push	{r4, lr}
 801c162:	4604      	mov	r4, r0
 801c164:	f7ff ff96 	bl	801c094 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 801c168:	4620      	mov	r0, r4
 801c16a:	f7ff ffb3 	bl	801c0d4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 801c16e:	4620      	mov	r0, r4
 801c170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c174:	f7ff bfce 	b.w	801c114 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0801c178 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 801c178:	b570      	push	{r4, r5, r6, lr}
 801c17a:	4d0d      	ldr	r5, [pc, #52]	@ (801c1b0 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 801c17c:	4606      	mov	r6, r0
 801c17e:	4c0d      	ldr	r4, [pc, #52]	@ (801c1b4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 801c180:	782b      	ldrb	r3, [r5, #0]
 801c182:	f3bf 8f5b 	dmb	ish
 801c186:	f013 0f01 	tst.w	r3, #1
 801c18a:	d10d      	bne.n	801c1a8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 801c18c:	4628      	mov	r0, r5
 801c18e:	f007 fb0e 	bl	80237ae <__cxa_guard_acquire>
 801c192:	b148      	cbz	r0, 801c1a8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 801c194:	4b08      	ldr	r3, [pc, #32]	@ (801c1b8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 801c196:	4628      	mov	r0, r5
 801c198:	6023      	str	r3, [r4, #0]
 801c19a:	f007 fb14 	bl	80237c6 <__cxa_guard_release>
 801c19e:	4a07      	ldr	r2, [pc, #28]	@ (801c1bc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 801c1a0:	4620      	mov	r0, r4
 801c1a2:	4907      	ldr	r1, [pc, #28]	@ (801c1c0 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x48>)
 801c1a4:	f007 fafc 	bl	80237a0 <__aeabi_atexit>
 801c1a8:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 801c1ac:	bd70      	pop	{r4, r5, r6, pc}
 801c1ae:	bf00      	nop
 801c1b0:	20001e80 	.word	0x20001e80
 801c1b4:	20001f00 	.word	0x20001f00
 801c1b8:	08026108 	.word	0x08026108
 801c1bc:	20000000 	.word	0x20000000
 801c1c0:	08017b05 	.word	0x08017b05

0801c1c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 801c1cc:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 801c1d0:	2d00      	cmp	r5, #0
 801c1d2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 801c1d6:	fb05 4c0e 	mla	ip, r5, lr, r4
 801c1da:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 801c1de:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 801c1e2:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801c1e6:	eb02 0a0c 	add.w	sl, r2, ip
 801c1ea:	8808      	ldrh	r0, [r1, #0]
 801c1ec:	f2c0 80b0 	blt.w	801c350 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c1f0:	45ab      	cmp	fp, r5
 801c1f2:	f340 80ad 	ble.w	801c350 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c1f6:	2c00      	cmp	r4, #0
 801c1f8:	f2c0 80a8 	blt.w	801c34c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c1fc:	45a6      	cmp	lr, r4
 801c1fe:	f340 80a5 	ble.w	801c34c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c202:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c206:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801c20a:	1c62      	adds	r2, r4, #1
 801c20c:	f100 80a3 	bmi.w	801c356 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c210:	4596      	cmp	lr, r2
 801c212:	f340 80a0 	ble.w	801c356 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c216:	f1b9 0f00 	cmp.w	r9, #0
 801c21a:	f000 809c 	beq.w	801c356 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c21e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c222:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801c226:	3501      	adds	r5, #1
 801c228:	f100 8099 	bmi.w	801c35e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c22c:	45ab      	cmp	fp, r5
 801c22e:	f340 8096 	ble.w	801c35e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c232:	2f00      	cmp	r7, #0
 801c234:	f000 8093 	beq.w	801c35e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c238:	2c00      	cmp	r4, #0
 801c23a:	f2c0 808e 	blt.w	801c35a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c23e:	45a6      	cmp	lr, r4
 801c240:	f340 808b 	ble.w	801c35a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c244:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801c248:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801c24c:	3401      	adds	r4, #1
 801c24e:	f100 8089 	bmi.w	801c364 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c252:	45a6      	cmp	lr, r4
 801c254:	f340 8086 	ble.w	801c364 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c258:	f1b9 0f00 	cmp.w	r9, #0
 801c25c:	f000 8082 	beq.w	801c364 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c260:	44d6      	add	lr, sl
 801c262:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c266:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c26a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801c26e:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 801c272:	fb19 fe07 	smulbb	lr, r9, r7
 801c276:	f1c7 0210 	rsb	r2, r7, #16
 801c27a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801c27e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801c282:	eba2 0209 	sub.w	r2, r2, r9
 801c286:	ea44 0808 	orr.w	r8, r4, r8
 801c28a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801c28e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801c292:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801c296:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801c29a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801c29e:	ea44 0c0c 	orr.w	ip, r4, ip
 801c2a2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801c2a6:	fb04 f40c 	mul.w	r4, r4, ip
 801c2aa:	fb02 4808 	mla	r8, r2, r8, r4
 801c2ae:	041a      	lsls	r2, r3, #16
 801c2b0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801c2b4:	b2b4      	uxth	r4, r6
 801c2b6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801c2ba:	43f6      	mvns	r6, r6
 801c2bc:	4313      	orrs	r3, r2
 801c2be:	042a      	lsls	r2, r5, #16
 801c2c0:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801c2c4:	b2f6      	uxtb	r6, r6
 801c2c6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801c2ca:	fb0e 8303 	mla	r3, lr, r3, r8
 801c2ce:	432a      	orrs	r2, r5
 801c2d0:	fb07 3202 	mla	r2, r7, r2, r3
 801c2d4:	10c7      	asrs	r7, r0, #3
 801c2d6:	0d53      	lsrs	r3, r2, #21
 801c2d8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c2dc:	0952      	lsrs	r2, r2, #5
 801c2de:	fb17 f706 	smulbb	r7, r7, r6
 801c2e2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c2e6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801c2ea:	431a      	orrs	r2, r3
 801c2ec:	b293      	uxth	r3, r2
 801c2ee:	1202      	asrs	r2, r0, #8
 801c2f0:	121d      	asrs	r5, r3, #8
 801c2f2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801c2f6:	00c0      	lsls	r0, r0, #3
 801c2f8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801c2fc:	fb12 f206 	smulbb	r2, r2, r6
 801c300:	b2c0      	uxtb	r0, r0
 801c302:	fb05 2504 	mla	r5, r5, r4, r2
 801c306:	10da      	asrs	r2, r3, #3
 801c308:	fb10 f006 	smulbb	r0, r0, r6
 801c30c:	00db      	lsls	r3, r3, #3
 801c30e:	b2ad      	uxth	r5, r5
 801c310:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801c314:	b2db      	uxtb	r3, r3
 801c316:	fb02 7204 	mla	r2, r2, r4, r7
 801c31a:	fb03 0004 	mla	r0, r3, r4, r0
 801c31e:	1c6b      	adds	r3, r5, #1
 801c320:	b292      	uxth	r2, r2
 801c322:	b280      	uxth	r0, r0
 801c324:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c328:	1c43      	adds	r3, r0, #1
 801c32a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801c32e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c332:	1c50      	adds	r0, r2, #1
 801c334:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c338:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c33c:	0952      	lsrs	r2, r2, #5
 801c33e:	432b      	orrs	r3, r5
 801c340:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c344:	4313      	orrs	r3, r2
 801c346:	800b      	strh	r3, [r1, #0]
 801c348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c34c:	4680      	mov	r8, r0
 801c34e:	e75c      	b.n	801c20a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801c350:	4684      	mov	ip, r0
 801c352:	4680      	mov	r8, r0
 801c354:	e767      	b.n	801c226 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c356:	4684      	mov	ip, r0
 801c358:	e765      	b.n	801c226 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c35a:	4605      	mov	r5, r0
 801c35c:	e776      	b.n	801c24c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801c35e:	4603      	mov	r3, r0
 801c360:	4605      	mov	r5, r0
 801c362:	e782      	b.n	801c26a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c364:	4603      	mov	r3, r0
 801c366:	e780      	b.n	801c26a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801c368 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c36c:	b099      	sub	sp, #100	@ 0x64
 801c36e:	9215      	str	r2, [sp, #84]	@ 0x54
 801c370:	9309      	str	r3, [sp, #36]	@ 0x24
 801c372:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801c374:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 801c378:	9016      	str	r0, [sp, #88]	@ 0x58
 801c37a:	930d      	str	r3, [sp, #52]	@ 0x34
 801c37c:	6850      	ldr	r0, [r2, #4]
 801c37e:	910c      	str	r1, [sp, #48]	@ 0x30
 801c380:	6812      	ldr	r2, [r2, #0]
 801c382:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801c386:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 801c38a:	fb00 1303 	mla	r3, r0, r3, r1
 801c38e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801c392:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c398:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801c39a:	685e      	ldr	r6, [r3, #4]
 801c39c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c39e:	3604      	adds	r6, #4
 801c3a0:	43db      	mvns	r3, r3
 801c3a2:	b2db      	uxtb	r3, r3
 801c3a4:	930a      	str	r3, [sp, #40]	@ 0x28
 801c3a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	dc03      	bgt.n	801c3b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c3ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	f340 8225 	ble.w	801c7fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c3b4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801c3b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c3ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c3be:	1e48      	subs	r0, r1, #1
 801c3c0:	1e57      	subs	r7, r2, #1
 801c3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	f340 80e3 	ble.w	801c590 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c3ca:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801c3ce:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c3d2:	d406      	bmi.n	801c3e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c3d4:	4584      	cmp	ip, r0
 801c3d6:	da04      	bge.n	801c3e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	db02      	blt.n	801c3e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c3dc:	42bb      	cmp	r3, r7
 801c3de:	f2c0 80d8 	blt.w	801c592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c3e2:	f11c 0c01 	adds.w	ip, ip, #1
 801c3e6:	f100 80c9 	bmi.w	801c57c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c3ea:	4561      	cmp	r1, ip
 801c3ec:	f2c0 80c6 	blt.w	801c57c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c3f0:	3301      	adds	r3, #1
 801c3f2:	f100 80c3 	bmi.w	801c57c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c3f6:	429a      	cmp	r2, r3
 801c3f8:	f2c0 80c0 	blt.w	801c57c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c3fc:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801c400:	4647      	mov	r7, r8
 801c402:	f1bb 0f00 	cmp.w	fp, #0
 801c406:	f340 80e3 	ble.w	801c5d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801c40a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801c40c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c410:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801c412:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801c416:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c41a:	ea5f 422a 	movs.w	r2, sl, asr #16
 801c41e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c422:	689b      	ldr	r3, [r3, #8]
 801c424:	f100 8121 	bmi.w	801c66a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c428:	f103 39ff 	add.w	r9, r3, #4294967295
 801c42c:	454a      	cmp	r2, r9
 801c42e:	f280 811c 	bge.w	801c66a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c432:	f1bc 0f00 	cmp.w	ip, #0
 801c436:	f2c0 8118 	blt.w	801c66a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c43a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c43e:	45cc      	cmp	ip, r9
 801c440:	f280 8113 	bge.w	801c66a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c444:	b21b      	sxth	r3, r3
 801c446:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c448:	fb0c 2203 	mla	r2, ip, r3, r2
 801c44c:	eb04 0902 	add.w	r9, r4, r2
 801c450:	5ca2      	ldrb	r2, [r4, r2]
 801c452:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801c456:	2800      	cmp	r0, #0
 801c458:	f000 80fe 	beq.w	801c658 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801c45c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c460:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c464:	9211      	str	r2, [sp, #68]	@ 0x44
 801c466:	b151      	cbz	r1, 801c47e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c468:	eb09 0203 	add.w	r2, r9, r3
 801c46c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c470:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c474:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c476:	7853      	ldrb	r3, [r2, #1]
 801c478:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c47c:	9312      	str	r3, [sp, #72]	@ 0x48
 801c47e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c480:	fb10 f201 	smulbb	r2, r0, r1
 801c484:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c486:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c48a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801c48e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801c492:	10d2      	asrs	r2, r2, #3
 801c494:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801c498:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801c49c:	ea4c 0c03 	orr.w	ip, ip, r3
 801c4a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c4a2:	041b      	lsls	r3, r3, #16
 801c4a4:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801c4a8:	4323      	orrs	r3, r4
 801c4aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c4ac:	4353      	muls	r3, r2
 801c4ae:	fb09 330c 	mla	r3, r9, ip, r3
 801c4b2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c4b6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801c4ba:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801c4be:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c4c2:	f1c1 0c10 	rsb	ip, r1, #16
 801c4c6:	ebac 0c00 	sub.w	ip, ip, r0
 801c4ca:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c4ce:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c4d2:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c4d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c4d8:	0418      	lsls	r0, r3, #16
 801c4da:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801c4de:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801c4e2:	4318      	orrs	r0, r3
 801c4e4:	fb02 c200 	mla	r2, r2, r0, ip
 801c4e8:	8838      	ldrh	r0, [r7, #0]
 801c4ea:	0d53      	lsrs	r3, r2, #21
 801c4ec:	0952      	lsrs	r2, r2, #5
 801c4ee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c4f2:	1201      	asrs	r1, r0, #8
 801c4f4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801c4f8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801c4fc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801c500:	00c0      	lsls	r0, r0, #3
 801c502:	431a      	orrs	r2, r3
 801c504:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801c508:	fb11 f104 	smulbb	r1, r1, r4
 801c50c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801c510:	b292      	uxth	r2, r2
 801c512:	fb1e fe04 	smulbb	lr, lr, r4
 801c516:	b2c0      	uxtb	r0, r0
 801c518:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801c51c:	fb10 f004 	smulbb	r0, r0, r4
 801c520:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c524:	fb0c 1c03 	mla	ip, ip, r3, r1
 801c528:	10d1      	asrs	r1, r2, #3
 801c52a:	00d2      	lsls	r2, r2, #3
 801c52c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801c530:	fa1f fc8c 	uxth.w	ip, ip
 801c534:	b2d2      	uxtb	r2, r2
 801c536:	fb01 e103 	mla	r1, r1, r3, lr
 801c53a:	fb02 0303 	mla	r3, r2, r3, r0
 801c53e:	b289      	uxth	r1, r1
 801c540:	b29a      	uxth	r2, r3
 801c542:	f10c 0301 	add.w	r3, ip, #1
 801c546:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c54a:	1c53      	adds	r3, r2, #1
 801c54c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c550:	1c4a      	adds	r2, r1, #1
 801c552:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c556:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c55a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c55e:	0949      	lsrs	r1, r1, #5
 801c560:	ea43 030c 	orr.w	r3, r3, ip
 801c564:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801c568:	430b      	orrs	r3, r1
 801c56a:	803b      	strh	r3, [r7, #0]
 801c56c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c56e:	3702      	adds	r7, #2
 801c570:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c574:	449a      	add	sl, r3
 801c576:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c578:	441d      	add	r5, r3
 801c57a:	e742      	b.n	801c402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c57c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c57e:	f108 0802 	add.w	r8, r8, #2
 801c582:	449a      	add	sl, r3
 801c584:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c586:	441d      	add	r5, r3
 801c588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c58a:	3b01      	subs	r3, #1
 801c58c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c58e:	e718      	b.n	801c3c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c590:	d023      	beq.n	801c5da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801c592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c594:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801c596:	3b01      	subs	r3, #1
 801c598:	fb00 a003 	mla	r0, r0, r3, sl
 801c59c:	1400      	asrs	r0, r0, #16
 801c59e:	f53f af2d 	bmi.w	801c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c5a2:	3901      	subs	r1, #1
 801c5a4:	4288      	cmp	r0, r1
 801c5a6:	f6bf af29 	bge.w	801c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c5aa:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801c5ac:	fb01 5303 	mla	r3, r1, r3, r5
 801c5b0:	141b      	asrs	r3, r3, #16
 801c5b2:	f53f af23 	bmi.w	801c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c5b6:	3a01      	subs	r2, #1
 801c5b8:	4293      	cmp	r3, r2
 801c5ba:	f6bf af1f 	bge.w	801c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c5be:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801c5c2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 801c5c6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801c5ca:	f1be 0f00 	cmp.w	lr, #0
 801c5ce:	dc6c      	bgt.n	801c6aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5d2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c5d6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801c5da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	f340 810e 	ble.w	801c7fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c5e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c5e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c5e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5f0:	eef0 6a62 	vmov.f32	s13, s5
 801c5f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c5f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c600:	ee16 aa90 	vmov	sl, s13
 801c604:	eef0 6a43 	vmov.f32	s13, s6
 801c608:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c60c:	ee16 5a90 	vmov	r5, s13
 801c610:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c614:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c618:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c61c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c620:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c624:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c628:	ee12 2a90 	vmov	r2, s5
 801c62c:	eef0 2a47 	vmov.f32	s5, s14
 801c630:	fb92 f3f3 	sdiv	r3, r2, r3
 801c634:	ee13 2a10 	vmov	r2, s6
 801c638:	9325      	str	r3, [sp, #148]	@ 0x94
 801c63a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c63c:	eeb0 3a67 	vmov.f32	s6, s15
 801c640:	fb92 f3f3 	sdiv	r3, r2, r3
 801c644:	9326      	str	r3, [sp, #152]	@ 0x98
 801c646:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c648:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c64a:	3b01      	subs	r3, #1
 801c64c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c64e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c650:	bf08      	it	eq
 801c652:	4613      	moveq	r3, r2
 801c654:	9309      	str	r3, [sp, #36]	@ 0x24
 801c656:	e6a6      	b.n	801c3a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c658:	2900      	cmp	r1, #0
 801c65a:	f43f af10 	beq.w	801c47e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c65e:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c662:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c666:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c668:	e709      	b.n	801c47e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c66a:	f112 0901 	adds.w	r9, r2, #1
 801c66e:	f53f af7d 	bmi.w	801c56c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c672:	454b      	cmp	r3, r9
 801c674:	f6ff af7a 	blt.w	801c56c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c678:	f11c 0901 	adds.w	r9, ip, #1
 801c67c:	f53f af76 	bmi.w	801c56c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c680:	45ce      	cmp	lr, r9
 801c682:	f6ff af73 	blt.w	801c56c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c686:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c688:	b21b      	sxth	r3, r3
 801c68a:	9202      	str	r2, [sp, #8]
 801c68c:	fa0f f28e 	sxth.w	r2, lr
 801c690:	9300      	str	r3, [sp, #0]
 801c692:	4633      	mov	r3, r6
 801c694:	9201      	str	r2, [sp, #4]
 801c696:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c698:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c69c:	e9cd c003 	strd	ip, r0, [sp, #12]
 801c6a0:	4639      	mov	r1, r7
 801c6a2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801c6a4:	f7ff fd8e 	bl	801c1c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801c6a8:	e760      	b.n	801c56c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c6aa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801c6ac:	ea4f 422a 	mov.w	r2, sl, asr #16
 801c6b0:	1429      	asrs	r1, r5, #16
 801c6b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c6b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c6b8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801c6bc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c6c0:	fb03 2101 	mla	r1, r3, r1, r2
 801c6c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c6c6:	440a      	add	r2, r1
 801c6c8:	5c61      	ldrb	r1, [r4, r1]
 801c6ca:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801c6ce:	f1bc 0f00 	cmp.w	ip, #0
 801c6d2:	f000 808c 	beq.w	801c7ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801c6d6:	7857      	ldrb	r7, [r2, #1]
 801c6d8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801c6dc:	9413      	str	r4, [sp, #76]	@ 0x4c
 801c6de:	b140      	cbz	r0, 801c6f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c6e0:	18d7      	adds	r7, r2, r3
 801c6e2:	5cd3      	ldrb	r3, [r2, r3]
 801c6e4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c6e8:	9310      	str	r3, [sp, #64]	@ 0x40
 801c6ea:	787b      	ldrb	r3, [r7, #1]
 801c6ec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c6f0:	9314      	str	r3, [sp, #80]	@ 0x50
 801c6f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c6f4:	fb1c f200 	smulbb	r2, ip, r0
 801c6f8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c6fa:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c6fe:	041f      	lsls	r7, r3, #16
 801c700:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801c704:	10d2      	asrs	r2, r2, #3
 801c706:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 801c70a:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 801c70e:	431f      	orrs	r7, r3
 801c710:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801c714:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c716:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c718:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c71a:	041b      	lsls	r3, r3, #16
 801c71c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801c720:	ea43 030b 	orr.w	r3, r3, fp
 801c724:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c728:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801c72c:	4353      	muls	r3, r2
 801c72e:	fb04 3707 	mla	r7, r4, r7, r3
 801c732:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801c736:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c738:	ea43 0b01 	orr.w	fp, r3, r1
 801c73c:	f1c0 0110 	rsb	r1, r0, #16
 801c740:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c742:	eba1 0c0c 	sub.w	ip, r1, ip
 801c746:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c74a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c74e:	fb0c 770b 	mla	r7, ip, fp, r7
 801c752:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c756:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 801c75a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801c75e:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c762:	fb02 770c 	mla	r7, r2, ip, r7
 801c766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c768:	0d79      	lsrs	r1, r7, #21
 801c76a:	8812      	ldrh	r2, [r2, #0]
 801c76c:	097f      	lsrs	r7, r7, #5
 801c76e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801c772:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801c776:	430f      	orrs	r7, r1
 801c778:	1211      	asrs	r1, r2, #8
 801c77a:	b2bb      	uxth	r3, r7
 801c77c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801c780:	10d7      	asrs	r7, r2, #3
 801c782:	fb11 f104 	smulbb	r1, r1, r4
 801c786:	1218      	asrs	r0, r3, #8
 801c788:	00d2      	lsls	r2, r2, #3
 801c78a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c78e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801c792:	fb17 f704 	smulbb	r7, r7, r4
 801c796:	b2d2      	uxtb	r2, r2
 801c798:	fb00 1009 	mla	r0, r0, r9, r1
 801c79c:	10d9      	asrs	r1, r3, #3
 801c79e:	fb12 f204 	smulbb	r2, r2, r4
 801c7a2:	00db      	lsls	r3, r3, #3
 801c7a4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801c7a8:	b280      	uxth	r0, r0
 801c7aa:	b2db      	uxtb	r3, r3
 801c7ac:	fb01 7109 	mla	r1, r1, r9, r7
 801c7b0:	fb03 2309 	mla	r3, r3, r9, r2
 801c7b4:	1c42      	adds	r2, r0, #1
 801c7b6:	b289      	uxth	r1, r1
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c7be:	1c4f      	adds	r7, r1, #1
 801c7c0:	1c5a      	adds	r2, r3, #1
 801c7c2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801c7c6:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801c7ca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7d0:	0949      	lsrs	r1, r1, #5
 801c7d2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c7d6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801c7da:	4310      	orrs	r0, r2
 801c7dc:	4308      	orrs	r0, r1
 801c7de:	f823 0b02 	strh.w	r0, [r3], #2
 801c7e2:	930e      	str	r3, [sp, #56]	@ 0x38
 801c7e4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c7e6:	449a      	add	sl, r3
 801c7e8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c7ea:	441d      	add	r5, r3
 801c7ec:	e6ed      	b.n	801c5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801c7ee:	2800      	cmp	r0, #0
 801c7f0:	f43f af7f 	beq.w	801c6f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c7f4:	5cd3      	ldrb	r3, [r2, r3]
 801c7f6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c7fa:	9310      	str	r3, [sp, #64]	@ 0x40
 801c7fc:	e779      	b.n	801c6f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c7fe:	b019      	add	sp, #100	@ 0x64
 801c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c804 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801c804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c808:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 801c80c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c810:	f1b8 0f00 	cmp.w	r8, #0
 801c814:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 801c818:	fb08 470e 	mla	r7, r8, lr, r4
 801c81c:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 801c820:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801c824:	eb02 0907 	add.w	r9, r2, r7
 801c828:	8808      	ldrh	r0, [r1, #0]
 801c82a:	db67      	blt.n	801c8fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801c82c:	45c2      	cmp	sl, r8
 801c82e:	dd65      	ble.n	801c8fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801c830:	2c00      	cmp	r4, #0
 801c832:	db61      	blt.n	801c8f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801c834:	45a6      	cmp	lr, r4
 801c836:	dd5f      	ble.n	801c8f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801c838:	5dd2      	ldrb	r2, [r2, r7]
 801c83a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801c83e:	1c62      	adds	r2, r4, #1
 801c840:	d45f      	bmi.n	801c902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801c842:	4596      	cmp	lr, r2
 801c844:	dd5d      	ble.n	801c902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801c846:	2d00      	cmp	r5, #0
 801c848:	d05b      	beq.n	801c902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801c84a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c84e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801c852:	f118 0801 	adds.w	r8, r8, #1
 801c856:	d458      	bmi.n	801c90a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801c858:	45c2      	cmp	sl, r8
 801c85a:	dd56      	ble.n	801c90a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801c85c:	2e00      	cmp	r6, #0
 801c85e:	d054      	beq.n	801c90a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801c860:	2c00      	cmp	r4, #0
 801c862:	db50      	blt.n	801c906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801c864:	45a6      	cmp	lr, r4
 801c866:	dd4e      	ble.n	801c906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801c868:	f819 200e 	ldrb.w	r2, [r9, lr]
 801c86c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801c870:	3401      	adds	r4, #1
 801c872:	d407      	bmi.n	801c884 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c874:	45a6      	cmp	lr, r4
 801c876:	dd05      	ble.n	801c884 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c878:	b125      	cbz	r5, 801c884 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c87a:	44ce      	add	lr, r9
 801c87c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801c880:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801c884:	fb15 f406 	smulbb	r4, r5, r6
 801c888:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801c88c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801c890:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801c894:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801c898:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801c89c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801c8a0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801c8a4:	ea43 0c0c 	orr.w	ip, r3, ip
 801c8a8:	f1c6 0310 	rsb	r3, r6, #16
 801c8ac:	ea4e 0707 	orr.w	r7, lr, r7
 801c8b0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801c8b4:	1b5b      	subs	r3, r3, r5
 801c8b6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801c8ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c8be:	437d      	muls	r5, r7
 801c8c0:	fb03 5c0c 	mla	ip, r3, ip, r5
 801c8c4:	0403      	lsls	r3, r0, #16
 801c8c6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801c8ca:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801c8ce:	4318      	orrs	r0, r3
 801c8d0:	0413      	lsls	r3, r2, #16
 801c8d2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801c8d6:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801c8da:	fb04 c000 	mla	r0, r4, r0, ip
 801c8de:	4313      	orrs	r3, r2
 801c8e0:	fb06 0003 	mla	r0, r6, r3, r0
 801c8e4:	0d43      	lsrs	r3, r0, #21
 801c8e6:	0940      	lsrs	r0, r0, #5
 801c8e8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c8ec:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801c8f0:	4318      	orrs	r0, r3
 801c8f2:	8008      	strh	r0, [r1, #0]
 801c8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8f8:	4684      	mov	ip, r0
 801c8fa:	e7a0      	b.n	801c83e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801c8fc:	4607      	mov	r7, r0
 801c8fe:	4684      	mov	ip, r0
 801c900:	e7a7      	b.n	801c852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801c902:	4607      	mov	r7, r0
 801c904:	e7a5      	b.n	801c852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801c906:	4602      	mov	r2, r0
 801c908:	e7b2      	b.n	801c870 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801c90a:	4602      	mov	r2, r0
 801c90c:	e7ba      	b.n	801c884 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801c90e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c90e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c912:	b093      	sub	sp, #76	@ 0x4c
 801c914:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c918:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c91a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c91c:	9010      	str	r0, [sp, #64]	@ 0x40
 801c91e:	9108      	str	r1, [sp, #32]
 801c920:	6850      	ldr	r0, [r2, #4]
 801c922:	9306      	str	r3, [sp, #24]
 801c924:	6812      	ldr	r2, [r2, #0]
 801c926:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801c92a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 801c92e:	fb00 1303 	mla	r3, r0, r3, r1
 801c932:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801c936:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	9307      	str	r3, [sp, #28]
 801c93c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c93e:	685f      	ldr	r7, [r3, #4]
 801c940:	3704      	adds	r7, #4
 801c942:	9b08      	ldr	r3, [sp, #32]
 801c944:	2b00      	cmp	r3, #0
 801c946:	dc03      	bgt.n	801c950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	f340 81b2 	ble.w	801ccb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801c950:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c952:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c956:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c95a:	1e48      	subs	r0, r1, #1
 801c95c:	f102 3cff 	add.w	ip, r2, #4294967295
 801c960:	9b06      	ldr	r3, [sp, #24]
 801c962:	2b00      	cmp	r3, #0
 801c964:	f340 80a9 	ble.w	801caba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c968:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c96c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c970:	d406      	bmi.n	801c980 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c972:	4586      	cmp	lr, r0
 801c974:	da04      	bge.n	801c980 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c976:	2b00      	cmp	r3, #0
 801c978:	db02      	blt.n	801c980 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c97a:	4563      	cmp	r3, ip
 801c97c:	f2c0 809e 	blt.w	801cabc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c980:	f11e 0e01 	adds.w	lr, lr, #1
 801c984:	f100 808f 	bmi.w	801caa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c988:	4571      	cmp	r1, lr
 801c98a:	f2c0 808c 	blt.w	801caa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c98e:	3301      	adds	r3, #1
 801c990:	f100 8089 	bmi.w	801caa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c994:	429a      	cmp	r2, r3
 801c996:	f2c0 8086 	blt.w	801caa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c99a:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c99e:	46c8      	mov	r8, r9
 801c9a0:	f1bb 0f00 	cmp.w	fp, #0
 801c9a4:	f340 80a6 	ble.w	801caf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c9a8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c9aa:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c9ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c9b0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c9b4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c9b8:	1422      	asrs	r2, r4, #16
 801c9ba:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c9be:	689b      	ldr	r3, [r3, #8]
 801c9c0:	f100 80e3 	bmi.w	801cb8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c9c4:	f103 3aff 	add.w	sl, r3, #4294967295
 801c9c8:	4552      	cmp	r2, sl
 801c9ca:	f280 80de 	bge.w	801cb8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c9ce:	f1bc 0f00 	cmp.w	ip, #0
 801c9d2:	f2c0 80da 	blt.w	801cb8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c9d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 801c9da:	45d4      	cmp	ip, sl
 801c9dc:	f280 80d5 	bge.w	801cb8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c9e0:	b21b      	sxth	r3, r3
 801c9e2:	9d07      	ldr	r5, [sp, #28]
 801c9e4:	fb0c 2203 	mla	r2, ip, r3, r2
 801c9e8:	eb05 0a02 	add.w	sl, r5, r2
 801c9ec:	5caa      	ldrb	r2, [r5, r2]
 801c9ee:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801c9f2:	2800      	cmp	r0, #0
 801c9f4:	f000 80c0 	beq.w	801cb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c9f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c9fc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801ca00:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ca02:	b151      	cbz	r1, 801ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ca04:	eb0a 0203 	add.w	r2, sl, r3
 801ca08:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ca0c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ca10:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca12:	7853      	ldrb	r3, [r2, #1]
 801ca14:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ca18:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca1c:	fb10 f201 	smulbb	r2, r0, r1
 801ca20:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ca22:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ca26:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801ca2a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801ca2e:	10d2      	asrs	r2, r2, #3
 801ca30:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ca34:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801ca38:	ea4c 0c03 	orr.w	ip, ip, r3
 801ca3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca3e:	041b      	lsls	r3, r3, #16
 801ca40:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801ca44:	432b      	orrs	r3, r5
 801ca46:	4353      	muls	r3, r2
 801ca48:	fb0a 330c 	mla	r3, sl, ip, r3
 801ca4c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ca50:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801ca54:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ca58:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ca5c:	f1c1 0c10 	rsb	ip, r1, #16
 801ca60:	ebac 0c00 	sub.w	ip, ip, r0
 801ca64:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ca68:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ca6c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ca70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca72:	0418      	lsls	r0, r3, #16
 801ca74:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801ca78:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801ca7c:	4318      	orrs	r0, r3
 801ca7e:	fb02 c200 	mla	r2, r2, r0, ip
 801ca82:	0d53      	lsrs	r3, r2, #21
 801ca84:	0952      	lsrs	r2, r2, #5
 801ca86:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ca8a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ca8e:	431a      	orrs	r2, r3
 801ca90:	f8a8 2000 	strh.w	r2, [r8]
 801ca94:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ca96:	f108 0802 	add.w	r8, r8, #2
 801ca9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca9e:	441c      	add	r4, r3
 801caa0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801caa2:	441e      	add	r6, r3
 801caa4:	e77c      	b.n	801c9a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801caa6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801caa8:	f109 0902 	add.w	r9, r9, #2
 801caac:	441c      	add	r4, r3
 801caae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cab0:	441e      	add	r6, r3
 801cab2:	9b06      	ldr	r3, [sp, #24]
 801cab4:	3b01      	subs	r3, #1
 801cab6:	9306      	str	r3, [sp, #24]
 801cab8:	e752      	b.n	801c960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801caba:	d020      	beq.n	801cafe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cabc:	9b06      	ldr	r3, [sp, #24]
 801cabe:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801cac0:	3b01      	subs	r3, #1
 801cac2:	fb00 4003 	mla	r0, r0, r3, r4
 801cac6:	1400      	asrs	r0, r0, #16
 801cac8:	f53f af67 	bmi.w	801c99a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cacc:	3901      	subs	r1, #1
 801cace:	4288      	cmp	r0, r1
 801cad0:	f6bf af63 	bge.w	801c99a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cad4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801cad6:	fb01 6303 	mla	r3, r1, r3, r6
 801cada:	141b      	asrs	r3, r3, #16
 801cadc:	f53f af5d 	bmi.w	801c99a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cae0:	3a01      	subs	r2, #1
 801cae2:	4293      	cmp	r3, r2
 801cae4:	f6bf af59 	bge.w	801c99a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cae8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801caec:	46ca      	mov	sl, r9
 801caee:	f1b8 0f00 	cmp.w	r8, #0
 801caf2:	dc67      	bgt.n	801cbc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801caf4:	9b06      	ldr	r3, [sp, #24]
 801caf6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801cafa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801cafe:	9b08      	ldr	r3, [sp, #32]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	f340 80d7 	ble.w	801ccb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801cb06:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb0a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cb0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb10:	eeb0 6a62 	vmov.f32	s12, s5
 801cb14:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb18:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb20:	ee16 4a10 	vmov	r4, s12
 801cb24:	eeb0 6a43 	vmov.f32	s12, s6
 801cb28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb2c:	ee16 6a10 	vmov	r6, s12
 801cb30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb34:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb38:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb48:	ee12 2a90 	vmov	r2, s5
 801cb4c:	eef0 2a47 	vmov.f32	s5, s14
 801cb50:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb54:	ee13 2a10 	vmov	r2, s6
 801cb58:	931f      	str	r3, [sp, #124]	@ 0x7c
 801cb5a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cb5c:	eeb0 3a67 	vmov.f32	s6, s15
 801cb60:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb64:	9320      	str	r3, [sp, #128]	@ 0x80
 801cb66:	9b08      	ldr	r3, [sp, #32]
 801cb68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cb6a:	3b01      	subs	r3, #1
 801cb6c:	9308      	str	r3, [sp, #32]
 801cb6e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cb70:	bf08      	it	eq
 801cb72:	4613      	moveq	r3, r2
 801cb74:	9306      	str	r3, [sp, #24]
 801cb76:	e6e4      	b.n	801c942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801cb78:	2900      	cmp	r1, #0
 801cb7a:	f43f af4e 	beq.w	801ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801cb7e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801cb82:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cb86:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb88:	e747      	b.n	801ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801cb8a:	f112 0a01 	adds.w	sl, r2, #1
 801cb8e:	d481      	bmi.n	801ca94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cb90:	4553      	cmp	r3, sl
 801cb92:	f6ff af7f 	blt.w	801ca94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cb96:	f11c 0a01 	adds.w	sl, ip, #1
 801cb9a:	f53f af7b 	bmi.w	801ca94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cb9e:	45d6      	cmp	lr, sl
 801cba0:	f6ff af78 	blt.w	801ca94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cba4:	b21b      	sxth	r3, r3
 801cba6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801cbaa:	fa0f f28e 	sxth.w	r2, lr
 801cbae:	9300      	str	r3, [sp, #0]
 801cbb0:	463b      	mov	r3, r7
 801cbb2:	9201      	str	r2, [sp, #4]
 801cbb4:	9a07      	ldr	r2, [sp, #28]
 801cbb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cbba:	4641      	mov	r1, r8
 801cbbc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801cbbe:	f7ff fe21 	bl	801c804 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801cbc2:	e767      	b.n	801ca94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cbc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cbc6:	1422      	asrs	r2, r4, #16
 801cbc8:	1431      	asrs	r1, r6, #16
 801cbca:	9d07      	ldr	r5, [sp, #28]
 801cbcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cbd0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801cbd4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cbd8:	fb03 2101 	mla	r1, r3, r1, r2
 801cbdc:	9a07      	ldr	r2, [sp, #28]
 801cbde:	440a      	add	r2, r1
 801cbe0:	5c69      	ldrb	r1, [r5, r1]
 801cbe2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801cbe6:	f1be 0f00 	cmp.w	lr, #0
 801cbea:	d05c      	beq.n	801cca6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801cbec:	f892 c001 	ldrb.w	ip, [r2, #1]
 801cbf0:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801cbf4:	950d      	str	r5, [sp, #52]	@ 0x34
 801cbf6:	b150      	cbz	r0, 801cc0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801cbf8:	eb02 0c03 	add.w	ip, r2, r3
 801cbfc:	5cd3      	ldrb	r3, [r2, r3]
 801cbfe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cc02:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc04:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801cc08:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cc0c:	930e      	str	r3, [sp, #56]	@ 0x38
 801cc0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc10:	fb1e f200 	smulbb	r2, lr, r0
 801cc14:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801cc16:	f108 38ff 	add.w	r8, r8, #4294967295
 801cc1a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cc1e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801cc22:	10d2      	asrs	r2, r2, #3
 801cc24:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 801cc28:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801cc2c:	ea4c 0c03 	orr.w	ip, ip, r3
 801cc30:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801cc34:	9311      	str	r3, [sp, #68]	@ 0x44
 801cc36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc38:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801cc3a:	041b      	lsls	r3, r3, #16
 801cc3c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801cc40:	ea43 030b 	orr.w	r3, r3, fp
 801cc44:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cc48:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801cc4c:	4353      	muls	r3, r2
 801cc4e:	fb05 3c0c 	mla	ip, r5, ip, r3
 801cc52:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801cc56:	ea43 0b01 	orr.w	fp, r3, r1
 801cc5a:	f1c0 0110 	rsb	r1, r0, #16
 801cc5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc60:	eba1 0e0e 	sub.w	lr, r1, lr
 801cc64:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801cc68:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801cc6c:	fb0e cc0b 	mla	ip, lr, fp, ip
 801cc70:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801cc74:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 801cc78:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801cc7c:	ea4b 0e0e 	orr.w	lr, fp, lr
 801cc80:	fb02 cc0e 	mla	ip, r2, lr, ip
 801cc84:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801cc88:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cc8c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801cc90:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801cc94:	ea43 0c0c 	orr.w	ip, r3, ip
 801cc98:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cc9a:	441c      	add	r4, r3
 801cc9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cc9e:	f82a cb02 	strh.w	ip, [sl], #2
 801cca2:	441e      	add	r6, r3
 801cca4:	e723      	b.n	801caee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cca6:	2800      	cmp	r0, #0
 801cca8:	d0b1      	beq.n	801cc0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ccaa:	5cd3      	ldrb	r3, [r2, r3]
 801ccac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ccb0:	930a      	str	r3, [sp, #40]	@ 0x28
 801ccb2:	e7ac      	b.n	801cc0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ccb4:	b013      	add	sp, #76	@ 0x4c
 801ccb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ccba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801ccba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccbe:	880d      	ldrh	r5, [r1, #0]
 801ccc0:	b087      	sub	sp, #28
 801ccc2:	10ef      	asrs	r7, r5, #3
 801ccc4:	9103      	str	r1, [sp, #12]
 801ccc6:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801ccca:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 801ccce:	00ed      	lsls	r5, r5, #3
 801ccd0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ccd4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801ccd8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801ccdc:	b2ed      	uxtb	r5, r5
 801ccde:	9701      	str	r7, [sp, #4]
 801cce0:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801cce4:	9502      	str	r5, [sp, #8]
 801cce6:	9d01      	ldr	r5, [sp, #4]
 801cce8:	9902      	ldr	r1, [sp, #8]
 801ccea:	022d      	lsls	r5, r5, #8
 801ccec:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 801ccf0:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 801ccf4:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801ccf8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801ccfc:	430d      	orrs	r5, r1
 801ccfe:	fb06 0709 	mla	r7, r6, r9, r0
 801cd02:	2e00      	cmp	r6, #0
 801cd04:	9505      	str	r5, [sp, #20]
 801cd06:	eb02 0c07 	add.w	ip, r2, r7
 801cd0a:	f2c0 80b6 	blt.w	801ce7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801cd0e:	45b3      	cmp	fp, r6
 801cd10:	f340 80b3 	ble.w	801ce7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801cd14:	2800      	cmp	r0, #0
 801cd16:	f2c0 80ae 	blt.w	801ce76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801cd1a:	4581      	cmp	r9, r0
 801cd1c:	f340 80ab 	ble.w	801ce76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801cd20:	5dd7      	ldrb	r7, [r2, r7]
 801cd22:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cd26:	441f      	add	r7, r3
 801cd28:	1c42      	adds	r2, r0, #1
 801cd2a:	f100 80a9 	bmi.w	801ce80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cd2e:	4591      	cmp	r9, r2
 801cd30:	f340 80a6 	ble.w	801ce80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cd34:	2c00      	cmp	r4, #0
 801cd36:	f000 80a3 	beq.w	801ce80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cd3a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801cd3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd42:	441d      	add	r5, r3
 801cd44:	3601      	adds	r6, #1
 801cd46:	f100 809f 	bmi.w	801ce88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801cd4a:	45b3      	cmp	fp, r6
 801cd4c:	f340 809c 	ble.w	801ce88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801cd50:	f1be 0f00 	cmp.w	lr, #0
 801cd54:	f000 8098 	beq.w	801ce88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801cd58:	2800      	cmp	r0, #0
 801cd5a:	f2c0 8093 	blt.w	801ce84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801cd5e:	4581      	cmp	r9, r0
 801cd60:	f340 8090 	ble.w	801ce84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801cd64:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801cd68:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cd6c:	441e      	add	r6, r3
 801cd6e:	3001      	adds	r0, #1
 801cd70:	f100 808d 	bmi.w	801ce8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801cd74:	4581      	cmp	r9, r0
 801cd76:	f340 808a 	ble.w	801ce8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801cd7a:	2c00      	cmp	r4, #0
 801cd7c:	f000 8087 	beq.w	801ce8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801cd80:	44e1      	add	r9, ip
 801cd82:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cd86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd8a:	4413      	add	r3, r2
 801cd8c:	b2a4      	uxth	r4, r4
 801cd8e:	f897 c002 	ldrb.w	ip, [r7, #2]
 801cd92:	fa1f fe8e 	uxth.w	lr, lr
 801cd96:	9901      	ldr	r1, [sp, #4]
 801cd98:	fb04 fb0e 	mul.w	fp, r4, lr
 801cd9c:	0124      	lsls	r4, r4, #4
 801cd9e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801cda2:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 801cda6:	eba4 040b 	sub.w	r4, r4, fp
 801cdaa:	fa1f f08e 	uxth.w	r0, lr
 801cdae:	b2a2      	uxth	r2, r4
 801cdb0:	78ac      	ldrb	r4, [r5, #2]
 801cdb2:	eba9 0900 	sub.w	r9, r9, r0
 801cdb6:	fa1f fe88 	uxth.w	lr, r8
 801cdba:	4354      	muls	r4, r2
 801cdbc:	ea6f 0808 	mvn.w	r8, r8
 801cdc0:	fa1f f989 	uxth.w	r9, r9
 801cdc4:	fa5f f888 	uxtb.w	r8, r8
 801cdc8:	fb09 440c 	mla	r4, r9, ip, r4
 801cdcc:	f896 c002 	ldrb.w	ip, [r6, #2]
 801cdd0:	fb1a fa08 	smulbb	sl, sl, r8
 801cdd4:	fb00 440c 	mla	r4, r0, ip, r4
 801cdd8:	f893 c002 	ldrb.w	ip, [r3, #2]
 801cddc:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801cde0:	787c      	ldrb	r4, [r7, #1]
 801cde2:	783f      	ldrb	r7, [r7, #0]
 801cde4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cde8:	fb0c ac0e 	mla	ip, ip, lr, sl
 801cdec:	f895 a001 	ldrb.w	sl, [r5, #1]
 801cdf0:	782d      	ldrb	r5, [r5, #0]
 801cdf2:	fb02 fa0a 	mul.w	sl, r2, sl
 801cdf6:	fa1f fc8c 	uxth.w	ip, ip
 801cdfa:	436a      	muls	r2, r5
 801cdfc:	7835      	ldrb	r5, [r6, #0]
 801cdfe:	fb09 aa04 	mla	sl, r9, r4, sl
 801ce02:	7874      	ldrb	r4, [r6, #1]
 801ce04:	fb09 2207 	mla	r2, r9, r7, r2
 801ce08:	fb00 aa04 	mla	sl, r0, r4, sl
 801ce0c:	785c      	ldrb	r4, [r3, #1]
 801ce0e:	fb00 2005 	mla	r0, r0, r5, r2
 801ce12:	781b      	ldrb	r3, [r3, #0]
 801ce14:	fb0b a404 	mla	r4, fp, r4, sl
 801ce18:	fb11 fa08 	smulbb	sl, r1, r8
 801ce1c:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ce20:	9b02      	ldr	r3, [sp, #8]
 801ce22:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ce26:	fb13 f808 	smulbb	r8, r3, r8
 801ce2a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ce2e:	fb04 a40e 	mla	r4, r4, lr, sl
 801ce32:	f10c 0301 	add.w	r3, ip, #1
 801ce36:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801ce3a:	b2a4      	uxth	r4, r4
 801ce3c:	fa1f fe8e 	uxth.w	lr, lr
 801ce40:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ce44:	f104 0a01 	add.w	sl, r4, #1
 801ce48:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 801ce4c:	f10e 0c01 	add.w	ip, lr, #1
 801ce50:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ce54:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ce58:	0964      	lsrs	r4, r4, #5
 801ce5a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ce5e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801ce62:	ea4c 0c03 	orr.w	ip, ip, r3
 801ce66:	9b03      	ldr	r3, [sp, #12]
 801ce68:	ea4c 0c04 	orr.w	ip, ip, r4
 801ce6c:	f8a3 c000 	strh.w	ip, [r3]
 801ce70:	b007      	add	sp, #28
 801ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce76:	af05      	add	r7, sp, #20
 801ce78:	e756      	b.n	801cd28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801ce7a:	ad05      	add	r5, sp, #20
 801ce7c:	462f      	mov	r7, r5
 801ce7e:	e761      	b.n	801cd44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801ce80:	ad05      	add	r5, sp, #20
 801ce82:	e75f      	b.n	801cd44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801ce84:	ae05      	add	r6, sp, #20
 801ce86:	e772      	b.n	801cd6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801ce88:	ab05      	add	r3, sp, #20
 801ce8a:	461e      	mov	r6, r3
 801ce8c:	e77e      	b.n	801cd8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801ce8e:	ab05      	add	r3, sp, #20
 801ce90:	e77c      	b.n	801cd8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801ce92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce96:	b095      	sub	sp, #84	@ 0x54
 801ce98:	9212      	str	r2, [sp, #72]	@ 0x48
 801ce9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce9c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ce9e:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801cea2:	9013      	str	r0, [sp, #76]	@ 0x4c
 801cea4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cea6:	6850      	ldr	r0, [r2, #4]
 801cea8:	910e      	str	r1, [sp, #56]	@ 0x38
 801ceaa:	6812      	ldr	r2, [r2, #0]
 801ceac:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 801ceb0:	fb00 1303 	mla	r3, r0, r3, r1
 801ceb4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ceb8:	930a      	str	r3, [sp, #40]	@ 0x28
 801ceba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	930d      	str	r3, [sp, #52]	@ 0x34
 801cec0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cec2:	685c      	ldr	r4, [r3, #4]
 801cec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cec6:	3404      	adds	r4, #4
 801cec8:	43db      	mvns	r3, r3
 801ceca:	b2db      	uxtb	r3, r3
 801cecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	dc03      	bgt.n	801cedc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ced4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	f340 8255 	ble.w	801d386 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801cedc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cede:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cee2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cee6:	1e48      	subs	r0, r1, #1
 801cee8:	1e55      	subs	r5, r2, #1
 801ceea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	f340 80f9 	ble.w	801d0e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801cef2:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801cef4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cef6:	1436      	asrs	r6, r6, #16
 801cef8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801cefc:	d406      	bmi.n	801cf0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cefe:	4286      	cmp	r6, r0
 801cf00:	da04      	bge.n	801cf0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	db02      	blt.n	801cf0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cf06:	42ab      	cmp	r3, r5
 801cf08:	f2c0 80ed 	blt.w	801d0e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cf0c:	3601      	adds	r6, #1
 801cf0e:	f100 80da 	bmi.w	801d0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801cf12:	42b1      	cmp	r1, r6
 801cf14:	f2c0 80d7 	blt.w	801d0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801cf18:	3301      	adds	r3, #1
 801cf1a:	f100 80d4 	bmi.w	801d0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801cf1e:	429a      	cmp	r2, r3
 801cf20:	f2c0 80d1 	blt.w	801d0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801cf24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf26:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf2a:	930c      	str	r3, [sp, #48]	@ 0x30
 801cf2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	f340 80fa 	ble.w	801d128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801cf34:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801cf36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cf38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cf3a:	68c6      	ldr	r6, [r0, #12]
 801cf3c:	141d      	asrs	r5, r3, #16
 801cf3e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801cf40:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cf44:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cf46:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801cf48:	1400      	asrs	r0, r0, #16
 801cf4a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cf4e:	6892      	ldr	r2, [r2, #8]
 801cf50:	f100 813e 	bmi.w	801d1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801cf54:	1e57      	subs	r7, r2, #1
 801cf56:	42b8      	cmp	r0, r7
 801cf58:	f280 813a 	bge.w	801d1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801cf5c:	2d00      	cmp	r5, #0
 801cf5e:	f2c0 8137 	blt.w	801d1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801cf62:	1e77      	subs	r7, r6, #1
 801cf64:	42bd      	cmp	r5, r7
 801cf66:	f280 8133 	bge.w	801d1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801cf6a:	b212      	sxth	r2, r2
 801cf6c:	fb05 0002 	mla	r0, r5, r2, r0
 801cf70:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801cf72:	f815 a000 	ldrb.w	sl, [r5, r0]
 801cf76:	182e      	adds	r6, r5, r0
 801cf78:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801cf7c:	eb04 050a 	add.w	r5, r4, sl
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	f000 8117 	beq.w	801d1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801cf86:	f896 c001 	ldrb.w	ip, [r6, #1]
 801cf8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cf8e:	44a4      	add	ip, r4
 801cf90:	2900      	cmp	r1, #0
 801cf92:	f000 8117 	beq.w	801d1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801cf96:	18b0      	adds	r0, r6, r2
 801cf98:	5cb2      	ldrb	r2, [r6, r2]
 801cf9a:	7840      	ldrb	r0, [r0, #1]
 801cf9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cfa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cfa4:	4422      	add	r2, r4
 801cfa6:	4420      	add	r0, r4
 801cfa8:	b29b      	uxth	r3, r3
 801cfaa:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801cfae:	b289      	uxth	r1, r1
 801cfb0:	f895 b002 	ldrb.w	fp, [r5, #2]
 801cfb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cfb6:	fb03 f901 	mul.w	r9, r3, r1
 801cfba:	011b      	lsls	r3, r3, #4
 801cfbc:	f8b6 e000 	ldrh.w	lr, [r6]
 801cfc0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cfc4:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801cfc8:	eba3 0309 	sub.w	r3, r3, r9
 801cfcc:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801cfd0:	b289      	uxth	r1, r1
 801cfd2:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801cfd6:	b29b      	uxth	r3, r3
 801cfd8:	eba8 0801 	sub.w	r8, r8, r1
 801cfdc:	435f      	muls	r7, r3
 801cfde:	fa1f f888 	uxth.w	r8, r8
 801cfe2:	9310      	str	r3, [sp, #64]	@ 0x40
 801cfe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cfe6:	fb08 770b 	mla	r7, r8, fp, r7
 801cfea:	f892 b002 	ldrb.w	fp, [r2, #2]
 801cfee:	fb01 770b 	mla	r7, r1, fp, r7
 801cff2:	f890 b002 	ldrb.w	fp, [r0, #2]
 801cff6:	fb09 770b 	mla	r7, r9, fp, r7
 801cffa:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801cffe:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801d002:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d006:	fb1b fb03 	smulbb	fp, fp, r3
 801d00a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d00c:	fb07 b706 	mla	r7, r7, r6, fp
 801d010:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d014:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d018:	f89c c000 	ldrb.w	ip, [ip]
 801d01c:	b2bf      	uxth	r7, r7
 801d01e:	435d      	muls	r5, r3
 801d020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d022:	fb08 550b 	mla	r5, r8, fp, r5
 801d026:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d02a:	fb01 550b 	mla	r5, r1, fp, r5
 801d02e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d032:	fb09 550b 	mla	r5, r9, fp, r5
 801d036:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801d03a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d03e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801d042:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d046:	fa5f fe8e 	uxtb.w	lr, lr
 801d04a:	fb1b fb03 	smulbb	fp, fp, r3
 801d04e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d050:	fb03 f30c 	mul.w	r3, r3, ip
 801d054:	f892 c000 	ldrb.w	ip, [r2]
 801d058:	fb05 b506 	mla	r5, r5, r6, fp
 801d05c:	fb08 330a 	mla	r3, r8, sl, r3
 801d060:	b2ad      	uxth	r5, r5
 801d062:	fb01 330c 	mla	r3, r1, ip, r3
 801d066:	f890 c000 	ldrb.w	ip, [r0]
 801d06a:	f105 0b01 	add.w	fp, r5, #1
 801d06e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d074:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d078:	fb1e fe03 	smulbb	lr, lr, r3
 801d07c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d080:	1c7b      	adds	r3, r7, #1
 801d082:	096d      	lsrs	r5, r5, #5
 801d084:	fb0c e606 	mla	r6, ip, r6, lr
 801d088:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d08c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d090:	b2b6      	uxth	r6, r6
 801d092:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 801d096:	1c77      	adds	r7, r6, #1
 801d098:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801d09c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d0a0:	431f      	orrs	r7, r3
 801d0a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0a4:	433d      	orrs	r5, r7
 801d0a6:	801d      	strh	r5, [r3, #0]
 801d0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d0ac:	3302      	adds	r3, #2
 801d0ae:	930c      	str	r3, [sp, #48]	@ 0x30
 801d0b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d0b2:	4413      	add	r3, r2
 801d0b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d0b6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d0b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d0ba:	4413      	add	r3, r2
 801d0bc:	9320      	str	r3, [sp, #128]	@ 0x80
 801d0be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d0c0:	3b01      	subs	r3, #1
 801d0c2:	9311      	str	r3, [sp, #68]	@ 0x44
 801d0c4:	e732      	b.n	801cf2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d0c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d0c8:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801d0ca:	4433      	add	r3, r6
 801d0cc:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d0ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d0d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d0d2:	4433      	add	r3, r6
 801d0d4:	9320      	str	r3, [sp, #128]	@ 0x80
 801d0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0d8:	3b01      	subs	r3, #1
 801d0da:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0de:	3302      	adds	r3, #2
 801d0e0:	930a      	str	r3, [sp, #40]	@ 0x28
 801d0e2:	e702      	b.n	801ceea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d0e4:	d027      	beq.n	801d136 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801d0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0e8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801d0ea:	3b01      	subs	r3, #1
 801d0ec:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801d0ee:	fb00 5003 	mla	r0, r0, r3, r5
 801d0f2:	1400      	asrs	r0, r0, #16
 801d0f4:	f53f af16 	bmi.w	801cf24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d0f8:	3901      	subs	r1, #1
 801d0fa:	4288      	cmp	r0, r1
 801d0fc:	f6bf af12 	bge.w	801cf24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d100:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801d102:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d104:	fb01 0303 	mla	r3, r1, r3, r0
 801d108:	141b      	asrs	r3, r3, #16
 801d10a:	f53f af0b 	bmi.w	801cf24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d10e:	3a01      	subs	r2, #1
 801d110:	4293      	cmp	r3, r2
 801d112:	f6bf af07 	bge.w	801cf24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d118:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 801d11c:	9311      	str	r3, [sp, #68]	@ 0x44
 801d11e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d120:	930c      	str	r3, [sp, #48]	@ 0x30
 801d122:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d124:	2b00      	cmp	r3, #0
 801d126:	dc70      	bgt.n	801d20a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801d128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d12a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d12c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d130:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d134:	930a      	str	r3, [sp, #40]	@ 0x28
 801d136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d138:	2b00      	cmp	r3, #0
 801d13a:	f340 8124 	ble.w	801d386 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d13e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d142:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d144:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d148:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d14c:	eef0 6a62 	vmov.f32	s13, s5
 801d150:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d154:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d158:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d15c:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801d160:	eef0 6a43 	vmov.f32	s13, s6
 801d164:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d168:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 801d16c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d170:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d174:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d178:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d17c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d180:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d184:	ee12 2a90 	vmov	r2, s5
 801d188:	eef0 2a47 	vmov.f32	s5, s14
 801d18c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d190:	ee13 2a10 	vmov	r2, s6
 801d194:	9321      	str	r3, [sp, #132]	@ 0x84
 801d196:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d198:	eeb0 3a67 	vmov.f32	s6, s15
 801d19c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1a0:	9322      	str	r3, [sp, #136]	@ 0x88
 801d1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d1a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d1a6:	3b01      	subs	r3, #1
 801d1a8:	930e      	str	r3, [sp, #56]	@ 0x38
 801d1aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d1ac:	bf08      	it	eq
 801d1ae:	4613      	moveq	r3, r2
 801d1b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1b2:	e68c      	b.n	801cece <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d1b4:	b149      	cbz	r1, 801d1ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801d1b6:	5cb2      	ldrb	r2, [r6, r2]
 801d1b8:	4628      	mov	r0, r5
 801d1ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d1be:	4422      	add	r2, r4
 801d1c0:	46ac      	mov	ip, r5
 801d1c2:	e6f1      	b.n	801cfa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d1c4:	4628      	mov	r0, r5
 801d1c6:	462a      	mov	r2, r5
 801d1c8:	e6ee      	b.n	801cfa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d1ca:	4628      	mov	r0, r5
 801d1cc:	462a      	mov	r2, r5
 801d1ce:	e7f7      	b.n	801d1c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801d1d0:	1c47      	adds	r7, r0, #1
 801d1d2:	f53f af69 	bmi.w	801d0a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d1d6:	42ba      	cmp	r2, r7
 801d1d8:	f6ff af66 	blt.w	801d0a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d1dc:	1c6f      	adds	r7, r5, #1
 801d1de:	f53f af63 	bmi.w	801d0a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d1e2:	42be      	cmp	r6, r7
 801d1e4:	f6ff af60 	blt.w	801d0a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d1e8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801d1ea:	b236      	sxth	r6, r6
 801d1ec:	b212      	sxth	r2, r2
 801d1ee:	9002      	str	r0, [sp, #8]
 801d1f0:	9601      	str	r6, [sp, #4]
 801d1f2:	9200      	str	r2, [sp, #0]
 801d1f4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d1f6:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801d1fa:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801d1fe:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 801d202:	4623      	mov	r3, r4
 801d204:	f7ff fd59 	bl	801ccba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801d208:	e74e      	b.n	801d0a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d20a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d20c:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d20e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d212:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801d214:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801d216:	1400      	asrs	r0, r0, #16
 801d218:	142d      	asrs	r5, r5, #16
 801d21a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d21c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d220:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d224:	fb02 5000 	mla	r0, r2, r0, r5
 801d228:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801d22a:	f815 9000 	ldrb.w	r9, [r5, r0]
 801d22e:	182e      	adds	r6, r5, r0
 801d230:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d234:	eb04 0509 	add.w	r5, r4, r9
 801d238:	2b00      	cmp	r3, #0
 801d23a:	f000 8096 	beq.w	801d36a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d23e:	7877      	ldrb	r7, [r6, #1]
 801d240:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d244:	4427      	add	r7, r4
 801d246:	2900      	cmp	r1, #0
 801d248:	f000 8097 	beq.w	801d37a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801d24c:	18b0      	adds	r0, r6, r2
 801d24e:	5cb2      	ldrb	r2, [r6, r2]
 801d250:	7840      	ldrb	r0, [r0, #1]
 801d252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d256:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d25a:	4422      	add	r2, r4
 801d25c:	4420      	add	r0, r4
 801d25e:	b29b      	uxth	r3, r3
 801d260:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d262:	b289      	uxth	r1, r1
 801d264:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d268:	f8b6 c000 	ldrh.w	ip, [r6]
 801d26c:	fb03 f801 	mul.w	r8, r3, r1
 801d270:	011b      	lsls	r3, r3, #4
 801d272:	78be      	ldrb	r6, [r7, #2]
 801d274:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d278:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d27c:	eba3 0308 	sub.w	r3, r3, r8
 801d280:	f814 9009 	ldrb.w	r9, [r4, r9]
 801d284:	b289      	uxth	r1, r1
 801d286:	b29b      	uxth	r3, r3
 801d288:	ebae 0e01 	sub.w	lr, lr, r1
 801d28c:	435e      	muls	r6, r3
 801d28e:	fa1f fe8e 	uxth.w	lr, lr
 801d292:	9310      	str	r3, [sp, #64]	@ 0x40
 801d294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d296:	fb0e 660b 	mla	r6, lr, fp, r6
 801d29a:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d29e:	fb01 660b 	mla	r6, r1, fp, r6
 801d2a2:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d2a6:	fb08 660b 	mla	r6, r8, fp, r6
 801d2aa:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801d2ae:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801d2b2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d2b6:	fb1b fb03 	smulbb	fp, fp, r3
 801d2ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2bc:	fb06 b60a 	mla	r6, r6, sl, fp
 801d2c0:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d2c4:	787d      	ldrb	r5, [r7, #1]
 801d2c6:	783f      	ldrb	r7, [r7, #0]
 801d2c8:	b2b6      	uxth	r6, r6
 801d2ca:	435d      	muls	r5, r3
 801d2cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2ce:	fb0e 550b 	mla	r5, lr, fp, r5
 801d2d2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d2d6:	fb01 550b 	mla	r5, r1, fp, r5
 801d2da:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d2de:	fb08 550b 	mla	r5, r8, fp, r5
 801d2e2:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d2e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d2ea:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801d2ee:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d2f2:	fa5f fc8c 	uxtb.w	ip, ip
 801d2f6:	fb1b fb03 	smulbb	fp, fp, r3
 801d2fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2fc:	437b      	muls	r3, r7
 801d2fe:	7817      	ldrb	r7, [r2, #0]
 801d300:	fb05 b50a 	mla	r5, r5, sl, fp
 801d304:	fb0e 3309 	mla	r3, lr, r9, r3
 801d308:	b2ad      	uxth	r5, r5
 801d30a:	fb01 3307 	mla	r3, r1, r7, r3
 801d30e:	7807      	ldrb	r7, [r0, #0]
 801d310:	f105 0b01 	add.w	fp, r5, #1
 801d314:	fb08 3707 	mla	r7, r8, r7, r3
 801d318:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d31a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d31e:	fb1c fc03 	smulbb	ip, ip, r3
 801d322:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d326:	1c73      	adds	r3, r6, #1
 801d328:	096d      	lsrs	r5, r5, #5
 801d32a:	fb07 c70a 	mla	r7, r7, sl, ip
 801d32e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d332:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d336:	b2bf      	uxth	r7, r7
 801d338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d33a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801d33e:	1c7a      	adds	r2, r7, #1
 801d340:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d344:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d348:	4316      	orrs	r6, r2
 801d34a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d34c:	432e      	orrs	r6, r5
 801d34e:	f823 6b02 	strh.w	r6, [r3], #2
 801d352:	930c      	str	r3, [sp, #48]	@ 0x30
 801d354:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d356:	4413      	add	r3, r2
 801d358:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d35a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d35c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d35e:	4413      	add	r3, r2
 801d360:	9320      	str	r3, [sp, #128]	@ 0x80
 801d362:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d364:	3b01      	subs	r3, #1
 801d366:	9311      	str	r3, [sp, #68]	@ 0x44
 801d368:	e6db      	b.n	801d122 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801d36a:	b149      	cbz	r1, 801d380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801d36c:	5cb2      	ldrb	r2, [r6, r2]
 801d36e:	4628      	mov	r0, r5
 801d370:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d374:	4422      	add	r2, r4
 801d376:	462f      	mov	r7, r5
 801d378:	e771      	b.n	801d25e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d37a:	4628      	mov	r0, r5
 801d37c:	462a      	mov	r2, r5
 801d37e:	e76e      	b.n	801d25e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d380:	4628      	mov	r0, r5
 801d382:	462a      	mov	r2, r5
 801d384:	e7f7      	b.n	801d376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801d386:	b015      	add	sp, #84	@ 0x54
 801d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d38c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d390:	880f      	ldrh	r7, [r1, #0]
 801d392:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801d396:	023c      	lsls	r4, r7, #8
 801d398:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801d39c:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 801d3a0:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 801d3a4:	017c      	lsls	r4, r7, #5
 801d3a6:	00ff      	lsls	r7, r7, #3
 801d3a8:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801d3ac:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 801d3b0:	b2ff      	uxtb	r7, r7
 801d3b2:	ea4b 0404 	orr.w	r4, fp, r4
 801d3b6:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 801d3ba:	4327      	orrs	r7, r4
 801d3bc:	fb05 ca0e 	mla	sl, r5, lr, ip
 801d3c0:	2d00      	cmp	r5, #0
 801d3c2:	9701      	str	r7, [sp, #4]
 801d3c4:	eb02 080a 	add.w	r8, r2, sl
 801d3c8:	db7e      	blt.n	801d4c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d3ca:	45a9      	cmp	r9, r5
 801d3cc:	dd7c      	ble.n	801d4c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d3ce:	f1bc 0f00 	cmp.w	ip, #0
 801d3d2:	db77      	blt.n	801d4c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d3d4:	45e6      	cmp	lr, ip
 801d3d6:	dd75      	ble.n	801d4c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d3d8:	f812 700a 	ldrb.w	r7, [r2, sl]
 801d3dc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d3e0:	441f      	add	r7, r3
 801d3e2:	f11c 0201 	adds.w	r2, ip, #1
 801d3e6:	d472      	bmi.n	801d4ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d3e8:	4596      	cmp	lr, r2
 801d3ea:	dd70      	ble.n	801d4ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d3ec:	2800      	cmp	r0, #0
 801d3ee:	d06e      	beq.n	801d4ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d3f0:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d3f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d3f8:	441c      	add	r4, r3
 801d3fa:	3501      	adds	r5, #1
 801d3fc:	d46b      	bmi.n	801d4d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d3fe:	45a9      	cmp	r9, r5
 801d400:	dd69      	ble.n	801d4d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d402:	2e00      	cmp	r6, #0
 801d404:	d067      	beq.n	801d4d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d406:	f1bc 0f00 	cmp.w	ip, #0
 801d40a:	db62      	blt.n	801d4d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d40c:	45e6      	cmp	lr, ip
 801d40e:	dd60      	ble.n	801d4d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d410:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d418:	441d      	add	r5, r3
 801d41a:	f11c 0201 	adds.w	r2, ip, #1
 801d41e:	d45d      	bmi.n	801d4dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d420:	4596      	cmp	lr, r2
 801d422:	dd5b      	ble.n	801d4dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d424:	2800      	cmp	r0, #0
 801d426:	d059      	beq.n	801d4dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d428:	44c6      	add	lr, r8
 801d42a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d42e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d432:	4413      	add	r3, r2
 801d434:	b280      	uxth	r0, r0
 801d436:	f897 e002 	ldrb.w	lr, [r7, #2]
 801d43a:	b2b2      	uxth	r2, r6
 801d43c:	f897 9000 	ldrb.w	r9, [r7]
 801d440:	787f      	ldrb	r7, [r7, #1]
 801d442:	fb00 f602 	mul.w	r6, r0, r2
 801d446:	0100      	lsls	r0, r0, #4
 801d448:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d44c:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 801d450:	1b80      	subs	r0, r0, r6
 801d452:	fa1f fc82 	uxth.w	ip, r2
 801d456:	b282      	uxth	r2, r0
 801d458:	78a0      	ldrb	r0, [r4, #2]
 801d45a:	eba8 080c 	sub.w	r8, r8, ip
 801d45e:	4350      	muls	r0, r2
 801d460:	fa1f f888 	uxth.w	r8, r8
 801d464:	fb08 0e0e 	mla	lr, r8, lr, r0
 801d468:	78a8      	ldrb	r0, [r5, #2]
 801d46a:	fb0c e000 	mla	r0, ip, r0, lr
 801d46e:	f893 e002 	ldrb.w	lr, [r3, #2]
 801d472:	fb06 0e0e 	mla	lr, r6, lr, r0
 801d476:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 801d47a:	f894 e000 	ldrb.w	lr, [r4]
 801d47e:	fb02 fe0e 	mul.w	lr, r2, lr
 801d482:	fb08 e909 	mla	r9, r8, r9, lr
 801d486:	f895 e000 	ldrb.w	lr, [r5]
 801d48a:	fb0c 990e 	mla	r9, ip, lr, r9
 801d48e:	f893 e000 	ldrb.w	lr, [r3]
 801d492:	785b      	ldrb	r3, [r3, #1]
 801d494:	fb06 9e0e 	mla	lr, r6, lr, r9
 801d498:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d49c:	ea4e 0e00 	orr.w	lr, lr, r0
 801d4a0:	7860      	ldrb	r0, [r4, #1]
 801d4a2:	4350      	muls	r0, r2
 801d4a4:	786a      	ldrb	r2, [r5, #1]
 801d4a6:	fb08 0007 	mla	r0, r8, r7, r0
 801d4aa:	fb0c 0202 	mla	r2, ip, r2, r0
 801d4ae:	fb06 2303 	mla	r3, r6, r3, r2
 801d4b2:	095b      	lsrs	r3, r3, #5
 801d4b4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801d4b8:	ea4e 0303 	orr.w	r3, lr, r3
 801d4bc:	800b      	strh	r3, [r1, #0]
 801d4be:	b003      	add	sp, #12
 801d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4c4:	af01      	add	r7, sp, #4
 801d4c6:	e78c      	b.n	801d3e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801d4c8:	ac01      	add	r4, sp, #4
 801d4ca:	4627      	mov	r7, r4
 801d4cc:	e795      	b.n	801d3fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d4ce:	ac01      	add	r4, sp, #4
 801d4d0:	e793      	b.n	801d3fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d4d2:	ad01      	add	r5, sp, #4
 801d4d4:	e7a1      	b.n	801d41a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801d4d6:	ab01      	add	r3, sp, #4
 801d4d8:	461d      	mov	r5, r3
 801d4da:	e7ab      	b.n	801d434 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801d4dc:	ab01      	add	r3, sp, #4
 801d4de:	e7a9      	b.n	801d434 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801d4e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4e4:	b08f      	sub	sp, #60	@ 0x3c
 801d4e6:	920c      	str	r2, [sp, #48]	@ 0x30
 801d4e8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801d4ea:	900d      	str	r0, [sp, #52]	@ 0x34
 801d4ec:	910a      	str	r1, [sp, #40]	@ 0x28
 801d4ee:	6850      	ldr	r0, [r2, #4]
 801d4f0:	9306      	str	r3, [sp, #24]
 801d4f2:	6812      	ldr	r2, [r2, #0]
 801d4f4:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 801d4f8:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 801d4fc:	fb00 1303 	mla	r3, r0, r3, r1
 801d500:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d504:	9307      	str	r3, [sp, #28]
 801d506:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	9308      	str	r3, [sp, #32]
 801d50c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d50e:	685c      	ldr	r4, [r3, #4]
 801d510:	3404      	adds	r4, #4
 801d512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d514:	2b00      	cmp	r3, #0
 801d516:	dc03      	bgt.n	801d520 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d518:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	f340 81d5 	ble.w	801d8ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d520:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d522:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d526:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d52a:	1e48      	subs	r0, r1, #1
 801d52c:	1e56      	subs	r6, r2, #1
 801d52e:	9b06      	ldr	r3, [sp, #24]
 801d530:	2b00      	cmp	r3, #0
 801d532:	f340 80b6 	ble.w	801d6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d536:	ea5f 472b 	movs.w	r7, fp, asr #16
 801d53a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d53e:	d406      	bmi.n	801d54e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d540:	4287      	cmp	r7, r0
 801d542:	da04      	bge.n	801d54e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d544:	2b00      	cmp	r3, #0
 801d546:	db02      	blt.n	801d54e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d548:	42b3      	cmp	r3, r6
 801d54a:	f2c0 80ab 	blt.w	801d6a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801d54e:	3701      	adds	r7, #1
 801d550:	f100 809c 	bmi.w	801d68c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d554:	42b9      	cmp	r1, r7
 801d556:	f2c0 8099 	blt.w	801d68c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d55a:	3301      	adds	r3, #1
 801d55c:	f100 8096 	bmi.w	801d68c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d560:	429a      	cmp	r2, r3
 801d562:	f2c0 8093 	blt.w	801d68c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d566:	9b06      	ldr	r3, [sp, #24]
 801d568:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d56a:	9b07      	ldr	r3, [sp, #28]
 801d56c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d570:	2b00      	cmp	r3, #0
 801d572:	f340 80b4 	ble.w	801d6de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801d576:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d578:	142e      	asrs	r6, r5, #16
 801d57a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d57c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d580:	68c7      	ldr	r7, [r0, #12]
 801d582:	ea5f 402b 	movs.w	r0, fp, asr #16
 801d586:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d58a:	6892      	ldr	r2, [r2, #8]
 801d58c:	f100 80fb 	bmi.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d590:	f102 3cff 	add.w	ip, r2, #4294967295
 801d594:	4560      	cmp	r0, ip
 801d596:	f280 80f6 	bge.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d59a:	2e00      	cmp	r6, #0
 801d59c:	f2c0 80f3 	blt.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d5a0:	f107 3cff 	add.w	ip, r7, #4294967295
 801d5a4:	4566      	cmp	r6, ip
 801d5a6:	f280 80ee 	bge.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d5aa:	b212      	sxth	r2, r2
 801d5ac:	fb06 0002 	mla	r0, r6, r2, r0
 801d5b0:	9e08      	ldr	r6, [sp, #32]
 801d5b2:	1837      	adds	r7, r6, r0
 801d5b4:	5c30      	ldrb	r0, [r6, r0]
 801d5b6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801d5ba:	eb04 0c08 	add.w	ip, r4, r8
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	f000 80d3 	beq.w	801d76a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d5c4:	787e      	ldrb	r6, [r7, #1]
 801d5c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d5ca:	4426      	add	r6, r4
 801d5cc:	2900      	cmp	r1, #0
 801d5ce:	f000 80d4 	beq.w	801d77a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d5d2:	18b8      	adds	r0, r7, r2
 801d5d4:	5cba      	ldrb	r2, [r7, r2]
 801d5d6:	7840      	ldrb	r0, [r0, #1]
 801d5d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d5dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d5e0:	4422      	add	r2, r4
 801d5e2:	4420      	add	r0, r4
 801d5e4:	b29b      	uxth	r3, r3
 801d5e6:	78b7      	ldrb	r7, [r6, #2]
 801d5e8:	b289      	uxth	r1, r1
 801d5ea:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d5ee:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d5f2:	fb03 f901 	mul.w	r9, r3, r1
 801d5f6:	011b      	lsls	r3, r3, #4
 801d5f8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d5fc:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d600:	eba3 0309 	sub.w	r3, r3, r9
 801d604:	b289      	uxth	r1, r1
 801d606:	b29b      	uxth	r3, r3
 801d608:	ebae 0e01 	sub.w	lr, lr, r1
 801d60c:	435f      	muls	r7, r3
 801d60e:	fa1f fe8e 	uxth.w	lr, lr
 801d612:	fb0e 770a 	mla	r7, lr, sl, r7
 801d616:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d61a:	fb01 770a 	mla	r7, r1, sl, r7
 801d61e:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d622:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d626:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d62a:	f896 8000 	ldrb.w	r8, [r6]
 801d62e:	7876      	ldrb	r6, [r6, #1]
 801d630:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801d634:	fb03 f808 	mul.w	r8, r3, r8
 801d638:	4373      	muls	r3, r6
 801d63a:	fb0e 8807 	mla	r8, lr, r7, r8
 801d63e:	7817      	ldrb	r7, [r2, #0]
 801d640:	fb0e 330c 	mla	r3, lr, ip, r3
 801d644:	fb01 8807 	mla	r8, r1, r7, r8
 801d648:	7807      	ldrb	r7, [r0, #0]
 801d64a:	fb09 8707 	mla	r7, r9, r7, r8
 801d64e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d652:	ea47 070a 	orr.w	r7, r7, sl
 801d656:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d65a:	fb01 310a 	mla	r1, r1, sl, r3
 801d65e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d664:	fb09 1a0a 	mla	sl, r9, sl, r1
 801d668:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d66c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d670:	ea47 070a 	orr.w	r7, r7, sl
 801d674:	801f      	strh	r7, [r3, #0]
 801d676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d678:	3302      	adds	r3, #2
 801d67a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d67c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d67e:	449b      	add	fp, r3
 801d680:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d682:	441d      	add	r5, r3
 801d684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d686:	3b01      	subs	r3, #1
 801d688:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d68a:	e770      	b.n	801d56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d68c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d68e:	449b      	add	fp, r3
 801d690:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d692:	441d      	add	r5, r3
 801d694:	9b06      	ldr	r3, [sp, #24]
 801d696:	3b01      	subs	r3, #1
 801d698:	9306      	str	r3, [sp, #24]
 801d69a:	9b07      	ldr	r3, [sp, #28]
 801d69c:	3302      	adds	r3, #2
 801d69e:	9307      	str	r3, [sp, #28]
 801d6a0:	e745      	b.n	801d52e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d6a2:	d023      	beq.n	801d6ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d6a4:	9b06      	ldr	r3, [sp, #24]
 801d6a6:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801d6a8:	3b01      	subs	r3, #1
 801d6aa:	fb00 b003 	mla	r0, r0, r3, fp
 801d6ae:	1400      	asrs	r0, r0, #16
 801d6b0:	f53f af59 	bmi.w	801d566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d6b4:	3901      	subs	r1, #1
 801d6b6:	4288      	cmp	r0, r1
 801d6b8:	f6bf af55 	bge.w	801d566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d6bc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d6be:	fb01 5303 	mla	r3, r1, r3, r5
 801d6c2:	141b      	asrs	r3, r3, #16
 801d6c4:	f53f af4f 	bmi.w	801d566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d6c8:	3a01      	subs	r2, #1
 801d6ca:	4293      	cmp	r3, r2
 801d6cc:	f6bf af4b 	bge.w	801d566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d6d0:	9b06      	ldr	r3, [sp, #24]
 801d6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d6d4:	9b07      	ldr	r3, [sp, #28]
 801d6d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	dc70      	bgt.n	801d7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d6de:	9b06      	ldr	r3, [sp, #24]
 801d6e0:	9a07      	ldr	r2, [sp, #28]
 801d6e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d6ea:	9307      	str	r3, [sp, #28]
 801d6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	f340 80eb 	ble.w	801d8ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d6f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d6f8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d6fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d702:	eef0 6a62 	vmov.f32	s13, s5
 801d706:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d70a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d70e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d712:	ee16 ba90 	vmov	fp, s13
 801d716:	eef0 6a43 	vmov.f32	s13, s6
 801d71a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d71e:	ee16 5a90 	vmov	r5, s13
 801d722:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d726:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d72a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d72e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d732:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d736:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d73a:	ee12 2a90 	vmov	r2, s5
 801d73e:	eef0 2a47 	vmov.f32	s5, s14
 801d742:	fb92 f3f3 	sdiv	r3, r2, r3
 801d746:	ee13 2a10 	vmov	r2, s6
 801d74a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d74c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d74e:	eeb0 3a67 	vmov.f32	s6, s15
 801d752:	fb92 f3f3 	sdiv	r3, r2, r3
 801d756:	931c      	str	r3, [sp, #112]	@ 0x70
 801d758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d75a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d75c:	3b01      	subs	r3, #1
 801d75e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d760:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d762:	bf08      	it	eq
 801d764:	4613      	moveq	r3, r2
 801d766:	9306      	str	r3, [sp, #24]
 801d768:	e6d3      	b.n	801d512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d76a:	b149      	cbz	r1, 801d780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801d76c:	5cba      	ldrb	r2, [r7, r2]
 801d76e:	4660      	mov	r0, ip
 801d770:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d774:	4422      	add	r2, r4
 801d776:	4666      	mov	r6, ip
 801d778:	e734      	b.n	801d5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d77a:	4660      	mov	r0, ip
 801d77c:	4662      	mov	r2, ip
 801d77e:	e731      	b.n	801d5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d780:	4660      	mov	r0, ip
 801d782:	4662      	mov	r2, ip
 801d784:	e7f7      	b.n	801d776 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d786:	f110 0c01 	adds.w	ip, r0, #1
 801d78a:	f53f af74 	bmi.w	801d676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d78e:	4562      	cmp	r2, ip
 801d790:	f6ff af71 	blt.w	801d676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d794:	f116 0c01 	adds.w	ip, r6, #1
 801d798:	f53f af6d 	bmi.w	801d676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d79c:	4567      	cmp	r7, ip
 801d79e:	f6ff af6a 	blt.w	801d676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d7a2:	b23f      	sxth	r7, r7
 801d7a4:	b212      	sxth	r2, r2
 801d7a6:	9701      	str	r7, [sp, #4]
 801d7a8:	9200      	str	r2, [sp, #0]
 801d7aa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d7ae:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801d7b2:	4623      	mov	r3, r4
 801d7b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d7b6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d7ba:	f7ff fde7 	bl	801d38c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801d7be:	e75a      	b.n	801d676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d7c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d7c2:	ea4f 462b 	mov.w	r6, fp, asr #16
 801d7c6:	1428      	asrs	r0, r5, #16
 801d7c8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d7cc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d7d0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d7d4:	fb02 6000 	mla	r0, r2, r0, r6
 801d7d8:	9e08      	ldr	r6, [sp, #32]
 801d7da:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d7de:	1837      	adds	r7, r6, r0
 801d7e0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d7e4:	eb04 0c08 	add.w	ip, r4, r8
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d060      	beq.n	801d8ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801d7ec:	787e      	ldrb	r6, [r7, #1]
 801d7ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7f2:	4426      	add	r6, r4
 801d7f4:	2900      	cmp	r1, #0
 801d7f6:	d062      	beq.n	801d8be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801d7f8:	18b8      	adds	r0, r7, r2
 801d7fa:	5cba      	ldrb	r2, [r7, r2]
 801d7fc:	7840      	ldrb	r0, [r0, #1]
 801d7fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d802:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d806:	4422      	add	r2, r4
 801d808:	4420      	add	r0, r4
 801d80a:	b29b      	uxth	r3, r3
 801d80c:	78b7      	ldrb	r7, [r6, #2]
 801d80e:	b289      	uxth	r1, r1
 801d810:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d814:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d818:	fb03 f901 	mul.w	r9, r3, r1
 801d81c:	011b      	lsls	r3, r3, #4
 801d81e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d822:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d826:	eba3 0309 	sub.w	r3, r3, r9
 801d82a:	b289      	uxth	r1, r1
 801d82c:	b29b      	uxth	r3, r3
 801d82e:	ebae 0e01 	sub.w	lr, lr, r1
 801d832:	435f      	muls	r7, r3
 801d834:	fa1f fe8e 	uxth.w	lr, lr
 801d838:	fb0e 770a 	mla	r7, lr, sl, r7
 801d83c:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d840:	fb01 770a 	mla	r7, r1, sl, r7
 801d844:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d848:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d84c:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d850:	f896 8000 	ldrb.w	r8, [r6]
 801d854:	7876      	ldrb	r6, [r6, #1]
 801d856:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801d85a:	fb03 f808 	mul.w	r8, r3, r8
 801d85e:	4373      	muls	r3, r6
 801d860:	7856      	ldrb	r6, [r2, #1]
 801d862:	fb0e 8807 	mla	r8, lr, r7, r8
 801d866:	7817      	ldrb	r7, [r2, #0]
 801d868:	fb0e 330c 	mla	r3, lr, ip, r3
 801d86c:	fb01 8807 	mla	r8, r1, r7, r8
 801d870:	7807      	ldrb	r7, [r0, #0]
 801d872:	fb01 3306 	mla	r3, r1, r6, r3
 801d876:	fb09 8707 	mla	r7, r9, r7, r8
 801d87a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d87e:	ea47 070a 	orr.w	r7, r7, sl
 801d882:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d886:	fb09 3a0a 	mla	sl, r9, sl, r3
 801d88a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d88c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d890:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d894:	ea47 070a 	orr.w	r7, r7, sl
 801d898:	f823 7b02 	strh.w	r7, [r3], #2
 801d89c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d89e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d8a0:	449b      	add	fp, r3
 801d8a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d8a4:	441d      	add	r5, r3
 801d8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8a8:	3b01      	subs	r3, #1
 801d8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8ac:	e714      	b.n	801d6d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801d8ae:	b149      	cbz	r1, 801d8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801d8b0:	5cba      	ldrb	r2, [r7, r2]
 801d8b2:	4660      	mov	r0, ip
 801d8b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d8b8:	4422      	add	r2, r4
 801d8ba:	4666      	mov	r6, ip
 801d8bc:	e7a5      	b.n	801d80a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d8be:	4660      	mov	r0, ip
 801d8c0:	4662      	mov	r2, ip
 801d8c2:	e7a2      	b.n	801d80a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d8c4:	4660      	mov	r0, ip
 801d8c6:	4662      	mov	r2, ip
 801d8c8:	e7f7      	b.n	801d8ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801d8ca:	b00f      	add	sp, #60	@ 0x3c
 801d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8d4:	b085      	sub	sp, #20
 801d8d6:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 801d8da:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 801d8de:	9102      	str	r1, [sp, #8]
 801d8e0:	2c00      	cmp	r4, #0
 801d8e2:	fb04 710c 	mla	r1, r4, ip, r7
 801d8e6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801d8ea:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 801d8ee:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801d8f2:	eb02 0e01 	add.w	lr, r2, r1
 801d8f6:	f2c0 8122 	blt.w	801db3e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801d8fa:	45a0      	cmp	r8, r4
 801d8fc:	f340 811f 	ble.w	801db3e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801d900:	2f00      	cmp	r7, #0
 801d902:	f2c0 811a 	blt.w	801db3a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801d906:	45bc      	cmp	ip, r7
 801d908:	f340 8117 	ble.w	801db3a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801d90c:	5c52      	ldrb	r2, [r2, r1]
 801d90e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d912:	1c7a      	adds	r2, r7, #1
 801d914:	f100 8116 	bmi.w	801db44 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801d918:	4594      	cmp	ip, r2
 801d91a:	f340 8113 	ble.w	801db44 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801d91e:	2e00      	cmp	r6, #0
 801d920:	f000 8112 	beq.w	801db48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801d924:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d92c:	3401      	adds	r4, #1
 801d92e:	f100 810f 	bmi.w	801db50 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801d932:	45a0      	cmp	r8, r4
 801d934:	f340 810c 	ble.w	801db50 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801d938:	2800      	cmp	r0, #0
 801d93a:	f000 810c 	beq.w	801db56 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801d93e:	2f00      	cmp	r7, #0
 801d940:	f2c0 8104 	blt.w	801db4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801d944:	45bc      	cmp	ip, r7
 801d946:	f340 8101 	ble.w	801db4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801d94a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801d94e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801d952:	3701      	adds	r7, #1
 801d954:	f100 8102 	bmi.w	801db5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801d958:	45bc      	cmp	ip, r7
 801d95a:	f340 80ff 	ble.w	801db5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801d95e:	2e00      	cmp	r6, #0
 801d960:	f000 80fe 	beq.w	801db60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801d964:	44f4      	add	ip, lr
 801d966:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d96a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d96e:	b2b6      	uxth	r6, r6
 801d970:	b280      	uxth	r0, r0
 801d972:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801d976:	fb00 fe06 	mul.w	lr, r0, r6
 801d97a:	0136      	lsls	r6, r6, #4
 801d97c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801d980:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801d984:	eba6 070e 	sub.w	r7, r6, lr
 801d988:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 801d98c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d990:	b280      	uxth	r0, r0
 801d992:	b2bf      	uxth	r7, r7
 801d994:	1a1b      	subs	r3, r3, r0
 801d996:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d99a:	fb0a f607 	mul.w	r6, sl, r7
 801d99e:	b29b      	uxth	r3, r3
 801d9a0:	fb0b 6603 	mla	r6, fp, r3, r6
 801d9a4:	fb00 6609 	mla	r6, r0, r9, r6
 801d9a8:	fb0e 6608 	mla	r6, lr, r8, r6
 801d9ac:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d9b0:	9600      	str	r6, [sp, #0]
 801d9b2:	2e00      	cmp	r6, #0
 801d9b4:	f000 80be 	beq.w	801db34 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801d9b8:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801d9bc:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d9c0:	9e02      	ldr	r6, [sp, #8]
 801d9c2:	fb0b fc0c 	mul.w	ip, fp, ip
 801d9c6:	fb0b f505 	mul.w	r5, fp, r5
 801d9ca:	8836      	ldrh	r6, [r6, #0]
 801d9cc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d9d0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d9d4:	9501      	str	r5, [sp, #4]
 801d9d6:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801d9da:	44dc      	add	ip, fp
 801d9dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9e0:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 801d9e4:	9503      	str	r5, [sp, #12]
 801d9e6:	9d01      	ldr	r5, [sp, #4]
 801d9e8:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 801d9ec:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d9f0:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 801d9f4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801d9f8:	fb0a fc0c 	mul.w	ip, sl, ip
 801d9fc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801da00:	fb0a fa01 	mul.w	sl, sl, r1
 801da04:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801da08:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801da0c:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 801da10:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801da14:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801da18:	4465      	add	r5, ip
 801da1a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801da1e:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 801da22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da26:	fb09 fc0c 	mul.w	ip, r9, ip
 801da2a:	0a2d      	lsrs	r5, r5, #8
 801da2c:	fb09 f904 	mul.w	r9, r9, r4
 801da30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801da34:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801da38:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801da3c:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 801da40:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801da44:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801da48:	437d      	muls	r5, r7
 801da4a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801da4e:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 801da52:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801da56:	4461      	add	r1, ip
 801da58:	fb08 f404 	mul.w	r4, r8, r4
 801da5c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801da60:	fb08 f802 	mul.w	r8, r8, r2
 801da64:	0a09      	lsrs	r1, r1, #8
 801da66:	0a22      	lsrs	r2, r4, #8
 801da68:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 801da6c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801da70:	fb07 f70a 	mul.w	r7, r7, sl
 801da74:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801da78:	4414      	add	r4, r2
 801da7a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801da7e:	0a24      	lsrs	r4, r4, #8
 801da80:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801da84:	9a03      	ldr	r2, [sp, #12]
 801da86:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 801da8a:	fb02 5503 	mla	r5, r2, r3, r5
 801da8e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801da92:	9a00      	ldr	r2, [sp, #0]
 801da94:	fb04 540e 	mla	r4, r4, lr, r5
 801da98:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801da9c:	1235      	asrs	r5, r6, #8
 801da9e:	fb01 4100 	mla	r1, r1, r0, r4
 801daa2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801daa6:	0a09      	lsrs	r1, r1, #8
 801daa8:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 801daac:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 801dab0:	fb03 7101 	mla	r1, r3, r1, r7
 801dab4:	fb0e 1e08 	mla	lr, lr, r8, r1
 801dab8:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 801dabc:	fb00 e101 	mla	r1, r0, r1, lr
 801dac0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801dac4:	b287      	uxth	r7, r0
 801dac6:	0a09      	lsrs	r1, r1, #8
 801dac8:	437a      	muls	r2, r7
 801daca:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801dace:	1c53      	adds	r3, r2, #1
 801dad0:	4321      	orrs	r1, r4
 801dad2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dad6:	0c0a      	lsrs	r2, r1, #16
 801dad8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801dadc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801dae0:	b2c8      	uxtb	r0, r1
 801dae2:	fb12 f207 	smulbb	r2, r2, r7
 801dae6:	fb14 f407 	smulbb	r4, r4, r7
 801daea:	b2db      	uxtb	r3, r3
 801daec:	fb10 f007 	smulbb	r0, r0, r7
 801daf0:	fb05 2503 	mla	r5, r5, r3, r2
 801daf4:	10f2      	asrs	r2, r6, #3
 801daf6:	00f6      	lsls	r6, r6, #3
 801daf8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801dafc:	b2ad      	uxth	r5, r5
 801dafe:	b2f6      	uxtb	r6, r6
 801db00:	fb02 4203 	mla	r2, r2, r3, r4
 801db04:	fb06 0303 	mla	r3, r6, r3, r0
 801db08:	b294      	uxth	r4, r2
 801db0a:	b299      	uxth	r1, r3
 801db0c:	1c6b      	adds	r3, r5, #1
 801db0e:	1c62      	adds	r2, r4, #1
 801db10:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801db14:	1c4b      	adds	r3, r1, #1
 801db16:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801db1a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801db1e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801db22:	0952      	lsrs	r2, r2, #5
 801db24:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801db28:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801db2c:	432b      	orrs	r3, r5
 801db2e:	4313      	orrs	r3, r2
 801db30:	9a02      	ldr	r2, [sp, #8]
 801db32:	8013      	strh	r3, [r2, #0]
 801db34:	b005      	add	sp, #20
 801db36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db3a:	2500      	movs	r5, #0
 801db3c:	e6e9      	b.n	801d912 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801db3e:	2100      	movs	r1, #0
 801db40:	460d      	mov	r5, r1
 801db42:	e6f3      	b.n	801d92c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801db44:	2100      	movs	r1, #0
 801db46:	e6f1      	b.n	801d92c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801db48:	4631      	mov	r1, r6
 801db4a:	e6ef      	b.n	801d92c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801db4c:	2400      	movs	r4, #0
 801db4e:	e700      	b.n	801d952 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801db50:	2200      	movs	r2, #0
 801db52:	4614      	mov	r4, r2
 801db54:	e70b      	b.n	801d96e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801db56:	4602      	mov	r2, r0
 801db58:	4604      	mov	r4, r0
 801db5a:	e708      	b.n	801d96e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801db5c:	2200      	movs	r2, #0
 801db5e:	e706      	b.n	801d96e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801db60:	4632      	mov	r2, r6
 801db62:	e704      	b.n	801d96e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801db64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db68:	b09f      	sub	sp, #124	@ 0x7c
 801db6a:	921b      	str	r2, [sp, #108]	@ 0x6c
 801db6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801db6e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801db70:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801db74:	901d      	str	r0, [sp, #116]	@ 0x74
 801db76:	931c      	str	r3, [sp, #112]	@ 0x70
 801db78:	6850      	ldr	r0, [r2, #4]
 801db7a:	9119      	str	r1, [sp, #100]	@ 0x64
 801db7c:	6812      	ldr	r2, [r2, #0]
 801db7e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801db80:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801db84:	fb00 1303 	mla	r3, r0, r3, r1
 801db88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801db8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801db8e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	9312      	str	r3, [sp, #72]	@ 0x48
 801db94:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db96:	685e      	ldr	r6, [r3, #4]
 801db98:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801db9c:	3604      	adds	r6, #4
 801db9e:	930d      	str	r3, [sp, #52]	@ 0x34
 801dba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	dc03      	bgt.n	801dbae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dba6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	f340 8387 	ble.w	801e2bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801dbae:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801dbb0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dbb4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dbb8:	1e48      	subs	r0, r1, #1
 801dbba:	1e57      	subs	r7, r2, #1
 801dbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	f340 8194 	ble.w	801deec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801dbc4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801dbc6:	142b      	asrs	r3, r5, #16
 801dbc8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801dbcc:	d406      	bmi.n	801dbdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dbce:	4584      	cmp	ip, r0
 801dbd0:	da04      	bge.n	801dbdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	db02      	blt.n	801dbdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dbd6:	42bb      	cmp	r3, r7
 801dbd8:	f2c0 8189 	blt.w	801deee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801dbdc:	f11c 0c01 	adds.w	ip, ip, #1
 801dbe0:	f100 8177 	bmi.w	801ded2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dbe4:	4561      	cmp	r1, ip
 801dbe6:	f2c0 8174 	blt.w	801ded2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dbea:	3301      	adds	r3, #1
 801dbec:	f100 8171 	bmi.w	801ded2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dbf0:	429a      	cmp	r2, r3
 801dbf2:	f2c0 816e 	blt.w	801ded2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dbf8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801dbfa:	931a      	str	r3, [sp, #104]	@ 0x68
 801dbfc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	f340 8193 	ble.w	801df2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801dc04:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801dc06:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801dc0a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dc0e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dc12:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801dc14:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801dc18:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801dc1a:	141b      	asrs	r3, r3, #16
 801dc1c:	f100 81d6 	bmi.w	801dfcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dc20:	f100 38ff 	add.w	r8, r0, #4294967295
 801dc24:	4543      	cmp	r3, r8
 801dc26:	f280 81d1 	bge.w	801dfcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dc2a:	f1bc 0f00 	cmp.w	ip, #0
 801dc2e:	f2c0 81cd 	blt.w	801dfcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dc32:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dc36:	45c4      	cmp	ip, r8
 801dc38:	f280 81c8 	bge.w	801dfcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dc3c:	b200      	sxth	r0, r0
 801dc3e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dc40:	fb0c 3300 	mla	r3, ip, r0, r3
 801dc44:	eb04 0803 	add.w	r8, r4, r3
 801dc48:	5ce3      	ldrb	r3, [r4, r3]
 801dc4a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dc4e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dc52:	2a00      	cmp	r2, #0
 801dc54:	f000 81af 	beq.w	801dfb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dc58:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dc5c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dc60:	940e      	str	r4, [sp, #56]	@ 0x38
 801dc62:	0e24      	lsrs	r4, r4, #24
 801dc64:	9415      	str	r4, [sp, #84]	@ 0x54
 801dc66:	b179      	cbz	r1, 801dc88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801dc68:	eb08 0c00 	add.w	ip, r8, r0
 801dc6c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dc70:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dc74:	900a      	str	r0, [sp, #40]	@ 0x28
 801dc76:	0e00      	lsrs	r0, r0, #24
 801dc78:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dc7a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801dc7e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dc82:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dc84:	0e00      	lsrs	r0, r0, #24
 801dc86:	9016      	str	r0, [sp, #88]	@ 0x58
 801dc88:	b292      	uxth	r2, r2
 801dc8a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dc8c:	b289      	uxth	r1, r1
 801dc8e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dc90:	fb02 f901 	mul.w	r9, r2, r1
 801dc94:	0112      	lsls	r2, r2, #4
 801dc96:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dc9a:	eba2 0809 	sub.w	r8, r2, r9
 801dc9e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dca2:	b289      	uxth	r1, r1
 801dca4:	fa1f f888 	uxth.w	r8, r8
 801dca8:	1a52      	subs	r2, r2, r1
 801dcaa:	fb08 f000 	mul.w	r0, r8, r0
 801dcae:	b292      	uxth	r2, r2
 801dcb0:	fb02 000e 	mla	r0, r2, lr, r0
 801dcb4:	fb01 0004 	mla	r0, r1, r4, r0
 801dcb8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dcba:	fb09 0004 	mla	r0, r9, r4, r0
 801dcbe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dcc2:	2800      	cmp	r0, #0
 801dcc4:	f000 80fa 	beq.w	801debc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dcc8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dccc:	d01b      	beq.n	801dd06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801dcce:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dcd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dcd6:	fb0e fa0a 	mul.w	sl, lr, sl
 801dcda:	fb0e fe03 	mul.w	lr, lr, r3
 801dcde:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dce2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dce6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dcea:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dcee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dcf2:	4453      	add	r3, sl
 801dcf4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dcf8:	0a1b      	lsrs	r3, r3, #8
 801dcfa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dcfe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dd02:	ea43 030c 	orr.w	r3, r3, ip
 801dd06:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dd08:	2cff      	cmp	r4, #255	@ 0xff
 801dd0a:	d021      	beq.n	801dd50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801dd0c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd0e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dd12:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dd14:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd18:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd1a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dd1e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dd20:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd24:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd28:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd2c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd30:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd34:	44de      	add	lr, fp
 801dd36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd42:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd46:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd4a:	ea4e 040a 	orr.w	r4, lr, sl
 801dd4e:	940e      	str	r4, [sp, #56]	@ 0x38
 801dd50:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd52:	2cff      	cmp	r4, #255	@ 0xff
 801dd54:	d021      	beq.n	801dd9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801dd56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd58:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dd5c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd5e:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd64:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dd68:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd6e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd72:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd76:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd7a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd7e:	44de      	add	lr, fp
 801dd80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd8c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd90:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd94:	ea4e 040a 	orr.w	r4, lr, sl
 801dd98:	940a      	str	r4, [sp, #40]	@ 0x28
 801dd9a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd9c:	2cff      	cmp	r4, #255	@ 0xff
 801dd9e:	d021      	beq.n	801dde4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801dda0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dda2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dda6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dda8:	fb04 fb0b 	mul.w	fp, r4, fp
 801ddac:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ddae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ddb2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ddb4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ddb8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ddbc:	fb04 fa0a 	mul.w	sl, r4, sl
 801ddc0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ddc4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ddc8:	44de      	add	lr, fp
 801ddca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ddce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ddd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ddd6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ddda:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ddde:	ea4e 040a 	orr.w	r4, lr, sl
 801dde2:	940f      	str	r4, [sp, #60]	@ 0x3c
 801dde4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dde6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801ddea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ddee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ddf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ddf4:	fb08 fc0c 	mul.w	ip, r8, ip
 801ddf8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ddfc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801de00:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801de02:	fb01 cc0e 	mla	ip, r1, lr, ip
 801de06:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801de0a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801de0c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801de10:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801de14:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801de16:	fb08 f80e 	mul.w	r8, r8, lr
 801de1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de1e:	fb02 8303 	mla	r3, r2, r3, r8
 801de22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de24:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801de28:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801de2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801de2e:	fb01 330a 	mla	r3, r1, sl, r3
 801de32:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801de36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801de38:	fb09 3901 	mla	r9, r9, r1, r3
 801de3c:	883b      	ldrh	r3, [r7, #0]
 801de3e:	4342      	muls	r2, r0
 801de40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801de44:	1c50      	adds	r0, r2, #1
 801de46:	1219      	asrs	r1, r3, #8
 801de48:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801de4c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801de50:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801de54:	ea4c 0c09 	orr.w	ip, ip, r9
 801de58:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801de5c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801de60:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801de64:	b2c0      	uxtb	r0, r0
 801de66:	fb12 f204 	smulbb	r2, r2, r4
 801de6a:	fa5f fc8c 	uxtb.w	ip, ip
 801de6e:	fb1e fe04 	smulbb	lr, lr, r4
 801de72:	fb01 2100 	mla	r1, r1, r0, r2
 801de76:	10da      	asrs	r2, r3, #3
 801de78:	fb1c fc04 	smulbb	ip, ip, r4
 801de7c:	00db      	lsls	r3, r3, #3
 801de7e:	b289      	uxth	r1, r1
 801de80:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801de84:	b2db      	uxtb	r3, r3
 801de86:	fb02 e200 	mla	r2, r2, r0, lr
 801de8a:	fb03 c300 	mla	r3, r3, r0, ip
 801de8e:	b292      	uxth	r2, r2
 801de90:	fa1f fc83 	uxth.w	ip, r3
 801de94:	1c4b      	adds	r3, r1, #1
 801de96:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801de9a:	f10c 0301 	add.w	r3, ip, #1
 801de9e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801dea2:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801dea6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801deaa:	430b      	orrs	r3, r1
 801deac:	1c51      	adds	r1, r2, #1
 801deae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801deb2:	0952      	lsrs	r2, r2, #5
 801deb4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801deb8:	4313      	orrs	r3, r2
 801deba:	803b      	strh	r3, [r7, #0]
 801debc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801debe:	3702      	adds	r7, #2
 801dec0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801dec2:	441a      	add	r2, r3
 801dec4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dec6:	441d      	add	r5, r3
 801dec8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801deca:	9229      	str	r2, [sp, #164]	@ 0xa4
 801decc:	3b01      	subs	r3, #1
 801dece:	931a      	str	r3, [sp, #104]	@ 0x68
 801ded0:	e694      	b.n	801dbfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ded2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ded4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801ded6:	441c      	add	r4, r3
 801ded8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801deda:	441d      	add	r5, r3
 801dedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dede:	9429      	str	r4, [sp, #164]	@ 0xa4
 801dee0:	3b01      	subs	r3, #1
 801dee2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dee6:	3302      	adds	r3, #2
 801dee8:	930c      	str	r3, [sp, #48]	@ 0x30
 801deea:	e667      	b.n	801dbbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801deec:	d024      	beq.n	801df38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801deee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801def0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801def2:	3b01      	subs	r3, #1
 801def4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801def6:	fb00 4003 	mla	r0, r0, r3, r4
 801defa:	1400      	asrs	r0, r0, #16
 801defc:	f53f ae7b 	bmi.w	801dbf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801df00:	3901      	subs	r1, #1
 801df02:	4288      	cmp	r0, r1
 801df04:	f6bf ae77 	bge.w	801dbf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801df08:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801df0a:	fb01 5303 	mla	r3, r1, r3, r5
 801df0e:	141b      	asrs	r3, r3, #16
 801df10:	f53f ae71 	bmi.w	801dbf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801df14:	3a01      	subs	r2, #1
 801df16:	4293      	cmp	r3, r2
 801df18:	f6bf ae6d 	bge.w	801dbf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801df1c:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801df20:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801df24:	f1bb 0f00 	cmp.w	fp, #0
 801df28:	dc70      	bgt.n	801e00c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801df2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801df30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801df32:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801df36:	930c      	str	r3, [sp, #48]	@ 0x30
 801df38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	f340 81be 	ble.w	801e2bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801df40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801df44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df4e:	eef0 6a62 	vmov.f32	s13, s5
 801df52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df5e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801df62:	eef0 6a43 	vmov.f32	s13, s6
 801df66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df6a:	ee16 5a90 	vmov	r5, s13
 801df6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df76:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df86:	ee12 2a90 	vmov	r2, s5
 801df8a:	eef0 2a47 	vmov.f32	s5, s14
 801df8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df92:	ee13 2a10 	vmov	r2, s6
 801df96:	932b      	str	r3, [sp, #172]	@ 0xac
 801df98:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df9a:	eeb0 3a67 	vmov.f32	s6, s15
 801df9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfa2:	932c      	str	r3, [sp, #176]	@ 0xb0
 801dfa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dfa6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dfa8:	3b01      	subs	r3, #1
 801dfaa:	9319      	str	r3, [sp, #100]	@ 0x64
 801dfac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dfae:	bf08      	it	eq
 801dfb0:	4613      	moveq	r3, r2
 801dfb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfb4:	e5f4      	b.n	801dba0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dfb6:	2900      	cmp	r1, #0
 801dfb8:	f43f ae66 	beq.w	801dc88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801dfbc:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dfc0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dfc4:	900a      	str	r0, [sp, #40]	@ 0x28
 801dfc6:	0e00      	lsrs	r0, r0, #24
 801dfc8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dfca:	e65d      	b.n	801dc88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801dfcc:	f113 0801 	adds.w	r8, r3, #1
 801dfd0:	f53f af74 	bmi.w	801debc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dfd4:	4540      	cmp	r0, r8
 801dfd6:	f6ff af71 	blt.w	801debc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dfda:	f11c 0801 	adds.w	r8, ip, #1
 801dfde:	f53f af6d 	bmi.w	801debc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dfe2:	45c6      	cmp	lr, r8
 801dfe4:	f6ff af6a 	blt.w	801debc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dfe8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801dfea:	b200      	sxth	r0, r0
 801dfec:	9302      	str	r3, [sp, #8]
 801dfee:	fa0f f38e 	sxth.w	r3, lr
 801dff2:	9000      	str	r0, [sp, #0]
 801dff4:	9301      	str	r3, [sp, #4]
 801dff6:	4633      	mov	r3, r6
 801dff8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801dffa:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801dffe:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e002:	4639      	mov	r1, r7
 801e004:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e006:	f7ff fc63 	bl	801d8d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801e00a:	e757      	b.n	801debc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e00c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e00e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e012:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e014:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e018:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e01a:	1427      	asrs	r7, r4, #16
 801e01c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e01e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e022:	142b      	asrs	r3, r5, #16
 801e024:	fb01 7303 	mla	r3, r1, r3, r7
 801e028:	18e7      	adds	r7, r4, r3
 801e02a:	5ce3      	ldrb	r3, [r4, r3]
 801e02c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e030:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e034:	2a00      	cmp	r2, #0
 801e036:	f000 8137 	beq.w	801e2a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801e03a:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e03e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e042:	9410      	str	r4, [sp, #64]	@ 0x40
 801e044:	0e24      	lsrs	r4, r4, #24
 801e046:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e048:	b170      	cbz	r0, 801e068 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e04a:	eb07 0e01 	add.w	lr, r7, r1
 801e04e:	5c79      	ldrb	r1, [r7, r1]
 801e050:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e054:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e056:	0e09      	lsrs	r1, r1, #24
 801e058:	9114      	str	r1, [sp, #80]	@ 0x50
 801e05a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e05e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e062:	9111      	str	r1, [sp, #68]	@ 0x44
 801e064:	0e09      	lsrs	r1, r1, #24
 801e066:	9118      	str	r1, [sp, #96]	@ 0x60
 801e068:	b292      	uxth	r2, r2
 801e06a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e06c:	b280      	uxth	r0, r0
 801e06e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e070:	fb02 f800 	mul.w	r8, r2, r0
 801e074:	0112      	lsls	r2, r2, #4
 801e076:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e07a:	eba2 0e08 	sub.w	lr, r2, r8
 801e07e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e082:	b280      	uxth	r0, r0
 801e084:	fa1f fe8e 	uxth.w	lr, lr
 801e088:	1a12      	subs	r2, r2, r0
 801e08a:	fb0e f101 	mul.w	r1, lr, r1
 801e08e:	b292      	uxth	r2, r2
 801e090:	fb02 110c 	mla	r1, r2, ip, r1
 801e094:	fb00 1104 	mla	r1, r0, r4, r1
 801e098:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e09a:	fb08 1104 	mla	r1, r8, r4, r1
 801e09e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e0a2:	2900      	cmp	r1, #0
 801e0a4:	f000 80f5 	beq.w	801e292 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801e0a8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e0ac:	d019      	beq.n	801e0e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801e0ae:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e0b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e0b6:	fb0c fa0a 	mul.w	sl, ip, sl
 801e0ba:	fb0c fc03 	mul.w	ip, ip, r3
 801e0be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e0c2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e0c6:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e0ca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e0ce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e0d2:	4453      	add	r3, sl
 801e0d4:	0a3f      	lsrs	r7, r7, #8
 801e0d6:	0a1b      	lsrs	r3, r3, #8
 801e0d8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e0dc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e0e0:	433b      	orrs	r3, r7
 801e0e2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e0e4:	2cff      	cmp	r4, #255	@ 0xff
 801e0e6:	d020      	beq.n	801e12a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801e0e8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e0ea:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e0ee:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e0f0:	4367      	muls	r7, r4
 801e0f2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e0f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e0f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0fc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e0fe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e102:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e106:	fb04 fa0a 	mul.w	sl, r4, sl
 801e10a:	44bc      	add	ip, r7
 801e10c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e110:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e114:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e118:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e11c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e120:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e124:	ea4c 040a 	orr.w	r4, ip, sl
 801e128:	9410      	str	r4, [sp, #64]	@ 0x40
 801e12a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e12c:	2cff      	cmp	r4, #255	@ 0xff
 801e12e:	d020      	beq.n	801e172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801e130:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e132:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e136:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e138:	4367      	muls	r7, r4
 801e13a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e13c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e140:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e144:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e146:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e14a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e14e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e152:	44bc      	add	ip, r7
 801e154:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e158:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e15c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e160:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e164:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e168:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e16c:	ea4c 040a 	orr.w	r4, ip, sl
 801e170:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e172:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e174:	2cff      	cmp	r4, #255	@ 0xff
 801e176:	d020      	beq.n	801e1ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801e178:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e17a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e17e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e180:	4367      	muls	r7, r4
 801e182:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e184:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e188:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e18c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e18e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e192:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e196:	fb04 fa0a 	mul.w	sl, r4, sl
 801e19a:	44bc      	add	ip, r7
 801e19c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e1a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e1a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e1ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e1b0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e1b4:	ea4c 040a 	orr.w	r4, ip, sl
 801e1b8:	9411      	str	r4, [sp, #68]	@ 0x44
 801e1ba:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e1bc:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e1c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e1c4:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e1c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e1ca:	fb0e f707 	mul.w	r7, lr, r7
 801e1ce:	fb02 770c 	mla	r7, r2, ip, r7
 801e1d2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e1d6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e1d8:	fb00 770c 	mla	r7, r0, ip, r7
 801e1dc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e1e0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e1e2:	fb08 770c 	mla	r7, r8, ip, r7
 801e1e6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e1ea:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e1ec:	fb0e fe0c 	mul.w	lr, lr, ip
 801e1f0:	0a3f      	lsrs	r7, r7, #8
 801e1f2:	fb02 e303 	mla	r3, r2, r3, lr
 801e1f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e1f8:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e1fc:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e200:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e202:	fb00 330a 	mla	r3, r0, sl, r3
 801e206:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e20a:	f8b9 0000 	ldrh.w	r0, [r9]
 801e20e:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e214:	1202      	asrs	r2, r0, #8
 801e216:	434b      	muls	r3, r1
 801e218:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e21c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801e220:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e224:	1c59      	adds	r1, r3, #1
 801e226:	ea47 070c 	orr.w	r7, r7, ip
 801e22a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e22e:	0c3b      	lsrs	r3, r7, #16
 801e230:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e234:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801e238:	b2ff      	uxtb	r7, r7
 801e23a:	fb13 f304 	smulbb	r3, r3, r4
 801e23e:	b2c9      	uxtb	r1, r1
 801e240:	fb1c fc04 	smulbb	ip, ip, r4
 801e244:	fb02 3201 	mla	r2, r2, r1, r3
 801e248:	10c3      	asrs	r3, r0, #3
 801e24a:	fb17 f704 	smulbb	r7, r7, r4
 801e24e:	00c0      	lsls	r0, r0, #3
 801e250:	b292      	uxth	r2, r2
 801e252:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801e256:	b2c0      	uxtb	r0, r0
 801e258:	fb03 c301 	mla	r3, r3, r1, ip
 801e25c:	f102 0c01 	add.w	ip, r2, #1
 801e260:	fb00 7001 	mla	r0, r0, r1, r7
 801e264:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e268:	b280      	uxth	r0, r0
 801e26a:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 801e26e:	b29b      	uxth	r3, r3
 801e270:	1c42      	adds	r2, r0, #1
 801e272:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e276:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e27a:	ea42 020c 	orr.w	r2, r2, ip
 801e27e:	f103 0c01 	add.w	ip, r3, #1
 801e282:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e286:	095b      	lsrs	r3, r3, #5
 801e288:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e28c:	431a      	orrs	r2, r3
 801e28e:	f8a9 2000 	strh.w	r2, [r9]
 801e292:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e294:	f109 0902 	add.w	r9, r9, #2
 801e298:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e29a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e29e:	441a      	add	r2, r3
 801e2a0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e2a2:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e2a4:	441d      	add	r5, r3
 801e2a6:	e63d      	b.n	801df24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e2a8:	2800      	cmp	r0, #0
 801e2aa:	f43f aedd 	beq.w	801e068 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e2ae:	5c79      	ldrb	r1, [r7, r1]
 801e2b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e2b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e2b6:	0e09      	lsrs	r1, r1, #24
 801e2b8:	9114      	str	r1, [sp, #80]	@ 0x50
 801e2ba:	e6d5      	b.n	801e068 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e2bc:	b01f      	add	sp, #124	@ 0x7c
 801e2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e2c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2c6:	b089      	sub	sp, #36	@ 0x24
 801e2c8:	9101      	str	r1, [sp, #4]
 801e2ca:	9801      	ldr	r0, [sp, #4]
 801e2cc:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 801e2d0:	8800      	ldrh	r0, [r0, #0]
 801e2d2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 801e2d6:	1206      	asrs	r6, r0, #8
 801e2d8:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 801e2dc:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 801e2e0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e2e4:	9602      	str	r6, [sp, #8]
 801e2e6:	10c6      	asrs	r6, r0, #3
 801e2e8:	00c0      	lsls	r0, r0, #3
 801e2ea:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e2ee:	b2c0      	uxtb	r0, r0
 801e2f0:	9603      	str	r6, [sp, #12]
 801e2f2:	9004      	str	r0, [sp, #16]
 801e2f4:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 801e2f8:	fb07 100c 	mla	r0, r7, ip, r1
 801e2fc:	2f00      	cmp	r7, #0
 801e2fe:	eb02 0e00 	add.w	lr, r2, r0
 801e302:	f2c0 810a 	blt.w	801e51a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e306:	45b8      	cmp	r8, r7
 801e308:	f340 8107 	ble.w	801e51a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e30c:	2900      	cmp	r1, #0
 801e30e:	f2c0 8102 	blt.w	801e516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e312:	458c      	cmp	ip, r1
 801e314:	f340 80ff 	ble.w	801e516 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e318:	5c12      	ldrb	r2, [r2, r0]
 801e31a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e31e:	1c4a      	adds	r2, r1, #1
 801e320:	f100 80fe 	bmi.w	801e520 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e324:	4594      	cmp	ip, r2
 801e326:	f340 80fb 	ble.w	801e520 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e32a:	2d00      	cmp	r5, #0
 801e32c:	f000 80fa 	beq.w	801e524 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801e330:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e334:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e338:	3701      	adds	r7, #1
 801e33a:	f100 80f7 	bmi.w	801e52c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e33e:	45b8      	cmp	r8, r7
 801e340:	f340 80f4 	ble.w	801e52c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e344:	2c00      	cmp	r4, #0
 801e346:	f000 80f4 	beq.w	801e532 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801e34a:	2900      	cmp	r1, #0
 801e34c:	eb0e 020c 	add.w	r2, lr, ip
 801e350:	f2c0 80ea 	blt.w	801e528 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e354:	458c      	cmp	ip, r1
 801e356:	f340 80e7 	ble.w	801e528 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e35a:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801e35e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801e362:	3101      	adds	r1, #1
 801e364:	f100 80e8 	bmi.w	801e538 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e368:	458c      	cmp	ip, r1
 801e36a:	f340 80e5 	ble.w	801e538 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e36e:	2d00      	cmp	r5, #0
 801e370:	f000 80e4 	beq.w	801e53c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801e374:	7852      	ldrb	r2, [r2, #1]
 801e376:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e37a:	0e0b      	lsrs	r3, r1, #24
 801e37c:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 801e380:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e384:	9300      	str	r3, [sp, #0]
 801e386:	b2a4      	uxth	r4, r4
 801e388:	b2ab      	uxth	r3, r5
 801e38a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801e38e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e392:	fb03 f904 	mul.w	r9, r3, r4
 801e396:	011b      	lsls	r3, r3, #4
 801e398:	fb0a f505 	mul.w	r5, sl, r5
 801e39c:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801e3a0:	eba3 0e09 	sub.w	lr, r3, r9
 801e3a4:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 801e3a8:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 801e3ac:	0a28      	lsrs	r0, r5, #8
 801e3ae:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801e3b2:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e3b6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e3ba:	fb0a f303 	mul.w	r3, sl, r3
 801e3be:	fb08 f707 	mul.w	r7, r8, r7
 801e3c2:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801e3c6:	4405      	add	r5, r0
 801e3c8:	fb08 fc0c 	mul.w	ip, r8, ip
 801e3cc:	b2a4      	uxth	r4, r4
 801e3ce:	0a2d      	lsrs	r5, r5, #8
 801e3d0:	fa1f fe8e 	uxth.w	lr, lr
 801e3d4:	1b12      	subs	r2, r2, r4
 801e3d6:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 801e3da:	b292      	uxth	r2, r2
 801e3dc:	9005      	str	r0, [sp, #20]
 801e3de:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 801e3e2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e3e6:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801e3ea:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e3ee:	0a1b      	lsrs	r3, r3, #8
 801e3f0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e3f4:	9306      	str	r3, [sp, #24]
 801e3f6:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 801e3fa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e3fe:	4460      	add	r0, ip
 801e400:	fb0b f303 	mul.w	r3, fp, r3
 801e404:	fb0b f606 	mul.w	r6, fp, r6
 801e408:	0a00      	lsrs	r0, r0, #8
 801e40a:	0a1d      	lsrs	r5, r3, #8
 801e40c:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 801e410:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e414:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e418:	441d      	add	r5, r3
 801e41a:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 801e41e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e422:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801e426:	0a2d      	lsrs	r5, r5, #8
 801e428:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801e42c:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 801e430:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e434:	0a36      	lsrs	r6, r6, #8
 801e436:	0a1b      	lsrs	r3, r3, #8
 801e438:	fb05 f50e 	mul.w	r5, r5, lr
 801e43c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e440:	9307      	str	r3, [sp, #28]
 801e442:	0e0b      	lsrs	r3, r1, #24
 801e444:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801e448:	fb0e f606 	mul.w	r6, lr, r6
 801e44c:	435f      	muls	r7, r3
 801e44e:	4359      	muls	r1, r3
 801e450:	9b05      	ldr	r3, [sp, #20]
 801e452:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e456:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e45a:	fb03 5502 	mla	r5, r3, r2, r5
 801e45e:	9b06      	ldr	r3, [sp, #24]
 801e460:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e464:	fb0e fe0b 	mul.w	lr, lr, fp
 801e468:	44bc      	add	ip, r7
 801e46a:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 801e46e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e472:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e476:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e47a:	0a09      	lsrs	r1, r1, #8
 801e47c:	fb0c 5509 	mla	r5, ip, r9, r5
 801e480:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801e484:	fb00 5504 	mla	r5, r0, r4, r5
 801e488:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 801e48c:	9b07      	ldr	r3, [sp, #28]
 801e48e:	fb02 6000 	mla	r0, r2, r0, r6
 801e492:	0a2d      	lsrs	r5, r5, #8
 801e494:	fb02 e20a 	mla	r2, r2, sl, lr
 801e498:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e49c:	fb09 0001 	mla	r0, r9, r1, r0
 801e4a0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e4a4:	fb04 0003 	mla	r0, r4, r3, r0
 801e4a8:	9b00      	ldr	r3, [sp, #0]
 801e4aa:	fb04 2408 	mla	r4, r4, r8, r2
 801e4ae:	9a04      	ldr	r2, [sp, #16]
 801e4b0:	0a00      	lsrs	r0, r0, #8
 801e4b2:	fb09 4903 	mla	r9, r9, r3, r4
 801e4b6:	9b02      	ldr	r3, [sp, #8]
 801e4b8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e4bc:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801e4c0:	4305      	orrs	r5, r0
 801e4c2:	fa5f f989 	uxtb.w	r9, r9
 801e4c6:	fb03 f109 	mul.w	r1, r3, r9
 801e4ca:	9b03      	ldr	r3, [sp, #12]
 801e4cc:	fb03 f309 	mul.w	r3, r3, r9
 801e4d0:	fb02 f909 	mul.w	r9, r2, r9
 801e4d4:	1c4a      	adds	r2, r1, #1
 801e4d6:	1c58      	adds	r0, r3, #1
 801e4d8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e4dc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e4e0:	0c2a      	lsrs	r2, r5, #16
 801e4e2:	0a2b      	lsrs	r3, r5, #8
 801e4e4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e4e8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e4ec:	0212      	lsls	r2, r2, #8
 801e4ee:	00db      	lsls	r3, r3, #3
 801e4f0:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801e4f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e4f8:	4313      	orrs	r3, r2
 801e4fa:	f109 0201 	add.w	r2, r9, #1
 801e4fe:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e502:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801e506:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e50a:	431d      	orrs	r5, r3
 801e50c:	9b01      	ldr	r3, [sp, #4]
 801e50e:	801d      	strh	r5, [r3, #0]
 801e510:	b009      	add	sp, #36	@ 0x24
 801e512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e516:	2000      	movs	r0, #0
 801e518:	e701      	b.n	801e31e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801e51a:	2600      	movs	r6, #0
 801e51c:	4630      	mov	r0, r6
 801e51e:	e70b      	b.n	801e338 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e520:	2600      	movs	r6, #0
 801e522:	e709      	b.n	801e338 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e524:	462e      	mov	r6, r5
 801e526:	e707      	b.n	801e338 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e528:	2700      	movs	r7, #0
 801e52a:	e71a      	b.n	801e362 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801e52c:	2100      	movs	r1, #0
 801e52e:	460f      	mov	r7, r1
 801e530:	e723      	b.n	801e37a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e532:	4621      	mov	r1, r4
 801e534:	4627      	mov	r7, r4
 801e536:	e720      	b.n	801e37a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e538:	2100      	movs	r1, #0
 801e53a:	e71e      	b.n	801e37a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e53c:	4629      	mov	r1, r5
 801e53e:	e71c      	b.n	801e37a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801e540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e544:	b09b      	sub	sp, #108	@ 0x6c
 801e546:	9218      	str	r2, [sp, #96]	@ 0x60
 801e548:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e54a:	9019      	str	r0, [sp, #100]	@ 0x64
 801e54c:	9116      	str	r1, [sp, #88]	@ 0x58
 801e54e:	6850      	ldr	r0, [r2, #4]
 801e550:	9307      	str	r3, [sp, #28]
 801e552:	6812      	ldr	r2, [r2, #0]
 801e554:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801e556:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e55a:	fb00 1303 	mla	r3, r0, r3, r1
 801e55e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e562:	930a      	str	r3, [sp, #40]	@ 0x28
 801e564:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e56a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e56c:	685e      	ldr	r6, [r3, #4]
 801e56e:	3604      	adds	r6, #4
 801e570:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e572:	2b00      	cmp	r3, #0
 801e574:	dc03      	bgt.n	801e57e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e576:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e578:	2b00      	cmp	r3, #0
 801e57a:	f340 8373 	ble.w	801ec64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801e57e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e580:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e584:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e588:	1e48      	subs	r0, r1, #1
 801e58a:	1e57      	subs	r7, r2, #1
 801e58c:	9b07      	ldr	r3, [sp, #28]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	f340 818f 	ble.w	801e8b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801e594:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e596:	142b      	asrs	r3, r5, #16
 801e598:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e59c:	d406      	bmi.n	801e5ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e59e:	4584      	cmp	ip, r0
 801e5a0:	da04      	bge.n	801e5ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	db02      	blt.n	801e5ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5a6:	42bb      	cmp	r3, r7
 801e5a8:	f2c0 8184 	blt.w	801e8b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801e5ac:	f11c 0c01 	adds.w	ip, ip, #1
 801e5b0:	f100 8172 	bmi.w	801e898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e5b4:	4561      	cmp	r1, ip
 801e5b6:	f2c0 816f 	blt.w	801e898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e5ba:	3301      	adds	r3, #1
 801e5bc:	f100 816c 	bmi.w	801e898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e5c0:	429a      	cmp	r2, r3
 801e5c2:	f2c0 8169 	blt.w	801e898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e5c6:	9b07      	ldr	r3, [sp, #28]
 801e5c8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e5ca:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e5cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	f340 818e 	ble.w	801e8f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801e5d4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e5d6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e5da:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e5de:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e5e2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e5e4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e5e8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e5ea:	141b      	asrs	r3, r3, #16
 801e5ec:	f100 81d1 	bmi.w	801e992 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e5f0:	f101 38ff 	add.w	r8, r1, #4294967295
 801e5f4:	4543      	cmp	r3, r8
 801e5f6:	f280 81cc 	bge.w	801e992 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e5fa:	f1bc 0f00 	cmp.w	ip, #0
 801e5fe:	f2c0 81c8 	blt.w	801e992 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e602:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e606:	45c4      	cmp	ip, r8
 801e608:	f280 81c3 	bge.w	801e992 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e60c:	b209      	sxth	r1, r1
 801e60e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e610:	fb0c 3301 	mla	r3, ip, r1, r3
 801e614:	eb04 0803 	add.w	r8, r4, r3
 801e618:	5ce3      	ldrb	r3, [r4, r3]
 801e61a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e61e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e622:	2a00      	cmp	r2, #0
 801e624:	f000 81aa 	beq.w	801e97c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801e628:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e62c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e630:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e632:	0e24      	lsrs	r4, r4, #24
 801e634:	9412      	str	r4, [sp, #72]	@ 0x48
 801e636:	b178      	cbz	r0, 801e658 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e638:	eb08 0c01 	add.w	ip, r8, r1
 801e63c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e640:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e644:	9108      	str	r1, [sp, #32]
 801e646:	0e09      	lsrs	r1, r1, #24
 801e648:	9110      	str	r1, [sp, #64]	@ 0x40
 801e64a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e64e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e652:	910c      	str	r1, [sp, #48]	@ 0x30
 801e654:	0e09      	lsrs	r1, r1, #24
 801e656:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e658:	b292      	uxth	r2, r2
 801e65a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e65c:	b280      	uxth	r0, r0
 801e65e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e660:	fb02 f900 	mul.w	r9, r2, r0
 801e664:	0112      	lsls	r2, r2, #4
 801e666:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e66a:	eba2 0809 	sub.w	r8, r2, r9
 801e66e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e672:	b280      	uxth	r0, r0
 801e674:	fa1f f888 	uxth.w	r8, r8
 801e678:	1a12      	subs	r2, r2, r0
 801e67a:	fb08 f101 	mul.w	r1, r8, r1
 801e67e:	b292      	uxth	r2, r2
 801e680:	fb02 110e 	mla	r1, r2, lr, r1
 801e684:	fb00 1104 	mla	r1, r0, r4, r1
 801e688:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e68a:	fb09 1104 	mla	r1, r9, r4, r1
 801e68e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e692:	2900      	cmp	r1, #0
 801e694:	f000 80f5 	beq.w	801e882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e698:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e69c:	d01b      	beq.n	801e6d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801e69e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e6a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e6a6:	fb0e fa0a 	mul.w	sl, lr, sl
 801e6aa:	fb0e fe03 	mul.w	lr, lr, r3
 801e6ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e6b2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e6b6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e6ba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e6be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e6c2:	4453      	add	r3, sl
 801e6c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6c8:	0a1b      	lsrs	r3, r3, #8
 801e6ca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e6ce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e6d2:	ea43 030c 	orr.w	r3, r3, ip
 801e6d6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e6d8:	2cff      	cmp	r4, #255	@ 0xff
 801e6da:	d021      	beq.n	801e720 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e6dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e6de:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e6e2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e6e4:	fb04 fb0b 	mul.w	fp, r4, fp
 801e6e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e6ea:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e6ee:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e6f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e6f4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e6f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e700:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e704:	44de      	add	lr, fp
 801e706:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e70a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e70e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e712:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e716:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e71a:	ea4e 040a 	orr.w	r4, lr, sl
 801e71e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e720:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e722:	2cff      	cmp	r4, #255	@ 0xff
 801e724:	d021      	beq.n	801e76a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e726:	9c08      	ldr	r4, [sp, #32]
 801e728:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e72c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e72e:	fb04 fb0b 	mul.w	fp, r4, fp
 801e732:	9c08      	ldr	r4, [sp, #32]
 801e734:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e738:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e73a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e73e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e742:	fb04 fa0a 	mul.w	sl, r4, sl
 801e746:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e74a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e74e:	44de      	add	lr, fp
 801e750:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e754:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e758:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e75c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e760:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e764:	ea4e 040a 	orr.w	r4, lr, sl
 801e768:	9408      	str	r4, [sp, #32]
 801e76a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e76c:	2cff      	cmp	r4, #255	@ 0xff
 801e76e:	d021      	beq.n	801e7b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801e770:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e772:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e776:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e778:	fb04 fb0b 	mul.w	fp, r4, fp
 801e77c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e77e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e782:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e784:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e788:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e78c:	fb04 fa0a 	mul.w	sl, r4, sl
 801e790:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e794:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e798:	44de      	add	lr, fp
 801e79a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e79e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e7a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e7a6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e7aa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e7ae:	ea4e 040a 	orr.w	r4, lr, sl
 801e7b2:	940c      	str	r4, [sp, #48]	@ 0x30
 801e7b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e7b6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e7ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e7be:	43c9      	mvns	r1, r1
 801e7c0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e7c4:	9c08      	ldr	r4, [sp, #32]
 801e7c6:	fb08 fc0c 	mul.w	ip, r8, ip
 801e7ca:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e7ce:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e7d2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e7d4:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e7d8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e7dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e7de:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e7e2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e7e6:	fb08 f80e 	mul.w	r8, r8, lr
 801e7ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e7ee:	fa5f fe81 	uxtb.w	lr, r1
 801e7f2:	fb02 8303 	mla	r3, r2, r3, r8
 801e7f6:	9a08      	ldr	r2, [sp, #32]
 801e7f8:	f8b7 8000 	ldrh.w	r8, [r7]
 801e7fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e800:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e804:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e806:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801e80a:	fb00 330a 	mla	r3, r0, sl, r3
 801e80e:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801e812:	ea4f 2228 	mov.w	r2, r8, asr #8
 801e816:	fb09 3900 	mla	r9, r9, r0, r3
 801e81a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801e81e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801e822:	b2c9      	uxtb	r1, r1
 801e824:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e828:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801e82c:	fb02 f20e 	mul.w	r2, r2, lr
 801e830:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e834:	fb00 f00e 	mul.w	r0, r0, lr
 801e838:	1c53      	adds	r3, r2, #1
 801e83a:	fb01 f10e 	mul.w	r1, r1, lr
 801e83e:	ea4c 0c09 	orr.w	ip, ip, r9
 801e842:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e846:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801e84a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e84e:	4a60      	ldr	r2, [pc, #384]	@ (801e9d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801e850:	b2db      	uxtb	r3, r3
 801e852:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801e856:	1c43      	adds	r3, r0, #1
 801e858:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e85c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e860:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e864:	00db      	lsls	r3, r3, #3
 801e866:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e86a:	4313      	orrs	r3, r2
 801e86c:	1c4a      	adds	r2, r1, #1
 801e86e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e872:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e876:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801e87a:	ea4c 0c03 	orr.w	ip, ip, r3
 801e87e:	f8a7 c000 	strh.w	ip, [r7]
 801e882:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e884:	3702      	adds	r7, #2
 801e886:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e888:	441a      	add	r2, r3
 801e88a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e88c:	441d      	add	r5, r3
 801e88e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e890:	9225      	str	r2, [sp, #148]	@ 0x94
 801e892:	3b01      	subs	r3, #1
 801e894:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e896:	e699      	b.n	801e5cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e898:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e89a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e89c:	441c      	add	r4, r3
 801e89e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e8a0:	441d      	add	r5, r3
 801e8a2:	9b07      	ldr	r3, [sp, #28]
 801e8a4:	9425      	str	r4, [sp, #148]	@ 0x94
 801e8a6:	3b01      	subs	r3, #1
 801e8a8:	9307      	str	r3, [sp, #28]
 801e8aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8ac:	3302      	adds	r3, #2
 801e8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801e8b0:	e66c      	b.n	801e58c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e8b2:	d024      	beq.n	801e8fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801e8b4:	9b07      	ldr	r3, [sp, #28]
 801e8b6:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e8b8:	3b01      	subs	r3, #1
 801e8ba:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e8bc:	fb00 4003 	mla	r0, r0, r3, r4
 801e8c0:	1400      	asrs	r0, r0, #16
 801e8c2:	f53f ae80 	bmi.w	801e5c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8c6:	3901      	subs	r1, #1
 801e8c8:	4288      	cmp	r0, r1
 801e8ca:	f6bf ae7c 	bge.w	801e5c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8ce:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e8d0:	fb01 5303 	mla	r3, r1, r3, r5
 801e8d4:	141b      	asrs	r3, r3, #16
 801e8d6:	f53f ae76 	bmi.w	801e5c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8da:	3a01      	subs	r2, #1
 801e8dc:	4293      	cmp	r3, r2
 801e8de:	f6bf ae72 	bge.w	801e5c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e8e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801e8ea:	f1bb 0f00 	cmp.w	fp, #0
 801e8ee:	dc71      	bgt.n	801e9d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801e8f0:	9b07      	ldr	r3, [sp, #28]
 801e8f2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e8f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8f8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e8fc:	930a      	str	r3, [sp, #40]	@ 0x28
 801e8fe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e900:	2b00      	cmp	r3, #0
 801e902:	f340 81af 	ble.w	801ec64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801e906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e90a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e90c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e910:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e914:	eef0 6a62 	vmov.f32	s13, s5
 801e918:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e91c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e920:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e924:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 801e928:	eef0 6a43 	vmov.f32	s13, s6
 801e92c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e930:	ee16 5a90 	vmov	r5, s13
 801e934:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e938:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e93c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e940:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e944:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e948:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e94c:	ee12 2a90 	vmov	r2, s5
 801e950:	eef0 2a47 	vmov.f32	s5, s14
 801e954:	fb92 f3f3 	sdiv	r3, r2, r3
 801e958:	ee13 2a10 	vmov	r2, s6
 801e95c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e95e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e960:	eeb0 3a67 	vmov.f32	s6, s15
 801e964:	fb92 f3f3 	sdiv	r3, r2, r3
 801e968:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e96a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e96c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e96e:	3b01      	subs	r3, #1
 801e970:	9316      	str	r3, [sp, #88]	@ 0x58
 801e972:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e974:	bf08      	it	eq
 801e976:	4613      	moveq	r3, r2
 801e978:	9307      	str	r3, [sp, #28]
 801e97a:	e5f9      	b.n	801e570 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e97c:	2800      	cmp	r0, #0
 801e97e:	f43f ae6b 	beq.w	801e658 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e982:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e986:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e98a:	9108      	str	r1, [sp, #32]
 801e98c:	0e09      	lsrs	r1, r1, #24
 801e98e:	9110      	str	r1, [sp, #64]	@ 0x40
 801e990:	e662      	b.n	801e658 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e992:	f113 0801 	adds.w	r8, r3, #1
 801e996:	f53f af74 	bmi.w	801e882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e99a:	4541      	cmp	r1, r8
 801e99c:	f6ff af71 	blt.w	801e882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e9a0:	f11c 0801 	adds.w	r8, ip, #1
 801e9a4:	f53f af6d 	bmi.w	801e882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e9a8:	45c6      	cmp	lr, r8
 801e9aa:	f6ff af6a 	blt.w	801e882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e9ae:	b209      	sxth	r1, r1
 801e9b0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e9b4:	fa0f f38e 	sxth.w	r3, lr
 801e9b8:	9100      	str	r1, [sp, #0]
 801e9ba:	4639      	mov	r1, r7
 801e9bc:	9301      	str	r3, [sp, #4]
 801e9be:	4633      	mov	r3, r6
 801e9c0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e9c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e9c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e9c8:	f7ff fc7b 	bl	801e2c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801e9cc:	e759      	b.n	801e882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e9ce:	bf00      	nop
 801e9d0:	fffff800 	.word	0xfffff800
 801e9d4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e9d6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e9da:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e9dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e9e0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e9e2:	1427      	asrs	r7, r4, #16
 801e9e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e9e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e9ea:	142b      	asrs	r3, r5, #16
 801e9ec:	fb01 7303 	mla	r3, r1, r3, r7
 801e9f0:	18e7      	adds	r7, r4, r3
 801e9f2:	5ce3      	ldrb	r3, [r4, r3]
 801e9f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e9f8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e9fc:	2a00      	cmp	r2, #0
 801e9fe:	f000 8127 	beq.w	801ec50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801ea02:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ea06:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ea0a:	940d      	str	r4, [sp, #52]	@ 0x34
 801ea0c:	0e24      	lsrs	r4, r4, #24
 801ea0e:	9414      	str	r4, [sp, #80]	@ 0x50
 801ea10:	b170      	cbz	r0, 801ea30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ea12:	eb07 0e01 	add.w	lr, r7, r1
 801ea16:	5c79      	ldrb	r1, [r7, r1]
 801ea18:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ea1c:	9109      	str	r1, [sp, #36]	@ 0x24
 801ea1e:	0e09      	lsrs	r1, r1, #24
 801ea20:	9111      	str	r1, [sp, #68]	@ 0x44
 801ea22:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801ea26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ea2a:	910e      	str	r1, [sp, #56]	@ 0x38
 801ea2c:	0e09      	lsrs	r1, r1, #24
 801ea2e:	9115      	str	r1, [sp, #84]	@ 0x54
 801ea30:	b292      	uxth	r2, r2
 801ea32:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea34:	b280      	uxth	r0, r0
 801ea36:	fb02 f800 	mul.w	r8, r2, r0
 801ea3a:	0112      	lsls	r2, r2, #4
 801ea3c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801ea40:	eba2 0e08 	sub.w	lr, r2, r8
 801ea44:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801ea48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ea4a:	b280      	uxth	r0, r0
 801ea4c:	fa1f fe8e 	uxth.w	lr, lr
 801ea50:	1a09      	subs	r1, r1, r0
 801ea52:	fb0e f202 	mul.w	r2, lr, r2
 801ea56:	b289      	uxth	r1, r1
 801ea58:	fb01 220c 	mla	r2, r1, ip, r2
 801ea5c:	fb00 2204 	mla	r2, r0, r4, r2
 801ea60:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea62:	fb08 2204 	mla	r2, r8, r4, r2
 801ea66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ea6a:	2a00      	cmp	r2, #0
 801ea6c:	f000 80e5 	beq.w	801ec3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801ea70:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801ea74:	d019      	beq.n	801eaaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801ea76:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ea7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ea7e:	fb0c fa0a 	mul.w	sl, ip, sl
 801ea82:	fb0c fc03 	mul.w	ip, ip, r3
 801ea86:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ea8a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ea8e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801ea92:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ea96:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ea9a:	4453      	add	r3, sl
 801ea9c:	0a3f      	lsrs	r7, r7, #8
 801ea9e:	0a1b      	lsrs	r3, r3, #8
 801eaa0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801eaa4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801eaa8:	433b      	orrs	r3, r7
 801eaaa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801eaac:	2cff      	cmp	r4, #255	@ 0xff
 801eaae:	d020      	beq.n	801eaf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801eab0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eab2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801eab6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801eab8:	4367      	muls	r7, r4
 801eaba:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eabc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eac0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801eac4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801eac6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801eaca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eace:	fb04 fa0a 	mul.w	sl, r4, sl
 801ead2:	44bc      	add	ip, r7
 801ead4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ead8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eadc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eae0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eae4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eae8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eaec:	ea4c 040a 	orr.w	r4, ip, sl
 801eaf0:	940d      	str	r4, [sp, #52]	@ 0x34
 801eaf2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801eaf4:	2cff      	cmp	r4, #255	@ 0xff
 801eaf6:	d020      	beq.n	801eb3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801eaf8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801eafa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801eafe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801eb00:	4367      	muls	r7, r4
 801eb02:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801eb04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eb08:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801eb0c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801eb0e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801eb12:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb16:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb1a:	44bc      	add	ip, r7
 801eb1c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801eb20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eb28:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eb34:	ea4c 040a 	orr.w	r4, ip, sl
 801eb38:	9409      	str	r4, [sp, #36]	@ 0x24
 801eb3a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801eb3c:	2cff      	cmp	r4, #255	@ 0xff
 801eb3e:	d020      	beq.n	801eb82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801eb40:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801eb42:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801eb46:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801eb48:	4367      	muls	r7, r4
 801eb4a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801eb4c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eb50:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801eb54:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801eb56:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801eb5a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb5e:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb62:	44bc      	add	ip, r7
 801eb64:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801eb68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eb70:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb78:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eb7c:	ea4c 040a 	orr.w	r4, ip, sl
 801eb80:	940e      	str	r4, [sp, #56]	@ 0x38
 801eb82:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eb84:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801eb88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801eb8c:	43d2      	mvns	r2, r2
 801eb8e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801eb92:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801eb94:	b2d2      	uxtb	r2, r2
 801eb96:	fb0e f707 	mul.w	r7, lr, r7
 801eb9a:	fb01 770c 	mla	r7, r1, ip, r7
 801eb9e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eba2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801eba4:	fb00 770c 	mla	r7, r0, ip, r7
 801eba8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ebac:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ebae:	fb08 770c 	mla	r7, r8, ip, r7
 801ebb2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ebb6:	fb0e fe0c 	mul.w	lr, lr, ip
 801ebba:	0a3f      	lsrs	r7, r7, #8
 801ebbc:	fb01 e303 	mla	r3, r1, r3, lr
 801ebc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ebc2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ebc6:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801ebca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ebcc:	fb00 330a 	mla	r3, r0, sl, r3
 801ebd0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801ebd4:	fb08 3c0c 	mla	ip, r8, ip, r3
 801ebd8:	f8b9 3000 	ldrh.w	r3, [r9]
 801ebdc:	1218      	asrs	r0, r3, #8
 801ebde:	10d9      	asrs	r1, r3, #3
 801ebe0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ebe4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801ebe8:	00db      	lsls	r3, r3, #3
 801ebea:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801ebee:	4350      	muls	r0, r2
 801ebf0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ebf4:	b2db      	uxtb	r3, r3
 801ebf6:	4351      	muls	r1, r2
 801ebf8:	ea47 070c 	orr.w	r7, r7, ip
 801ebfc:	4353      	muls	r3, r2
 801ebfe:	1c42      	adds	r2, r0, #1
 801ec00:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ec04:	0c3a      	lsrs	r2, r7, #16
 801ec06:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ec0a:	4a18      	ldr	r2, [pc, #96]	@ (801ec6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801ec0c:	b2c0      	uxtb	r0, r0
 801ec0e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801ec12:	1c4a      	adds	r2, r1, #1
 801ec14:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ec18:	0a3a      	lsrs	r2, r7, #8
 801ec1a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ec1e:	00c9      	lsls	r1, r1, #3
 801ec20:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801ec24:	4301      	orrs	r1, r0
 801ec26:	1c58      	adds	r0, r3, #1
 801ec28:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ec2c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801ec30:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801ec34:	4308      	orrs	r0, r1
 801ec36:	f8a9 0000 	strh.w	r0, [r9]
 801ec3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ec3c:	f109 0902 	add.w	r9, r9, #2
 801ec40:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ec42:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ec46:	441a      	add	r2, r3
 801ec48:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ec4a:	9225      	str	r2, [sp, #148]	@ 0x94
 801ec4c:	441d      	add	r5, r3
 801ec4e:	e64c      	b.n	801e8ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801ec50:	2800      	cmp	r0, #0
 801ec52:	f43f aeed 	beq.w	801ea30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ec56:	5c79      	ldrb	r1, [r7, r1]
 801ec58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ec5c:	9109      	str	r1, [sp, #36]	@ 0x24
 801ec5e:	0e09      	lsrs	r1, r1, #24
 801ec60:	9111      	str	r1, [sp, #68]	@ 0x44
 801ec62:	e6e5      	b.n	801ea30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ec64:	b01b      	add	sp, #108	@ 0x6c
 801ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec6a:	bf00      	nop
 801ec6c:	fffff800 	.word	0xfffff800

0801ec70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec74:	b085      	sub	sp, #20
 801ec76:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801ec7a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 801ec7e:	2800      	cmp	r0, #0
 801ec80:	9103      	str	r1, [sp, #12]
 801ec82:	fb00 7406 	mla	r4, r0, r6, r7
 801ec86:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 801ec8a:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 801ec8e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801ec92:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 801ec96:	eb03 0904 	add.w	r9, r3, r4
 801ec9a:	9501      	str	r5, [sp, #4]
 801ec9c:	f2c0 8150 	blt.w	801ef40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801eca0:	4583      	cmp	fp, r0
 801eca2:	f340 814d 	ble.w	801ef40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801eca6:	2f00      	cmp	r7, #0
 801eca8:	f2c0 8146 	blt.w	801ef38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801ecac:	42be      	cmp	r6, r7
 801ecae:	f340 8143 	ble.w	801ef38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801ecb2:	f813 c004 	ldrb.w	ip, [r3, r4]
 801ecb6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801ecba:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 801ecbe:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ecc2:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 801ecc6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ecca:	4355      	muls	r5, r2
 801eccc:	fb0c f203 	mul.w	r2, ip, r3
 801ecd0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801ecd4:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 801ecd8:	441d      	add	r5, r3
 801ecda:	f102 0320 	add.w	r3, r2, #32
 801ecde:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ece2:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801ece6:	0a1b      	lsrs	r3, r3, #8
 801ece8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ecec:	431c      	orrs	r4, r3
 801ecee:	1c7b      	adds	r3, r7, #1
 801ecf0:	f100 812b 	bmi.w	801ef4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801ecf4:	429e      	cmp	r6, r3
 801ecf6:	f340 8128 	ble.w	801ef4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801ecfa:	2900      	cmp	r1, #0
 801ecfc:	f000 8128 	beq.w	801ef50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801ed00:	9a01      	ldr	r2, [sp, #4]
 801ed02:	f899 3001 	ldrb.w	r3, [r9, #1]
 801ed06:	8855      	ldrh	r5, [r2, #2]
 801ed08:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801ed0c:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 801ed10:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ed14:	fb08 f802 	mul.w	r8, r8, r2
 801ed18:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 801ed1c:	435d      	muls	r5, r3
 801ed1e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801ed22:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801ed26:	44d0      	add	r8, sl
 801ed28:	f105 0a20 	add.w	sl, r5, #32
 801ed2c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801ed30:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801ed34:	0a2d      	lsrs	r5, r5, #8
 801ed36:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ed3a:	432a      	orrs	r2, r5
 801ed3c:	3001      	adds	r0, #1
 801ed3e:	f100 810d 	bmi.w	801ef5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801ed42:	4583      	cmp	fp, r0
 801ed44:	f340 810a 	ble.w	801ef5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801ed48:	f1be 0f00 	cmp.w	lr, #0
 801ed4c:	f000 810b 	beq.w	801ef66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801ed50:	2f00      	cmp	r7, #0
 801ed52:	f2c0 8100 	blt.w	801ef56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801ed56:	42be      	cmp	r6, r7
 801ed58:	f340 80fd 	ble.w	801ef56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801ed5c:	9801      	ldr	r0, [sp, #4]
 801ed5e:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 801ed62:	f819 5006 	ldrb.w	r5, [r9, r6]
 801ed66:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801ed6a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ed6e:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 801ed72:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801ed76:	fb0a fa00 	mul.w	sl, sl, r0
 801ed7a:	fb05 f808 	mul.w	r8, r5, r8
 801ed7e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801ed82:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 801ed86:	4482      	add	sl, r0
 801ed88:	f108 0020 	add.w	r0, r8, #32
 801ed8c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ed90:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801ed94:	0a00      	lsrs	r0, r0, #8
 801ed96:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ed9a:	ea4b 0b00 	orr.w	fp, fp, r0
 801ed9e:	3701      	adds	r7, #1
 801eda0:	f100 80e6 	bmi.w	801ef70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801eda4:	42be      	cmp	r6, r7
 801eda6:	f340 80e3 	ble.w	801ef70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801edaa:	2900      	cmp	r1, #0
 801edac:	f000 80e3 	beq.w	801ef76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801edb0:	3601      	adds	r6, #1
 801edb2:	9801      	ldr	r0, [sp, #4]
 801edb4:	f819 7006 	ldrb.w	r7, [r9, r6]
 801edb8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801edbc:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801edc0:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 801edc4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801edc8:	fb09 f906 	mul.w	r9, r9, r6
 801edcc:	fb07 f800 	mul.w	r8, r7, r0
 801edd0:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 801edd4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801edd8:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 801eddc:	44d1      	add	r9, sl
 801edde:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801ede2:	f108 0020 	add.w	r0, r8, #32
 801ede6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801edea:	0a00      	lsrs	r0, r0, #8
 801edec:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801edf0:	4330      	orrs	r0, r6
 801edf2:	b28e      	uxth	r6, r1
 801edf4:	fa1f f98e 	uxth.w	r9, lr
 801edf8:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801edfc:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801ee00:	fb06 f809 	mul.w	r8, r6, r9
 801ee04:	0136      	lsls	r6, r6, #4
 801ee06:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801ee0a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ee0e:	9601      	str	r6, [sp, #4]
 801ee10:	ea4a 0404 	orr.w	r4, sl, r4
 801ee14:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ee18:	fa1f f689 	uxth.w	r6, r9
 801ee1c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ee20:	fb11 f90e 	smulbb	r9, r1, lr
 801ee24:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801ee28:	9602      	str	r6, [sp, #8]
 801ee2a:	4626      	mov	r6, r4
 801ee2c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801ee30:	f1ce 0410 	rsb	r4, lr, #16
 801ee34:	ea4a 0202 	orr.w	r2, sl, r2
 801ee38:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801ee3c:	1a64      	subs	r4, r4, r1
 801ee3e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801ee42:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801ee46:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801ee4a:	434a      	muls	r2, r1
 801ee4c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801ee50:	ea4a 0000 	orr.w	r0, sl, r0
 801ee54:	9903      	ldr	r1, [sp, #12]
 801ee56:	fb04 2406 	mla	r4, r4, r6, r2
 801ee5a:	9e02      	ldr	r6, [sp, #8]
 801ee5c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801ee60:	fb09 4200 	mla	r2, r9, r0, r4
 801ee64:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801ee68:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801ee6c:	8808      	ldrh	r0, [r1, #0]
 801ee6e:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801ee72:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 801ee76:	ea44 0b0b 	orr.w	fp, r4, fp
 801ee7a:	9c01      	ldr	r4, [sp, #4]
 801ee7c:	b289      	uxth	r1, r1
 801ee7e:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 801ee82:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801ee86:	1ba4      	subs	r4, r4, r6
 801ee88:	9e01      	ldr	r6, [sp, #4]
 801ee8a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801ee8e:	eba6 0608 	sub.w	r6, r6, r8
 801ee92:	b2a4      	uxth	r4, r4
 801ee94:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ee98:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ee9c:	b2b6      	uxth	r6, r6
 801ee9e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801eea2:	4373      	muls	r3, r6
 801eea4:	ea42 0e0e 	orr.w	lr, r2, lr
 801eea8:	fb0c 3304 	mla	r3, ip, r4, r3
 801eeac:	9c02      	ldr	r4, [sp, #8]
 801eeae:	fa1f f28e 	uxth.w	r2, lr
 801eeb2:	fb04 3505 	mla	r5, r4, r5, r3
 801eeb6:	10d4      	asrs	r4, r2, #3
 801eeb8:	fb08 5707 	mla	r7, r8, r7, r5
 801eebc:	1215      	asrs	r5, r2, #8
 801eebe:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801eec2:	00d2      	lsls	r2, r2, #3
 801eec4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801eec8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801eecc:	b2d2      	uxtb	r2, r2
 801eece:	434f      	muls	r7, r1
 801eed0:	1c7b      	adds	r3, r7, #1
 801eed2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801eed6:	1203      	asrs	r3, r0, #8
 801eed8:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801eedc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801eee0:	b2ff      	uxtb	r7, r7
 801eee2:	fb13 f307 	smulbb	r3, r3, r7
 801eee6:	fb05 3501 	mla	r5, r5, r1, r3
 801eeea:	10c3      	asrs	r3, r0, #3
 801eeec:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801eef0:	b2ad      	uxth	r5, r5
 801eef2:	fb13 f307 	smulbb	r3, r3, r7
 801eef6:	fb04 3401 	mla	r4, r4, r1, r3
 801eefa:	00c3      	lsls	r3, r0, #3
 801eefc:	b2db      	uxtb	r3, r3
 801eefe:	b2a4      	uxth	r4, r4
 801ef00:	fb13 f307 	smulbb	r3, r3, r7
 801ef04:	fb02 3101 	mla	r1, r2, r1, r3
 801ef08:	1c6b      	adds	r3, r5, #1
 801ef0a:	1c62      	adds	r2, r4, #1
 801ef0c:	b289      	uxth	r1, r1
 801ef0e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ef12:	1c4b      	adds	r3, r1, #1
 801ef14:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801ef18:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801ef1c:	9a03      	ldr	r2, [sp, #12]
 801ef1e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ef22:	0964      	lsrs	r4, r4, #5
 801ef24:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ef28:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801ef2c:	432b      	orrs	r3, r5
 801ef2e:	4323      	orrs	r3, r4
 801ef30:	8013      	strh	r3, [r2, #0]
 801ef32:	b005      	add	sp, #20
 801ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef38:	f04f 0c00 	mov.w	ip, #0
 801ef3c:	4664      	mov	r4, ip
 801ef3e:	e6d6      	b.n	801ecee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801ef40:	2300      	movs	r3, #0
 801ef42:	469c      	mov	ip, r3
 801ef44:	461a      	mov	r2, r3
 801ef46:	461c      	mov	r4, r3
 801ef48:	e6f8      	b.n	801ed3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	461a      	mov	r2, r3
 801ef4e:	e6f5      	b.n	801ed3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801ef50:	460b      	mov	r3, r1
 801ef52:	460a      	mov	r2, r1
 801ef54:	e6f2      	b.n	801ed3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801ef56:	2500      	movs	r5, #0
 801ef58:	46ab      	mov	fp, r5
 801ef5a:	e720      	b.n	801ed9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801ef5c:	2700      	movs	r7, #0
 801ef5e:	463d      	mov	r5, r7
 801ef60:	4638      	mov	r0, r7
 801ef62:	46bb      	mov	fp, r7
 801ef64:	e745      	b.n	801edf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801ef66:	4677      	mov	r7, lr
 801ef68:	4675      	mov	r5, lr
 801ef6a:	4670      	mov	r0, lr
 801ef6c:	46f3      	mov	fp, lr
 801ef6e:	e740      	b.n	801edf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801ef70:	2700      	movs	r7, #0
 801ef72:	4638      	mov	r0, r7
 801ef74:	e73d      	b.n	801edf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801ef76:	460f      	mov	r7, r1
 801ef78:	4608      	mov	r0, r1
 801ef7a:	e73a      	b.n	801edf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801ef7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef80:	b097      	sub	sp, #92	@ 0x5c
 801ef82:	9214      	str	r2, [sp, #80]	@ 0x50
 801ef84:	9308      	str	r3, [sp, #32]
 801ef86:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ef88:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801ef8c:	9015      	str	r0, [sp, #84]	@ 0x54
 801ef8e:	9312      	str	r3, [sp, #72]	@ 0x48
 801ef90:	6850      	ldr	r0, [r2, #4]
 801ef92:	9111      	str	r1, [sp, #68]	@ 0x44
 801ef94:	6812      	ldr	r2, [r2, #0]
 801ef96:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801ef9a:	fb00 1303 	mla	r3, r0, r3, r1
 801ef9e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801efa2:	9309      	str	r3, [sp, #36]	@ 0x24
 801efa4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801efaa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801efac:	685b      	ldr	r3, [r3, #4]
 801efae:	930c      	str	r3, [sp, #48]	@ 0x30
 801efb0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801efb4:	930a      	str	r3, [sp, #40]	@ 0x28
 801efb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801efb8:	2b00      	cmp	r3, #0
 801efba:	dc03      	bgt.n	801efc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801efbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	f340 83cd 	ble.w	801f75e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801efc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801efc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801efca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801efce:	1e48      	subs	r0, r1, #1
 801efd0:	1e55      	subs	r5, r2, #1
 801efd2:	9b08      	ldr	r3, [sp, #32]
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	f340 81a5 	ble.w	801f324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801efda:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801efdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801efde:	1436      	asrs	r6, r6, #16
 801efe0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801efe4:	d406      	bmi.n	801eff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801efe6:	4286      	cmp	r6, r0
 801efe8:	da04      	bge.n	801eff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801efea:	2b00      	cmp	r3, #0
 801efec:	db02      	blt.n	801eff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801efee:	42ab      	cmp	r3, r5
 801eff0:	f2c0 8199 	blt.w	801f326 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801eff4:	3601      	adds	r6, #1
 801eff6:	f100 8186 	bmi.w	801f306 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801effa:	42b1      	cmp	r1, r6
 801effc:	f2c0 8183 	blt.w	801f306 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f000:	3301      	adds	r3, #1
 801f002:	f100 8180 	bmi.w	801f306 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f006:	429a      	cmp	r2, r3
 801f008:	f2c0 817d 	blt.w	801f306 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f00c:	9b08      	ldr	r3, [sp, #32]
 801f00e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801f012:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f014:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f016:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f018:	2b00      	cmp	r3, #0
 801f01a:	f340 81a6 	ble.w	801f36a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f01e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f020:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 801f022:	1418      	asrs	r0, r3, #16
 801f024:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f026:	142d      	asrs	r5, r5, #16
 801f028:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f02c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f02e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f032:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f034:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f038:	f100 81fa 	bmi.w	801f430 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f03c:	f102 3eff 	add.w	lr, r2, #4294967295
 801f040:	4575      	cmp	r5, lr
 801f042:	f280 81f5 	bge.w	801f430 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f046:	2800      	cmp	r0, #0
 801f048:	f2c0 81f2 	blt.w	801f430 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f04c:	f103 3eff 	add.w	lr, r3, #4294967295
 801f050:	4570      	cmp	r0, lr
 801f052:	f280 81ed 	bge.w	801f430 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f056:	b212      	sxth	r2, r2
 801f058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f05a:	fa1f fe81 	uxth.w	lr, r1
 801f05e:	fb00 5002 	mla	r0, r0, r2, r5
 801f062:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f066:	eb03 0a00 	add.w	sl, r3, r0
 801f06a:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f06e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 801f072:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f076:	b29b      	uxth	r3, r3
 801f078:	f1bc 0f00 	cmp.w	ip, #0
 801f07c:	f000 81bb 	beq.w	801f3f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801f080:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f084:	eb0a 0b02 	add.w	fp, sl, r2
 801f088:	fa1f fa8c 	uxth.w	sl, ip
 801f08c:	940d      	str	r4, [sp, #52]	@ 0x34
 801f08e:	fb0a fe0e 	mul.w	lr, sl, lr
 801f092:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f096:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f09a:	eba5 050e 	sub.w	r5, r5, lr
 801f09e:	940e      	str	r4, [sp, #56]	@ 0x38
 801f0a0:	fa1f fa8a 	uxth.w	sl, sl
 801f0a4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f0a6:	b2ad      	uxth	r5, r5
 801f0a8:	eba3 030a 	sub.w	r3, r3, sl
 801f0ac:	fb08 f505 	mul.w	r5, r8, r5
 801f0b0:	b29b      	uxth	r3, r3
 801f0b2:	fb09 5303 	mla	r3, r9, r3, r5
 801f0b6:	fb0a 3304 	mla	r3, sl, r4, r3
 801f0ba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f0bc:	fb0e 3304 	mla	r3, lr, r4, r3
 801f0c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	f000 8111 	beq.w	801f2ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f0ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f0cc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f0d0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f0d4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f0d8:	f000 8192 	beq.w	801f400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801f0dc:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801f0e0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f0e4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f0e8:	fb0a fe0e 	mul.w	lr, sl, lr
 801f0ec:	fb09 f000 	mul.w	r0, r9, r0
 801f0f0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f0f4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801f0f8:	f100 0b20 	add.w	fp, r0, #32
 801f0fc:	44ce      	add	lr, r9
 801f0fe:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f102:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f106:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f10a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f10e:	ea4e 0909 	orr.w	r9, lr, r9
 801f112:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f116:	8868      	ldrh	r0, [r5, #2]
 801f118:	d019      	beq.n	801f14e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f11a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801f11e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f122:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f126:	fb0a fe0e 	mul.w	lr, sl, lr
 801f12a:	fb08 f800 	mul.w	r8, r8, r0
 801f12e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f132:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801f136:	f108 0b20 	add.w	fp, r8, #32
 801f13a:	4486      	add	lr, r0
 801f13c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f140:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f144:	0a00      	lsrs	r0, r0, #8
 801f146:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f14a:	ea4e 0000 	orr.w	r0, lr, r0
 801f14e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f152:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801f156:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f15a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801f15e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801f162:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f166:	ea4e 0909 	orr.w	r9, lr, r9
 801f16a:	ea4a 0000 	orr.w	r0, sl, r0
 801f16e:	f1bc 0f00 	cmp.w	ip, #0
 801f172:	f000 8147 	beq.w	801f404 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f176:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 801f17a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f17c:	3a01      	subs	r2, #1
 801f17e:	2cff      	cmp	r4, #255	@ 0xff
 801f180:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f184:	f102 0202 	add.w	r2, r2, #2
 801f188:	eb05 0e02 	add.w	lr, r5, r2
 801f18c:	5aaa      	ldrh	r2, [r5, r2]
 801f18e:	d018      	beq.n	801f1c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801f190:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 801f194:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f198:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f19c:	fb04 fa02 	mul.w	sl, r4, r2
 801f1a0:	fb08 f805 	mul.w	r8, r8, r5
 801f1a4:	f10a 0520 	add.w	r5, sl, #32
 801f1a8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f1ac:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f1b0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f1b4:	4442      	add	r2, r8
 801f1b6:	0a2d      	lsrs	r5, r5, #8
 801f1b8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f1bc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f1c0:	432a      	orrs	r2, r5
 801f1c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f1c4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f1c8:	2cff      	cmp	r4, #255	@ 0xff
 801f1ca:	d01a      	beq.n	801f202 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801f1cc:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 801f1d0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f1d4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f1d8:	fb04 fa05 	mul.w	sl, r4, r5
 801f1dc:	fb08 f80e 	mul.w	r8, r8, lr
 801f1e0:	f10a 0e20 	add.w	lr, sl, #32
 801f1e4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f1e8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f1ec:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f1f0:	4445      	add	r5, r8
 801f1f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1f6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f1fa:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 801f1fe:	ea45 050e 	orr.w	r5, r5, lr
 801f202:	fb1c fe01 	smulbb	lr, ip, r1
 801f206:	f1cc 0810 	rsb	r8, ip, #16
 801f20a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f20e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f212:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f216:	eba8 0801 	sub.w	r8, r8, r1
 801f21a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f21e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f222:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f226:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801f22a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f22e:	ea4a 0202 	orr.w	r2, sl, r2
 801f232:	4341      	muls	r1, r0
 801f234:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f238:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801f23c:	fb09 1108 	mla	r1, r9, r8, r1
 801f240:	ea4b 0505 	orr.w	r5, fp, r5
 801f244:	fb0c 1102 	mla	r1, ip, r2, r1
 801f248:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f24c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f250:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f254:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f258:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801f25c:	ea42 0e0e 	orr.w	lr, r2, lr
 801f260:	fa1f f28e 	uxth.w	r2, lr
 801f264:	2bff      	cmp	r3, #255	@ 0xff
 801f266:	d103      	bne.n	801f270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f268:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f26a:	29ff      	cmp	r1, #255	@ 0xff
 801f26c:	f000 80de 	beq.w	801f42c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801f270:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f272:	1215      	asrs	r5, r2, #8
 801f274:	8838      	ldrh	r0, [r7, #0]
 801f276:	434b      	muls	r3, r1
 801f278:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801f27c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f27e:	f103 0c01 	add.w	ip, r3, #1
 801f282:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801f286:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f28a:	fa5f fc83 	uxtb.w	ip, r3
 801f28e:	1203      	asrs	r3, r0, #8
 801f290:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801f294:	fb13 f30c 	smulbb	r3, r3, ip
 801f298:	fb05 3501 	mla	r5, r5, r1, r3
 801f29c:	10c3      	asrs	r3, r0, #3
 801f29e:	10d1      	asrs	r1, r2, #3
 801f2a0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801f2a4:	00d2      	lsls	r2, r2, #3
 801f2a6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801f2aa:	b2ad      	uxth	r5, r5
 801f2ac:	fb13 f30c 	smulbb	r3, r3, ip
 801f2b0:	b2d2      	uxtb	r2, r2
 801f2b2:	fb01 3104 	mla	r1, r1, r4, r3
 801f2b6:	00c3      	lsls	r3, r0, #3
 801f2b8:	b2db      	uxtb	r3, r3
 801f2ba:	b289      	uxth	r1, r1
 801f2bc:	fb13 f30c 	smulbb	r3, r3, ip
 801f2c0:	fb02 3304 	mla	r3, r2, r4, r3
 801f2c4:	b29a      	uxth	r2, r3
 801f2c6:	1c6b      	adds	r3, r5, #1
 801f2c8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f2cc:	1c53      	adds	r3, r2, #1
 801f2ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f2d2:	1c4a      	adds	r2, r1, #1
 801f2d4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801f2d8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f2dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f2e0:	0949      	lsrs	r1, r1, #5
 801f2e2:	432b      	orrs	r3, r5
 801f2e4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f2e8:	430b      	orrs	r3, r1
 801f2ea:	803b      	strh	r3, [r7, #0]
 801f2ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f2ee:	3702      	adds	r7, #2
 801f2f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f2f2:	4413      	add	r3, r2
 801f2f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f2f6:	9321      	str	r3, [sp, #132]	@ 0x84
 801f2f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f2fa:	441a      	add	r2, r3
 801f2fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f2fe:	3b01      	subs	r3, #1
 801f300:	9222      	str	r2, [sp, #136]	@ 0x88
 801f302:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f304:	e687      	b.n	801f016 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f306:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f308:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801f30a:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 801f30c:	4433      	add	r3, r6
 801f30e:	9321      	str	r3, [sp, #132]	@ 0x84
 801f310:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f312:	441c      	add	r4, r3
 801f314:	9b08      	ldr	r3, [sp, #32]
 801f316:	3b01      	subs	r3, #1
 801f318:	9422      	str	r4, [sp, #136]	@ 0x88
 801f31a:	9308      	str	r3, [sp, #32]
 801f31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f31e:	3302      	adds	r3, #2
 801f320:	9309      	str	r3, [sp, #36]	@ 0x24
 801f322:	e656      	b.n	801efd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f324:	d028      	beq.n	801f378 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801f326:	9b08      	ldr	r3, [sp, #32]
 801f328:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f32a:	3b01      	subs	r3, #1
 801f32c:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 801f32e:	fb00 5003 	mla	r0, r0, r3, r5
 801f332:	1400      	asrs	r0, r0, #16
 801f334:	f53f ae6a 	bmi.w	801f00c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f338:	3901      	subs	r1, #1
 801f33a:	4288      	cmp	r0, r1
 801f33c:	f6bf ae66 	bge.w	801f00c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f340:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801f342:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801f344:	fb01 0303 	mla	r3, r1, r3, r0
 801f348:	141b      	asrs	r3, r3, #16
 801f34a:	f53f ae5f 	bmi.w	801f00c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f34e:	3a01      	subs	r2, #1
 801f350:	4293      	cmp	r3, r2
 801f352:	f6bf ae5b 	bge.w	801f00c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f356:	9b08      	ldr	r3, [sp, #32]
 801f358:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801f35c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801f360:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f362:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f364:	2b00      	cmp	r3, #0
 801f366:	f300 8082 	bgt.w	801f46e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801f36a:	9b08      	ldr	r3, [sp, #32]
 801f36c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f372:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f376:	9309      	str	r3, [sp, #36]	@ 0x24
 801f378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	f340 81ef 	ble.w	801f75e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f384:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f386:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f38a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f38e:	eef0 6a62 	vmov.f32	s13, s5
 801f392:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f396:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f39a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f39e:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 801f3a2:	eef0 6a43 	vmov.f32	s13, s6
 801f3a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3aa:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 801f3ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3c6:	ee12 2a90 	vmov	r2, s5
 801f3ca:	eef0 2a47 	vmov.f32	s5, s14
 801f3ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3d2:	ee13 2a10 	vmov	r2, s6
 801f3d6:	9323      	str	r3, [sp, #140]	@ 0x8c
 801f3d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f3da:	eeb0 3a67 	vmov.f32	s6, s15
 801f3de:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3e2:	9324      	str	r3, [sp, #144]	@ 0x90
 801f3e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f3e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f3e8:	3b01      	subs	r3, #1
 801f3ea:	9311      	str	r3, [sp, #68]	@ 0x44
 801f3ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f3ee:	bf08      	it	eq
 801f3f0:	4613      	moveq	r3, r2
 801f3f2:	9308      	str	r3, [sp, #32]
 801f3f4:	e5df      	b.n	801efb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f3f6:	fb08 f505 	mul.w	r5, r8, r5
 801f3fa:	fb09 5303 	mla	r3, r9, r3, r5
 801f3fe:	e65f      	b.n	801f0c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801f400:	4681      	mov	r9, r0
 801f402:	e686      	b.n	801f112 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f404:	f1c1 0210 	rsb	r2, r1, #16
 801f408:	4341      	muls	r1, r0
 801f40a:	fb09 1902 	mla	r9, r9, r2, r1
 801f40e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f412:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f416:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f41a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f41e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801f422:	ea42 0909 	orr.w	r9, r2, r9
 801f426:	fa1f f289 	uxth.w	r2, r9
 801f42a:	e71b      	b.n	801f264 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f42c:	803a      	strh	r2, [r7, #0]
 801f42e:	e75d      	b.n	801f2ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f430:	f115 0e01 	adds.w	lr, r5, #1
 801f434:	f53f af5a 	bmi.w	801f2ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f438:	4572      	cmp	r2, lr
 801f43a:	f6ff af57 	blt.w	801f2ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f43e:	f110 0e01 	adds.w	lr, r0, #1
 801f442:	f53f af53 	bmi.w	801f2ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f446:	4573      	cmp	r3, lr
 801f448:	f6ff af50 	blt.w	801f2ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f44c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f44e:	b21b      	sxth	r3, r3
 801f450:	b212      	sxth	r2, r2
 801f452:	9502      	str	r5, [sp, #8]
 801f454:	9301      	str	r3, [sp, #4]
 801f456:	9200      	str	r2, [sp, #0]
 801f458:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801f45c:	e9cd c405 	strd	ip, r4, [sp, #20]
 801f460:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 801f464:	4639      	mov	r1, r7
 801f466:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f468:	f7ff fc02 	bl	801ec70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801f46c:	e73e      	b.n	801f2ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f46e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f470:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f474:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f476:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f47a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f47c:	fa1f fc82 	uxth.w	ip, r2
 801f480:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f484:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f486:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f48a:	141f      	asrs	r7, r3, #16
 801f48c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f48e:	141b      	asrs	r3, r3, #16
 801f490:	fb01 3707 	mla	r7, r1, r7, r3
 801f494:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f496:	eb03 0a07 	add.w	sl, r3, r7
 801f49a:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f49e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801f4a2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f4a6:	b29b      	uxth	r3, r3
 801f4a8:	2d00      	cmp	r5, #0
 801f4aa:	f000 813d 	beq.w	801f728 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801f4ae:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f4b2:	eb0a 0b01 	add.w	fp, sl, r1
 801f4b6:	fa1f fa85 	uxth.w	sl, r5
 801f4ba:	940f      	str	r4, [sp, #60]	@ 0x3c
 801f4bc:	fb0a fc0c 	mul.w	ip, sl, ip
 801f4c0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f4c4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f4c8:	eba0 000c 	sub.w	r0, r0, ip
 801f4cc:	9410      	str	r4, [sp, #64]	@ 0x40
 801f4ce:	fa1f fa8a 	uxth.w	sl, sl
 801f4d2:	b280      	uxth	r0, r0
 801f4d4:	eba3 030a 	sub.w	r3, r3, sl
 801f4d8:	fb08 f000 	mul.w	r0, r8, r0
 801f4dc:	b29b      	uxth	r3, r3
 801f4de:	fb09 0303 	mla	r3, r9, r3, r0
 801f4e2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f4e4:	fb0a 3300 	mla	r3, sl, r0, r3
 801f4e8:	fb0c 3304 	mla	r3, ip, r4, r3
 801f4ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	f000 810b 	beq.w	801f70c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801f4f6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f4f8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f4fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f4fe:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f502:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f506:	f000 8114 	beq.w	801f732 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801f50a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801f50e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f512:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f516:	fb0a fc0c 	mul.w	ip, sl, ip
 801f51a:	fb09 f707 	mul.w	r7, r9, r7
 801f51e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f522:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801f526:	f107 0b20 	add.w	fp, r7, #32
 801f52a:	44cc      	add	ip, r9
 801f52c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f530:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f534:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f538:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f53c:	ea4c 0909 	orr.w	r9, ip, r9
 801f540:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f544:	8847      	ldrh	r7, [r0, #2]
 801f546:	d019      	beq.n	801f57c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801f548:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801f54c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f550:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f554:	fb0a fc0c 	mul.w	ip, sl, ip
 801f558:	fb08 f807 	mul.w	r8, r8, r7
 801f55c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f560:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801f564:	f108 0b20 	add.w	fp, r8, #32
 801f568:	44bc      	add	ip, r7
 801f56a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f56e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f572:	0a3f      	lsrs	r7, r7, #8
 801f574:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f578:	ea4c 0707 	orr.w	r7, ip, r7
 801f57c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f580:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801f584:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f588:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801f58c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801f590:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f594:	ea4c 0909 	orr.w	r9, ip, r9
 801f598:	ea4a 0707 	orr.w	r7, sl, r7
 801f59c:	2d00      	cmp	r5, #0
 801f59e:	f000 80ca 	beq.w	801f736 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801f5a2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 801f5a6:	3901      	subs	r1, #1
 801f5a8:	0049      	lsls	r1, r1, #1
 801f5aa:	3102      	adds	r1, #2
 801f5ac:	eb00 0c01 	add.w	ip, r0, r1
 801f5b0:	5a41      	ldrh	r1, [r0, r1]
 801f5b2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f5b4:	28ff      	cmp	r0, #255	@ 0xff
 801f5b6:	d019      	beq.n	801f5ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801f5b8:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 801f5bc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f5be:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f5c2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f5c6:	fb04 fa01 	mul.w	sl, r4, r1
 801f5ca:	fb08 f800 	mul.w	r8, r8, r0
 801f5ce:	f10a 0020 	add.w	r0, sl, #32
 801f5d2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f5d6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f5da:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f5de:	4441      	add	r1, r8
 801f5e0:	0a00      	lsrs	r0, r0, #8
 801f5e2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f5e6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f5ea:	4301      	orrs	r1, r0
 801f5ec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f5ee:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f5f2:	2cff      	cmp	r4, #255	@ 0xff
 801f5f4:	d01a      	beq.n	801f62c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801f5f6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 801f5fa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f5fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f602:	fb04 fa00 	mul.w	sl, r4, r0
 801f606:	fb08 f80c 	mul.w	r8, r8, ip
 801f60a:	f10a 0c20 	add.w	ip, sl, #32
 801f60e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f612:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f616:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f61a:	4440      	add	r0, r8
 801f61c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f620:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f624:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801f628:	ea40 000c 	orr.w	r0, r0, ip
 801f62c:	fb15 fc02 	smulbb	ip, r5, r2
 801f630:	f1c5 0810 	rsb	r8, r5, #16
 801f634:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f638:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801f63c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f640:	eba8 0802 	sub.w	r8, r8, r2
 801f644:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f648:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f64c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f650:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801f654:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f658:	ea4a 0101 	orr.w	r1, sl, r1
 801f65c:	437a      	muls	r2, r7
 801f65e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f662:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801f666:	fb09 2208 	mla	r2, r9, r8, r2
 801f66a:	ea4b 0000 	orr.w	r0, fp, r0
 801f66e:	fb05 2201 	mla	r2, r5, r1, r2
 801f672:	fb0c 2200 	mla	r2, ip, r0, r2
 801f676:	0d57      	lsrs	r7, r2, #21
 801f678:	0952      	lsrs	r2, r2, #5
 801f67a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f67e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f682:	433a      	orrs	r2, r7
 801f684:	2bff      	cmp	r3, #255	@ 0xff
 801f686:	b292      	uxth	r2, r2
 801f688:	d102      	bne.n	801f690 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801f68a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f68c:	29ff      	cmp	r1, #255	@ 0xff
 801f68e:	d063      	beq.n	801f758 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801f690:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f692:	1215      	asrs	r5, r2, #8
 801f694:	f8be 1000 	ldrh.w	r1, [lr]
 801f698:	4343      	muls	r3, r0
 801f69a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f69c:	10cf      	asrs	r7, r1, #3
 801f69e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801f6a2:	1c58      	adds	r0, r3, #1
 801f6a4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f6a8:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801f6ac:	1208      	asrs	r0, r1, #8
 801f6ae:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f6b2:	00c9      	lsls	r1, r1, #3
 801f6b4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801f6b8:	b2db      	uxtb	r3, r3
 801f6ba:	b2c9      	uxtb	r1, r1
 801f6bc:	fb10 f003 	smulbb	r0, r0, r3
 801f6c0:	fb11 f103 	smulbb	r1, r1, r3
 801f6c4:	fb05 0504 	mla	r5, r5, r4, r0
 801f6c8:	10d0      	asrs	r0, r2, #3
 801f6ca:	fb17 f703 	smulbb	r7, r7, r3
 801f6ce:	00d2      	lsls	r2, r2, #3
 801f6d0:	b2ad      	uxth	r5, r5
 801f6d2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f6d6:	b2d2      	uxtb	r2, r2
 801f6d8:	fb00 7004 	mla	r0, r0, r4, r7
 801f6dc:	1c6b      	adds	r3, r5, #1
 801f6de:	fb02 1204 	mla	r2, r2, r4, r1
 801f6e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f6e6:	b292      	uxth	r2, r2
 801f6e8:	b280      	uxth	r0, r0
 801f6ea:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801f6ee:	1c57      	adds	r7, r2, #1
 801f6f0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f6f4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f6f8:	433d      	orrs	r5, r7
 801f6fa:	1c47      	adds	r7, r0, #1
 801f6fc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801f700:	097f      	lsrs	r7, r7, #5
 801f702:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f706:	433d      	orrs	r5, r7
 801f708:	f8ae 5000 	strh.w	r5, [lr]
 801f70c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f70e:	f10e 0e02 	add.w	lr, lr, #2
 801f712:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f714:	4413      	add	r3, r2
 801f716:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f718:	9321      	str	r3, [sp, #132]	@ 0x84
 801f71a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f71c:	441a      	add	r2, r3
 801f71e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f720:	3b01      	subs	r3, #1
 801f722:	9222      	str	r2, [sp, #136]	@ 0x88
 801f724:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f726:	e61c      	b.n	801f362 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801f728:	fb08 f000 	mul.w	r0, r8, r0
 801f72c:	fb09 0303 	mla	r3, r9, r3, r0
 801f730:	e6dc      	b.n	801f4ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801f732:	46b9      	mov	r9, r7
 801f734:	e704      	b.n	801f540 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801f736:	f1c2 0110 	rsb	r1, r2, #16
 801f73a:	437a      	muls	r2, r7
 801f73c:	fb09 2901 	mla	r9, r9, r1, r2
 801f740:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f744:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801f748:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801f74c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f750:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f754:	4302      	orrs	r2, r0
 801f756:	e795      	b.n	801f684 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801f758:	f8ae 2000 	strh.w	r2, [lr]
 801f75c:	e7d6      	b.n	801f70c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801f75e:	b017      	add	sp, #92	@ 0x5c
 801f760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f764 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f768:	b085      	sub	sp, #20
 801f76a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801f76e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 801f772:	2800      	cmp	r0, #0
 801f774:	9103      	str	r1, [sp, #12]
 801f776:	fb00 7406 	mla	r4, r0, r6, r7
 801f77a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 801f77e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 801f782:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801f786:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 801f78a:	eb02 0904 	add.w	r9, r2, r4
 801f78e:	9501      	str	r5, [sp, #4]
 801f790:	f2c0 8141 	blt.w	801fa16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801f794:	4583      	cmp	fp, r0
 801f796:	f340 813e 	ble.w	801fa16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801f79a:	2f00      	cmp	r7, #0
 801f79c:	f2c0 8137 	blt.w	801fa0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801f7a0:	42be      	cmp	r6, r7
 801f7a2:	f340 8134 	ble.w	801fa0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801f7a6:	f812 c004 	ldrb.w	ip, [r2, r4]
 801f7aa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801f7ae:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 801f7b2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801f7b6:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 801f7ba:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f7be:	4355      	muls	r5, r2
 801f7c0:	fb0c f203 	mul.w	r2, ip, r3
 801f7c4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801f7c8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 801f7cc:	441d      	add	r5, r3
 801f7ce:	f102 0320 	add.w	r3, r2, #32
 801f7d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f7d6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801f7da:	0a1b      	lsrs	r3, r3, #8
 801f7dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f7e0:	431c      	orrs	r4, r3
 801f7e2:	1c7b      	adds	r3, r7, #1
 801f7e4:	f100 811c 	bmi.w	801fa20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801f7e8:	429e      	cmp	r6, r3
 801f7ea:	f340 8119 	ble.w	801fa20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801f7ee:	2900      	cmp	r1, #0
 801f7f0:	f000 8119 	beq.w	801fa26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801f7f4:	9a01      	ldr	r2, [sp, #4]
 801f7f6:	f899 3001 	ldrb.w	r3, [r9, #1]
 801f7fa:	8855      	ldrh	r5, [r2, #2]
 801f7fc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801f800:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 801f804:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f808:	fb08 f802 	mul.w	r8, r8, r2
 801f80c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 801f810:	435d      	muls	r5, r3
 801f812:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801f816:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f81a:	44d0      	add	r8, sl
 801f81c:	f105 0a20 	add.w	sl, r5, #32
 801f820:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f824:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801f828:	0a2d      	lsrs	r5, r5, #8
 801f82a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f82e:	432a      	orrs	r2, r5
 801f830:	3001      	adds	r0, #1
 801f832:	f100 80fe 	bmi.w	801fa32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801f836:	4583      	cmp	fp, r0
 801f838:	f340 80fb 	ble.w	801fa32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801f83c:	f1be 0f00 	cmp.w	lr, #0
 801f840:	f000 80fc 	beq.w	801fa3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801f844:	2f00      	cmp	r7, #0
 801f846:	f2c0 80f1 	blt.w	801fa2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801f84a:	42be      	cmp	r6, r7
 801f84c:	f340 80ee 	ble.w	801fa2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801f850:	9801      	ldr	r0, [sp, #4]
 801f852:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 801f856:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f85a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801f85e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f862:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 801f866:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801f86a:	fb0a fa00 	mul.w	sl, sl, r0
 801f86e:	fb05 f808 	mul.w	r8, r5, r8
 801f872:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801f876:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 801f87a:	4482      	add	sl, r0
 801f87c:	f108 0020 	add.w	r0, r8, #32
 801f880:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f884:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801f888:	0a00      	lsrs	r0, r0, #8
 801f88a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f88e:	ea4b 0b00 	orr.w	fp, fp, r0
 801f892:	3701      	adds	r7, #1
 801f894:	f100 80d7 	bmi.w	801fa46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801f898:	42be      	cmp	r6, r7
 801f89a:	f340 80d4 	ble.w	801fa46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801f89e:	2900      	cmp	r1, #0
 801f8a0:	f000 80d4 	beq.w	801fa4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801f8a4:	3601      	adds	r6, #1
 801f8a6:	9801      	ldr	r0, [sp, #4]
 801f8a8:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f8ac:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801f8b0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801f8b4:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 801f8b8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f8bc:	fb09 f906 	mul.w	r9, r9, r6
 801f8c0:	fb07 f800 	mul.w	r8, r7, r0
 801f8c4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 801f8c8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801f8cc:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 801f8d0:	44d1      	add	r9, sl
 801f8d2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801f8d6:	f108 0020 	add.w	r0, r8, #32
 801f8da:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f8de:	0a00      	lsrs	r0, r0, #8
 801f8e0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f8e4:	4330      	orrs	r0, r6
 801f8e6:	b28e      	uxth	r6, r1
 801f8e8:	fa1f f98e 	uxth.w	r9, lr
 801f8ec:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801f8f0:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801f8f4:	fb06 f809 	mul.w	r8, r6, r9
 801f8f8:	0136      	lsls	r6, r6, #4
 801f8fa:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f8fe:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f902:	9601      	str	r6, [sp, #4]
 801f904:	ea4a 0404 	orr.w	r4, sl, r4
 801f908:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f90c:	fa1f f689 	uxth.w	r6, r9
 801f910:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f914:	fb11 f90e 	smulbb	r9, r1, lr
 801f918:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f91c:	9602      	str	r6, [sp, #8]
 801f91e:	4626      	mov	r6, r4
 801f920:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801f924:	f1ce 0410 	rsb	r4, lr, #16
 801f928:	ea4a 0202 	orr.w	r2, sl, r2
 801f92c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f930:	1a64      	subs	r4, r4, r1
 801f932:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801f936:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f93a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801f93e:	434a      	muls	r2, r1
 801f940:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801f944:	ea4a 0000 	orr.w	r0, sl, r0
 801f948:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f94c:	fb04 2406 	mla	r4, r4, r6, r2
 801f950:	9903      	ldr	r1, [sp, #12]
 801f952:	fb09 4200 	mla	r2, r9, r0, r4
 801f956:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801f95a:	9801      	ldr	r0, [sp, #4]
 801f95c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801f960:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801f964:	8809      	ldrh	r1, [r1, #0]
 801f966:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 801f96a:	ea44 0b0b 	orr.w	fp, r4, fp
 801f96e:	9c02      	ldr	r4, [sp, #8]
 801f970:	1b00      	subs	r0, r0, r4
 801f972:	9c01      	ldr	r4, [sp, #4]
 801f974:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801f978:	eba4 0608 	sub.w	r6, r4, r8
 801f97c:	b280      	uxth	r0, r0
 801f97e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f982:	b2b6      	uxth	r6, r6
 801f984:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f988:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f98c:	4373      	muls	r3, r6
 801f98e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801f992:	fb0c 3300 	mla	r3, ip, r0, r3
 801f996:	9802      	ldr	r0, [sp, #8]
 801f998:	ea42 0e0e 	orr.w	lr, r2, lr
 801f99c:	fb00 3505 	mla	r5, r0, r5, r3
 801f9a0:	120b      	asrs	r3, r1, #8
 801f9a2:	10c8      	asrs	r0, r1, #3
 801f9a4:	fb08 5707 	mla	r7, r8, r7, r5
 801f9a8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801f9ac:	00c9      	lsls	r1, r1, #3
 801f9ae:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f9b2:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801f9b6:	fa1f f28e 	uxth.w	r2, lr
 801f9ba:	b2c9      	uxtb	r1, r1
 801f9bc:	b2ff      	uxtb	r7, r7
 801f9be:	437b      	muls	r3, r7
 801f9c0:	4378      	muls	r0, r7
 801f9c2:	434f      	muls	r7, r1
 801f9c4:	1c59      	adds	r1, r3, #1
 801f9c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f9ca:	1213      	asrs	r3, r2, #8
 801f9cc:	f023 0307 	bic.w	r3, r3, #7
 801f9d0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f9d4:	1c41      	adds	r1, r0, #1
 801f9d6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f9da:	10d1      	asrs	r1, r2, #3
 801f9dc:	021b      	lsls	r3, r3, #8
 801f9de:	f021 0103 	bic.w	r1, r1, #3
 801f9e2:	00d2      	lsls	r2, r2, #3
 801f9e4:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801f9e8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f9ec:	00c9      	lsls	r1, r1, #3
 801f9ee:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f9f2:	430b      	orrs	r3, r1
 801f9f4:	1c79      	adds	r1, r7, #1
 801f9f6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f9fa:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f9fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fa02:	431a      	orrs	r2, r3
 801fa04:	9b03      	ldr	r3, [sp, #12]
 801fa06:	801a      	strh	r2, [r3, #0]
 801fa08:	b005      	add	sp, #20
 801fa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa0e:	f04f 0c00 	mov.w	ip, #0
 801fa12:	4664      	mov	r4, ip
 801fa14:	e6e5      	b.n	801f7e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801fa16:	2300      	movs	r3, #0
 801fa18:	469c      	mov	ip, r3
 801fa1a:	461a      	mov	r2, r3
 801fa1c:	461c      	mov	r4, r3
 801fa1e:	e707      	b.n	801f830 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fa20:	2300      	movs	r3, #0
 801fa22:	461a      	mov	r2, r3
 801fa24:	e704      	b.n	801f830 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fa26:	460b      	mov	r3, r1
 801fa28:	460a      	mov	r2, r1
 801fa2a:	e701      	b.n	801f830 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fa2c:	2500      	movs	r5, #0
 801fa2e:	46ab      	mov	fp, r5
 801fa30:	e72f      	b.n	801f892 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801fa32:	2700      	movs	r7, #0
 801fa34:	463d      	mov	r5, r7
 801fa36:	4638      	mov	r0, r7
 801fa38:	46bb      	mov	fp, r7
 801fa3a:	e754      	b.n	801f8e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fa3c:	4677      	mov	r7, lr
 801fa3e:	4675      	mov	r5, lr
 801fa40:	4670      	mov	r0, lr
 801fa42:	46f3      	mov	fp, lr
 801fa44:	e74f      	b.n	801f8e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fa46:	2700      	movs	r7, #0
 801fa48:	4638      	mov	r0, r7
 801fa4a:	e74c      	b.n	801f8e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fa4c:	460f      	mov	r7, r1
 801fa4e:	4608      	mov	r0, r1
 801fa50:	e749      	b.n	801f8e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801fa54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa58:	b093      	sub	sp, #76	@ 0x4c
 801fa5a:	9210      	str	r2, [sp, #64]	@ 0x40
 801fa5c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fa5e:	9011      	str	r0, [sp, #68]	@ 0x44
 801fa60:	910e      	str	r1, [sp, #56]	@ 0x38
 801fa62:	6850      	ldr	r0, [r2, #4]
 801fa64:	9306      	str	r3, [sp, #24]
 801fa66:	6812      	ldr	r2, [r2, #0]
 801fa68:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801fa6c:	fb00 1303 	mla	r3, r0, r3, r1
 801fa70:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fa74:	9307      	str	r3, [sp, #28]
 801fa76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	9308      	str	r3, [sp, #32]
 801fa7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fa7e:	685b      	ldr	r3, [r3, #4]
 801fa80:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	dc03      	bgt.n	801fa90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fa88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	f340 83b6 	ble.w	80201fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801fa90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fa92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fa96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fa9a:	1e48      	subs	r0, r1, #1
 801fa9c:	1e55      	subs	r5, r2, #1
 801fa9e:	9b06      	ldr	r3, [sp, #24]
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	f340 8165 	ble.w	801fd70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801faa6:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801faa8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801faaa:	1436      	asrs	r6, r6, #16
 801faac:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fab0:	d406      	bmi.n	801fac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fab2:	4286      	cmp	r6, r0
 801fab4:	da04      	bge.n	801fac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	db02      	blt.n	801fac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801faba:	42ab      	cmp	r3, r5
 801fabc:	f2c0 8159 	blt.w	801fd72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fac0:	3601      	adds	r6, #1
 801fac2:	f100 8146 	bmi.w	801fd52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fac6:	42b1      	cmp	r1, r6
 801fac8:	f2c0 8143 	blt.w	801fd52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801facc:	3301      	adds	r3, #1
 801face:	f100 8140 	bmi.w	801fd52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fad2:	429a      	cmp	r2, r3
 801fad4:	f2c0 813d 	blt.w	801fd52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fad8:	9b06      	ldr	r3, [sp, #24]
 801fada:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801fade:	9f07      	ldr	r7, [sp, #28]
 801fae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	f340 8166 	ble.w	801fdb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801faea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801faec:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801faee:	1418      	asrs	r0, r3, #16
 801faf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801faf2:	142d      	asrs	r5, r5, #16
 801faf4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801faf8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fafa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801fafe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fb00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801fb04:	f100 81f0 	bmi.w	801fee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fb08:	f102 3eff 	add.w	lr, r2, #4294967295
 801fb0c:	4575      	cmp	r5, lr
 801fb0e:	f280 81eb 	bge.w	801fee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fb12:	2800      	cmp	r0, #0
 801fb14:	f2c0 81e8 	blt.w	801fee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fb18:	f103 3eff 	add.w	lr, r3, #4294967295
 801fb1c:	4570      	cmp	r0, lr
 801fb1e:	f280 81e3 	bge.w	801fee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fb22:	b212      	sxth	r2, r2
 801fb24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb26:	fa1f fe81 	uxth.w	lr, r1
 801fb2a:	fb00 5002 	mla	r0, r0, r2, r5
 801fb2e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801fb32:	eb03 0a00 	add.w	sl, r3, r0
 801fb36:	f813 9000 	ldrb.w	r9, [r3, r0]
 801fb3a:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 801fb3e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fb42:	b29b      	uxth	r3, r3
 801fb44:	f1bc 0f00 	cmp.w	ip, #0
 801fb48:	f000 817b 	beq.w	801fe42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fb4c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801fb50:	eb0a 0b02 	add.w	fp, sl, r2
 801fb54:	fa1f fa8c 	uxth.w	sl, ip
 801fb58:	940a      	str	r4, [sp, #40]	@ 0x28
 801fb5a:	fb0a fe0e 	mul.w	lr, sl, lr
 801fb5e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801fb62:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801fb66:	eba5 050e 	sub.w	r5, r5, lr
 801fb6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fb6c:	fa1f fa8a 	uxth.w	sl, sl
 801fb70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fb72:	b2ad      	uxth	r5, r5
 801fb74:	eba3 030a 	sub.w	r3, r3, sl
 801fb78:	fb08 f505 	mul.w	r5, r8, r5
 801fb7c:	b29b      	uxth	r3, r3
 801fb7e:	fb09 5303 	mla	r3, r9, r3, r5
 801fb82:	fb0a 3304 	mla	r3, sl, r4, r3
 801fb86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fb88:	fb0e 3304 	mla	r3, lr, r4, r3
 801fb8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	f000 80d1 	beq.w	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fb96:	9c08      	ldr	r4, [sp, #32]
 801fb98:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801fb9c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801fba0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801fba4:	f000 8152 	beq.w	801fe4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801fba8:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801fbac:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801fbb0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fbb4:	fb0a fe0e 	mul.w	lr, sl, lr
 801fbb8:	fb09 f000 	mul.w	r0, r9, r0
 801fbbc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801fbc0:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801fbc4:	f100 0b20 	add.w	fp, r0, #32
 801fbc8:	44ce      	add	lr, r9
 801fbca:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801fbce:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801fbd2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fbd6:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801fbda:	ea4e 0909 	orr.w	r9, lr, r9
 801fbde:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801fbe2:	8868      	ldrh	r0, [r5, #2]
 801fbe4:	d019      	beq.n	801fc1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801fbe6:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801fbea:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801fbee:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fbf2:	fb0a fe0e 	mul.w	lr, sl, lr
 801fbf6:	fb08 f800 	mul.w	r8, r8, r0
 801fbfa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801fbfe:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801fc02:	f108 0b20 	add.w	fp, r8, #32
 801fc06:	4486      	add	lr, r0
 801fc08:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801fc0c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801fc10:	0a00      	lsrs	r0, r0, #8
 801fc12:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fc16:	ea4e 0000 	orr.w	r0, lr, r0
 801fc1a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801fc1e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801fc22:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801fc26:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801fc2a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801fc2e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801fc32:	ea4e 0909 	orr.w	r9, lr, r9
 801fc36:	ea4a 0000 	orr.w	r0, sl, r0
 801fc3a:	f1bc 0f00 	cmp.w	ip, #0
 801fc3e:	f000 8107 	beq.w	801fe50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801fc42:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 801fc46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fc48:	3a01      	subs	r2, #1
 801fc4a:	2cff      	cmp	r4, #255	@ 0xff
 801fc4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801fc50:	f102 0202 	add.w	r2, r2, #2
 801fc54:	eb05 0e02 	add.w	lr, r5, r2
 801fc58:	5aaa      	ldrh	r2, [r5, r2]
 801fc5a:	d018      	beq.n	801fc8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fc5c:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 801fc60:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fc64:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fc68:	fb04 fa02 	mul.w	sl, r4, r2
 801fc6c:	fb08 f805 	mul.w	r8, r8, r5
 801fc70:	f10a 0520 	add.w	r5, sl, #32
 801fc74:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801fc78:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801fc7c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801fc80:	4442      	add	r2, r8
 801fc82:	0a2d      	lsrs	r5, r5, #8
 801fc84:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801fc88:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fc8c:	432a      	orrs	r2, r5
 801fc8e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc90:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801fc94:	2cff      	cmp	r4, #255	@ 0xff
 801fc96:	d01a      	beq.n	801fcce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fc98:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 801fc9c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fca0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fca4:	fb04 fa05 	mul.w	sl, r4, r5
 801fca8:	fb08 f80e 	mul.w	r8, r8, lr
 801fcac:	f10a 0e20 	add.w	lr, sl, #32
 801fcb0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801fcb4:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801fcb8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801fcbc:	4445      	add	r5, r8
 801fcbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fcc2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801fcc6:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 801fcca:	ea45 050e 	orr.w	r5, r5, lr
 801fcce:	fb1c fe01 	smulbb	lr, ip, r1
 801fcd2:	f1cc 0810 	rsb	r8, ip, #16
 801fcd6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801fcda:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801fcde:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801fce2:	eba8 0801 	sub.w	r8, r8, r1
 801fce6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801fcea:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801fcee:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801fcf2:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801fcf6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801fcfa:	ea4a 0202 	orr.w	r2, sl, r2
 801fcfe:	4341      	muls	r1, r0
 801fd00:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801fd04:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801fd08:	fb09 1108 	mla	r1, r9, r8, r1
 801fd0c:	ea4b 0505 	orr.w	r5, fp, r5
 801fd10:	fb0c 1102 	mla	r1, ip, r2, r1
 801fd14:	fb0e 1e05 	mla	lr, lr, r5, r1
 801fd18:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801fd1c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fd20:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fd24:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801fd28:	ea42 0e0e 	orr.w	lr, r2, lr
 801fd2c:	fa1f f28e 	uxth.w	r2, lr
 801fd30:	2bff      	cmp	r3, #255	@ 0xff
 801fd32:	f040 80a1 	bne.w	801fe78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801fd36:	803a      	strh	r2, [r7, #0]
 801fd38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fd3a:	3702      	adds	r7, #2
 801fd3c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801fd3e:	4413      	add	r3, r2
 801fd40:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801fd42:	931d      	str	r3, [sp, #116]	@ 0x74
 801fd44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fd46:	441a      	add	r2, r3
 801fd48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fd4a:	3b01      	subs	r3, #1
 801fd4c:	921e      	str	r2, [sp, #120]	@ 0x78
 801fd4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fd50:	e6c7      	b.n	801fae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fd54:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801fd56:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 801fd58:	4433      	add	r3, r6
 801fd5a:	931d      	str	r3, [sp, #116]	@ 0x74
 801fd5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fd5e:	441c      	add	r4, r3
 801fd60:	9b06      	ldr	r3, [sp, #24]
 801fd62:	3b01      	subs	r3, #1
 801fd64:	941e      	str	r4, [sp, #120]	@ 0x78
 801fd66:	9306      	str	r3, [sp, #24]
 801fd68:	9b07      	ldr	r3, [sp, #28]
 801fd6a:	3302      	adds	r3, #2
 801fd6c:	9307      	str	r3, [sp, #28]
 801fd6e:	e696      	b.n	801fa9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fd70:	d028      	beq.n	801fdc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801fd72:	9b06      	ldr	r3, [sp, #24]
 801fd74:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801fd76:	3b01      	subs	r3, #1
 801fd78:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801fd7a:	fb00 5003 	mla	r0, r0, r3, r5
 801fd7e:	1400      	asrs	r0, r0, #16
 801fd80:	f53f aeaa 	bmi.w	801fad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fd84:	3901      	subs	r1, #1
 801fd86:	4288      	cmp	r0, r1
 801fd88:	f6bf aea6 	bge.w	801fad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fd8c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801fd8e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801fd90:	fb01 0303 	mla	r3, r1, r3, r0
 801fd94:	141b      	asrs	r3, r3, #16
 801fd96:	f53f ae9f 	bmi.w	801fad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fd9a:	3a01      	subs	r2, #1
 801fd9c:	4293      	cmp	r3, r2
 801fd9e:	f6bf ae9b 	bge.w	801fad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fda2:	9b06      	ldr	r3, [sp, #24]
 801fda4:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801fda8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801fdac:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fdae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	f300 80b6 	bgt.w	801ff22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801fdb6:	9b06      	ldr	r3, [sp, #24]
 801fdb8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fdbc:	9b07      	ldr	r3, [sp, #28]
 801fdbe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801fdc2:	9307      	str	r3, [sp, #28]
 801fdc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	f340 8218 	ble.w	80201fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801fdcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fdd0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fdd2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fdd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdda:	eef0 6a62 	vmov.f32	s13, s5
 801fdde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fde2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fde6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdea:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801fdee:	eef0 6a43 	vmov.f32	s13, s6
 801fdf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdf6:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801fdfa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdfe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe02:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe12:	ee12 2a90 	vmov	r2, s5
 801fe16:	eef0 2a47 	vmov.f32	s5, s14
 801fe1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe1e:	ee13 2a10 	vmov	r2, s6
 801fe22:	931f      	str	r3, [sp, #124]	@ 0x7c
 801fe24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fe26:	eeb0 3a67 	vmov.f32	s6, s15
 801fe2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe2e:	9320      	str	r3, [sp, #128]	@ 0x80
 801fe30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fe34:	3b01      	subs	r3, #1
 801fe36:	930e      	str	r3, [sp, #56]	@ 0x38
 801fe38:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fe3a:	bf08      	it	eq
 801fe3c:	4613      	moveq	r3, r2
 801fe3e:	9306      	str	r3, [sp, #24]
 801fe40:	e61f      	b.n	801fa82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fe42:	fb08 f505 	mul.w	r5, r8, r5
 801fe46:	fb09 5303 	mla	r3, r9, r3, r5
 801fe4a:	e69f      	b.n	801fb8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fe4c:	4681      	mov	r9, r0
 801fe4e:	e6c6      	b.n	801fbde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801fe50:	f1c1 0210 	rsb	r2, r1, #16
 801fe54:	4341      	muls	r1, r0
 801fe56:	fb09 1902 	mla	r9, r9, r2, r1
 801fe5a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fe5e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801fe62:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fe66:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fe6a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801fe6e:	ea42 0909 	orr.w	r9, r2, r9
 801fe72:	fa1f f289 	uxth.w	r2, r9
 801fe76:	e75b      	b.n	801fd30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 801fe78:	f8b7 c000 	ldrh.w	ip, [r7]
 801fe7c:	43db      	mvns	r3, r3
 801fe7e:	ea4f 202c 	mov.w	r0, ip, asr #8
 801fe82:	fa5f fe83 	uxtb.w	lr, r3
 801fe86:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801fe8a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801fe8e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801fe92:	fb00 f00e 	mul.w	r0, r0, lr
 801fe96:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801fe9a:	b2db      	uxtb	r3, r3
 801fe9c:	1c41      	adds	r1, r0, #1
 801fe9e:	fb05 f50e 	mul.w	r5, r5, lr
 801fea2:	fb03 f30e 	mul.w	r3, r3, lr
 801fea6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801feaa:	1211      	asrs	r1, r2, #8
 801feac:	f021 0107 	bic.w	r1, r1, #7
 801feb0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801feb4:	48d3      	ldr	r0, [pc, #844]	@ (8020204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801feb6:	b2c9      	uxtb	r1, r1
 801feb8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801febc:	1c69      	adds	r1, r5, #1
 801febe:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fec2:	10d1      	asrs	r1, r2, #3
 801fec4:	00d2      	lsls	r2, r2, #3
 801fec6:	f021 0103 	bic.w	r1, r1, #3
 801feca:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801fece:	00c9      	lsls	r1, r1, #3
 801fed0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801fed4:	4301      	orrs	r1, r0
 801fed6:	1c58      	adds	r0, r3, #1
 801fed8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fedc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fee0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fee4:	430a      	orrs	r2, r1
 801fee6:	e726      	b.n	801fd36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801fee8:	f115 0e01 	adds.w	lr, r5, #1
 801feec:	f53f af24 	bmi.w	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fef0:	4572      	cmp	r2, lr
 801fef2:	f6ff af21 	blt.w	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fef6:	f110 0e01 	adds.w	lr, r0, #1
 801fefa:	f53f af1d 	bmi.w	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fefe:	4573      	cmp	r3, lr
 801ff00:	f6ff af1a 	blt.w	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ff04:	b21b      	sxth	r3, r3
 801ff06:	b212      	sxth	r2, r2
 801ff08:	9301      	str	r3, [sp, #4]
 801ff0a:	9200      	str	r2, [sp, #0]
 801ff0c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801ff10:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801ff14:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801ff18:	4639      	mov	r1, r7
 801ff1a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ff1c:	f7ff fc22 	bl	801f764 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ff20:	e70a      	b.n	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ff22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ff24:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ff28:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ff2a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801ff2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ff30:	fa1f fc82 	uxth.w	ip, r2
 801ff34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff38:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ff3a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801ff3e:	141f      	asrs	r7, r3, #16
 801ff40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ff42:	141b      	asrs	r3, r3, #16
 801ff44:	fb01 3707 	mla	r7, r1, r7, r3
 801ff48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff4a:	eb03 0a07 	add.w	sl, r3, r7
 801ff4e:	f813 9007 	ldrb.w	r9, [r3, r7]
 801ff52:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801ff56:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ff5a:	b29b      	uxth	r3, r3
 801ff5c:	2d00      	cmp	r5, #0
 801ff5e:	f000 80fe 	beq.w	802015e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 801ff62:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801ff66:	eb0a 0b01 	add.w	fp, sl, r1
 801ff6a:	fa1f fa85 	uxth.w	sl, r5
 801ff6e:	940c      	str	r4, [sp, #48]	@ 0x30
 801ff70:	fb0a fc0c 	mul.w	ip, sl, ip
 801ff74:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ff78:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801ff7c:	eba0 000c 	sub.w	r0, r0, ip
 801ff80:	940d      	str	r4, [sp, #52]	@ 0x34
 801ff82:	fa1f fa8a 	uxth.w	sl, sl
 801ff86:	b280      	uxth	r0, r0
 801ff88:	eba3 030a 	sub.w	r3, r3, sl
 801ff8c:	fb08 f000 	mul.w	r0, r8, r0
 801ff90:	b29b      	uxth	r3, r3
 801ff92:	fb09 0303 	mla	r3, r9, r3, r0
 801ff96:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ff98:	fb0a 3300 	mla	r3, sl, r0, r3
 801ff9c:	fb0c 3304 	mla	r3, ip, r4, r3
 801ffa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	f000 80cc 	beq.w	8020142 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801ffaa:	9808      	ldr	r0, [sp, #32]
 801ffac:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ffb0:	9c08      	ldr	r4, [sp, #32]
 801ffb2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801ffb6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801ffba:	f000 80d5 	beq.w	8020168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801ffbe:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801ffc2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ffc6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801ffca:	fb0a fc0c 	mul.w	ip, sl, ip
 801ffce:	fb09 f707 	mul.w	r7, r9, r7
 801ffd2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801ffd6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801ffda:	f107 0b20 	add.w	fp, r7, #32
 801ffde:	44cc      	add	ip, r9
 801ffe0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801ffe4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ffe8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ffec:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801fff0:	ea4c 0909 	orr.w	r9, ip, r9
 801fff4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801fff8:	8847      	ldrh	r7, [r0, #2]
 801fffa:	d019      	beq.n	8020030 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 801fffc:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8020000:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020004:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8020008:	fb0a fc0c 	mul.w	ip, sl, ip
 802000c:	fb08 f807 	mul.w	r8, r8, r7
 8020010:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8020014:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8020018:	f108 0b20 	add.w	fp, r8, #32
 802001c:	44bc      	add	ip, r7
 802001e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8020022:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8020026:	0a3f      	lsrs	r7, r7, #8
 8020028:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802002c:	ea4c 0707 	orr.w	r7, ip, r7
 8020030:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8020034:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8020038:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802003c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8020040:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8020044:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020048:	ea4c 0909 	orr.w	r9, ip, r9
 802004c:	ea4a 0707 	orr.w	r7, sl, r7
 8020050:	2d00      	cmp	r5, #0
 8020052:	f000 808b 	beq.w	802016c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020056:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802005a:	3901      	subs	r1, #1
 802005c:	0049      	lsls	r1, r1, #1
 802005e:	3102      	adds	r1, #2
 8020060:	eb00 0c01 	add.w	ip, r0, r1
 8020064:	5a41      	ldrh	r1, [r0, r1]
 8020066:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020068:	28ff      	cmp	r0, #255	@ 0xff
 802006a:	d019      	beq.n	80200a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802006c:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8020070:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020072:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020076:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802007a:	fb04 fa01 	mul.w	sl, r4, r1
 802007e:	fb08 f800 	mul.w	r8, r8, r0
 8020082:	f10a 0020 	add.w	r0, sl, #32
 8020086:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802008a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802008e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020092:	4441      	add	r1, r8
 8020094:	0a00      	lsrs	r0, r0, #8
 8020096:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802009a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802009e:	4301      	orrs	r1, r0
 80200a0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80200a2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80200a6:	2cff      	cmp	r4, #255	@ 0xff
 80200a8:	d01a      	beq.n	80200e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 80200aa:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80200ae:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80200b2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80200b6:	fb04 fa00 	mul.w	sl, r4, r0
 80200ba:	fb08 f80c 	mul.w	r8, r8, ip
 80200be:	f10a 0c20 	add.w	ip, sl, #32
 80200c2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80200c6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80200ca:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80200ce:	4440      	add	r0, r8
 80200d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200d4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80200d8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80200dc:	ea40 000c 	orr.w	r0, r0, ip
 80200e0:	fb15 fc02 	smulbb	ip, r5, r2
 80200e4:	f1c5 0810 	rsb	r8, r5, #16
 80200e8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80200ec:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80200f0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80200f4:	eba8 0802 	sub.w	r8, r8, r2
 80200f8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80200fc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8020100:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8020104:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8020108:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802010c:	ea4a 0101 	orr.w	r1, sl, r1
 8020110:	437a      	muls	r2, r7
 8020112:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8020116:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802011a:	fb09 2208 	mla	r2, r9, r8, r2
 802011e:	ea4b 0000 	orr.w	r0, fp, r0
 8020122:	fb05 2201 	mla	r2, r5, r1, r2
 8020126:	fb0c 2200 	mla	r2, ip, r0, r2
 802012a:	0d57      	lsrs	r7, r2, #21
 802012c:	0952      	lsrs	r2, r2, #5
 802012e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8020132:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020136:	433a      	orrs	r2, r7
 8020138:	2bff      	cmp	r3, #255	@ 0xff
 802013a:	b292      	uxth	r2, r2
 802013c:	d127      	bne.n	802018e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 802013e:	f8ae 2000 	strh.w	r2, [lr]
 8020142:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020144:	f10e 0e02 	add.w	lr, lr, #2
 8020148:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802014a:	4413      	add	r3, r2
 802014c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802014e:	931d      	str	r3, [sp, #116]	@ 0x74
 8020150:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020152:	441a      	add	r2, r3
 8020154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020156:	3b01      	subs	r3, #1
 8020158:	921e      	str	r2, [sp, #120]	@ 0x78
 802015a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802015c:	e627      	b.n	801fdae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802015e:	fb08 f000 	mul.w	r0, r8, r0
 8020162:	fb09 0303 	mla	r3, r9, r3, r0
 8020166:	e71b      	b.n	801ffa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8020168:	46b9      	mov	r9, r7
 802016a:	e743      	b.n	801fff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 802016c:	f1c2 0110 	rsb	r1, r2, #16
 8020170:	437a      	muls	r2, r7
 8020172:	fb09 2901 	mla	r9, r9, r1, r2
 8020176:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802017a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802017e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8020182:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020186:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802018a:	4302      	orrs	r2, r0
 802018c:	e7d4      	b.n	8020138 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 802018e:	f8be 7000 	ldrh.w	r7, [lr]
 8020192:	43db      	mvns	r3, r3
 8020194:	4c1b      	ldr	r4, [pc, #108]	@ (8020204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8020196:	1238      	asrs	r0, r7, #8
 8020198:	fa5f fc83 	uxtb.w	ip, r3
 802019c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80201a0:	10fd      	asrs	r5, r7, #3
 80201a2:	00fb      	lsls	r3, r7, #3
 80201a4:	fb00 f00c 	mul.w	r0, r0, ip
 80201a8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80201ac:	b2db      	uxtb	r3, r3
 80201ae:	fb05 f10c 	mul.w	r1, r5, ip
 80201b2:	1c45      	adds	r5, r0, #1
 80201b4:	fb03 f30c 	mul.w	r3, r3, ip
 80201b8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80201bc:	1215      	asrs	r5, r2, #8
 80201be:	f025 0507 	bic.w	r5, r5, #7
 80201c2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80201c6:	1c4d      	adds	r5, r1, #1
 80201c8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80201cc:	10d1      	asrs	r1, r2, #3
 80201ce:	b2c0      	uxtb	r0, r0
 80201d0:	f021 0103 	bic.w	r1, r1, #3
 80201d4:	00d2      	lsls	r2, r2, #3
 80201d6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80201da:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80201de:	00c9      	lsls	r1, r1, #3
 80201e0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80201e4:	4308      	orrs	r0, r1
 80201e6:	1c59      	adds	r1, r3, #1
 80201e8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80201ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80201f0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80201f4:	4318      	orrs	r0, r3
 80201f6:	f8ae 0000 	strh.w	r0, [lr]
 80201fa:	e7a2      	b.n	8020142 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80201fc:	b013      	add	sp, #76	@ 0x4c
 80201fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020202:	bf00      	nop
 8020204:	fffff800 	.word	0xfffff800

08020208 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8020208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802020c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8020210:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8020214:	fb05 4c03 	mla	ip, r5, r3, r4
 8020218:	2d00      	cmp	r5, #0
 802021a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 802021e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8020222:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8020226:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 802022a:	8808      	ldrh	r0, [r1, #0]
 802022c:	f2c0 80a7 	blt.w	802037e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8020230:	45aa      	cmp	sl, r5
 8020232:	f340 80a4 	ble.w	802037e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8020236:	2c00      	cmp	r4, #0
 8020238:	f2c0 809f 	blt.w	802037a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802023c:	42a3      	cmp	r3, r4
 802023e:	f340 809c 	ble.w	802037a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8020242:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8020246:	1c62      	adds	r2, r4, #1
 8020248:	f100 809c 	bmi.w	8020384 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802024c:	4293      	cmp	r3, r2
 802024e:	f340 8099 	ble.w	8020384 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8020252:	f1b9 0f00 	cmp.w	r9, #0
 8020256:	f000 8095 	beq.w	8020384 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802025a:	f8be c002 	ldrh.w	ip, [lr, #2]
 802025e:	3501      	adds	r5, #1
 8020260:	f100 8094 	bmi.w	802038c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020264:	45aa      	cmp	sl, r5
 8020266:	f340 8091 	ble.w	802038c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802026a:	2f00      	cmp	r7, #0
 802026c:	f000 808e 	beq.w	802038c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020270:	2c00      	cmp	r4, #0
 8020272:	f2c0 8089 	blt.w	8020388 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8020276:	42a3      	cmp	r3, r4
 8020278:	f340 8086 	ble.w	8020388 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802027c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8020280:	3401      	adds	r4, #1
 8020282:	f100 8086 	bmi.w	8020392 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020286:	42a3      	cmp	r3, r4
 8020288:	f340 8083 	ble.w	8020392 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802028c:	f1b9 0f00 	cmp.w	r9, #0
 8020290:	d07f      	beq.n	8020392 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020292:	3301      	adds	r3, #1
 8020294:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8020298:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802029c:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 80202a0:	fb19 fe07 	smulbb	lr, r9, r7
 80202a4:	f1c7 0210 	rsb	r2, r7, #16
 80202a8:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80202ac:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80202b0:	eba2 0209 	sub.w	r2, r2, r9
 80202b4:	ea44 0808 	orr.w	r8, r4, r8
 80202b8:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80202bc:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80202c0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80202c4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80202c8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80202cc:	ea44 0c0c 	orr.w	ip, r4, ip
 80202d0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80202d4:	fb04 f40c 	mul.w	r4, r4, ip
 80202d8:	fb02 4808 	mla	r8, r2, r8, r4
 80202dc:	041a      	lsls	r2, r3, #16
 80202de:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80202e2:	b2b4      	uxth	r4, r6
 80202e4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80202e8:	43f6      	mvns	r6, r6
 80202ea:	4313      	orrs	r3, r2
 80202ec:	042a      	lsls	r2, r5, #16
 80202ee:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80202f2:	b2f6      	uxtb	r6, r6
 80202f4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80202f8:	fb0e 8303 	mla	r3, lr, r3, r8
 80202fc:	432a      	orrs	r2, r5
 80202fe:	fb07 3202 	mla	r2, r7, r2, r3
 8020302:	10c7      	asrs	r7, r0, #3
 8020304:	0d53      	lsrs	r3, r2, #21
 8020306:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802030a:	0952      	lsrs	r2, r2, #5
 802030c:	fb17 f706 	smulbb	r7, r7, r6
 8020310:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020314:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020318:	431a      	orrs	r2, r3
 802031a:	b293      	uxth	r3, r2
 802031c:	1202      	asrs	r2, r0, #8
 802031e:	121d      	asrs	r5, r3, #8
 8020320:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020324:	00c0      	lsls	r0, r0, #3
 8020326:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802032a:	fb12 f206 	smulbb	r2, r2, r6
 802032e:	b2c0      	uxtb	r0, r0
 8020330:	fb05 2504 	mla	r5, r5, r4, r2
 8020334:	10da      	asrs	r2, r3, #3
 8020336:	fb10 f006 	smulbb	r0, r0, r6
 802033a:	00db      	lsls	r3, r3, #3
 802033c:	b2ad      	uxth	r5, r5
 802033e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020342:	b2db      	uxtb	r3, r3
 8020344:	fb02 7204 	mla	r2, r2, r4, r7
 8020348:	fb03 0004 	mla	r0, r3, r4, r0
 802034c:	1c6b      	adds	r3, r5, #1
 802034e:	b292      	uxth	r2, r2
 8020350:	b280      	uxth	r0, r0
 8020352:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020356:	1c43      	adds	r3, r0, #1
 8020358:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802035c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020360:	1c50      	adds	r0, r2, #1
 8020362:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020366:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802036a:	0952      	lsrs	r2, r2, #5
 802036c:	432b      	orrs	r3, r5
 802036e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020372:	4313      	orrs	r3, r2
 8020374:	800b      	strh	r3, [r1, #0]
 8020376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802037a:	4680      	mov	r8, r0
 802037c:	e763      	b.n	8020246 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802037e:	4684      	mov	ip, r0
 8020380:	4680      	mov	r8, r0
 8020382:	e76c      	b.n	802025e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020384:	4684      	mov	ip, r0
 8020386:	e76a      	b.n	802025e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020388:	4605      	mov	r5, r0
 802038a:	e779      	b.n	8020280 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 802038c:	4603      	mov	r3, r0
 802038e:	4605      	mov	r5, r0
 8020390:	e782      	b.n	8020298 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8020392:	4603      	mov	r3, r0
 8020394:	e780      	b.n	8020298 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08020396 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802039a:	b093      	sub	sp, #76	@ 0x4c
 802039c:	461d      	mov	r5, r3
 802039e:	9210      	str	r2, [sp, #64]	@ 0x40
 80203a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80203a2:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 80203a6:	910a      	str	r1, [sp, #40]	@ 0x28
 80203a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80203aa:	6859      	ldr	r1, [r3, #4]
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	9011      	str	r0, [sp, #68]	@ 0x44
 80203b0:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 80203b4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80203b8:	fb01 2707 	mla	r7, r1, r7, r2
 80203bc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80203c0:	9307      	str	r3, [sp, #28]
 80203c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80203c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80203ca:	43db      	mvns	r3, r3
 80203cc:	b2db      	uxtb	r3, r3
 80203ce:	9308      	str	r3, [sp, #32]
 80203d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	dc03      	bgt.n	80203de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80203d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80203d8:	2b00      	cmp	r3, #0
 80203da:	f340 8205 	ble.w	80207e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80203de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80203e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80203e8:	1e48      	subs	r0, r1, #1
 80203ea:	f102 3cff 	add.w	ip, r2, #4294967295
 80203ee:	2d00      	cmp	r5, #0
 80203f0:	f340 80da 	ble.w	80205a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80203f4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80203f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80203fc:	d406      	bmi.n	802040c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80203fe:	4586      	cmp	lr, r0
 8020400:	da04      	bge.n	802040c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020402:	2b00      	cmp	r3, #0
 8020404:	db02      	blt.n	802040c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020406:	4563      	cmp	r3, ip
 8020408:	f2c0 80cf 	blt.w	80205aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802040c:	f11e 0e01 	adds.w	lr, lr, #1
 8020410:	f100 80c1 	bmi.w	8020596 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020414:	4571      	cmp	r1, lr
 8020416:	f2c0 80be 	blt.w	8020596 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802041a:	3301      	adds	r3, #1
 802041c:	f100 80bb 	bmi.w	8020596 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020420:	429a      	cmp	r2, r3
 8020422:	f2c0 80b8 	blt.w	8020596 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020426:	46a9      	mov	r9, r5
 8020428:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802042c:	f1b9 0f00 	cmp.w	r9, #0
 8020430:	f340 80d8 	ble.w	80205e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8020434:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020436:	1421      	asrs	r1, r4, #16
 8020438:	ea4f 4026 	mov.w	r0, r6, asr #16
 802043c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020440:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020444:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020448:	f100 8112 	bmi.w	8020670 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802044c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020450:	4551      	cmp	r1, sl
 8020452:	f280 810d 	bge.w	8020670 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020456:	2800      	cmp	r0, #0
 8020458:	f2c0 810a 	blt.w	8020670 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802045c:	f103 3aff 	add.w	sl, r3, #4294967295
 8020460:	4550      	cmp	r0, sl
 8020462:	f280 8105 	bge.w	8020670 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020466:	fa0f f38e 	sxth.w	r3, lr
 802046a:	fb00 1103 	mla	r1, r0, r3, r1
 802046e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020470:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8020474:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8020478:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802047c:	f1bc 0f00 	cmp.w	ip, #0
 8020480:	d007      	beq.n	8020492 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8020482:	005b      	lsls	r3, r3, #1
 8020484:	eb0a 0003 	add.w	r0, sl, r3
 8020488:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802048c:	930c      	str	r3, [sp, #48]	@ 0x30
 802048e:	8843      	ldrh	r3, [r0, #2]
 8020490:	930d      	str	r3, [sp, #52]	@ 0x34
 8020492:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8020496:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802049a:	fb12 f30c 	smulbb	r3, r2, ip
 802049e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80204a2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80204a6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80204aa:	10db      	asrs	r3, r3, #3
 80204ac:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80204b0:	ea40 000e 	orr.w	r0, r0, lr
 80204b4:	f1cc 0e10 	rsb	lr, ip, #16
 80204b8:	ea4a 0101 	orr.w	r1, sl, r1
 80204bc:	9f08      	ldr	r7, [sp, #32]
 80204be:	ebae 0e02 	sub.w	lr, lr, r2
 80204c2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80204c6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80204ca:	4351      	muls	r1, r2
 80204cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80204ce:	fb0e 1e00 	mla	lr, lr, r0, r1
 80204d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80204d4:	0410      	lsls	r0, r2, #16
 80204d6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80204da:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80204de:	4310      	orrs	r0, r2
 80204e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80204e2:	0412      	lsls	r2, r2, #16
 80204e4:	fb03 e000 	mla	r0, r3, r0, lr
 80204e8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80204ec:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80204f0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80204f4:	ea42 020e 	orr.w	r2, r2, lr
 80204f8:	fb03 0302 	mla	r3, r3, r2, r0
 80204fc:	f8b8 0000 	ldrh.w	r0, [r8]
 8020500:	0d5a      	lsrs	r2, r3, #21
 8020502:	095b      	lsrs	r3, r3, #5
 8020504:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020508:	1201      	asrs	r1, r0, #8
 802050a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802050e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8020512:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8020516:	00c0      	lsls	r0, r0, #3
 8020518:	4313      	orrs	r3, r2
 802051a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 802051e:	fb11 f107 	smulbb	r1, r1, r7
 8020522:	b2c0      	uxtb	r0, r0
 8020524:	b29b      	uxth	r3, r3
 8020526:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802052a:	fb10 f007 	smulbb	r0, r0, r7
 802052e:	fb1e fe07 	smulbb	lr, lr, r7
 8020532:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020536:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802053a:	fb0c 1c02 	mla	ip, ip, r2, r1
 802053e:	10d9      	asrs	r1, r3, #3
 8020540:	00db      	lsls	r3, r3, #3
 8020542:	fa1f fc8c 	uxth.w	ip, ip
 8020546:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802054a:	b2db      	uxtb	r3, r3
 802054c:	fb01 e102 	mla	r1, r1, r2, lr
 8020550:	fb03 0302 	mla	r3, r3, r2, r0
 8020554:	b289      	uxth	r1, r1
 8020556:	b29a      	uxth	r2, r3
 8020558:	f10c 0301 	add.w	r3, ip, #1
 802055c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020560:	1c53      	adds	r3, r2, #1
 8020562:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020566:	1c4a      	adds	r2, r1, #1
 8020568:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802056c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020570:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020574:	0949      	lsrs	r1, r1, #5
 8020576:	ea43 030c 	orr.w	r3, r3, ip
 802057a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802057e:	430b      	orrs	r3, r1
 8020580:	f8a8 3000 	strh.w	r3, [r8]
 8020584:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020586:	f108 0802 	add.w	r8, r8, #2
 802058a:	f109 39ff 	add.w	r9, r9, #4294967295
 802058e:	441c      	add	r4, r3
 8020590:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020592:	441e      	add	r6, r3
 8020594:	e74a      	b.n	802042c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020596:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020598:	3d01      	subs	r5, #1
 802059a:	441c      	add	r4, r3
 802059c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802059e:	441e      	add	r6, r3
 80205a0:	9b07      	ldr	r3, [sp, #28]
 80205a2:	3302      	adds	r3, #2
 80205a4:	9307      	str	r3, [sp, #28]
 80205a6:	e722      	b.n	80203ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80205a8:	d022      	beq.n	80205f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80205aa:	1e6b      	subs	r3, r5, #1
 80205ac:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80205ae:	fb00 4003 	mla	r0, r0, r3, r4
 80205b2:	1400      	asrs	r0, r0, #16
 80205b4:	f53f af37 	bmi.w	8020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80205b8:	3901      	subs	r1, #1
 80205ba:	4288      	cmp	r0, r1
 80205bc:	f6bf af33 	bge.w	8020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80205c0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80205c2:	fb01 6303 	mla	r3, r1, r3, r6
 80205c6:	141b      	asrs	r3, r3, #16
 80205c8:	f53f af2d 	bmi.w	8020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80205cc:	3a01      	subs	r2, #1
 80205ce:	4293      	cmp	r3, r2
 80205d0:	f6bf af29 	bge.w	8020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80205d4:	46a8      	mov	r8, r5
 80205d6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80205da:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 80205de:	f1b8 0f00 	cmp.w	r8, #0
 80205e2:	dc60      	bgt.n	80206a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80205e4:	9b07      	ldr	r3, [sp, #28]
 80205e6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80205ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80205ee:	9307      	str	r3, [sp, #28]
 80205f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	f340 80f8 	ble.w	80207e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80205f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80205fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80205fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020602:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020606:	eef0 6a62 	vmov.f32	s13, s5
 802060a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802060e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020616:	ee16 4a90 	vmov	r4, s13
 802061a:	eef0 6a43 	vmov.f32	s13, s6
 802061e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020622:	ee16 6a90 	vmov	r6, s13
 8020626:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802062a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802062e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020632:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020636:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802063a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802063e:	ee12 2a90 	vmov	r2, s5
 8020642:	eef0 2a47 	vmov.f32	s5, s14
 8020646:	fb92 f3f3 	sdiv	r3, r2, r3
 802064a:	ee13 2a10 	vmov	r2, s6
 802064e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020650:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020652:	eeb0 3a67 	vmov.f32	s6, s15
 8020656:	fb92 f3f3 	sdiv	r3, r2, r3
 802065a:	9320      	str	r3, [sp, #128]	@ 0x80
 802065c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802065e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020660:	3b01      	subs	r3, #1
 8020662:	930a      	str	r3, [sp, #40]	@ 0x28
 8020664:	bf08      	it	eq
 8020666:	4615      	moveq	r5, r2
 8020668:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802066a:	bf18      	it	ne
 802066c:	461d      	movne	r5, r3
 802066e:	e6af      	b.n	80203d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020670:	f111 0a01 	adds.w	sl, r1, #1
 8020674:	d486      	bmi.n	8020584 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020676:	45d6      	cmp	lr, sl
 8020678:	db84      	blt.n	8020584 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802067a:	f110 0a01 	adds.w	sl, r0, #1
 802067e:	d481      	bmi.n	8020584 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020680:	4553      	cmp	r3, sl
 8020682:	f6ff af7f 	blt.w	8020584 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020686:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020688:	b21b      	sxth	r3, r3
 802068a:	9101      	str	r1, [sp, #4]
 802068c:	4641      	mov	r1, r8
 802068e:	9300      	str	r3, [sp, #0]
 8020690:	fa0f f38e 	sxth.w	r3, lr
 8020694:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020698:	e9cd c704 	strd	ip, r7, [sp, #16]
 802069c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802069e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80206a0:	f7ff fdb2 	bl	8020208 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80206a4:	e76e      	b.n	8020584 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80206a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80206a8:	1430      	asrs	r0, r6, #16
 80206aa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80206ac:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80206b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80206b4:	1423      	asrs	r3, r4, #16
 80206b6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80206ba:	fb01 3000 	mla	r0, r1, r0, r3
 80206be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206c0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80206c4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80206c8:	8858      	ldrh	r0, [r3, #2]
 80206ca:	f1be 0f00 	cmp.w	lr, #0
 80206ce:	d00b      	beq.n	80206e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80206d0:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80206d4:	3901      	subs	r1, #1
 80206d6:	0049      	lsls	r1, r1, #1
 80206d8:	3102      	adds	r1, #2
 80206da:	eb03 0b01 	add.w	fp, r3, r1
 80206de:	5a5b      	ldrh	r3, [r3, r1]
 80206e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80206e2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80206e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206e8:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80206ec:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80206f0:	fb12 f30e 	smulbb	r3, r2, lr
 80206f4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80206f8:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 80206fc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8020700:	10db      	asrs	r3, r3, #3
 8020702:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020706:	ea41 010c 	orr.w	r1, r1, ip
 802070a:	f1ce 0c10 	rsb	ip, lr, #16
 802070e:	ea4b 0000 	orr.w	r0, fp, r0
 8020712:	9f08      	ldr	r7, [sp, #32]
 8020714:	ebac 0c02 	sub.w	ip, ip, r2
 8020718:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802071c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020720:	4350      	muls	r0, r2
 8020722:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020726:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020728:	fb0c 0c01 	mla	ip, ip, r1, r0
 802072c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802072e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020732:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8020736:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020738:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802073c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020740:	0412      	lsls	r2, r2, #16
 8020742:	ea4b 0101 	orr.w	r1, fp, r1
 8020746:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802074a:	fb03 c101 	mla	r1, r3, r1, ip
 802074e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020752:	4302      	orrs	r2, r0
 8020754:	fb03 1202 	mla	r2, r3, r2, r1
 8020758:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802075c:	0952      	lsrs	r2, r2, #5
 802075e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8020762:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8020766:	f8b9 2000 	ldrh.w	r2, [r9]
 802076a:	ea4b 0303 	orr.w	r3, fp, r3
 802076e:	1211      	asrs	r1, r2, #8
 8020770:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020774:	b29b      	uxth	r3, r3
 8020776:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802077a:	00d2      	lsls	r2, r2, #3
 802077c:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020780:	fb11 f107 	smulbb	r1, r1, r7
 8020784:	1218      	asrs	r0, r3, #8
 8020786:	fb1c fc07 	smulbb	ip, ip, r7
 802078a:	b2d2      	uxtb	r2, r2
 802078c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020790:	fb12 f207 	smulbb	r2, r2, r7
 8020794:	fb00 100a 	mla	r0, r0, sl, r1
 8020798:	10d9      	asrs	r1, r3, #3
 802079a:	00db      	lsls	r3, r3, #3
 802079c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80207a0:	b280      	uxth	r0, r0
 80207a2:	b2db      	uxtb	r3, r3
 80207a4:	fb01 c10a 	mla	r1, r1, sl, ip
 80207a8:	fb03 230a 	mla	r3, r3, sl, r2
 80207ac:	1c42      	adds	r2, r0, #1
 80207ae:	b289      	uxth	r1, r1
 80207b0:	b29b      	uxth	r3, r3
 80207b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80207b6:	f101 0c01 	add.w	ip, r1, #1
 80207ba:	1c5a      	adds	r2, r3, #1
 80207bc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80207c0:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80207c4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80207c8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80207ca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80207ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80207d2:	441c      	add	r4, r3
 80207d4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80207d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80207da:	4310      	orrs	r0, r2
 80207dc:	441e      	add	r6, r3
 80207de:	ea40 000c 	orr.w	r0, r0, ip
 80207e2:	f829 0b02 	strh.w	r0, [r9], #2
 80207e6:	e6fa      	b.n	80205de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80207e8:	b013      	add	sp, #76	@ 0x4c
 80207ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80207ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80207f2:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80207f6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80207fa:	fb0e 4703 	mla	r7, lr, r3, r4
 80207fe:	f1be 0f00 	cmp.w	lr, #0
 8020802:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8020806:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 802080a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802080e:	8808      	ldrh	r0, [r1, #0]
 8020810:	db60      	blt.n	80208d4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020812:	45f1      	cmp	r9, lr
 8020814:	dd5e      	ble.n	80208d4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020816:	2c00      	cmp	r4, #0
 8020818:	db5a      	blt.n	80208d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802081a:	42a3      	cmp	r3, r4
 802081c:	dd58      	ble.n	80208d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802081e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8020822:	1c62      	adds	r2, r4, #1
 8020824:	d459      	bmi.n	80208da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020826:	4293      	cmp	r3, r2
 8020828:	dd57      	ble.n	80208da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802082a:	2d00      	cmp	r5, #0
 802082c:	d055      	beq.n	80208da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802082e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8020832:	f11e 0e01 	adds.w	lr, lr, #1
 8020836:	d454      	bmi.n	80208e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020838:	45f1      	cmp	r9, lr
 802083a:	dd52      	ble.n	80208e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802083c:	2e00      	cmp	r6, #0
 802083e:	d050      	beq.n	80208e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020840:	2c00      	cmp	r4, #0
 8020842:	db4c      	blt.n	80208de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020844:	42a3      	cmp	r3, r4
 8020846:	dd4a      	ble.n	80208de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020848:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 802084c:	3401      	adds	r4, #1
 802084e:	d405      	bmi.n	802085c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020850:	42a3      	cmp	r3, r4
 8020852:	dd03      	ble.n	802085c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020854:	b115      	cbz	r5, 802085c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020856:	3301      	adds	r3, #1
 8020858:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 802085c:	fb15 f406 	smulbb	r4, r5, r6
 8020860:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8020864:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8020868:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802086c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8020870:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8020874:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8020878:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802087c:	ea43 0c0c 	orr.w	ip, r3, ip
 8020880:	f1c6 0310 	rsb	r3, r6, #16
 8020884:	ea4e 0707 	orr.w	r7, lr, r7
 8020888:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802088c:	1b5b      	subs	r3, r3, r5
 802088e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8020892:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020896:	437d      	muls	r5, r7
 8020898:	fb03 5c0c 	mla	ip, r3, ip, r5
 802089c:	0403      	lsls	r3, r0, #16
 802089e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80208a2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80208a6:	4318      	orrs	r0, r3
 80208a8:	0413      	lsls	r3, r2, #16
 80208aa:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80208ae:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80208b2:	fb04 c000 	mla	r0, r4, r0, ip
 80208b6:	4313      	orrs	r3, r2
 80208b8:	fb06 0003 	mla	r0, r6, r3, r0
 80208bc:	0d43      	lsrs	r3, r0, #21
 80208be:	0940      	lsrs	r0, r0, #5
 80208c0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80208c4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80208c8:	4318      	orrs	r0, r3
 80208ca:	8008      	strh	r0, [r1, #0]
 80208cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208d0:	4684      	mov	ip, r0
 80208d2:	e7a6      	b.n	8020822 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80208d4:	4607      	mov	r7, r0
 80208d6:	4684      	mov	ip, r0
 80208d8:	e7ab      	b.n	8020832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80208da:	4607      	mov	r7, r0
 80208dc:	e7a9      	b.n	8020832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80208de:	4602      	mov	r2, r0
 80208e0:	e7b4      	b.n	802084c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80208e2:	4602      	mov	r2, r0
 80208e4:	e7ba      	b.n	802085c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080208e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208ea:	b08f      	sub	sp, #60	@ 0x3c
 80208ec:	461d      	mov	r5, r3
 80208ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80208f0:	9107      	str	r1, [sp, #28]
 80208f2:	920c      	str	r2, [sp, #48]	@ 0x30
 80208f4:	6859      	ldr	r1, [r3, #4]
 80208f6:	681b      	ldr	r3, [r3, #0]
 80208f8:	900d      	str	r0, [sp, #52]	@ 0x34
 80208fa:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 80208fe:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8020902:	fb01 2707 	mla	r7, r1, r7, r2
 8020906:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802090a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802090c:	f8d3 8000 	ldr.w	r8, [r3]
 8020910:	9b07      	ldr	r3, [sp, #28]
 8020912:	2b00      	cmp	r3, #0
 8020914:	dc03      	bgt.n	802091e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020916:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020918:	2b00      	cmp	r3, #0
 802091a:	f340 8182 	ble.w	8020c22 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802091e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020920:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020924:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020928:	1e48      	subs	r0, r1, #1
 802092a:	f102 3cff 	add.w	ip, r2, #4294967295
 802092e:	2d00      	cmp	r5, #0
 8020930:	f340 809b 	ble.w	8020a6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8020934:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020938:	ea4f 4326 	mov.w	r3, r6, asr #16
 802093c:	d406      	bmi.n	802094c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802093e:	4586      	cmp	lr, r0
 8020940:	da04      	bge.n	802094c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020942:	2b00      	cmp	r3, #0
 8020944:	db02      	blt.n	802094c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020946:	4563      	cmp	r3, ip
 8020948:	f2c0 8090 	blt.w	8020a6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802094c:	f11e 0e01 	adds.w	lr, lr, #1
 8020950:	f100 8084 	bmi.w	8020a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020954:	4571      	cmp	r1, lr
 8020956:	f2c0 8081 	blt.w	8020a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802095a:	3301      	adds	r3, #1
 802095c:	d47e      	bmi.n	8020a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802095e:	429a      	cmp	r2, r3
 8020960:	db7c      	blt.n	8020a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020962:	46aa      	mov	sl, r5
 8020964:	46b9      	mov	r9, r7
 8020966:	f1ba 0f00 	cmp.w	sl, #0
 802096a:	f340 8099 	ble.w	8020aa0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802096e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020970:	1421      	asrs	r1, r4, #16
 8020972:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020976:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802097a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802097e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020982:	f100 80d1 	bmi.w	8020b28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020986:	f10e 3bff 	add.w	fp, lr, #4294967295
 802098a:	4559      	cmp	r1, fp
 802098c:	f280 80cc 	bge.w	8020b28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020990:	2800      	cmp	r0, #0
 8020992:	f2c0 80c9 	blt.w	8020b28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020996:	f103 3bff 	add.w	fp, r3, #4294967295
 802099a:	4558      	cmp	r0, fp
 802099c:	f280 80c4 	bge.w	8020b28 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80209a0:	fa0f fe8e 	sxth.w	lr, lr
 80209a4:	fb00 110e 	mla	r1, r0, lr, r1
 80209a8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80209ac:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80209b0:	8841      	ldrh	r1, [r0, #2]
 80209b2:	f1bc 0f00 	cmp.w	ip, #0
 80209b6:	d00b      	beq.n	80209d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80209b8:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 80209bc:	3b01      	subs	r3, #1
 80209be:	005b      	lsls	r3, r3, #1
 80209c0:	3302      	adds	r3, #2
 80209c2:	eb00 0e03 	add.w	lr, r0, r3
 80209c6:	5ac3      	ldrh	r3, [r0, r3]
 80209c8:	9308      	str	r3, [sp, #32]
 80209ca:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80209ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80209d0:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80209d4:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80209d8:	fb12 f30c 	smulbb	r3, r2, ip
 80209dc:	f1cc 0e10 	rsb	lr, ip, #16
 80209e0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80209e4:	10db      	asrs	r3, r3, #3
 80209e6:	ebae 0e02 	sub.w	lr, lr, r2
 80209ea:	ea40 000b 	orr.w	r0, r0, fp
 80209ee:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80209f2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80209f6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80209fa:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80209fe:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8020a02:	ea4b 0101 	orr.w	r1, fp, r1
 8020a06:	4351      	muls	r1, r2
 8020a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a0a:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020a0e:	0410      	lsls	r0, r2, #16
 8020a10:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8020a14:	9908      	ldr	r1, [sp, #32]
 8020a16:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8020a1a:	4310      	orrs	r0, r2
 8020a1c:	9a08      	ldr	r2, [sp, #32]
 8020a1e:	0412      	lsls	r2, r2, #16
 8020a20:	fb03 e000 	mla	r0, r3, r0, lr
 8020a24:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8020a28:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020a2c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8020a30:	ea42 020e 	orr.w	r2, r2, lr
 8020a34:	fb03 0302 	mla	r3, r3, r2, r0
 8020a38:	0d5a      	lsrs	r2, r3, #21
 8020a3a:	095b      	lsrs	r3, r3, #5
 8020a3c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020a40:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8020a44:	4313      	orrs	r3, r2
 8020a46:	f8a9 3000 	strh.w	r3, [r9]
 8020a4a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020a4c:	f109 0902 	add.w	r9, r9, #2
 8020a50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020a54:	441c      	add	r4, r3
 8020a56:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020a58:	441e      	add	r6, r3
 8020a5a:	e784      	b.n	8020966 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020a5c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020a5e:	3d01      	subs	r5, #1
 8020a60:	3702      	adds	r7, #2
 8020a62:	441c      	add	r4, r3
 8020a64:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020a66:	441e      	add	r6, r3
 8020a68:	e761      	b.n	802092e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020a6a:	d01d      	beq.n	8020aa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020a6c:	1e6b      	subs	r3, r5, #1
 8020a6e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8020a70:	fb00 4003 	mla	r0, r0, r3, r4
 8020a74:	1400      	asrs	r0, r0, #16
 8020a76:	f53f af74 	bmi.w	8020962 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020a7a:	3901      	subs	r1, #1
 8020a7c:	4288      	cmp	r0, r1
 8020a7e:	f6bf af70 	bge.w	8020962 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020a82:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020a84:	fb01 6303 	mla	r3, r1, r3, r6
 8020a88:	141b      	asrs	r3, r3, #16
 8020a8a:	f53f af6a 	bmi.w	8020962 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020a8e:	3a01      	subs	r2, #1
 8020a90:	4293      	cmp	r3, r2
 8020a92:	f6bf af66 	bge.w	8020962 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020a96:	46a9      	mov	r9, r5
 8020a98:	46ba      	mov	sl, r7
 8020a9a:	f1b9 0f00 	cmp.w	r9, #0
 8020a9e:	dc5b      	bgt.n	8020b58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020aa0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020aa4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020aa8:	9b07      	ldr	r3, [sp, #28]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	f340 80b9 	ble.w	8020c22 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020ab4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020ab6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020aba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020abe:	eef0 6a62 	vmov.f32	s13, s5
 8020ac2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020ac6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020aca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ace:	ee16 4a90 	vmov	r4, s13
 8020ad2:	eef0 6a43 	vmov.f32	s13, s6
 8020ad6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ada:	ee16 6a90 	vmov	r6, s13
 8020ade:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ae2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ae6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020aea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020aee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020af2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020af6:	ee12 2a90 	vmov	r2, s5
 8020afa:	eef0 2a47 	vmov.f32	s5, s14
 8020afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b02:	ee13 2a10 	vmov	r2, s6
 8020b06:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020b08:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020b0a:	eeb0 3a67 	vmov.f32	s6, s15
 8020b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b12:	931c      	str	r3, [sp, #112]	@ 0x70
 8020b14:	9b07      	ldr	r3, [sp, #28]
 8020b16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020b18:	3b01      	subs	r3, #1
 8020b1a:	9307      	str	r3, [sp, #28]
 8020b1c:	bf08      	it	eq
 8020b1e:	4615      	moveq	r5, r2
 8020b20:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020b22:	bf18      	it	ne
 8020b24:	461d      	movne	r5, r3
 8020b26:	e6f3      	b.n	8020910 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020b28:	f111 0b01 	adds.w	fp, r1, #1
 8020b2c:	d48d      	bmi.n	8020a4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b2e:	45de      	cmp	lr, fp
 8020b30:	db8b      	blt.n	8020a4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b32:	f110 0b01 	adds.w	fp, r0, #1
 8020b36:	d488      	bmi.n	8020a4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b38:	455b      	cmp	r3, fp
 8020b3a:	db86      	blt.n	8020a4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b3c:	b21b      	sxth	r3, r3
 8020b3e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020b42:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8020b46:	9300      	str	r3, [sp, #0]
 8020b48:	4642      	mov	r2, r8
 8020b4a:	fa0f f38e 	sxth.w	r3, lr
 8020b4e:	4649      	mov	r1, r9
 8020b50:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020b52:	f7ff fe4c 	bl	80207ee <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8020b56:	e778      	b.n	8020a4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020b58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020b5a:	1420      	asrs	r0, r4, #16
 8020b5c:	1431      	asrs	r1, r6, #16
 8020b5e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020b62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020b66:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020b6a:	fb03 0101 	mla	r1, r3, r1, r0
 8020b6e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020b72:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8020b76:	8841      	ldrh	r1, [r0, #2]
 8020b78:	f1be 0f00 	cmp.w	lr, #0
 8020b7c:	d00b      	beq.n	8020b96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020b7e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8020b82:	3b01      	subs	r3, #1
 8020b84:	005b      	lsls	r3, r3, #1
 8020b86:	3302      	adds	r3, #2
 8020b88:	eb00 0b03 	add.w	fp, r0, r3
 8020b8c:	5ac3      	ldrh	r3, [r0, r3]
 8020b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b90:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020b94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020b96:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020b9a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8020b9e:	fb12 f30e 	smulbb	r3, r2, lr
 8020ba2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020ba6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8020baa:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8020bae:	10db      	asrs	r3, r3, #3
 8020bb0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020bb4:	ea40 000c 	orr.w	r0, r0, ip
 8020bb8:	f1ce 0c10 	rsb	ip, lr, #16
 8020bbc:	ea4b 0101 	orr.w	r1, fp, r1
 8020bc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8020bc4:	ebac 0c02 	sub.w	ip, ip, r2
 8020bc8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020bcc:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020bd0:	4351      	muls	r1, r2
 8020bd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020bd4:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020bd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020bda:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020bde:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8020be2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020be4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020be8:	0412      	lsls	r2, r2, #16
 8020bea:	ea4b 0000 	orr.w	r0, fp, r0
 8020bee:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8020bf2:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8020bf6:	fb03 c000 	mla	r0, r3, r0, ip
 8020bfa:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020bfe:	ea42 0b0b 	orr.w	fp, r2, fp
 8020c02:	fb03 000b 	mla	r0, r3, fp, r0
 8020c06:	0d43      	lsrs	r3, r0, #21
 8020c08:	0940      	lsrs	r0, r0, #5
 8020c0a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020c0e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8020c12:	4318      	orrs	r0, r3
 8020c14:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020c16:	441c      	add	r4, r3
 8020c18:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020c1a:	f82a 0b02 	strh.w	r0, [sl], #2
 8020c1e:	441e      	add	r6, r3
 8020c20:	e73b      	b.n	8020a9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020c22:	b00f      	add	sp, #60	@ 0x3c
 8020c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8020c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c2c:	b085      	sub	sp, #20
 8020c2e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8020c32:	9102      	str	r1, [sp, #8]
 8020c34:	2c00      	cmp	r4, #0
 8020c36:	fb04 7103 	mla	r1, r4, r3, r7
 8020c3a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8020c3e:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8020c42:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020c46:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8020c4a:	f2c0 811b 	blt.w	8020e84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020c4e:	45a6      	cmp	lr, r4
 8020c50:	f340 8118 	ble.w	8020e84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020c54:	2f00      	cmp	r7, #0
 8020c56:	f2c0 8113 	blt.w	8020e80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020c5a:	42bb      	cmp	r3, r7
 8020c5c:	f340 8110 	ble.w	8020e80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020c60:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020c64:	1c7a      	adds	r2, r7, #1
 8020c66:	f100 8110 	bmi.w	8020e8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020c6a:	4293      	cmp	r3, r2
 8020c6c:	f340 810d 	ble.w	8020e8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020c70:	2e00      	cmp	r6, #0
 8020c72:	f000 810c 	beq.w	8020e8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8020c76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020c7a:	3401      	adds	r4, #1
 8020c7c:	f100 810b 	bmi.w	8020e96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020c80:	45a6      	cmp	lr, r4
 8020c82:	f340 8108 	ble.w	8020e96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020c86:	2800      	cmp	r0, #0
 8020c88:	f000 8108 	beq.w	8020e9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8020c8c:	2f00      	cmp	r7, #0
 8020c8e:	f2c0 8100 	blt.w	8020e92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020c92:	42bb      	cmp	r3, r7
 8020c94:	f340 80fd 	ble.w	8020e92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020c98:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020c9c:	3701      	adds	r7, #1
 8020c9e:	f100 8100 	bmi.w	8020ea2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020ca2:	42bb      	cmp	r3, r7
 8020ca4:	f340 80fd 	ble.w	8020ea2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020ca8:	2e00      	cmp	r6, #0
 8020caa:	f000 80fc 	beq.w	8020ea6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8020cae:	3301      	adds	r3, #1
 8020cb0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020cb4:	b2b6      	uxth	r6, r6
 8020cb6:	b280      	uxth	r0, r0
 8020cb8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020cbc:	fb00 fe06 	mul.w	lr, r0, r6
 8020cc0:	0136      	lsls	r6, r6, #4
 8020cc2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020cc6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020cca:	eba6 070e 	sub.w	r7, r6, lr
 8020cce:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8020cd2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020cd6:	b280      	uxth	r0, r0
 8020cd8:	b2bf      	uxth	r7, r7
 8020cda:	1a1b      	subs	r3, r3, r0
 8020cdc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020ce0:	fb0a f607 	mul.w	r6, sl, r7
 8020ce4:	b29b      	uxth	r3, r3
 8020ce6:	fb0b 6603 	mla	r6, fp, r3, r6
 8020cea:	fb00 6609 	mla	r6, r0, r9, r6
 8020cee:	fb0e 6608 	mla	r6, lr, r8, r6
 8020cf2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020cf6:	9600      	str	r6, [sp, #0]
 8020cf8:	2e00      	cmp	r6, #0
 8020cfa:	f000 80be 	beq.w	8020e7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8020cfe:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8020d02:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020d06:	9e02      	ldr	r6, [sp, #8]
 8020d08:	fb0b fc0c 	mul.w	ip, fp, ip
 8020d0c:	fb0b f505 	mul.w	r5, fp, r5
 8020d10:	8836      	ldrh	r6, [r6, #0]
 8020d12:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020d16:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020d1a:	9501      	str	r5, [sp, #4]
 8020d1c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8020d20:	44dc      	add	ip, fp
 8020d22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d26:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8020d2a:	9503      	str	r5, [sp, #12]
 8020d2c:	9d01      	ldr	r5, [sp, #4]
 8020d2e:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8020d32:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020d36:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8020d3a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8020d3e:	fb0a fc0c 	mul.w	ip, sl, ip
 8020d42:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020d46:	fb0a fa01 	mul.w	sl, sl, r1
 8020d4a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020d4e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020d52:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8020d56:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020d5a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020d5e:	4465      	add	r5, ip
 8020d60:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020d64:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8020d68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d6c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020d70:	0a2d      	lsrs	r5, r5, #8
 8020d72:	fb09 f904 	mul.w	r9, r9, r4
 8020d76:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020d7a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020d7e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020d82:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8020d86:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020d8a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8020d8e:	437d      	muls	r5, r7
 8020d90:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020d94:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8020d98:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020d9c:	4461      	add	r1, ip
 8020d9e:	fb08 f404 	mul.w	r4, r8, r4
 8020da2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020da6:	fb08 f802 	mul.w	r8, r8, r2
 8020daa:	0a09      	lsrs	r1, r1, #8
 8020dac:	0a22      	lsrs	r2, r4, #8
 8020dae:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8020db2:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8020db6:	fb07 f70a 	mul.w	r7, r7, sl
 8020dba:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020dbe:	4414      	add	r4, r2
 8020dc0:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8020dc4:	0a24      	lsrs	r4, r4, #8
 8020dc6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020dca:	9a03      	ldr	r2, [sp, #12]
 8020dcc:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8020dd0:	fb02 5503 	mla	r5, r2, r3, r5
 8020dd4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020dd8:	9a00      	ldr	r2, [sp, #0]
 8020dda:	fb04 540e 	mla	r4, r4, lr, r5
 8020dde:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8020de2:	1235      	asrs	r5, r6, #8
 8020de4:	fb01 4100 	mla	r1, r1, r0, r4
 8020de8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020dec:	0a09      	lsrs	r1, r1, #8
 8020dee:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8020df2:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8020df6:	fb03 7101 	mla	r1, r3, r1, r7
 8020dfa:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020dfe:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8020e02:	fb00 e101 	mla	r1, r0, r1, lr
 8020e06:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8020e0a:	b287      	uxth	r7, r0
 8020e0c:	0a09      	lsrs	r1, r1, #8
 8020e0e:	437a      	muls	r2, r7
 8020e10:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8020e14:	1c53      	adds	r3, r2, #1
 8020e16:	4321      	orrs	r1, r4
 8020e18:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020e1c:	0c0a      	lsrs	r2, r1, #16
 8020e1e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8020e22:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020e26:	b2c8      	uxtb	r0, r1
 8020e28:	fb12 f207 	smulbb	r2, r2, r7
 8020e2c:	fb14 f407 	smulbb	r4, r4, r7
 8020e30:	b2db      	uxtb	r3, r3
 8020e32:	fb10 f007 	smulbb	r0, r0, r7
 8020e36:	fb05 2503 	mla	r5, r5, r3, r2
 8020e3a:	10f2      	asrs	r2, r6, #3
 8020e3c:	00f6      	lsls	r6, r6, #3
 8020e3e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020e42:	b2ad      	uxth	r5, r5
 8020e44:	b2f6      	uxtb	r6, r6
 8020e46:	fb02 4203 	mla	r2, r2, r3, r4
 8020e4a:	fb06 0303 	mla	r3, r6, r3, r0
 8020e4e:	b294      	uxth	r4, r2
 8020e50:	b299      	uxth	r1, r3
 8020e52:	1c6b      	adds	r3, r5, #1
 8020e54:	1c62      	adds	r2, r4, #1
 8020e56:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020e5a:	1c4b      	adds	r3, r1, #1
 8020e5c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020e60:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020e64:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020e68:	0952      	lsrs	r2, r2, #5
 8020e6a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020e6e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020e72:	432b      	orrs	r3, r5
 8020e74:	4313      	orrs	r3, r2
 8020e76:	9a02      	ldr	r2, [sp, #8]
 8020e78:	8013      	strh	r3, [r2, #0]
 8020e7a:	b005      	add	sp, #20
 8020e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e80:	2500      	movs	r5, #0
 8020e82:	e6ef      	b.n	8020c64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8020e84:	2100      	movs	r1, #0
 8020e86:	460d      	mov	r5, r1
 8020e88:	e6f7      	b.n	8020c7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020e8a:	2100      	movs	r1, #0
 8020e8c:	e6f5      	b.n	8020c7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020e8e:	4631      	mov	r1, r6
 8020e90:	e6f3      	b.n	8020c7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020e92:	2400      	movs	r4, #0
 8020e94:	e702      	b.n	8020c9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8020e96:	2200      	movs	r2, #0
 8020e98:	4614      	mov	r4, r2
 8020e9a:	e70b      	b.n	8020cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020e9c:	4602      	mov	r2, r0
 8020e9e:	4604      	mov	r4, r0
 8020ea0:	e708      	b.n	8020cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020ea2:	2200      	movs	r2, #0
 8020ea4:	e706      	b.n	8020cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020ea6:	4632      	mov	r2, r6
 8020ea8:	e704      	b.n	8020cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08020eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eae:	b09d      	sub	sp, #116	@ 0x74
 8020eb0:	9219      	str	r2, [sp, #100]	@ 0x64
 8020eb2:	9307      	str	r3, [sp, #28]
 8020eb4:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8020eb6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8020eba:	901b      	str	r0, [sp, #108]	@ 0x6c
 8020ebc:	931a      	str	r3, [sp, #104]	@ 0x68
 8020ebe:	6850      	ldr	r0, [r2, #4]
 8020ec0:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020ec2:	6812      	ldr	r2, [r2, #0]
 8020ec4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8020ec8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8020ecc:	fb00 1303 	mla	r3, r0, r3, r1
 8020ed0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020ed4:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ed6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020ed8:	681b      	ldr	r3, [r3, #0]
 8020eda:	9310      	str	r3, [sp, #64]	@ 0x40
 8020edc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8020ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020ee2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	dc03      	bgt.n	8020ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020ee8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	f340 8375 	ble.w	80215da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020ef0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020ef2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ef6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020efa:	1e48      	subs	r0, r1, #1
 8020efc:	1e57      	subs	r7, r2, #1
 8020efe:	9b07      	ldr	r3, [sp, #28]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	f340 818e 	ble.w	8021222 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8020f06:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020f0a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020f0e:	d406      	bmi.n	8020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020f10:	4584      	cmp	ip, r0
 8020f12:	da04      	bge.n	8020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	db02      	blt.n	8020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020f18:	42bb      	cmp	r3, r7
 8020f1a:	f2c0 8183 	blt.w	8021224 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8020f1e:	f11c 0c01 	adds.w	ip, ip, #1
 8020f22:	f100 8173 	bmi.w	802120c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f26:	4561      	cmp	r1, ip
 8020f28:	f2c0 8170 	blt.w	802120c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f2c:	3301      	adds	r3, #1
 8020f2e:	f100 816d 	bmi.w	802120c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f32:	429a      	cmp	r2, r3
 8020f34:	f2c0 816a 	blt.w	802120c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f38:	9b07      	ldr	r3, [sp, #28]
 8020f3a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020f3c:	9318      	str	r3, [sp, #96]	@ 0x60
 8020f3e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	f340 818c 	ble.w	802125e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8020f46:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8020f48:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020f4c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020f4e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020f52:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020f56:	1422      	asrs	r2, r4, #16
 8020f58:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020f5c:	689b      	ldr	r3, [r3, #8]
 8020f5e:	f100 81cd 	bmi.w	80212fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020f62:	f103 38ff 	add.w	r8, r3, #4294967295
 8020f66:	4542      	cmp	r2, r8
 8020f68:	f280 81c8 	bge.w	80212fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020f6c:	f1bc 0f00 	cmp.w	ip, #0
 8020f70:	f2c0 81c4 	blt.w	80212fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020f74:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020f78:	45c4      	cmp	ip, r8
 8020f7a:	f280 81bf 	bge.w	80212fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020f7e:	b21b      	sxth	r3, r3
 8020f80:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020f82:	fb0c 2203 	mla	r2, ip, r3, r2
 8020f86:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020f8a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020f8e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020f92:	2800      	cmp	r0, #0
 8020f94:	f000 81a9 	beq.w	80212ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8020f98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020f9c:	950c      	str	r5, [sp, #48]	@ 0x30
 8020f9e:	0e2d      	lsrs	r5, r5, #24
 8020fa0:	9513      	str	r5, [sp, #76]	@ 0x4c
 8020fa2:	b181      	cbz	r1, 8020fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020fa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8020fa8:	3b01      	subs	r3, #1
 8020faa:	009b      	lsls	r3, r3, #2
 8020fac:	3304      	adds	r3, #4
 8020fae:	eb08 0c03 	add.w	ip, r8, r3
 8020fb2:	f858 3003 	ldr.w	r3, [r8, r3]
 8020fb6:	9308      	str	r3, [sp, #32]
 8020fb8:	0e1b      	lsrs	r3, r3, #24
 8020fba:	9311      	str	r3, [sp, #68]	@ 0x44
 8020fbc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020fc0:	930d      	str	r3, [sp, #52]	@ 0x34
 8020fc2:	0e1b      	lsrs	r3, r3, #24
 8020fc4:	9314      	str	r3, [sp, #80]	@ 0x50
 8020fc6:	b280      	uxth	r0, r0
 8020fc8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020fca:	b289      	uxth	r1, r1
 8020fcc:	fb00 f901 	mul.w	r9, r0, r1
 8020fd0:	0100      	lsls	r0, r0, #4
 8020fd2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020fd6:	eba0 0809 	sub.w	r8, r0, r9
 8020fda:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8020fde:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020fe0:	b289      	uxth	r1, r1
 8020fe2:	fa1f f888 	uxth.w	r8, r8
 8020fe6:	1a5b      	subs	r3, r3, r1
 8020fe8:	fb08 f000 	mul.w	r0, r8, r0
 8020fec:	b29b      	uxth	r3, r3
 8020fee:	fb03 000e 	mla	r0, r3, lr, r0
 8020ff2:	fb01 0005 	mla	r0, r1, r5, r0
 8020ff6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020ff8:	fb09 0005 	mla	r0, r9, r5, r0
 8020ffc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021000:	2800      	cmp	r0, #0
 8021002:	f000 80fa 	beq.w	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021006:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802100a:	d01b      	beq.n	8021044 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802100c:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8021010:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021014:	fb0e fa0a 	mul.w	sl, lr, sl
 8021018:	fb0e fe02 	mul.w	lr, lr, r2
 802101c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021020:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021024:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8021028:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802102c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021030:	4452      	add	r2, sl
 8021032:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021036:	0a12      	lsrs	r2, r2, #8
 8021038:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802103c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021040:	ea42 020c 	orr.w	r2, r2, ip
 8021044:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021046:	2dff      	cmp	r5, #255	@ 0xff
 8021048:	d021      	beq.n	802108e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802104a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802104c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8021050:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021052:	fb05 fb0b 	mul.w	fp, r5, fp
 8021056:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021058:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802105c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802105e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021062:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021066:	fb05 fa0a 	mul.w	sl, r5, sl
 802106a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802106e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021072:	44de      	add	lr, fp
 8021074:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021078:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802107c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021080:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021084:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021088:	ea4e 050a 	orr.w	r5, lr, sl
 802108c:	950c      	str	r5, [sp, #48]	@ 0x30
 802108e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021090:	2dff      	cmp	r5, #255	@ 0xff
 8021092:	d021      	beq.n	80210d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021094:	9d08      	ldr	r5, [sp, #32]
 8021096:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802109a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802109c:	fb05 fb0b 	mul.w	fp, r5, fp
 80210a0:	9d08      	ldr	r5, [sp, #32]
 80210a2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80210a6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80210a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80210ac:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80210b0:	fb05 fa0a 	mul.w	sl, r5, sl
 80210b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80210b8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80210bc:	44de      	add	lr, fp
 80210be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80210c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80210ca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80210ce:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80210d2:	ea4e 050a 	orr.w	r5, lr, sl
 80210d6:	9508      	str	r5, [sp, #32]
 80210d8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80210da:	2dff      	cmp	r5, #255	@ 0xff
 80210dc:	d021      	beq.n	8021122 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80210de:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80210e0:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80210e4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80210e6:	fb05 fb0b 	mul.w	fp, r5, fp
 80210ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80210ec:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80210f0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80210f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80210f6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80210fa:	fb05 fa0a 	mul.w	sl, r5, sl
 80210fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021102:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021106:	44de      	add	lr, fp
 8021108:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802110c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021110:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021114:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021118:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802111c:	ea4e 050a 	orr.w	r5, lr, sl
 8021120:	950d      	str	r5, [sp, #52]	@ 0x34
 8021122:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021124:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8021128:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802112c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8021130:	9d08      	ldr	r5, [sp, #32]
 8021132:	fb08 fc0c 	mul.w	ip, r8, ip
 8021136:	fb03 cc0e 	mla	ip, r3, lr, ip
 802113a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802113e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021140:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021144:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8021148:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802114a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802114e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8021152:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8021154:	fb08 f80e 	mul.w	r8, r8, lr
 8021158:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802115c:	fb03 8202 	mla	r2, r3, r2, r8
 8021160:	9b08      	ldr	r3, [sp, #32]
 8021162:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021166:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802116a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802116c:	fb01 220a 	mla	r2, r1, sl, r2
 8021170:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8021174:	883b      	ldrh	r3, [r7, #0]
 8021176:	fb09 2901 	mla	r9, r9, r1, r2
 802117a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802117c:	1219      	asrs	r1, r3, #8
 802117e:	4342      	muls	r2, r0
 8021180:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021184:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021188:	1c50      	adds	r0, r2, #1
 802118a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802118e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021192:	ea4c 0c09 	orr.w	ip, ip, r9
 8021196:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802119a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802119e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80211a2:	fa5f fc8c 	uxtb.w	ip, ip
 80211a6:	fb12 f205 	smulbb	r2, r2, r5
 80211aa:	b2c0      	uxtb	r0, r0
 80211ac:	fb1c fc05 	smulbb	ip, ip, r5
 80211b0:	fb01 2100 	mla	r1, r1, r0, r2
 80211b4:	10da      	asrs	r2, r3, #3
 80211b6:	fb1e fe05 	smulbb	lr, lr, r5
 80211ba:	00db      	lsls	r3, r3, #3
 80211bc:	b289      	uxth	r1, r1
 80211be:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80211c2:	b2db      	uxtb	r3, r3
 80211c4:	fb02 e200 	mla	r2, r2, r0, lr
 80211c8:	fb03 c300 	mla	r3, r3, r0, ip
 80211cc:	b292      	uxth	r2, r2
 80211ce:	fa1f fc83 	uxth.w	ip, r3
 80211d2:	1c4b      	adds	r3, r1, #1
 80211d4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80211d8:	f10c 0301 	add.w	r3, ip, #1
 80211dc:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80211e0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80211e4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80211e8:	430b      	orrs	r3, r1
 80211ea:	1c51      	adds	r1, r2, #1
 80211ec:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80211f0:	0952      	lsrs	r2, r2, #5
 80211f2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80211f6:	4313      	orrs	r3, r2
 80211f8:	803b      	strh	r3, [r7, #0]
 80211fa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80211fc:	3702      	adds	r7, #2
 80211fe:	441c      	add	r4, r3
 8021200:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021202:	441e      	add	r6, r3
 8021204:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021206:	3b01      	subs	r3, #1
 8021208:	9318      	str	r3, [sp, #96]	@ 0x60
 802120a:	e698      	b.n	8020f3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802120c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802120e:	441c      	add	r4, r3
 8021210:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021212:	441e      	add	r6, r3
 8021214:	9b07      	ldr	r3, [sp, #28]
 8021216:	3b01      	subs	r3, #1
 8021218:	9307      	str	r3, [sp, #28]
 802121a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802121c:	3302      	adds	r3, #2
 802121e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021220:	e66d      	b.n	8020efe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021222:	d023      	beq.n	802126c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8021224:	9b07      	ldr	r3, [sp, #28]
 8021226:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8021228:	3b01      	subs	r3, #1
 802122a:	fb00 4003 	mla	r0, r0, r3, r4
 802122e:	1400      	asrs	r0, r0, #16
 8021230:	f53f ae82 	bmi.w	8020f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021234:	3901      	subs	r1, #1
 8021236:	4288      	cmp	r0, r1
 8021238:	f6bf ae7e 	bge.w	8020f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802123c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802123e:	fb01 6303 	mla	r3, r1, r3, r6
 8021242:	141b      	asrs	r3, r3, #16
 8021244:	f53f ae78 	bmi.w	8020f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021248:	3a01      	subs	r2, #1
 802124a:	4293      	cmp	r3, r2
 802124c:	f6bf ae74 	bge.w	8020f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021250:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021254:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8021258:	f1bb 0f00 	cmp.w	fp, #0
 802125c:	dc6c      	bgt.n	8021338 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802125e:	9b07      	ldr	r3, [sp, #28]
 8021260:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021266:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802126a:	930a      	str	r3, [sp, #40]	@ 0x28
 802126c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802126e:	2b00      	cmp	r3, #0
 8021270:	f340 81b3 	ble.w	80215da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8021274:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021278:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802127a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802127e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021282:	eef0 6a62 	vmov.f32	s13, s5
 8021286:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802128a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802128e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021292:	ee16 4a90 	vmov	r4, s13
 8021296:	eef0 6a43 	vmov.f32	s13, s6
 802129a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802129e:	ee16 6a90 	vmov	r6, s13
 80212a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80212a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80212aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80212ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80212b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80212b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80212ba:	ee12 2a90 	vmov	r2, s5
 80212be:	eef0 2a47 	vmov.f32	s5, s14
 80212c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80212c6:	ee13 2a10 	vmov	r2, s6
 80212ca:	9329      	str	r3, [sp, #164]	@ 0xa4
 80212cc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80212ce:	eeb0 3a67 	vmov.f32	s6, s15
 80212d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80212d6:	932a      	str	r3, [sp, #168]	@ 0xa8
 80212d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80212da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80212dc:	3b01      	subs	r3, #1
 80212de:	9317      	str	r3, [sp, #92]	@ 0x5c
 80212e0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80212e2:	bf08      	it	eq
 80212e4:	4613      	moveq	r3, r2
 80212e6:	9307      	str	r3, [sp, #28]
 80212e8:	e5fb      	b.n	8020ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80212ea:	2900      	cmp	r1, #0
 80212ec:	f43f ae6b 	beq.w	8020fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80212f0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80212f4:	9308      	str	r3, [sp, #32]
 80212f6:	0e1b      	lsrs	r3, r3, #24
 80212f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80212fa:	e664      	b.n	8020fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80212fc:	f112 0801 	adds.w	r8, r2, #1
 8021300:	f53f af7b 	bmi.w	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021304:	4543      	cmp	r3, r8
 8021306:	f6ff af78 	blt.w	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802130a:	f11c 0801 	adds.w	r8, ip, #1
 802130e:	f53f af74 	bmi.w	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021312:	45c6      	cmp	lr, r8
 8021314:	f6ff af71 	blt.w	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021318:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 802131a:	b21b      	sxth	r3, r3
 802131c:	9201      	str	r2, [sp, #4]
 802131e:	fa0f f28e 	sxth.w	r2, lr
 8021322:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8021326:	e9cd c002 	strd	ip, r0, [sp, #8]
 802132a:	9200      	str	r2, [sp, #0]
 802132c:	4639      	mov	r1, r7
 802132e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021330:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8021332:	f7ff fc79 	bl	8020c28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8021336:	e760      	b.n	80211fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021338:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802133a:	1427      	asrs	r7, r4, #16
 802133c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802133e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021342:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021346:	1433      	asrs	r3, r6, #16
 8021348:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802134c:	fb01 7303 	mla	r3, r1, r3, r7
 8021350:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8021354:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021358:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802135c:	2a00      	cmp	r2, #0
 802135e:	f000 8133 	beq.w	80215c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8021362:	687d      	ldr	r5, [r7, #4]
 8021364:	950e      	str	r5, [sp, #56]	@ 0x38
 8021366:	0e2d      	lsrs	r5, r5, #24
 8021368:	9515      	str	r5, [sp, #84]	@ 0x54
 802136a:	b178      	cbz	r0, 802138c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802136c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8021370:	3901      	subs	r1, #1
 8021372:	0089      	lsls	r1, r1, #2
 8021374:	3104      	adds	r1, #4
 8021376:	eb07 0e01 	add.w	lr, r7, r1
 802137a:	5879      	ldr	r1, [r7, r1]
 802137c:	9109      	str	r1, [sp, #36]	@ 0x24
 802137e:	0e09      	lsrs	r1, r1, #24
 8021380:	9112      	str	r1, [sp, #72]	@ 0x48
 8021382:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021386:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021388:	0e09      	lsrs	r1, r1, #24
 802138a:	9116      	str	r1, [sp, #88]	@ 0x58
 802138c:	b292      	uxth	r2, r2
 802138e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021390:	b280      	uxth	r0, r0
 8021392:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8021394:	fb02 f800 	mul.w	r8, r2, r0
 8021398:	0112      	lsls	r2, r2, #4
 802139a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802139e:	eba2 0e08 	sub.w	lr, r2, r8
 80213a2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80213a6:	b280      	uxth	r0, r0
 80213a8:	fa1f fe8e 	uxth.w	lr, lr
 80213ac:	1a12      	subs	r2, r2, r0
 80213ae:	fb0e f101 	mul.w	r1, lr, r1
 80213b2:	b292      	uxth	r2, r2
 80213b4:	fb02 110c 	mla	r1, r2, ip, r1
 80213b8:	fb00 1105 	mla	r1, r0, r5, r1
 80213bc:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80213be:	fb08 1105 	mla	r1, r8, r5, r1
 80213c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80213c6:	2900      	cmp	r1, #0
 80213c8:	f000 80f5 	beq.w	80215b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80213cc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80213d0:	d019      	beq.n	8021406 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80213d2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80213d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80213da:	fb0c fa0a 	mul.w	sl, ip, sl
 80213de:	fb0c fc03 	mul.w	ip, ip, r3
 80213e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80213e6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80213ea:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80213ee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80213f2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80213f6:	4453      	add	r3, sl
 80213f8:	0a3f      	lsrs	r7, r7, #8
 80213fa:	0a1b      	lsrs	r3, r3, #8
 80213fc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021400:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021404:	433b      	orrs	r3, r7
 8021406:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8021408:	2dff      	cmp	r5, #255	@ 0xff
 802140a:	d020      	beq.n	802144e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802140c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802140e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8021412:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8021414:	436f      	muls	r7, r5
 8021416:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021418:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802141c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8021420:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8021422:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021426:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802142a:	fb05 fa0a 	mul.w	sl, r5, sl
 802142e:	44bc      	add	ip, r7
 8021430:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021434:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021438:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802143c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021440:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021444:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021448:	ea4c 050a 	orr.w	r5, ip, sl
 802144c:	950e      	str	r5, [sp, #56]	@ 0x38
 802144e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8021450:	2dff      	cmp	r5, #255	@ 0xff
 8021452:	d020      	beq.n	8021496 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8021454:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021456:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802145a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802145c:	436f      	muls	r7, r5
 802145e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021460:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021464:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8021468:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802146a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802146e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021472:	fb05 fa0a 	mul.w	sl, r5, sl
 8021476:	44bc      	add	ip, r7
 8021478:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802147c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021480:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021484:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021488:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802148c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021490:	ea4c 050a 	orr.w	r5, ip, sl
 8021494:	9509      	str	r5, [sp, #36]	@ 0x24
 8021496:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8021498:	2dff      	cmp	r5, #255	@ 0xff
 802149a:	d020      	beq.n	80214de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802149c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802149e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80214a2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80214a4:	436f      	muls	r7, r5
 80214a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80214a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214ac:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80214b0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80214b2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80214b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80214ba:	fb05 fa0a 	mul.w	sl, r5, sl
 80214be:	44bc      	add	ip, r7
 80214c0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80214c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80214cc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80214d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214d4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80214d8:	ea4c 050a 	orr.w	r5, ip, sl
 80214dc:	950f      	str	r5, [sp, #60]	@ 0x3c
 80214de:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80214e0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80214e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80214e8:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80214ec:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80214ee:	fb0e f707 	mul.w	r7, lr, r7
 80214f2:	fb02 770c 	mla	r7, r2, ip, r7
 80214f6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80214fa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80214fc:	fb00 770c 	mla	r7, r0, ip, r7
 8021500:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8021504:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021506:	fb08 770c 	mla	r7, r8, ip, r7
 802150a:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802150e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8021510:	fb0e fe0c 	mul.w	lr, lr, ip
 8021514:	0a3f      	lsrs	r7, r7, #8
 8021516:	fb02 e303 	mla	r3, r2, r3, lr
 802151a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802151c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8021520:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8021524:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021526:	fb00 330a 	mla	r3, r0, sl, r3
 802152a:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802152e:	f8b9 0000 	ldrh.w	r0, [r9]
 8021532:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021538:	1202      	asrs	r2, r0, #8
 802153a:	4359      	muls	r1, r3
 802153c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021540:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021544:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021548:	1c4b      	adds	r3, r1, #1
 802154a:	ea47 070c 	orr.w	r7, r7, ip
 802154e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021552:	0c3b      	lsrs	r3, r7, #16
 8021554:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021558:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802155c:	b2ff      	uxtb	r7, r7
 802155e:	fb13 f305 	smulbb	r3, r3, r5
 8021562:	b2c9      	uxtb	r1, r1
 8021564:	fb17 f705 	smulbb	r7, r7, r5
 8021568:	fb02 3201 	mla	r2, r2, r1, r3
 802156c:	10c3      	asrs	r3, r0, #3
 802156e:	fb1c fc05 	smulbb	ip, ip, r5
 8021572:	00c0      	lsls	r0, r0, #3
 8021574:	b292      	uxth	r2, r2
 8021576:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802157a:	b2c0      	uxtb	r0, r0
 802157c:	fb03 c301 	mla	r3, r3, r1, ip
 8021580:	fb00 7001 	mla	r0, r0, r1, r7
 8021584:	1c51      	adds	r1, r2, #1
 8021586:	b29b      	uxth	r3, r3
 8021588:	b280      	uxth	r0, r0
 802158a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802158e:	f100 0c01 	add.w	ip, r0, #1
 8021592:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8021596:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802159a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802159e:	ea4c 0202 	orr.w	r2, ip, r2
 80215a2:	f103 0c01 	add.w	ip, r3, #1
 80215a6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80215aa:	095b      	lsrs	r3, r3, #5
 80215ac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80215b0:	431a      	orrs	r2, r3
 80215b2:	f8a9 2000 	strh.w	r2, [r9]
 80215b6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80215b8:	f109 0902 	add.w	r9, r9, #2
 80215bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80215c0:	441c      	add	r4, r3
 80215c2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80215c4:	441e      	add	r6, r3
 80215c6:	e647      	b.n	8021258 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80215c8:	2800      	cmp	r0, #0
 80215ca:	f43f aedf 	beq.w	802138c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80215ce:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80215d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80215d4:	0e09      	lsrs	r1, r1, #24
 80215d6:	9112      	str	r1, [sp, #72]	@ 0x48
 80215d8:	e6d8      	b.n	802138c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80215da:	b01d      	add	sp, #116	@ 0x74
 80215dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80215e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215e4:	b085      	sub	sp, #20
 80215e6:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80215ea:	9102      	str	r1, [sp, #8]
 80215ec:	2c00      	cmp	r4, #0
 80215ee:	fb04 7103 	mla	r1, r4, r3, r7
 80215f2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80215f6:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80215fa:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80215fe:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8021602:	f2c0 810c 	blt.w	802181e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8021606:	45a6      	cmp	lr, r4
 8021608:	f340 8109 	ble.w	802181e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802160c:	2f00      	cmp	r7, #0
 802160e:	f2c0 8104 	blt.w	802181a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8021612:	42bb      	cmp	r3, r7
 8021614:	f340 8101 	ble.w	802181a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8021618:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802161c:	1c7a      	adds	r2, r7, #1
 802161e:	f100 8101 	bmi.w	8021824 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8021622:	4293      	cmp	r3, r2
 8021624:	f340 80fe 	ble.w	8021824 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8021628:	2e00      	cmp	r6, #0
 802162a:	f000 80fd 	beq.w	8021828 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802162e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021632:	3401      	adds	r4, #1
 8021634:	f100 80fc 	bmi.w	8021830 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8021638:	45a6      	cmp	lr, r4
 802163a:	f340 80f9 	ble.w	8021830 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802163e:	2800      	cmp	r0, #0
 8021640:	f000 80f9 	beq.w	8021836 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8021644:	2f00      	cmp	r7, #0
 8021646:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802164a:	f2c0 80ef 	blt.w	802182c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802164e:	42bb      	cmp	r3, r7
 8021650:	f340 80ec 	ble.w	802182c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8021654:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8021658:	3701      	adds	r7, #1
 802165a:	f100 80ef 	bmi.w	802183c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802165e:	42bb      	cmp	r3, r7
 8021660:	f340 80ec 	ble.w	802183c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8021664:	2e00      	cmp	r6, #0
 8021666:	f000 80eb 	beq.w	8021840 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802166a:	6852      	ldr	r2, [r2, #4]
 802166c:	b2b6      	uxth	r6, r6
 802166e:	b280      	uxth	r0, r0
 8021670:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021674:	fb00 fe06 	mul.w	lr, r0, r6
 8021678:	0136      	lsls	r6, r6, #4
 802167a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802167e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8021682:	eba6 070e 	sub.w	r7, r6, lr
 8021686:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802168a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802168e:	b280      	uxth	r0, r0
 8021690:	b2bf      	uxth	r7, r7
 8021692:	1a1b      	subs	r3, r3, r0
 8021694:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021698:	fb07 f60a 	mul.w	r6, r7, sl
 802169c:	b29b      	uxth	r3, r3
 802169e:	fb0b 6603 	mla	r6, fp, r3, r6
 80216a2:	fb00 6609 	mla	r6, r0, r9, r6
 80216a6:	fb0e 6608 	mla	r6, lr, r8, r6
 80216aa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80216ae:	9600      	str	r6, [sp, #0]
 80216b0:	2e00      	cmp	r6, #0
 80216b2:	f000 80af 	beq.w	8021814 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80216b6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80216ba:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80216be:	9e02      	ldr	r6, [sp, #8]
 80216c0:	fb0b fc0c 	mul.w	ip, fp, ip
 80216c4:	fb0b f505 	mul.w	r5, fp, r5
 80216c8:	8836      	ldrh	r6, [r6, #0]
 80216ca:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80216ce:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80216d2:	9501      	str	r5, [sp, #4]
 80216d4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80216d8:	44dc      	add	ip, fp
 80216da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216de:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80216e2:	9503      	str	r5, [sp, #12]
 80216e4:	9d01      	ldr	r5, [sp, #4]
 80216e6:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80216ea:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80216ee:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80216f2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80216f6:	fb0a fc0c 	mul.w	ip, sl, ip
 80216fa:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80216fe:	fb0a fa01 	mul.w	sl, sl, r1
 8021702:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8021706:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802170a:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802170e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8021712:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8021716:	4465      	add	r5, ip
 8021718:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802171c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8021720:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021724:	fb09 fc0c 	mul.w	ip, r9, ip
 8021728:	0a2d      	lsrs	r5, r5, #8
 802172a:	fb09 f904 	mul.w	r9, r9, r4
 802172e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021732:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8021736:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802173a:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802173e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8021742:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8021746:	437d      	muls	r5, r7
 8021748:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802174c:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8021750:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021754:	4461      	add	r1, ip
 8021756:	fb08 f404 	mul.w	r4, r8, r4
 802175a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802175e:	fb08 f802 	mul.w	r8, r8, r2
 8021762:	0a09      	lsrs	r1, r1, #8
 8021764:	0a22      	lsrs	r2, r4, #8
 8021766:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802176a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802176e:	fb07 f70a 	mul.w	r7, r7, sl
 8021772:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021776:	4414      	add	r4, r2
 8021778:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802177c:	0a24      	lsrs	r4, r4, #8
 802177e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021782:	9a03      	ldr	r2, [sp, #12]
 8021784:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8021788:	fb02 5503 	mla	r5, r2, r3, r5
 802178c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021790:	fb04 540e 	mla	r4, r4, lr, r5
 8021794:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8021798:	fb01 4100 	mla	r1, r1, r0, r4
 802179c:	0a09      	lsrs	r1, r1, #8
 802179e:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80217a2:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80217a6:	fb03 7101 	mla	r1, r3, r1, r7
 80217aa:	9b00      	ldr	r3, [sp, #0]
 80217ac:	fb0e 1e08 	mla	lr, lr, r8, r1
 80217b0:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80217b4:	43da      	mvns	r2, r3
 80217b6:	1233      	asrs	r3, r6, #8
 80217b8:	fb00 e101 	mla	r1, r0, r1, lr
 80217bc:	10f0      	asrs	r0, r6, #3
 80217be:	b2d2      	uxtb	r2, r2
 80217c0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80217c4:	0a09      	lsrs	r1, r1, #8
 80217c6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80217ca:	00f6      	lsls	r6, r6, #3
 80217cc:	4353      	muls	r3, r2
 80217ce:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80217d2:	4350      	muls	r0, r2
 80217d4:	b2f6      	uxtb	r6, r6
 80217d6:	4321      	orrs	r1, r4
 80217d8:	4356      	muls	r6, r2
 80217da:	1c5a      	adds	r2, r3, #1
 80217dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80217e0:	0c0b      	lsrs	r3, r1, #16
 80217e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80217e6:	1c42      	adds	r2, r0, #1
 80217e8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80217ec:	0a0a      	lsrs	r2, r1, #8
 80217ee:	021b      	lsls	r3, r3, #8
 80217f0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80217f4:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80217f8:	00d2      	lsls	r2, r2, #3
 80217fa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80217fe:	4313      	orrs	r3, r2
 8021800:	1c72      	adds	r2, r6, #1
 8021802:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021806:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802180a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802180e:	4319      	orrs	r1, r3
 8021810:	9b02      	ldr	r3, [sp, #8]
 8021812:	8019      	strh	r1, [r3, #0]
 8021814:	b005      	add	sp, #20
 8021816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802181a:	2500      	movs	r5, #0
 802181c:	e6fe      	b.n	802161c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802181e:	2100      	movs	r1, #0
 8021820:	460d      	mov	r5, r1
 8021822:	e706      	b.n	8021632 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021824:	2100      	movs	r1, #0
 8021826:	e704      	b.n	8021632 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021828:	4631      	mov	r1, r6
 802182a:	e702      	b.n	8021632 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802182c:	2400      	movs	r4, #0
 802182e:	e713      	b.n	8021658 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8021830:	2200      	movs	r2, #0
 8021832:	4614      	mov	r4, r2
 8021834:	e71a      	b.n	802166c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021836:	4602      	mov	r2, r0
 8021838:	4604      	mov	r4, r0
 802183a:	e717      	b.n	802166c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802183c:	2200      	movs	r2, #0
 802183e:	e715      	b.n	802166c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021840:	4632      	mov	r2, r6
 8021842:	e713      	b.n	802166c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08021844 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021848:	b09b      	sub	sp, #108	@ 0x6c
 802184a:	9218      	str	r2, [sp, #96]	@ 0x60
 802184c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802184e:	9019      	str	r0, [sp, #100]	@ 0x64
 8021850:	9116      	str	r1, [sp, #88]	@ 0x58
 8021852:	6850      	ldr	r0, [r2, #4]
 8021854:	9307      	str	r3, [sp, #28]
 8021856:	6812      	ldr	r2, [r2, #0]
 8021858:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802185c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8021860:	fb00 1303 	mla	r3, r0, r3, r1
 8021864:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021868:	930a      	str	r3, [sp, #40]	@ 0x28
 802186a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802186c:	681b      	ldr	r3, [r3, #0]
 802186e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021870:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021872:	2b00      	cmp	r3, #0
 8021874:	dc03      	bgt.n	802187e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021876:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021878:	2b00      	cmp	r3, #0
 802187a:	f340 8387 	ble.w	8021f8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802187e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021880:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021884:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021888:	1e48      	subs	r0, r1, #1
 802188a:	1e57      	subs	r7, r2, #1
 802188c:	9b07      	ldr	r3, [sp, #28]
 802188e:	2b00      	cmp	r3, #0
 8021890:	f340 8166 	ble.w	8021b60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021894:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021898:	ea4f 4326 	mov.w	r3, r6, asr #16
 802189c:	d406      	bmi.n	80218ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802189e:	4584      	cmp	ip, r0
 80218a0:	da04      	bge.n	80218ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80218a2:	2b00      	cmp	r3, #0
 80218a4:	db02      	blt.n	80218ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80218a6:	42bb      	cmp	r3, r7
 80218a8:	f2c0 815b 	blt.w	8021b62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80218ac:	f11c 0c01 	adds.w	ip, ip, #1
 80218b0:	f100 814b 	bmi.w	8021b4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80218b4:	4561      	cmp	r1, ip
 80218b6:	f2c0 8148 	blt.w	8021b4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80218ba:	3301      	adds	r3, #1
 80218bc:	f100 8145 	bmi.w	8021b4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80218c0:	429a      	cmp	r2, r3
 80218c2:	f2c0 8142 	blt.w	8021b4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80218c6:	9b07      	ldr	r3, [sp, #28]
 80218c8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80218ca:	9317      	str	r3, [sp, #92]	@ 0x5c
 80218cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	f340 8165 	ble.w	8021b9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80218d4:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80218d6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80218da:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80218dc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80218e0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80218e4:	1422      	asrs	r2, r4, #16
 80218e6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80218ea:	689b      	ldr	r3, [r3, #8]
 80218ec:	f100 81d5 	bmi.w	8021c9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80218f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80218f4:	4542      	cmp	r2, r8
 80218f6:	f280 81d0 	bge.w	8021c9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80218fa:	f1bc 0f00 	cmp.w	ip, #0
 80218fe:	f2c0 81cc 	blt.w	8021c9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021902:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021906:	45c4      	cmp	ip, r8
 8021908:	f280 81c7 	bge.w	8021c9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802190c:	b21b      	sxth	r3, r3
 802190e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021910:	fb0c 2203 	mla	r2, ip, r3, r2
 8021914:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021918:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802191c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021920:	2900      	cmp	r1, #0
 8021922:	f000 8182 	beq.w	8021c2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021926:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802192a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802192c:	0e2d      	lsrs	r5, r5, #24
 802192e:	9512      	str	r5, [sp, #72]	@ 0x48
 8021930:	b180      	cbz	r0, 8021954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8021936:	3b01      	subs	r3, #1
 8021938:	009b      	lsls	r3, r3, #2
 802193a:	3304      	adds	r3, #4
 802193c:	eb08 0c03 	add.w	ip, r8, r3
 8021940:	f858 3003 	ldr.w	r3, [r8, r3]
 8021944:	9308      	str	r3, [sp, #32]
 8021946:	0e1b      	lsrs	r3, r3, #24
 8021948:	9310      	str	r3, [sp, #64]	@ 0x40
 802194a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802194e:	930c      	str	r3, [sp, #48]	@ 0x30
 8021950:	0e1b      	lsrs	r3, r3, #24
 8021952:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021954:	b289      	uxth	r1, r1
 8021956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021958:	b280      	uxth	r0, r0
 802195a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802195c:	fb01 f900 	mul.w	r9, r1, r0
 8021960:	0109      	lsls	r1, r1, #4
 8021962:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021966:	eba1 0809 	sub.w	r8, r1, r9
 802196a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802196e:	b280      	uxth	r0, r0
 8021970:	fa1f f888 	uxth.w	r8, r8
 8021974:	1a09      	subs	r1, r1, r0
 8021976:	fb08 f303 	mul.w	r3, r8, r3
 802197a:	b289      	uxth	r1, r1
 802197c:	fb01 330e 	mla	r3, r1, lr, r3
 8021980:	fb00 3305 	mla	r3, r0, r5, r3
 8021984:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021986:	fb09 3305 	mla	r3, r9, r5, r3
 802198a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802198e:	2b00      	cmp	r3, #0
 8021990:	f000 80d2 	beq.w	8021b38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021994:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021998:	d01b      	beq.n	80219d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802199a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802199e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80219a2:	fb0e fa0a 	mul.w	sl, lr, sl
 80219a6:	fb0e fe02 	mul.w	lr, lr, r2
 80219aa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80219ae:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80219b2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80219b6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80219ba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80219be:	4452      	add	r2, sl
 80219c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219c4:	0a12      	lsrs	r2, r2, #8
 80219c6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80219ca:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80219ce:	ea42 020c 	orr.w	r2, r2, ip
 80219d2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80219d4:	2dff      	cmp	r5, #255	@ 0xff
 80219d6:	d021      	beq.n	8021a1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80219d8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80219da:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80219de:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80219e0:	fb05 fb0b 	mul.w	fp, r5, fp
 80219e4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80219e6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80219ea:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80219ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80219f0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80219f4:	fb05 fa0a 	mul.w	sl, r5, sl
 80219f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80219fc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021a00:	44de      	add	lr, fp
 8021a02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021a06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021a0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021a12:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021a16:	ea4e 050a 	orr.w	r5, lr, sl
 8021a1a:	950b      	str	r5, [sp, #44]	@ 0x2c
 8021a1c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021a1e:	2dff      	cmp	r5, #255	@ 0xff
 8021a20:	d021      	beq.n	8021a66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8021a22:	9d08      	ldr	r5, [sp, #32]
 8021a24:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8021a28:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021a2a:	fb05 fb0b 	mul.w	fp, r5, fp
 8021a2e:	9d08      	ldr	r5, [sp, #32]
 8021a30:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8021a34:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021a36:	fb05 fa0e 	mul.w	sl, r5, lr
 8021a3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021a3e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021a42:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021a46:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021a4a:	44de      	add	lr, fp
 8021a4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021a50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021a54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a58:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021a5c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021a60:	ea4e 050a 	orr.w	r5, lr, sl
 8021a64:	9508      	str	r5, [sp, #32]
 8021a66:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021a68:	2dff      	cmp	r5, #255	@ 0xff
 8021a6a:	d021      	beq.n	8021ab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8021a6c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021a6e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8021a72:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021a74:	fb05 fb0b 	mul.w	fp, r5, fp
 8021a78:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021a7a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8021a7e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021a80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021a84:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021a88:	fb05 fa0a 	mul.w	sl, r5, sl
 8021a8c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021a90:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021a94:	44de      	add	lr, fp
 8021a96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021a9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021a9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021aa2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021aa6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021aaa:	ea4e 050a 	orr.w	r5, lr, sl
 8021aae:	950c      	str	r5, [sp, #48]	@ 0x30
 8021ab0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8021ab2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8021ab6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021aba:	2bff      	cmp	r3, #255	@ 0xff
 8021abc:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8021ac0:	9d08      	ldr	r5, [sp, #32]
 8021ac2:	fb08 fc0c 	mul.w	ip, r8, ip
 8021ac6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021aca:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8021ace:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021ad0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021ad4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8021ad8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8021ada:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021ade:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8021ae2:	fb08 f80e 	mul.w	r8, r8, lr
 8021ae6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021aea:	fb01 8202 	mla	r2, r1, r2, r8
 8021aee:	9908      	ldr	r1, [sp, #32]
 8021af0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021af4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8021af8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021afa:	fb00 220a 	mla	r2, r0, sl, r2
 8021afe:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8021b02:	fb09 2900 	mla	r9, r9, r0, r2
 8021b06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021b0a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8021b0e:	ea4c 0c09 	orr.w	ip, ip, r9
 8021b12:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8021b16:	f040 8091 	bne.w	8021c3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021b1a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8021b1e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8021b22:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021b26:	f022 0207 	bic.w	r2, r2, #7
 8021b2a:	431a      	orrs	r2, r3
 8021b2c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021b30:	ea4c 0c02 	orr.w	ip, ip, r2
 8021b34:	f8a7 c000 	strh.w	ip, [r7]
 8021b38:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021b3a:	3702      	adds	r7, #2
 8021b3c:	441c      	add	r4, r3
 8021b3e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021b40:	441e      	add	r6, r3
 8021b42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021b44:	3b01      	subs	r3, #1
 8021b46:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021b48:	e6c0      	b.n	80218cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021b4a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021b4c:	441c      	add	r4, r3
 8021b4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021b50:	441e      	add	r6, r3
 8021b52:	9b07      	ldr	r3, [sp, #28]
 8021b54:	3b01      	subs	r3, #1
 8021b56:	9307      	str	r3, [sp, #28]
 8021b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021b5a:	3302      	adds	r3, #2
 8021b5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8021b5e:	e695      	b.n	802188c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021b60:	d024      	beq.n	8021bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021b62:	9b07      	ldr	r3, [sp, #28]
 8021b64:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8021b66:	3b01      	subs	r3, #1
 8021b68:	fb00 4003 	mla	r0, r0, r3, r4
 8021b6c:	1400      	asrs	r0, r0, #16
 8021b6e:	f53f aeaa 	bmi.w	80218c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021b72:	3901      	subs	r1, #1
 8021b74:	4288      	cmp	r0, r1
 8021b76:	f6bf aea6 	bge.w	80218c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021b7a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021b7c:	fb01 6303 	mla	r3, r1, r3, r6
 8021b80:	141b      	asrs	r3, r3, #16
 8021b82:	f53f aea0 	bmi.w	80218c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021b86:	3a01      	subs	r2, #1
 8021b88:	4293      	cmp	r3, r2
 8021b8a:	f6bf ae9c 	bge.w	80218c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021b8e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021b92:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8021b96:	f1bb 0f00 	cmp.w	fp, #0
 8021b9a:	f300 809a 	bgt.w	8021cd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021b9e:	9b07      	ldr	r3, [sp, #28]
 8021ba0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021ba6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8021bac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	f340 81ec 	ble.w	8021f8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021bb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021bb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021bba:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021bbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021bc2:	eef0 6a62 	vmov.f32	s13, s5
 8021bc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021bca:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021bce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bd2:	ee16 4a90 	vmov	r4, s13
 8021bd6:	eef0 6a43 	vmov.f32	s13, s6
 8021bda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bde:	ee16 6a90 	vmov	r6, s13
 8021be2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021be6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021bea:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021bee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021bf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021bf6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021bfa:	ee12 2a90 	vmov	r2, s5
 8021bfe:	eef0 2a47 	vmov.f32	s5, s14
 8021c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c06:	ee13 2a10 	vmov	r2, s6
 8021c0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021c0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021c0e:	eeb0 3a67 	vmov.f32	s6, s15
 8021c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c16:	9328      	str	r3, [sp, #160]	@ 0xa0
 8021c18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021c1a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021c1c:	3b01      	subs	r3, #1
 8021c1e:	9316      	str	r3, [sp, #88]	@ 0x58
 8021c20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021c22:	bf08      	it	eq
 8021c24:	4613      	moveq	r3, r2
 8021c26:	9307      	str	r3, [sp, #28]
 8021c28:	e622      	b.n	8021870 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8021c2a:	2800      	cmp	r0, #0
 8021c2c:	f43f ae92 	beq.w	8021954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021c30:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021c34:	9308      	str	r3, [sp, #32]
 8021c36:	0e1b      	lsrs	r3, r3, #24
 8021c38:	9310      	str	r3, [sp, #64]	@ 0x40
 8021c3a:	e68b      	b.n	8021954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021c3c:	8839      	ldrh	r1, [r7, #0]
 8021c3e:	43db      	mvns	r3, r3
 8021c40:	4dd4      	ldr	r5, [pc, #848]	@ (8021f94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8021c42:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8021c46:	fa5f f883 	uxtb.w	r8, r3
 8021c4a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8021c4e:	10c8      	asrs	r0, r1, #3
 8021c50:	00cb      	lsls	r3, r1, #3
 8021c52:	fb0e fe08 	mul.w	lr, lr, r8
 8021c56:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8021c5a:	b2db      	uxtb	r3, r3
 8021c5c:	f10e 0101 	add.w	r1, lr, #1
 8021c60:	fb00 f008 	mul.w	r0, r0, r8
 8021c64:	fb03 f308 	mul.w	r3, r3, r8
 8021c68:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8021c6c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8021c70:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8021c74:	f100 0e01 	add.w	lr, r0, #1
 8021c78:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8021c7c:	b2c9      	uxtb	r1, r1
 8021c7e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021c82:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8021c86:	00d2      	lsls	r2, r2, #3
 8021c88:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021c8c:	430a      	orrs	r2, r1
 8021c8e:	1c59      	adds	r1, r3, #1
 8021c90:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021c94:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021c98:	e748      	b.n	8021b2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021c9a:	f112 0801 	adds.w	r8, r2, #1
 8021c9e:	f53f af4b 	bmi.w	8021b38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021ca2:	4543      	cmp	r3, r8
 8021ca4:	f6ff af48 	blt.w	8021b38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021ca8:	f11c 0801 	adds.w	r8, ip, #1
 8021cac:	f53f af44 	bmi.w	8021b38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021cb0:	45c6      	cmp	lr, r8
 8021cb2:	f6ff af41 	blt.w	8021b38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021cb6:	b21b      	sxth	r3, r3
 8021cb8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021cbc:	fa0f f28e 	sxth.w	r2, lr
 8021cc0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021cc4:	9200      	str	r2, [sp, #0]
 8021cc6:	4639      	mov	r1, r7
 8021cc8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021cca:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021ccc:	f7ff fc88 	bl	80215e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8021cd0:	e732      	b.n	8021b38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021cd2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021cd4:	1421      	asrs	r1, r4, #16
 8021cd6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021cd8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021cdc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8021ce0:	1433      	asrs	r3, r6, #16
 8021ce2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021ce6:	fb07 1303 	mla	r3, r7, r3, r1
 8021cea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021cec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8021cf0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021cf4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021cf8:	2a00      	cmp	r2, #0
 8021cfa:	f000 8108 	beq.w	8021f0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8021cfe:	684d      	ldr	r5, [r1, #4]
 8021d00:	950d      	str	r5, [sp, #52]	@ 0x34
 8021d02:	0e2d      	lsrs	r5, r5, #24
 8021d04:	9514      	str	r5, [sp, #80]	@ 0x50
 8021d06:	b178      	cbz	r0, 8021d28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021d08:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8021d0c:	3f01      	subs	r7, #1
 8021d0e:	00bf      	lsls	r7, r7, #2
 8021d10:	3704      	adds	r7, #4
 8021d12:	eb01 0e07 	add.w	lr, r1, r7
 8021d16:	59c9      	ldr	r1, [r1, r7]
 8021d18:	9109      	str	r1, [sp, #36]	@ 0x24
 8021d1a:	0e09      	lsrs	r1, r1, #24
 8021d1c:	9111      	str	r1, [sp, #68]	@ 0x44
 8021d1e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021d22:	910e      	str	r1, [sp, #56]	@ 0x38
 8021d24:	0e09      	lsrs	r1, r1, #24
 8021d26:	9115      	str	r1, [sp, #84]	@ 0x54
 8021d28:	b292      	uxth	r2, r2
 8021d2a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021d2c:	b280      	uxth	r0, r0
 8021d2e:	fb02 f900 	mul.w	r9, r2, r0
 8021d32:	0112      	lsls	r2, r2, #4
 8021d34:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021d38:	eba2 0e09 	sub.w	lr, r2, r9
 8021d3c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8021d40:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021d42:	b280      	uxth	r0, r0
 8021d44:	fa1f fe8e 	uxth.w	lr, lr
 8021d48:	1a09      	subs	r1, r1, r0
 8021d4a:	fb0e f202 	mul.w	r2, lr, r2
 8021d4e:	b289      	uxth	r1, r1
 8021d50:	fb01 220c 	mla	r2, r1, ip, r2
 8021d54:	fb00 2205 	mla	r2, r0, r5, r2
 8021d58:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8021d5a:	fb09 2205 	mla	r2, r9, r5, r2
 8021d5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021d62:	2a00      	cmp	r2, #0
 8021d64:	f000 80ca 	beq.w	8021efc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021d68:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8021d6c:	d019      	beq.n	8021da2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8021d6e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021d72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021d76:	fb0c fa0a 	mul.w	sl, ip, sl
 8021d7a:	fb0c fc03 	mul.w	ip, ip, r3
 8021d7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021d82:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021d86:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8021d8a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021d8e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021d92:	4453      	add	r3, sl
 8021d94:	0a3f      	lsrs	r7, r7, #8
 8021d96:	0a1b      	lsrs	r3, r3, #8
 8021d98:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021d9c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021da0:	433b      	orrs	r3, r7
 8021da2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021da4:	2dff      	cmp	r5, #255	@ 0xff
 8021da6:	d020      	beq.n	8021dea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8021da8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021daa:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8021dae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021db0:	436f      	muls	r7, r5
 8021db2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021db4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021db8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8021dbc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021dbe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021dc2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021dc6:	fb05 fa0a 	mul.w	sl, r5, sl
 8021dca:	44bc      	add	ip, r7
 8021dcc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021dd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dd4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021dd8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021ddc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021de0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021de4:	ea4c 050a 	orr.w	r5, ip, sl
 8021de8:	950d      	str	r5, [sp, #52]	@ 0x34
 8021dea:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021dec:	2dff      	cmp	r5, #255	@ 0xff
 8021dee:	d020      	beq.n	8021e32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8021df0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021df2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8021df6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021df8:	436f      	muls	r7, r5
 8021dfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021dfc:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8021e00:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021e02:	fb05 fa0c 	mul.w	sl, r5, ip
 8021e06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021e0a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021e0e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021e12:	44bc      	add	ip, r7
 8021e14:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021e18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021e1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e24:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021e28:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021e2c:	ea4c 050a 	orr.w	r5, ip, sl
 8021e30:	9509      	str	r5, [sp, #36]	@ 0x24
 8021e32:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8021e34:	2dff      	cmp	r5, #255	@ 0xff
 8021e36:	d020      	beq.n	8021e7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8021e38:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021e3a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8021e3e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8021e40:	436f      	muls	r7, r5
 8021e42:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021e44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021e48:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8021e4c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8021e4e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021e52:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021e56:	fb05 fa0a 	mul.w	sl, r5, sl
 8021e5a:	44bc      	add	ip, r7
 8021e5c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021e60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021e68:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021e6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e70:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021e74:	ea4c 050a 	orr.w	r5, ip, sl
 8021e78:	950e      	str	r5, [sp, #56]	@ 0x38
 8021e7a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021e7c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8021e80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021e84:	2aff      	cmp	r2, #255	@ 0xff
 8021e86:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8021e8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021e8c:	fb0e f707 	mul.w	r7, lr, r7
 8021e90:	fb01 770c 	mla	r7, r1, ip, r7
 8021e94:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8021e98:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021e9a:	fb00 770c 	mla	r7, r0, ip, r7
 8021e9e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8021ea2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021ea4:	fb09 770c 	mla	r7, r9, ip, r7
 8021ea8:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8021eac:	fb0e fe0c 	mul.w	lr, lr, ip
 8021eb0:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8021eb4:	fb01 e303 	mla	r3, r1, r3, lr
 8021eb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021eba:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8021ebe:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8021ec2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021ec4:	fb00 330a 	mla	r3, r0, sl, r3
 8021ec8:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8021ecc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021ed0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ed4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021ed8:	ea47 070c 	orr.w	r7, r7, ip
 8021edc:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8021ee0:	d11e      	bne.n	8021f20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021ee2:	097a      	lsrs	r2, r7, #5
 8021ee4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8021ee8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021eec:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021ef0:	f023 0307 	bic.w	r3, r3, #7
 8021ef4:	4313      	orrs	r3, r2
 8021ef6:	431f      	orrs	r7, r3
 8021ef8:	f8a8 7000 	strh.w	r7, [r8]
 8021efc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021efe:	f108 0802 	add.w	r8, r8, #2
 8021f02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021f06:	441c      	add	r4, r3
 8021f08:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021f0a:	441e      	add	r6, r3
 8021f0c:	e643      	b.n	8021b96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8021f0e:	2800      	cmp	r0, #0
 8021f10:	f43f af0a 	beq.w	8021d28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021f14:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8021f18:	9109      	str	r1, [sp, #36]	@ 0x24
 8021f1a:	0e09      	lsrs	r1, r1, #24
 8021f1c:	9111      	str	r1, [sp, #68]	@ 0x44
 8021f1e:	e703      	b.n	8021d28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021f20:	f8b8 1000 	ldrh.w	r1, [r8]
 8021f24:	43d2      	mvns	r2, r2
 8021f26:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8021f2a:	fa5f fe82 	uxtb.w	lr, r2
 8021f2e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8021f32:	10c8      	asrs	r0, r1, #3
 8021f34:	00ca      	lsls	r2, r1, #3
 8021f36:	fb0c fc0e 	mul.w	ip, ip, lr
 8021f3a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8021f3e:	b2d2      	uxtb	r2, r2
 8021f40:	f10c 0101 	add.w	r1, ip, #1
 8021f44:	fb00 f00e 	mul.w	r0, r0, lr
 8021f48:	fb02 f20e 	mul.w	r2, r2, lr
 8021f4c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021f50:	0c39      	lsrs	r1, r7, #16
 8021f52:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021f56:	490f      	ldr	r1, [pc, #60]	@ (8021f94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8021f58:	fa5f fc8c 	uxtb.w	ip, ip
 8021f5c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8021f60:	1c41      	adds	r1, r0, #1
 8021f62:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021f66:	1c51      	adds	r1, r2, #1
 8021f68:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021f6c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021f70:	00c0      	lsls	r0, r0, #3
 8021f72:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021f76:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021f7a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021f7e:	ea4c 0c00 	orr.w	ip, ip, r0
 8021f82:	ea47 0c0c 	orr.w	ip, r7, ip
 8021f86:	f8a8 c000 	strh.w	ip, [r8]
 8021f8a:	e7b7      	b.n	8021efc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021f8c:	b01b      	add	sp, #108	@ 0x6c
 8021f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f92:	bf00      	nop
 8021f94:	fffff800 	.word	0xfffff800

08021f98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8021f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f9c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8021fa0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8021fa4:	2d00      	cmp	r5, #0
 8021fa6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021faa:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8021fae:	fb05 0e03 	mla	lr, r5, r3, r0
 8021fb2:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8021fb6:	f2c0 808c 	blt.w	80220d2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021fba:	45a9      	cmp	r9, r5
 8021fbc:	f340 8089 	ble.w	80220d2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021fc0:	2800      	cmp	r0, #0
 8021fc2:	f2c0 8084 	blt.w	80220ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021fc6:	4580      	cmp	r8, r0
 8021fc8:	f340 8081 	ble.w	80220ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021fcc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021fd0:	f01e 0f01 	tst.w	lr, #1
 8021fd4:	5d16      	ldrb	r6, [r2, r4]
 8021fd6:	bf0c      	ite	eq
 8021fd8:	f006 060f 	andeq.w	r6, r6, #15
 8021fdc:	1136      	asrne	r6, r6, #4
 8021fde:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021fe2:	b2f6      	uxtb	r6, r6
 8021fe4:	1c44      	adds	r4, r0, #1
 8021fe6:	d477      	bmi.n	80220d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021fe8:	45a0      	cmp	r8, r4
 8021fea:	dd75      	ble.n	80220d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021fec:	2f00      	cmp	r7, #0
 8021fee:	d075      	beq.n	80220dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8021ff0:	f10e 0a01 	add.w	sl, lr, #1
 8021ff4:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021ff8:	f01a 0f01 	tst.w	sl, #1
 8021ffc:	5d14      	ldrb	r4, [r2, r4]
 8021ffe:	bf0c      	ite	eq
 8022000:	f004 040f 	andeq.w	r4, r4, #15
 8022004:	1124      	asrne	r4, r4, #4
 8022006:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802200a:	b2e4      	uxtb	r4, r4
 802200c:	3501      	adds	r5, #1
 802200e:	d469      	bmi.n	80220e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8022010:	45a9      	cmp	r9, r5
 8022012:	dd67      	ble.n	80220e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8022014:	f1bc 0f00 	cmp.w	ip, #0
 8022018:	d067      	beq.n	80220ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802201a:	2800      	cmp	r0, #0
 802201c:	db60      	blt.n	80220e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802201e:	4580      	cmp	r8, r0
 8022020:	dd5e      	ble.n	80220e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8022022:	eb03 090e 	add.w	r9, r3, lr
 8022026:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802202a:	f019 0f01 	tst.w	r9, #1
 802202e:	5d55      	ldrb	r5, [r2, r5]
 8022030:	bf0c      	ite	eq
 8022032:	f005 050f 	andeq.w	r5, r5, #15
 8022036:	112d      	asrne	r5, r5, #4
 8022038:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802203c:	b2ed      	uxtb	r5, r5
 802203e:	3001      	adds	r0, #1
 8022040:	d456      	bmi.n	80220f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8022042:	4580      	cmp	r8, r0
 8022044:	dd54      	ble.n	80220f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8022046:	2f00      	cmp	r7, #0
 8022048:	d054      	beq.n	80220f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802204a:	3301      	adds	r3, #1
 802204c:	449e      	add	lr, r3
 802204e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022052:	f01e 0f01 	tst.w	lr, #1
 8022056:	5cd0      	ldrb	r0, [r2, r3]
 8022058:	bf0c      	ite	eq
 802205a:	f000 000f 	andeq.w	r0, r0, #15
 802205e:	1100      	asrne	r0, r0, #4
 8022060:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022064:	b2c3      	uxtb	r3, r0
 8022066:	b2ba      	uxth	r2, r7
 8022068:	fa1f fc8c 	uxth.w	ip, ip
 802206c:	fb02 f00c 	mul.w	r0, r2, ip
 8022070:	0112      	lsls	r2, r2, #4
 8022072:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022076:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802207a:	1a12      	subs	r2, r2, r0
 802207c:	fa1f fc8c 	uxth.w	ip, ip
 8022080:	b292      	uxth	r2, r2
 8022082:	eba7 070c 	sub.w	r7, r7, ip
 8022086:	4362      	muls	r2, r4
 8022088:	b2bf      	uxth	r7, r7
 802208a:	fb06 2207 	mla	r2, r6, r7, r2
 802208e:	fb0c 2505 	mla	r5, ip, r5, r2
 8022092:	fb00 5303 	mla	r3, r0, r3, r5
 8022096:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802209a:	b1b3      	cbz	r3, 80220ca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802209c:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 80220a0:	435a      	muls	r2, r3
 80220a2:	1c53      	adds	r3, r2, #1
 80220a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220a8:	4a2d      	ldr	r2, [pc, #180]	@ (8022160 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80220aa:	121b      	asrs	r3, r3, #8
 80220ac:	6812      	ldr	r2, [r2, #0]
 80220ae:	2bff      	cmp	r3, #255	@ 0xff
 80220b0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80220b4:	d120      	bne.n	80220f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80220b6:	0950      	lsrs	r0, r2, #5
 80220b8:	4b2a      	ldr	r3, [pc, #168]	@ (8022164 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80220ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80220be:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80220c2:	4033      	ands	r3, r6
 80220c4:	4318      	orrs	r0, r3
 80220c6:	4302      	orrs	r2, r0
 80220c8:	800a      	strh	r2, [r1, #0]
 80220ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220ce:	2600      	movs	r6, #0
 80220d0:	e788      	b.n	8021fe4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80220d2:	2400      	movs	r4, #0
 80220d4:	4626      	mov	r6, r4
 80220d6:	e799      	b.n	802200c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80220d8:	2400      	movs	r4, #0
 80220da:	e797      	b.n	802200c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80220dc:	463c      	mov	r4, r7
 80220de:	e795      	b.n	802200c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80220e0:	2500      	movs	r5, #0
 80220e2:	e7ac      	b.n	802203e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80220e4:	2300      	movs	r3, #0
 80220e6:	461d      	mov	r5, r3
 80220e8:	e7bd      	b.n	8022066 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80220ea:	4663      	mov	r3, ip
 80220ec:	4665      	mov	r5, ip
 80220ee:	e7ba      	b.n	8022066 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80220f0:	2300      	movs	r3, #0
 80220f2:	e7b8      	b.n	8022066 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80220f4:	463b      	mov	r3, r7
 80220f6:	e7b6      	b.n	8022066 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80220f8:	880d      	ldrh	r5, [r1, #0]
 80220fa:	b29f      	uxth	r7, r3
 80220fc:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8022100:	43db      	mvns	r3, r3
 8022102:	122c      	asrs	r4, r5, #8
 8022104:	fb10 f007 	smulbb	r0, r0, r7
 8022108:	b2db      	uxtb	r3, r3
 802210a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802210e:	b2f6      	uxtb	r6, r6
 8022110:	b2d2      	uxtb	r2, r2
 8022112:	fb04 0403 	mla	r4, r4, r3, r0
 8022116:	10e8      	asrs	r0, r5, #3
 8022118:	fb12 f207 	smulbb	r2, r2, r7
 802211c:	00ed      	lsls	r5, r5, #3
 802211e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8022122:	b2a4      	uxth	r4, r4
 8022124:	fb16 f607 	smulbb	r6, r6, r7
 8022128:	b2ed      	uxtb	r5, r5
 802212a:	fb00 6603 	mla	r6, r0, r3, r6
 802212e:	fb05 2303 	mla	r3, r5, r3, r2
 8022132:	b2b0      	uxth	r0, r6
 8022134:	b29a      	uxth	r2, r3
 8022136:	1c63      	adds	r3, r4, #1
 8022138:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802213c:	1c53      	adds	r3, r2, #1
 802213e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022142:	1c42      	adds	r2, r0, #1
 8022144:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8022148:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802214c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022150:	0940      	lsrs	r0, r0, #5
 8022152:	4323      	orrs	r3, r4
 8022154:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8022158:	4303      	orrs	r3, r0
 802215a:	800b      	strh	r3, [r1, #0]
 802215c:	e7b5      	b.n	80220ca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802215e:	bf00      	nop
 8022160:	20001dfc 	.word	0x20001dfc
 8022164:	00fff800 	.word	0x00fff800

08022168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802216c:	b097      	sub	sp, #92	@ 0x5c
 802216e:	9214      	str	r2, [sp, #80]	@ 0x50
 8022170:	9309      	str	r3, [sp, #36]	@ 0x24
 8022172:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8022174:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022178:	9015      	str	r0, [sp, #84]	@ 0x54
 802217a:	910d      	str	r1, [sp, #52]	@ 0x34
 802217c:	6850      	ldr	r0, [r2, #4]
 802217e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022180:	6812      	ldr	r2, [r2, #0]
 8022182:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8022186:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 802218a:	fb00 1303 	mla	r3, r0, r3, r1
 802218e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022192:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022194:	689b      	ldr	r3, [r3, #8]
 8022196:	3301      	adds	r3, #1
 8022198:	f023 0301 	bic.w	r3, r3, #1
 802219c:	930a      	str	r3, [sp, #40]	@ 0x28
 802219e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80221a0:	681f      	ldr	r7, [r3, #0]
 80221a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	dc03      	bgt.n	80221b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80221a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80221aa:	2b00      	cmp	r3, #0
 80221ac:	f340 8289 	ble.w	80226c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80221b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80221b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221ba:	1e48      	subs	r0, r1, #1
 80221bc:	f102 3cff 	add.w	ip, r2, #4294967295
 80221c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	f340 80c5 	ble.w	8022352 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80221c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80221cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80221d0:	d406      	bmi.n	80221e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80221d2:	4586      	cmp	lr, r0
 80221d4:	da04      	bge.n	80221e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	db02      	blt.n	80221e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80221da:	4563      	cmp	r3, ip
 80221dc:	f2c0 80ba 	blt.w	8022354 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80221e0:	f11e 0e01 	adds.w	lr, lr, #1
 80221e4:	f100 80ab 	bmi.w	802233e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80221e8:	4571      	cmp	r1, lr
 80221ea:	f2c0 80a8 	blt.w	802233e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80221ee:	3301      	adds	r3, #1
 80221f0:	f100 80a5 	bmi.w	802233e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80221f4:	429a      	cmp	r2, r3
 80221f6:	f2c0 80a2 	blt.w	802233e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80221fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221fc:	46c8      	mov	r8, r9
 80221fe:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8022202:	930e      	str	r3, [sp, #56]	@ 0x38
 8022204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022206:	2b00      	cmp	r3, #0
 8022208:	f340 80c4 	ble.w	8022394 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802220c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802220e:	1430      	asrs	r0, r6, #16
 8022210:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022214:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022218:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802221c:	1423      	asrs	r3, r4, #16
 802221e:	f100 814f 	bmi.w	80224c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022222:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022226:	455b      	cmp	r3, fp
 8022228:	f280 814a 	bge.w	80224c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802222c:	2800      	cmp	r0, #0
 802222e:	f2c0 8147 	blt.w	80224c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022232:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022236:	4558      	cmp	r0, fp
 8022238:	f280 8142 	bge.w	80224c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802223c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802223e:	fb00 3305 	mla	r3, r0, r5, r3
 8022242:	0858      	lsrs	r0, r3, #1
 8022244:	07dd      	lsls	r5, r3, #31
 8022246:	f817 c000 	ldrb.w	ip, [r7, r0]
 802224a:	bf54      	ite	pl
 802224c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022250:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022254:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022258:	fa5f fc8c 	uxtb.w	ip, ip
 802225c:	2a00      	cmp	r2, #0
 802225e:	f000 80dd 	beq.w	802241c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8022262:	1c58      	adds	r0, r3, #1
 8022264:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022268:	07c0      	lsls	r0, r0, #31
 802226a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802226e:	bf54      	ite	pl
 8022270:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022274:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022278:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802227c:	fa5f f08e 	uxtb.w	r0, lr
 8022280:	9010      	str	r0, [sp, #64]	@ 0x40
 8022282:	b1d9      	cbz	r1, 80222bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022284:	4453      	add	r3, sl
 8022286:	0858      	lsrs	r0, r3, #1
 8022288:	07dd      	lsls	r5, r3, #31
 802228a:	f103 0301 	add.w	r3, r3, #1
 802228e:	5c38      	ldrb	r0, [r7, r0]
 8022290:	bf54      	ite	pl
 8022292:	f000 000f 	andpl.w	r0, r0, #15
 8022296:	1100      	asrmi	r0, r0, #4
 8022298:	07dd      	lsls	r5, r3, #31
 802229a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802229e:	b2c0      	uxtb	r0, r0
 80222a0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80222a2:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80222a6:	f817 e000 	ldrb.w	lr, [r7, r0]
 80222aa:	bf54      	ite	pl
 80222ac:	f00e 030f 	andpl.w	r3, lr, #15
 80222b0:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80222b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80222b8:	b2db      	uxtb	r3, r3
 80222ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80222bc:	b292      	uxth	r2, r2
 80222be:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80222c0:	b289      	uxth	r1, r1
 80222c2:	fb02 f301 	mul.w	r3, r2, r1
 80222c6:	0112      	lsls	r2, r2, #4
 80222c8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80222cc:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80222d0:	1ad2      	subs	r2, r2, r3
 80222d2:	b289      	uxth	r1, r1
 80222d4:	b292      	uxth	r2, r2
 80222d6:	1a40      	subs	r0, r0, r1
 80222d8:	436a      	muls	r2, r5
 80222da:	b280      	uxth	r0, r0
 80222dc:	fb0c 2c00 	mla	ip, ip, r0, r2
 80222e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80222e2:	fb01 c102 	mla	r1, r1, r2, ip
 80222e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80222e8:	fb03 1302 	mla	r3, r3, r2, r1
 80222ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80222f0:	b1db      	cbz	r3, 802232a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80222f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80222f4:	4353      	muls	r3, r2
 80222f6:	1c5a      	adds	r2, r3, #1
 80222f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80222fc:	4ac6      	ldr	r2, [pc, #792]	@ (8022618 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80222fe:	121b      	asrs	r3, r3, #8
 8022300:	6812      	ldr	r2, [r2, #0]
 8022302:	2bff      	cmp	r3, #255	@ 0xff
 8022304:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8022308:	f040 8099 	bne.w	802243e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802230c:	0953      	lsrs	r3, r2, #5
 802230e:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8022312:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022316:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802231a:	f02c 0c07 	bic.w	ip, ip, #7
 802231e:	ea43 0c0c 	orr.w	ip, r3, ip
 8022322:	ea4c 0202 	orr.w	r2, ip, r2
 8022326:	f8a8 2000 	strh.w	r2, [r8]
 802232a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802232c:	f108 0802 	add.w	r8, r8, #2
 8022330:	441c      	add	r4, r3
 8022332:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022334:	441e      	add	r6, r3
 8022336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022338:	3b01      	subs	r3, #1
 802233a:	930e      	str	r3, [sp, #56]	@ 0x38
 802233c:	e762      	b.n	8022204 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802233e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022340:	f109 0902 	add.w	r9, r9, #2
 8022344:	441c      	add	r4, r3
 8022346:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022348:	441e      	add	r6, r3
 802234a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802234c:	3b01      	subs	r3, #1
 802234e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022350:	e736      	b.n	80221c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022352:	d024      	beq.n	802239e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022356:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8022358:	3b01      	subs	r3, #1
 802235a:	fb00 4003 	mla	r0, r0, r3, r4
 802235e:	1400      	asrs	r0, r0, #16
 8022360:	f53f af4b 	bmi.w	80221fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022364:	3901      	subs	r1, #1
 8022366:	4288      	cmp	r0, r1
 8022368:	f6bf af47 	bge.w	80221fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802236c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802236e:	fb01 6303 	mla	r3, r1, r3, r6
 8022372:	141b      	asrs	r3, r3, #16
 8022374:	f53f af41 	bmi.w	80221fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022378:	3a01      	subs	r2, #1
 802237a:	4293      	cmp	r3, r2
 802237c:	f6bf af3d 	bge.w	80221fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022380:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8022384:	46c8      	mov	r8, r9
 8022386:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802238a:	930e      	str	r3, [sp, #56]	@ 0x38
 802238c:	f1bb 0f00 	cmp.w	fp, #0
 8022390:	f300 80b7 	bgt.w	8022502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8022394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022396:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802239a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802239e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	f340 818e 	ble.w	80226c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80223a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80223aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80223ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80223b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80223b4:	eef0 6a62 	vmov.f32	s13, s5
 80223b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80223bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80223c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223c4:	ee16 4a90 	vmov	r4, s13
 80223c8:	eef0 6a43 	vmov.f32	s13, s6
 80223cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223d0:	ee16 6a90 	vmov	r6, s13
 80223d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80223d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80223dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80223e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80223e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80223e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80223ec:	ee12 2a90 	vmov	r2, s5
 80223f0:	eef0 2a47 	vmov.f32	s5, s14
 80223f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80223f8:	ee13 2a10 	vmov	r2, s6
 80223fc:	9323      	str	r3, [sp, #140]	@ 0x8c
 80223fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022400:	eeb0 3a67 	vmov.f32	s6, s15
 8022404:	fb92 f3f3 	sdiv	r3, r2, r3
 8022408:	9324      	str	r3, [sp, #144]	@ 0x90
 802240a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802240c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802240e:	3b01      	subs	r3, #1
 8022410:	930d      	str	r3, [sp, #52]	@ 0x34
 8022412:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022414:	bf08      	it	eq
 8022416:	4613      	moveq	r3, r2
 8022418:	9309      	str	r3, [sp, #36]	@ 0x24
 802241a:	e6c2      	b.n	80221a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802241c:	2900      	cmp	r1, #0
 802241e:	f43f af4d 	beq.w	80222bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022422:	eb0a 0003 	add.w	r0, sl, r3
 8022426:	0843      	lsrs	r3, r0, #1
 8022428:	07c0      	lsls	r0, r0, #31
 802242a:	5cfb      	ldrb	r3, [r7, r3]
 802242c:	bf54      	ite	pl
 802242e:	f003 030f 	andpl.w	r3, r3, #15
 8022432:	111b      	asrmi	r3, r3, #4
 8022434:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022438:	b2db      	uxtb	r3, r3
 802243a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802243c:	e73e      	b.n	80222bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802243e:	f8b8 e000 	ldrh.w	lr, [r8]
 8022442:	fa1f fb83 	uxth.w	fp, r3
 8022446:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802244a:	43db      	mvns	r3, r3
 802244c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8022450:	fb11 f10b 	smulbb	r1, r1, fp
 8022454:	b2db      	uxtb	r3, r3
 8022456:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802245a:	fa5f fc8c 	uxtb.w	ip, ip
 802245e:	b2d2      	uxtb	r2, r2
 8022460:	fb00 1003 	mla	r0, r0, r3, r1
 8022464:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8022468:	fb1c fc0b 	smulbb	ip, ip, fp
 802246c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022470:	b280      	uxth	r0, r0
 8022472:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022476:	fb12 fb0b 	smulbb	fp, r2, fp
 802247a:	fa5f fe8e 	uxtb.w	lr, lr
 802247e:	fb01 cc03 	mla	ip, r1, r3, ip
 8022482:	fb0e bb03 	mla	fp, lr, r3, fp
 8022486:	1c43      	adds	r3, r0, #1
 8022488:	fa1f fc8c 	uxth.w	ip, ip
 802248c:	fa1f fb8b 	uxth.w	fp, fp
 8022490:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022494:	f10c 0101 	add.w	r1, ip, #1
 8022498:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802249c:	f10b 0001 	add.w	r0, fp, #1
 80224a0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80224a4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80224a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80224ac:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80224b0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80224b4:	4318      	orrs	r0, r3
 80224b6:	ea40 000c 	orr.w	r0, r0, ip
 80224ba:	f8a8 0000 	strh.w	r0, [r8]
 80224be:	e734      	b.n	802232a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80224c0:	f113 0b01 	adds.w	fp, r3, #1
 80224c4:	f53f af31 	bmi.w	802232a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80224c8:	45dc      	cmp	ip, fp
 80224ca:	f6ff af2e 	blt.w	802232a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80224ce:	f110 0b01 	adds.w	fp, r0, #1
 80224d2:	f53f af2a 	bmi.w	802232a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80224d6:	45de      	cmp	lr, fp
 80224d8:	f6ff af27 	blt.w	802232a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80224dc:	9302      	str	r3, [sp, #8]
 80224de:	fa0f f38e 	sxth.w	r3, lr
 80224e2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80224e4:	9301      	str	r3, [sp, #4]
 80224e6:	fa0f f38c 	sxth.w	r3, ip
 80224ea:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80224ee:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80224f2:	9300      	str	r3, [sp, #0]
 80224f4:	463a      	mov	r2, r7
 80224f6:	4653      	mov	r3, sl
 80224f8:	4641      	mov	r1, r8
 80224fa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80224fc:	f7ff fd4c 	bl	8021f98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8022500:	e713      	b.n	802232a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022502:	1422      	asrs	r2, r4, #16
 8022504:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022506:	1433      	asrs	r3, r6, #16
 8022508:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802250c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022510:	fb05 2303 	mla	r3, r5, r3, r2
 8022514:	085a      	lsrs	r2, r3, #1
 8022516:	07dd      	lsls	r5, r3, #31
 8022518:	5cba      	ldrb	r2, [r7, r2]
 802251a:	bf54      	ite	pl
 802251c:	f002 020f 	andpl.w	r2, r2, #15
 8022520:	1112      	asrmi	r2, r2, #4
 8022522:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022526:	b2d2      	uxtb	r2, r2
 8022528:	2900      	cmp	r1, #0
 802252a:	d077      	beq.n	802261c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802252c:	f103 0e01 	add.w	lr, r3, #1
 8022530:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022534:	f01e 0f01 	tst.w	lr, #1
 8022538:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802253c:	bf0c      	ite	eq
 802253e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022542:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022546:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802254a:	fa5f f58c 	uxtb.w	r5, ip
 802254e:	9512      	str	r5, [sp, #72]	@ 0x48
 8022550:	b308      	cbz	r0, 8022596 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022552:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022554:	442b      	add	r3, r5
 8022556:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802255a:	07dd      	lsls	r5, r3, #31
 802255c:	f103 0301 	add.w	r3, r3, #1
 8022560:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022564:	bf54      	ite	pl
 8022566:	f00c 0c0f 	andpl.w	ip, ip, #15
 802256a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802256e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022572:	fa5f f58c 	uxtb.w	r5, ip
 8022576:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802257a:	950c      	str	r5, [sp, #48]	@ 0x30
 802257c:	07dd      	lsls	r5, r3, #31
 802257e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022582:	bf54      	ite	pl
 8022584:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022588:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802258c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022590:	fa5f f38c 	uxtb.w	r3, ip
 8022594:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022596:	b289      	uxth	r1, r1
 8022598:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802259a:	b280      	uxth	r0, r0
 802259c:	fb01 f300 	mul.w	r3, r1, r0
 80225a0:	0109      	lsls	r1, r1, #4
 80225a2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80225a6:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 80225aa:	1ac9      	subs	r1, r1, r3
 80225ac:	b280      	uxth	r0, r0
 80225ae:	b289      	uxth	r1, r1
 80225b0:	ebac 0c00 	sub.w	ip, ip, r0
 80225b4:	4369      	muls	r1, r5
 80225b6:	fa1f fc8c 	uxth.w	ip, ip
 80225ba:	fb02 120c 	mla	r2, r2, ip, r1
 80225be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80225c0:	fb00 2001 	mla	r0, r0, r1, r2
 80225c4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80225c6:	fb03 0302 	mla	r3, r3, r2, r0
 80225ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80225ce:	b1d3      	cbz	r3, 8022606 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80225d0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80225d2:	4353      	muls	r3, r2
 80225d4:	1c5a      	adds	r2, r3, #1
 80225d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80225da:	4a0f      	ldr	r2, [pc, #60]	@ (8022618 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80225dc:	121b      	asrs	r3, r3, #8
 80225de:	6812      	ldr	r2, [r2, #0]
 80225e0:	2bff      	cmp	r3, #255	@ 0xff
 80225e2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80225e6:	d12d      	bne.n	8022644 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80225e8:	0953      	lsrs	r3, r2, #5
 80225ea:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 80225ee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80225f2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80225f6:	f02c 0c07 	bic.w	ip, ip, #7
 80225fa:	ea43 0c0c 	orr.w	ip, r3, ip
 80225fe:	ea4c 0202 	orr.w	r2, ip, r2
 8022602:	f8a8 2000 	strh.w	r2, [r8]
 8022606:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022608:	f108 0802 	add.w	r8, r8, #2
 802260c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022610:	441c      	add	r4, r3
 8022612:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022614:	441e      	add	r6, r3
 8022616:	e6b9      	b.n	802238c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022618:	20001dfc 	.word	0x20001dfc
 802261c:	2800      	cmp	r0, #0
 802261e:	d0ba      	beq.n	8022596 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022620:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022622:	442b      	add	r3, r5
 8022624:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022628:	07db      	lsls	r3, r3, #31
 802262a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802262e:	bf54      	ite	pl
 8022630:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022634:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022638:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802263c:	fa5f f38c 	uxtb.w	r3, ip
 8022640:	930c      	str	r3, [sp, #48]	@ 0x30
 8022642:	e7a8      	b.n	8022596 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022644:	f8b8 e000 	ldrh.w	lr, [r8]
 8022648:	fa1f fa83 	uxth.w	sl, r3
 802264c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022650:	43db      	mvns	r3, r3
 8022652:	ea4f 202e 	mov.w	r0, lr, asr #8
 8022656:	fb11 f10a 	smulbb	r1, r1, sl
 802265a:	b2db      	uxtb	r3, r3
 802265c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022660:	b2d2      	uxtb	r2, r2
 8022662:	fa5f fc8c 	uxtb.w	ip, ip
 8022666:	fb00 1003 	mla	r0, r0, r3, r1
 802266a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802266e:	fb12 f20a 	smulbb	r2, r2, sl
 8022672:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022676:	b280      	uxth	r0, r0
 8022678:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802267c:	fb1c fc0a 	smulbb	ip, ip, sl
 8022680:	fa5f fe8e 	uxtb.w	lr, lr
 8022684:	fb0e 2203 	mla	r2, lr, r3, r2
 8022688:	fb01 cc03 	mla	ip, r1, r3, ip
 802268c:	1c43      	adds	r3, r0, #1
 802268e:	b292      	uxth	r2, r2
 8022690:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022694:	1c51      	adds	r1, r2, #1
 8022696:	fa1f fc8c 	uxth.w	ip, ip
 802269a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802269e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80226a2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80226a6:	4308      	orrs	r0, r1
 80226a8:	f10c 0101 	add.w	r1, ip, #1
 80226ac:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80226b0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80226b4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80226b8:	ea40 000c 	orr.w	r0, r0, ip
 80226bc:	f8a8 0000 	strh.w	r0, [r8]
 80226c0:	e7a1      	b.n	8022606 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80226c2:	b017      	add	sp, #92	@ 0x5c
 80226c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080226c8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80226c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80226cc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 80226d0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80226d4:	2d00      	cmp	r5, #0
 80226d6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80226da:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80226de:	fb05 0e03 	mla	lr, r5, r3, r0
 80226e2:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 80226e6:	f2c0 80b0 	blt.w	802284a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80226ea:	45a9      	cmp	r9, r5
 80226ec:	f340 80ad 	ble.w	802284a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80226f0:	2800      	cmp	r0, #0
 80226f2:	f2c0 80a8 	blt.w	8022846 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80226f6:	4580      	cmp	r8, r0
 80226f8:	f340 80a5 	ble.w	8022846 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80226fc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022700:	f01e 0f01 	tst.w	lr, #1
 8022704:	5d16      	ldrb	r6, [r2, r4]
 8022706:	bf0c      	ite	eq
 8022708:	f006 060f 	andeq.w	r6, r6, #15
 802270c:	1136      	asrne	r6, r6, #4
 802270e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022712:	b2f6      	uxtb	r6, r6
 8022714:	1c44      	adds	r4, r0, #1
 8022716:	f100 809b 	bmi.w	8022850 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802271a:	45a0      	cmp	r8, r4
 802271c:	f340 8098 	ble.w	8022850 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8022720:	2f00      	cmp	r7, #0
 8022722:	f000 8097 	beq.w	8022854 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8022726:	f10e 0a01 	add.w	sl, lr, #1
 802272a:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802272e:	f01a 0f01 	tst.w	sl, #1
 8022732:	5d14      	ldrb	r4, [r2, r4]
 8022734:	bf0c      	ite	eq
 8022736:	f004 040f 	andeq.w	r4, r4, #15
 802273a:	1124      	asrne	r4, r4, #4
 802273c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022740:	b2e4      	uxtb	r4, r4
 8022742:	3501      	adds	r5, #1
 8022744:	f100 808a 	bmi.w	802285c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022748:	45a9      	cmp	r9, r5
 802274a:	f340 8087 	ble.w	802285c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802274e:	f1bc 0f00 	cmp.w	ip, #0
 8022752:	f000 8086 	beq.w	8022862 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8022756:	2800      	cmp	r0, #0
 8022758:	db7e      	blt.n	8022858 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802275a:	4580      	cmp	r8, r0
 802275c:	dd7c      	ble.n	8022858 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802275e:	eb03 090e 	add.w	r9, r3, lr
 8022762:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8022766:	f019 0f01 	tst.w	r9, #1
 802276a:	5d55      	ldrb	r5, [r2, r5]
 802276c:	bf0c      	ite	eq
 802276e:	f005 050f 	andeq.w	r5, r5, #15
 8022772:	112d      	asrne	r5, r5, #4
 8022774:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022778:	b2ed      	uxtb	r5, r5
 802277a:	3001      	adds	r0, #1
 802277c:	d474      	bmi.n	8022868 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802277e:	4580      	cmp	r8, r0
 8022780:	dd72      	ble.n	8022868 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022782:	2f00      	cmp	r7, #0
 8022784:	d072      	beq.n	802286c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8022786:	3301      	adds	r3, #1
 8022788:	449e      	add	lr, r3
 802278a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802278e:	f01e 0f01 	tst.w	lr, #1
 8022792:	5cd0      	ldrb	r0, [r2, r3]
 8022794:	bf0c      	ite	eq
 8022796:	f000 000f 	andeq.w	r0, r0, #15
 802279a:	1100      	asrne	r0, r0, #4
 802279c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80227a0:	b2c3      	uxtb	r3, r0
 80227a2:	b2ba      	uxth	r2, r7
 80227a4:	fa1f fc8c 	uxth.w	ip, ip
 80227a8:	fb02 f00c 	mul.w	r0, r2, ip
 80227ac:	0112      	lsls	r2, r2, #4
 80227ae:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80227b2:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80227b6:	1a12      	subs	r2, r2, r0
 80227b8:	fa1f fc8c 	uxth.w	ip, ip
 80227bc:	b292      	uxth	r2, r2
 80227be:	eba7 070c 	sub.w	r7, r7, ip
 80227c2:	4362      	muls	r2, r4
 80227c4:	b2bf      	uxth	r7, r7
 80227c6:	fb06 2207 	mla	r2, r6, r7, r2
 80227ca:	fb0c 2505 	mla	r5, ip, r5, r2
 80227ce:	fb00 5303 	mla	r3, r0, r3, r5
 80227d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80227d6:	b3a3      	cbz	r3, 8022842 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80227d8:	4a25      	ldr	r2, [pc, #148]	@ (8022870 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80227da:	880e      	ldrh	r6, [r1, #0]
 80227dc:	6815      	ldr	r5, [r2, #0]
 80227de:	b29a      	uxth	r2, r3
 80227e0:	1234      	asrs	r4, r6, #8
 80227e2:	43db      	mvns	r3, r3
 80227e4:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80227e8:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80227ec:	b2db      	uxtb	r3, r3
 80227ee:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80227f2:	fb10 f002 	smulbb	r0, r0, r2
 80227f6:	b2ed      	uxtb	r5, r5
 80227f8:	fb17 f702 	smulbb	r7, r7, r2
 80227fc:	fb04 0403 	mla	r4, r4, r3, r0
 8022800:	10f0      	asrs	r0, r6, #3
 8022802:	fb15 f202 	smulbb	r2, r5, r2
 8022806:	00f6      	lsls	r6, r6, #3
 8022808:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802280c:	b2a4      	uxth	r4, r4
 802280e:	b2f6      	uxtb	r6, r6
 8022810:	fb00 7003 	mla	r0, r0, r3, r7
 8022814:	fb06 2303 	mla	r3, r6, r3, r2
 8022818:	b280      	uxth	r0, r0
 802281a:	b29a      	uxth	r2, r3
 802281c:	1c63      	adds	r3, r4, #1
 802281e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022822:	1c53      	adds	r3, r2, #1
 8022824:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022828:	1c42      	adds	r2, r0, #1
 802282a:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802282e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022832:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022836:	0940      	lsrs	r0, r0, #5
 8022838:	4323      	orrs	r3, r4
 802283a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802283e:	4303      	orrs	r3, r0
 8022840:	800b      	strh	r3, [r1, #0]
 8022842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022846:	2600      	movs	r6, #0
 8022848:	e764      	b.n	8022714 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802284a:	2400      	movs	r4, #0
 802284c:	4626      	mov	r6, r4
 802284e:	e778      	b.n	8022742 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022850:	2400      	movs	r4, #0
 8022852:	e776      	b.n	8022742 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022854:	463c      	mov	r4, r7
 8022856:	e774      	b.n	8022742 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022858:	2500      	movs	r5, #0
 802285a:	e78e      	b.n	802277a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802285c:	2300      	movs	r3, #0
 802285e:	461d      	mov	r5, r3
 8022860:	e79f      	b.n	80227a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022862:	4663      	mov	r3, ip
 8022864:	4665      	mov	r5, ip
 8022866:	e79c      	b.n	80227a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022868:	2300      	movs	r3, #0
 802286a:	e79a      	b.n	80227a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802286c:	463b      	mov	r3, r7
 802286e:	e798      	b.n	80227a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022870:	20001dfc 	.word	0x20001dfc

08022874 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022878:	b093      	sub	sp, #76	@ 0x4c
 802287a:	461d      	mov	r5, r3
 802287c:	920c      	str	r2, [sp, #48]	@ 0x30
 802287e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022880:	9011      	str	r0, [sp, #68]	@ 0x44
 8022882:	9107      	str	r1, [sp, #28]
 8022884:	6850      	ldr	r0, [r2, #4]
 8022886:	6812      	ldr	r2, [r2, #0]
 8022888:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802288c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8022890:	fb00 1303 	mla	r3, r0, r3, r1
 8022894:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022898:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802289a:	689b      	ldr	r3, [r3, #8]
 802289c:	3301      	adds	r3, #1
 802289e:	f023 0301 	bic.w	r3, r3, #1
 80228a2:	9306      	str	r3, [sp, #24]
 80228a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80228a6:	681f      	ldr	r7, [r3, #0]
 80228a8:	9b07      	ldr	r3, [sp, #28]
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	dc03      	bgt.n	80228b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80228ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	f340 8267 	ble.w	8022d84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80228b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80228b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80228bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80228c0:	1e48      	subs	r0, r1, #1
 80228c2:	f102 3cff 	add.w	ip, r2, #4294967295
 80228c6:	2d00      	cmp	r5, #0
 80228c8:	f340 80b7 	ble.w	8022a3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80228cc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80228d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80228d4:	d406      	bmi.n	80228e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80228d6:	4586      	cmp	lr, r0
 80228d8:	da04      	bge.n	80228e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80228da:	2b00      	cmp	r3, #0
 80228dc:	db02      	blt.n	80228e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80228de:	4563      	cmp	r3, ip
 80228e0:	f2c0 80ac 	blt.w	8022a3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80228e4:	f11e 0e01 	adds.w	lr, lr, #1
 80228e8:	f100 809f 	bmi.w	8022a2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80228ec:	4571      	cmp	r1, lr
 80228ee:	f2c0 809c 	blt.w	8022a2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80228f2:	3301      	adds	r3, #1
 80228f4:	f100 8099 	bmi.w	8022a2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80228f8:	429a      	cmp	r2, r3
 80228fa:	f2c0 8096 	blt.w	8022a2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80228fe:	46c8      	mov	r8, r9
 8022900:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8022904:	9509      	str	r5, [sp, #36]	@ 0x24
 8022906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022908:	2b00      	cmp	r3, #0
 802290a:	f340 80b5 	ble.w	8022a78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802290e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022912:	1430      	asrs	r0, r6, #16
 8022914:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022918:	9308      	str	r3, [sp, #32]
 802291a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802291c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022920:	1423      	asrs	r3, r4, #16
 8022922:	f100 813f 	bmi.w	8022ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022926:	f10c 3bff 	add.w	fp, ip, #4294967295
 802292a:	455b      	cmp	r3, fp
 802292c:	f280 813a 	bge.w	8022ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022930:	2800      	cmp	r0, #0
 8022932:	f2c0 8137 	blt.w	8022ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022936:	f10e 3bff 	add.w	fp, lr, #4294967295
 802293a:	4558      	cmp	r0, fp
 802293c:	f280 8132 	bge.w	8022ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022940:	9a06      	ldr	r2, [sp, #24]
 8022942:	fb00 3302 	mla	r3, r0, r2, r3
 8022946:	0858      	lsrs	r0, r3, #1
 8022948:	07da      	lsls	r2, r3, #31
 802294a:	9a08      	ldr	r2, [sp, #32]
 802294c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022950:	bf54      	ite	pl
 8022952:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022956:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802295a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802295e:	fa5f fc8c 	uxtb.w	ip, ip
 8022962:	2a00      	cmp	r2, #0
 8022964:	f000 80cc 	beq.w	8022b00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022968:	1c58      	adds	r0, r3, #1
 802296a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802296e:	07c0      	lsls	r0, r0, #31
 8022970:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022974:	bf54      	ite	pl
 8022976:	f00e 0e0f 	andpl.w	lr, lr, #15
 802297a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802297e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022982:	fa5f fe8e 	uxtb.w	lr, lr
 8022986:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802298a:	b1b9      	cbz	r1, 80229bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802298c:	4453      	add	r3, sl
 802298e:	0858      	lsrs	r0, r3, #1
 8022990:	07da      	lsls	r2, r3, #31
 8022992:	5c38      	ldrb	r0, [r7, r0]
 8022994:	bf54      	ite	pl
 8022996:	f000 000f 	andpl.w	r0, r0, #15
 802299a:	1100      	asrmi	r0, r0, #4
 802299c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80229a0:	b2c0      	uxtb	r0, r0
 80229a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80229a4:	1c58      	adds	r0, r3, #1
 80229a6:	0843      	lsrs	r3, r0, #1
 80229a8:	07c2      	lsls	r2, r0, #31
 80229aa:	5cfb      	ldrb	r3, [r7, r3]
 80229ac:	bf54      	ite	pl
 80229ae:	f003 030f 	andpl.w	r3, r3, #15
 80229b2:	111b      	asrmi	r3, r3, #4
 80229b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80229b8:	b2db      	uxtb	r3, r3
 80229ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80229bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80229c0:	b289      	uxth	r1, r1
 80229c2:	fb02 f301 	mul.w	r3, r2, r1
 80229c6:	0112      	lsls	r2, r2, #4
 80229c8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80229cc:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80229d0:	1ad2      	subs	r2, r2, r3
 80229d2:	b289      	uxth	r1, r1
 80229d4:	b292      	uxth	r2, r2
 80229d6:	1a40      	subs	r0, r0, r1
 80229d8:	fa1f fe80 	uxth.w	lr, r0
 80229dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80229de:	4342      	muls	r2, r0
 80229e0:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80229e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80229e6:	fb01 c102 	mla	r1, r1, r2, ip
 80229ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80229ec:	fb03 1302 	mla	r3, r3, r2, r1
 80229f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80229f4:	2bff      	cmp	r3, #255	@ 0xff
 80229f6:	f040 8094 	bne.w	8022b22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80229fa:	4bbf      	ldr	r3, [pc, #764]	@ (8022cf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80229fc:	681a      	ldr	r2, [r3, #0]
 80229fe:	4bbf      	ldr	r3, [pc, #764]	@ (8022cfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022a00:	0951      	lsrs	r1, r2, #5
 8022a02:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022a06:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022a0a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022a0e:	430b      	orrs	r3, r1
 8022a10:	4313      	orrs	r3, r2
 8022a12:	f8a8 3000 	strh.w	r3, [r8]
 8022a16:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022a18:	f108 0802 	add.w	r8, r8, #2
 8022a1c:	441c      	add	r4, r3
 8022a1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022a20:	441e      	add	r6, r3
 8022a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a24:	3b01      	subs	r3, #1
 8022a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a28:	e76d      	b.n	8022906 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022a2a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022a2c:	3d01      	subs	r5, #1
 8022a2e:	f109 0902 	add.w	r9, r9, #2
 8022a32:	441c      	add	r4, r3
 8022a34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022a36:	441e      	add	r6, r3
 8022a38:	e745      	b.n	80228c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022a3a:	d021      	beq.n	8022a80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022a3c:	1e6b      	subs	r3, r5, #1
 8022a3e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022a40:	fb00 4003 	mla	r0, r0, r3, r4
 8022a44:	1400      	asrs	r0, r0, #16
 8022a46:	f53f af5a 	bmi.w	80228fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022a4a:	3901      	subs	r1, #1
 8022a4c:	4288      	cmp	r0, r1
 8022a4e:	f6bf af56 	bge.w	80228fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022a52:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022a54:	fb01 6303 	mla	r3, r1, r3, r6
 8022a58:	141b      	asrs	r3, r3, #16
 8022a5a:	f53f af50 	bmi.w	80228fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022a5e:	3a01      	subs	r2, #1
 8022a60:	4293      	cmp	r3, r2
 8022a62:	f6bf af4c 	bge.w	80228fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022a66:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8022a6a:	46a8      	mov	r8, r5
 8022a6c:	46ce      	mov	lr, r9
 8022a6e:	9308      	str	r3, [sp, #32]
 8022a70:	f1b8 0f00 	cmp.w	r8, #0
 8022a74:	f300 80b6 	bgt.w	8022be4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022a78:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022a7c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022a80:	9b07      	ldr	r3, [sp, #28]
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	f340 817e 	ble.w	8022d84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022a88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022a8c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022a8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a96:	eef0 6a62 	vmov.f32	s13, s5
 8022a9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022aa2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022aa6:	ee16 4a90 	vmov	r4, s13
 8022aaa:	eef0 6a43 	vmov.f32	s13, s6
 8022aae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ab2:	ee16 6a90 	vmov	r6, s13
 8022ab6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022aba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022abe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ac2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ac6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022aca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022ace:	ee12 2a90 	vmov	r2, s5
 8022ad2:	eef0 2a47 	vmov.f32	s5, s14
 8022ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ada:	ee13 2a10 	vmov	r2, s6
 8022ade:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022ae0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022ae2:	eeb0 3a67 	vmov.f32	s6, s15
 8022ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022aea:	9320      	str	r3, [sp, #128]	@ 0x80
 8022aec:	9b07      	ldr	r3, [sp, #28]
 8022aee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022af0:	3b01      	subs	r3, #1
 8022af2:	9307      	str	r3, [sp, #28]
 8022af4:	bf08      	it	eq
 8022af6:	4615      	moveq	r5, r2
 8022af8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022afa:	bf18      	it	ne
 8022afc:	461d      	movne	r5, r3
 8022afe:	e6d3      	b.n	80228a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022b00:	2900      	cmp	r1, #0
 8022b02:	f43f af5b 	beq.w	80229bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022b06:	eb0a 0003 	add.w	r0, sl, r3
 8022b0a:	0843      	lsrs	r3, r0, #1
 8022b0c:	07c0      	lsls	r0, r0, #31
 8022b0e:	5cfb      	ldrb	r3, [r7, r3]
 8022b10:	bf54      	ite	pl
 8022b12:	f003 030f 	andpl.w	r3, r3, #15
 8022b16:	111b      	asrmi	r3, r3, #4
 8022b18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022b1c:	b2db      	uxtb	r3, r3
 8022b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022b20:	e74c      	b.n	80229bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	f43f af77 	beq.w	8022a16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022b28:	4a73      	ldr	r2, [pc, #460]	@ (8022cf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022b2a:	fa1f fe83 	uxth.w	lr, r3
 8022b2e:	f8b8 c000 	ldrh.w	ip, [r8]
 8022b32:	43db      	mvns	r3, r3
 8022b34:	6810      	ldr	r0, [r2, #0]
 8022b36:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022b3a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022b3e:	b2db      	uxtb	r3, r3
 8022b40:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022b44:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022b48:	fb12 f20e 	smulbb	r2, r2, lr
 8022b4c:	b2c0      	uxtb	r0, r0
 8022b4e:	fb1b fb0e 	smulbb	fp, fp, lr
 8022b52:	fb01 2103 	mla	r1, r1, r3, r2
 8022b56:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022b5a:	fb10 fe0e 	smulbb	lr, r0, lr
 8022b5e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022b62:	b289      	uxth	r1, r1
 8022b64:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022b68:	fa5f fc8c 	uxtb.w	ip, ip
 8022b6c:	fb02 b203 	mla	r2, r2, r3, fp
 8022b70:	1c48      	adds	r0, r1, #1
 8022b72:	fb0c e303 	mla	r3, ip, r3, lr
 8022b76:	b292      	uxth	r2, r2
 8022b78:	b29b      	uxth	r3, r3
 8022b7a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022b7e:	f102 0b01 	add.w	fp, r2, #1
 8022b82:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8022b86:	1c59      	adds	r1, r3, #1
 8022b88:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022b8c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022b90:	0952      	lsrs	r2, r2, #5
 8022b92:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022b96:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022b9a:	4301      	orrs	r1, r0
 8022b9c:	4311      	orrs	r1, r2
 8022b9e:	f8a8 1000 	strh.w	r1, [r8]
 8022ba2:	e738      	b.n	8022a16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022ba4:	f113 0b01 	adds.w	fp, r3, #1
 8022ba8:	f53f af35 	bmi.w	8022a16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022bac:	45dc      	cmp	ip, fp
 8022bae:	f6ff af32 	blt.w	8022a16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022bb2:	f110 0b01 	adds.w	fp, r0, #1
 8022bb6:	f53f af2e 	bmi.w	8022a16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022bba:	45de      	cmp	lr, fp
 8022bbc:	f6ff af2b 	blt.w	8022a16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022bc0:	9302      	str	r3, [sp, #8]
 8022bc2:	fa0f f38e 	sxth.w	r3, lr
 8022bc6:	9a08      	ldr	r2, [sp, #32]
 8022bc8:	9301      	str	r3, [sp, #4]
 8022bca:	fa0f f38c 	sxth.w	r3, ip
 8022bce:	9105      	str	r1, [sp, #20]
 8022bd0:	4641      	mov	r1, r8
 8022bd2:	9300      	str	r3, [sp, #0]
 8022bd4:	4653      	mov	r3, sl
 8022bd6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022bda:	463a      	mov	r2, r7
 8022bdc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022bde:	f7ff fd73 	bl	80226c8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8022be2:	e718      	b.n	8022a16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022be4:	1422      	asrs	r2, r4, #16
 8022be6:	9906      	ldr	r1, [sp, #24]
 8022be8:	1433      	asrs	r3, r6, #16
 8022bea:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022bee:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022bf2:	fb01 2303 	mla	r3, r1, r3, r2
 8022bf6:	085a      	lsrs	r2, r3, #1
 8022bf8:	07d9      	lsls	r1, r3, #31
 8022bfa:	5cba      	ldrb	r2, [r7, r2]
 8022bfc:	bf54      	ite	pl
 8022bfe:	f002 020f 	andpl.w	r2, r2, #15
 8022c02:	1112      	asrmi	r2, r2, #4
 8022c04:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022c08:	b2d2      	uxtb	r2, r2
 8022c0a:	2800      	cmp	r0, #0
 8022c0c:	d063      	beq.n	8022cd6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022c0e:	f103 0a01 	add.w	sl, r3, #1
 8022c12:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022c16:	f01a 0f01 	tst.w	sl, #1
 8022c1a:	5c79      	ldrb	r1, [r7, r1]
 8022c1c:	bf0c      	ite	eq
 8022c1e:	f001 010f 	andeq.w	r1, r1, #15
 8022c22:	1109      	asrne	r1, r1, #4
 8022c24:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022c28:	b2c9      	uxtb	r1, r1
 8022c2a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022c2c:	f1bc 0f00 	cmp.w	ip, #0
 8022c30:	d01a      	beq.n	8022c68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022c32:	9908      	ldr	r1, [sp, #32]
 8022c34:	440b      	add	r3, r1
 8022c36:	0859      	lsrs	r1, r3, #1
 8022c38:	f013 0f01 	tst.w	r3, #1
 8022c3c:	f103 0301 	add.w	r3, r3, #1
 8022c40:	5c79      	ldrb	r1, [r7, r1]
 8022c42:	bf0c      	ite	eq
 8022c44:	f001 010f 	andeq.w	r1, r1, #15
 8022c48:	1109      	asrne	r1, r1, #4
 8022c4a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022c4e:	b2c9      	uxtb	r1, r1
 8022c50:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022c52:	0859      	lsrs	r1, r3, #1
 8022c54:	07db      	lsls	r3, r3, #31
 8022c56:	5c79      	ldrb	r1, [r7, r1]
 8022c58:	bf54      	ite	pl
 8022c5a:	f001 010f 	andpl.w	r1, r1, #15
 8022c5e:	1109      	asrmi	r1, r1, #4
 8022c60:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022c64:	b2c9      	uxtb	r1, r1
 8022c66:	9110      	str	r1, [sp, #64]	@ 0x40
 8022c68:	b280      	uxth	r0, r0
 8022c6a:	fa1f fc8c 	uxth.w	ip, ip
 8022c6e:	fb00 f30c 	mul.w	r3, r0, ip
 8022c72:	0100      	lsls	r0, r0, #4
 8022c74:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022c78:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8022c7c:	1ac0      	subs	r0, r0, r3
 8022c7e:	fa1f fc8c 	uxth.w	ip, ip
 8022c82:	b280      	uxth	r0, r0
 8022c84:	eba1 010c 	sub.w	r1, r1, ip
 8022c88:	fa1f fa81 	uxth.w	sl, r1
 8022c8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022c8e:	4348      	muls	r0, r1
 8022c90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022c92:	fb02 020a 	mla	r2, r2, sl, r0
 8022c96:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022c9a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022c9c:	fb03 c302 	mla	r3, r3, r2, ip
 8022ca0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022ca4:	2bff      	cmp	r3, #255	@ 0xff
 8022ca6:	d12b      	bne.n	8022d00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8022ca8:	4b13      	ldr	r3, [pc, #76]	@ (8022cf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022caa:	681a      	ldr	r2, [r3, #0]
 8022cac:	4b13      	ldr	r3, [pc, #76]	@ (8022cfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022cae:	0951      	lsrs	r1, r2, #5
 8022cb0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022cb4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022cb8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022cbc:	430b      	orrs	r3, r1
 8022cbe:	4313      	orrs	r3, r2
 8022cc0:	f8ae 3000 	strh.w	r3, [lr]
 8022cc4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022cc6:	f10e 0e02 	add.w	lr, lr, #2
 8022cca:	f108 38ff 	add.w	r8, r8, #4294967295
 8022cce:	441c      	add	r4, r3
 8022cd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022cd2:	441e      	add	r6, r3
 8022cd4:	e6cc      	b.n	8022a70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022cd6:	f1bc 0f00 	cmp.w	ip, #0
 8022cda:	d0c5      	beq.n	8022c68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022cdc:	9908      	ldr	r1, [sp, #32]
 8022cde:	440b      	add	r3, r1
 8022ce0:	0859      	lsrs	r1, r3, #1
 8022ce2:	07db      	lsls	r3, r3, #31
 8022ce4:	5c79      	ldrb	r1, [r7, r1]
 8022ce6:	bf54      	ite	pl
 8022ce8:	f001 010f 	andpl.w	r1, r1, #15
 8022cec:	1109      	asrmi	r1, r1, #4
 8022cee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022cf2:	b2c9      	uxtb	r1, r1
 8022cf4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022cf6:	e7b7      	b.n	8022c68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022cf8:	20001dfc 	.word	0x20001dfc
 8022cfc:	fffff800 	.word	0xfffff800
 8022d00:	2b00      	cmp	r3, #0
 8022d02:	d0df      	beq.n	8022cc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8022d04:	4a21      	ldr	r2, [pc, #132]	@ (8022d8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8022d06:	fa1f fa83 	uxth.w	sl, r3
 8022d0a:	f8be c000 	ldrh.w	ip, [lr]
 8022d0e:	43db      	mvns	r3, r3
 8022d10:	6810      	ldr	r0, [r2, #0]
 8022d12:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022d16:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022d1a:	b2db      	uxtb	r3, r3
 8022d1c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022d20:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022d24:	fb12 f20a 	smulbb	r2, r2, sl
 8022d28:	b2c0      	uxtb	r0, r0
 8022d2a:	fb1b fb0a 	smulbb	fp, fp, sl
 8022d2e:	fb01 2103 	mla	r1, r1, r3, r2
 8022d32:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022d36:	fb10 f00a 	smulbb	r0, r0, sl
 8022d3a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022d3e:	b289      	uxth	r1, r1
 8022d40:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022d44:	fa5f fc8c 	uxtb.w	ip, ip
 8022d48:	fb02 b203 	mla	r2, r2, r3, fp
 8022d4c:	fb0c 0003 	mla	r0, ip, r3, r0
 8022d50:	1c4b      	adds	r3, r1, #1
 8022d52:	b292      	uxth	r2, r2
 8022d54:	b280      	uxth	r0, r0
 8022d56:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022d5a:	f100 0b01 	add.w	fp, r0, #1
 8022d5e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8022d62:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8022d66:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8022d6a:	ea4b 0101 	orr.w	r1, fp, r1
 8022d6e:	f102 0b01 	add.w	fp, r2, #1
 8022d72:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022d76:	0952      	lsrs	r2, r2, #5
 8022d78:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022d7c:	4311      	orrs	r1, r2
 8022d7e:	f8ae 1000 	strh.w	r1, [lr]
 8022d82:	e79f      	b.n	8022cc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8022d84:	b013      	add	sp, #76	@ 0x4c
 8022d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d8a:	bf00      	nop
 8022d8c:	20001dfc 	.word	0x20001dfc

08022d90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8022d90:	b570      	push	{r4, r5, r6, lr}
 8022d92:	1208      	asrs	r0, r1, #8
 8022d94:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8022d98:	b29e      	uxth	r6, r3
 8022d9a:	1213      	asrs	r3, r2, #8
 8022d9c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022da0:	10cc      	asrs	r4, r1, #3
 8022da2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8022da6:	00c9      	lsls	r1, r1, #3
 8022da8:	fb10 f006 	smulbb	r0, r0, r6
 8022dac:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022db0:	fb13 f305 	smulbb	r3, r3, r5
 8022db4:	fb14 f406 	smulbb	r4, r4, r6
 8022db8:	4418      	add	r0, r3
 8022dba:	10d3      	asrs	r3, r2, #3
 8022dbc:	00d2      	lsls	r2, r2, #3
 8022dbe:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8022dc2:	b280      	uxth	r0, r0
 8022dc4:	b2d2      	uxtb	r2, r2
 8022dc6:	fb13 f305 	smulbb	r3, r3, r5
 8022dca:	fb12 f205 	smulbb	r2, r2, r5
 8022dce:	441c      	add	r4, r3
 8022dd0:	b2cb      	uxtb	r3, r1
 8022dd2:	fb13 f306 	smulbb	r3, r3, r6
 8022dd6:	b2a4      	uxth	r4, r4
 8022dd8:	4413      	add	r3, r2
 8022dda:	1c42      	adds	r2, r0, #1
 8022ddc:	b29b      	uxth	r3, r3
 8022dde:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022de2:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8022de6:	1c58      	adds	r0, r3, #1
 8022de8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022dec:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022df0:	4310      	orrs	r0, r2
 8022df2:	1c62      	adds	r2, r4, #1
 8022df4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022df8:	0964      	lsrs	r4, r4, #5
 8022dfa:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8022dfe:	4320      	orrs	r0, r4
 8022e00:	bd70      	pop	{r4, r5, r6, pc}
	...

08022e04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8022e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e08:	b08f      	sub	sp, #60	@ 0x3c
 8022e0a:	461c      	mov	r4, r3
 8022e0c:	460d      	mov	r5, r1
 8022e0e:	4616      	mov	r6, r2
 8022e10:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8022e14:	9004      	str	r0, [sp, #16]
 8022e16:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022e18:	2f00      	cmp	r7, #0
 8022e1a:	f000 80f6 	beq.w	802300a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8022e1e:	6820      	ldr	r0, [r4, #0]
 8022e20:	aa0a      	add	r2, sp, #40	@ 0x28
 8022e22:	6861      	ldr	r1, [r4, #4]
 8022e24:	f04f 0802 	mov.w	r8, #2
 8022e28:	3604      	adds	r6, #4
 8022e2a:	c203      	stmia	r2!, {r0, r1}
 8022e2c:	6818      	ldr	r0, [r3, #0]
 8022e2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8022e30:	6859      	ldr	r1, [r3, #4]
 8022e32:	c203      	stmia	r2!, {r0, r1}
 8022e34:	a80a      	add	r0, sp, #40	@ 0x28
 8022e36:	f7ef fb9d 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022e3a:	4621      	mov	r1, r4
 8022e3c:	a80c      	add	r0, sp, #48	@ 0x30
 8022e3e:	f7ef fbc1 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022e42:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022e46:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8022e4a:	f002 0301 	and.w	r3, r2, #1
 8022e4e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8022e52:	9306      	str	r3, [sp, #24]
 8022e54:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022e58:	f003 0101 	and.w	r1, r3, #1
 8022e5c:	9105      	str	r1, [sp, #20]
 8022e5e:	9805      	ldr	r0, [sp, #20]
 8022e60:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8022e64:	4403      	add	r3, r0
 8022e66:	fb01 2303 	mla	r3, r1, r3, r2
 8022e6a:	fb93 f3f8 	sdiv	r3, r3, r8
 8022e6e:	441d      	add	r5, r3
 8022e70:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8022e74:	441a      	add	r2, r3
 8022e76:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8022e7a:	4419      	add	r1, r3
 8022e7c:	4b64      	ldr	r3, [pc, #400]	@ (8023010 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8022e7e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8022e82:	6818      	ldr	r0, [r3, #0]
 8022e84:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8022e88:	6803      	ldr	r3, [r0, #0]
 8022e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022e8c:	4798      	blx	r3
 8022e8e:	4a61      	ldr	r2, [pc, #388]	@ (8023014 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8022e90:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8022e94:	2fff      	cmp	r7, #255	@ 0xff
 8022e96:	8813      	ldrh	r3, [r2, #0]
 8022e98:	4611      	mov	r1, r2
 8022e9a:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8022e9e:	fb03 fb0b 	mul.w	fp, r3, fp
 8022ea2:	fb03 a404 	mla	r4, r3, r4, sl
 8022ea6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8022eaa:	d06b      	beq.n	8022f84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8022eac:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8022eb0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8022eb4:	9303      	str	r3, [sp, #12]
 8022eb6:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8022eba:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8022ebe:	9b07      	ldr	r3, [sp, #28]
 8022ec0:	42a3      	cmp	r3, r4
 8022ec2:	f240 809d 	bls.w	8023000 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8022ec6:	9b06      	ldr	r3, [sp, #24]
 8022ec8:	2b00      	cmp	r3, #0
 8022eca:	d039      	beq.n	8022f40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8022ecc:	782b      	ldrb	r3, [r5, #0]
 8022ece:	f105 0801 	add.w	r8, r5, #1
 8022ed2:	f109 3bff 	add.w	fp, r9, #4294967295
 8022ed6:	8822      	ldrh	r2, [r4, #0]
 8022ed8:	f003 030f 	and.w	r3, r3, #15
 8022edc:	9804      	ldr	r0, [sp, #16]
 8022ede:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8022ee2:	9b03      	ldr	r3, [sp, #12]
 8022ee4:	9300      	str	r3, [sp, #0]
 8022ee6:	463b      	mov	r3, r7
 8022ee8:	f7ff ff52 	bl	8022d90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8022eec:	f824 0b02 	strh.w	r0, [r4], #2
 8022ef0:	f1bb 0f01 	cmp.w	fp, #1
 8022ef4:	46a2      	mov	sl, r4
 8022ef6:	f104 0404 	add.w	r4, r4, #4
 8022efa:	dd24      	ble.n	8022f46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8022efc:	f898 3000 	ldrb.w	r3, [r8]
 8022f00:	f1ab 0b02 	sub.w	fp, fp, #2
 8022f04:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8022f08:	091b      	lsrs	r3, r3, #4
 8022f0a:	9804      	ldr	r0, [sp, #16]
 8022f0c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8022f10:	9b03      	ldr	r3, [sp, #12]
 8022f12:	9300      	str	r3, [sp, #0]
 8022f14:	463b      	mov	r3, r7
 8022f16:	f7ff ff3b 	bl	8022d90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8022f1a:	f824 0c04 	strh.w	r0, [r4, #-4]
 8022f1e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022f22:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8022f26:	f003 030f 	and.w	r3, r3, #15
 8022f2a:	9804      	ldr	r0, [sp, #16]
 8022f2c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8022f30:	9b03      	ldr	r3, [sp, #12]
 8022f32:	9300      	str	r3, [sp, #0]
 8022f34:	463b      	mov	r3, r7
 8022f36:	f7ff ff2b 	bl	8022d90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8022f3a:	f824 0c02 	strh.w	r0, [r4, #-2]
 8022f3e:	e7d7      	b.n	8022ef0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8022f40:	46a8      	mov	r8, r5
 8022f42:	46cb      	mov	fp, r9
 8022f44:	e7d4      	b.n	8022ef0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8022f46:	d10e      	bne.n	8022f66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8022f48:	f898 3000 	ldrb.w	r3, [r8]
 8022f4c:	f8ba 2000 	ldrh.w	r2, [sl]
 8022f50:	091b      	lsrs	r3, r3, #4
 8022f52:	9804      	ldr	r0, [sp, #16]
 8022f54:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8022f58:	9b03      	ldr	r3, [sp, #12]
 8022f5a:	9300      	str	r3, [sp, #0]
 8022f5c:	463b      	mov	r3, r7
 8022f5e:	f7ff ff17 	bl	8022d90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8022f62:	f82a 0b02 	strh.w	r0, [sl], #2
 8022f66:	9b08      	ldr	r3, [sp, #32]
 8022f68:	9a05      	ldr	r2, [sp, #20]
 8022f6a:	881c      	ldrh	r4, [r3, #0]
 8022f6c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022f70:	eba4 0409 	sub.w	r4, r4, r9
 8022f74:	4413      	add	r3, r2
 8022f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022f78:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8022f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022f80:	441d      	add	r5, r3
 8022f82:	e79c      	b.n	8022ebe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8022f84:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8022f88:	45a3      	cmp	fp, r4
 8022f8a:	d939      	bls.n	8023000 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8022f8c:	9b06      	ldr	r3, [sp, #24]
 8022f8e:	b1fb      	cbz	r3, 8022fd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8022f90:	782b      	ldrb	r3, [r5, #0]
 8022f92:	1c6a      	adds	r2, r5, #1
 8022f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8022f98:	3402      	adds	r4, #2
 8022f9a:	f003 030f 	and.w	r3, r3, #15
 8022f9e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022fa2:	f824 3c02 	strh.w	r3, [r4, #-2]
 8022fa6:	2801      	cmp	r0, #1
 8022fa8:	4623      	mov	r3, r4
 8022faa:	f104 0404 	add.w	r4, r4, #4
 8022fae:	dd12      	ble.n	8022fd6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8022fb0:	7813      	ldrb	r3, [r2, #0]
 8022fb2:	3802      	subs	r0, #2
 8022fb4:	091b      	lsrs	r3, r3, #4
 8022fb6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022fba:	f824 3c04 	strh.w	r3, [r4, #-4]
 8022fbe:	f812 3b01 	ldrb.w	r3, [r2], #1
 8022fc2:	f003 030f 	and.w	r3, r3, #15
 8022fc6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022fca:	f824 3c02 	strh.w	r3, [r4, #-2]
 8022fce:	e7ea      	b.n	8022fa6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8022fd0:	462a      	mov	r2, r5
 8022fd2:	4648      	mov	r0, r9
 8022fd4:	e7e7      	b.n	8022fa6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8022fd6:	d106      	bne.n	8022fe6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8022fd8:	7812      	ldrb	r2, [r2, #0]
 8022fda:	3302      	adds	r3, #2
 8022fdc:	0912      	lsrs	r2, r2, #4
 8022fde:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022fe2:	f823 2c02 	strh.w	r2, [r3, #-2]
 8022fe6:	880c      	ldrh	r4, [r1, #0]
 8022fe8:	9a05      	ldr	r2, [sp, #20]
 8022fea:	eba4 0409 	sub.w	r4, r4, r9
 8022fee:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8022ff2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022ff6:	4413      	add	r3, r2
 8022ff8:	fb93 f3f8 	sdiv	r3, r3, r8
 8022ffc:	441d      	add	r5, r3
 8022ffe:	e7c3      	b.n	8022f88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8023000:	4b03      	ldr	r3, [pc, #12]	@ (8023010 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8023002:	6818      	ldr	r0, [r3, #0]
 8023004:	6803      	ldr	r3, [r0, #0]
 8023006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023008:	4798      	blx	r3
 802300a:	b00f      	add	sp, #60	@ 0x3c
 802300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023010:	20001df4 	.word	0x20001df4
 8023014:	20001dee 	.word	0x20001dee

08023018 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8023018:	b5f0      	push	{r4, r5, r6, r7, lr}
 802301a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802301e:	0a0f      	lsrs	r7, r1, #8
 8023020:	2dff      	cmp	r5, #255	@ 0xff
 8023022:	d10c      	bne.n	802303e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8023024:	2bff      	cmp	r3, #255	@ 0xff
 8023026:	d10a      	bne.n	802303e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8023028:	0948      	lsrs	r0, r1, #5
 802302a:	4b25      	ldr	r3, [pc, #148]	@ (80230c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802302c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023030:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023034:	403b      	ands	r3, r7
 8023036:	4318      	orrs	r0, r3
 8023038:	4308      	orrs	r0, r1
 802303a:	b280      	uxth	r0, r0
 802303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802303e:	fb15 f503 	smulbb	r5, r5, r3
 8023042:	1214      	asrs	r4, r2, #8
 8023044:	10d6      	asrs	r6, r2, #3
 8023046:	b2ab      	uxth	r3, r5
 8023048:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802304c:	00d0      	lsls	r0, r2, #3
 802304e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8023052:	1c5d      	adds	r5, r3, #1
 8023054:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8023058:	b2c0      	uxtb	r0, r0
 802305a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802305e:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8023062:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8023066:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802306a:	fa1f fc85 	uxth.w	ip, r5
 802306e:	43ed      	mvns	r5, r5
 8023070:	fb12 f20c 	smulbb	r2, r2, ip
 8023074:	b2eb      	uxtb	r3, r5
 8023076:	b2fd      	uxtb	r5, r7
 8023078:	fb04 2403 	mla	r4, r4, r3, r2
 802307c:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8023080:	fb15 f50c 	smulbb	r5, r5, ip
 8023084:	b2c8      	uxtb	r0, r1
 8023086:	b2a4      	uxth	r4, r4
 8023088:	fb10 f00c 	smulbb	r0, r0, ip
 802308c:	fb06 5503 	mla	r5, r6, r3, r5
 8023090:	fb02 0003 	mla	r0, r2, r3, r0
 8023094:	b2ad      	uxth	r5, r5
 8023096:	b283      	uxth	r3, r0
 8023098:	1c60      	adds	r0, r4, #1
 802309a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802309e:	1c58      	adds	r0, r3, #1
 80230a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80230a4:	1c6b      	adds	r3, r5, #1
 80230a6:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80230aa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80230ae:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80230b2:	096d      	lsrs	r5, r5, #5
 80230b4:	4320      	orrs	r0, r4
 80230b6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80230ba:	4328      	orrs	r0, r5
 80230bc:	e7be      	b.n	802303c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 80230be:	bf00      	nop
 80230c0:	00fff800 	.word	0x00fff800

080230c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80230c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230c8:	461c      	mov	r4, r3
 80230ca:	b08d      	sub	sp, #52	@ 0x34
 80230cc:	460d      	mov	r5, r1
 80230ce:	4616      	mov	r6, r2
 80230d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80230d2:	4680      	mov	r8, r0
 80230d4:	6861      	ldr	r1, [r4, #4]
 80230d6:	aa08      	add	r2, sp, #32
 80230d8:	6820      	ldr	r0, [r4, #0]
 80230da:	f04f 0a02 	mov.w	sl, #2
 80230de:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 80230e2:	3604      	adds	r6, #4
 80230e4:	c203      	stmia	r2!, {r0, r1}
 80230e6:	6818      	ldr	r0, [r3, #0]
 80230e8:	aa0a      	add	r2, sp, #40	@ 0x28
 80230ea:	6859      	ldr	r1, [r3, #4]
 80230ec:	c203      	stmia	r2!, {r0, r1}
 80230ee:	a808      	add	r0, sp, #32
 80230f0:	f7ef fa40 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80230f4:	4621      	mov	r1, r4
 80230f6:	a80a      	add	r0, sp, #40	@ 0x28
 80230f8:	f7ef fa64 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80230fc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8023100:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8023104:	f002 0301 	and.w	r3, r2, #1
 8023108:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802310c:	9303      	str	r3, [sp, #12]
 802310e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8023112:	f003 0101 	and.w	r1, r3, #1
 8023116:	9102      	str	r1, [sp, #8]
 8023118:	9802      	ldr	r0, [sp, #8]
 802311a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802311e:	4403      	add	r3, r0
 8023120:	fb01 2303 	mla	r3, r1, r3, r2
 8023124:	fb93 f3fa 	sdiv	r3, r3, sl
 8023128:	441d      	add	r5, r3
 802312a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802312e:	441a      	add	r2, r3
 8023130:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8023134:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8023138:	4419      	add	r1, r3
 802313a:	4a3e      	ldr	r2, [pc, #248]	@ (8023234 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802313c:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8023140:	6810      	ldr	r0, [r2, #0]
 8023142:	9205      	str	r2, [sp, #20]
 8023144:	6803      	ldr	r3, [r0, #0]
 8023146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023148:	4798      	blx	r3
 802314a:	4b3b      	ldr	r3, [pc, #236]	@ (8023238 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802314c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8023150:	8819      	ldrh	r1, [r3, #0]
 8023152:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8023156:	434f      	muls	r7, r1
 8023158:	fb01 c404 	mla	r4, r1, r4, ip
 802315c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8023160:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8023164:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8023168:	9204      	str	r2, [sp, #16]
 802316a:	9b04      	ldr	r3, [sp, #16]
 802316c:	429c      	cmp	r4, r3
 802316e:	d258      	bcs.n	8023222 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8023170:	9b03      	ldr	r3, [sp, #12]
 8023172:	2b00      	cmp	r3, #0
 8023174:	d034      	beq.n	80231e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8023176:	782b      	ldrb	r3, [r5, #0]
 8023178:	1c6f      	adds	r7, r5, #1
 802317a:	f003 030f 	and.w	r3, r3, #15
 802317e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8023182:	0e0b      	lsrs	r3, r1, #24
 8023184:	d006      	beq.n	8023194 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8023186:	8822      	ldrh	r2, [r4, #0]
 8023188:	4640      	mov	r0, r8
 802318a:	9300      	str	r3, [sp, #0]
 802318c:	464b      	mov	r3, r9
 802318e:	f7ff ff43 	bl	8023018 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8023192:	8020      	strh	r0, [r4, #0]
 8023194:	3402      	adds	r4, #2
 8023196:	f10b 3aff 	add.w	sl, fp, #4294967295
 802319a:	f1ba 0f01 	cmp.w	sl, #1
 802319e:	dd22      	ble.n	80231e6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80231a0:	783b      	ldrb	r3, [r7, #0]
 80231a2:	091b      	lsrs	r3, r3, #4
 80231a4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80231a8:	0e0b      	lsrs	r3, r1, #24
 80231aa:	d006      	beq.n	80231ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 80231ac:	8822      	ldrh	r2, [r4, #0]
 80231ae:	4640      	mov	r0, r8
 80231b0:	9300      	str	r3, [sp, #0]
 80231b2:	464b      	mov	r3, r9
 80231b4:	f7ff ff30 	bl	8023018 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80231b8:	8020      	strh	r0, [r4, #0]
 80231ba:	f817 3b01 	ldrb.w	r3, [r7], #1
 80231be:	f003 030f 	and.w	r3, r3, #15
 80231c2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80231c6:	0e0b      	lsrs	r3, r1, #24
 80231c8:	d006      	beq.n	80231d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 80231ca:	8862      	ldrh	r2, [r4, #2]
 80231cc:	4640      	mov	r0, r8
 80231ce:	9300      	str	r3, [sp, #0]
 80231d0:	464b      	mov	r3, r9
 80231d2:	f7ff ff21 	bl	8023018 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80231d6:	8060      	strh	r0, [r4, #2]
 80231d8:	3404      	adds	r4, #4
 80231da:	f1aa 0a02 	sub.w	sl, sl, #2
 80231de:	e7dc      	b.n	802319a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80231e0:	462f      	mov	r7, r5
 80231e2:	46da      	mov	sl, fp
 80231e4:	e7d9      	b.n	802319a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80231e6:	d10d      	bne.n	8023204 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 80231e8:	783b      	ldrb	r3, [r7, #0]
 80231ea:	091b      	lsrs	r3, r3, #4
 80231ec:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80231f0:	0e0b      	lsrs	r3, r1, #24
 80231f2:	d006      	beq.n	8023202 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80231f4:	8822      	ldrh	r2, [r4, #0]
 80231f6:	4640      	mov	r0, r8
 80231f8:	9300      	str	r3, [sp, #0]
 80231fa:	464b      	mov	r3, r9
 80231fc:	f7ff ff0c 	bl	8023018 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8023200:	8020      	strh	r0, [r4, #0]
 8023202:	3402      	adds	r4, #2
 8023204:	9b06      	ldr	r3, [sp, #24]
 8023206:	9a02      	ldr	r2, [sp, #8]
 8023208:	881b      	ldrh	r3, [r3, #0]
 802320a:	eba3 030b 	sub.w	r3, r3, fp
 802320e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8023212:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8023216:	4413      	add	r3, r2
 8023218:	9a07      	ldr	r2, [sp, #28]
 802321a:	fb93 f3f2 	sdiv	r3, r3, r2
 802321e:	441d      	add	r5, r3
 8023220:	e7a3      	b.n	802316a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8023222:	9b05      	ldr	r3, [sp, #20]
 8023224:	6818      	ldr	r0, [r3, #0]
 8023226:	6803      	ldr	r3, [r0, #0]
 8023228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802322a:	4798      	blx	r3
 802322c:	b00d      	add	sp, #52	@ 0x34
 802322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023232:	bf00      	nop
 8023234:	20001df4 	.word	0x20001df4
 8023238:	20001dee 	.word	0x20001dee

0802323c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802323c:	b570      	push	{r4, r5, r6, lr}
 802323e:	1214      	asrs	r4, r2, #8
 8023240:	788d      	ldrb	r5, [r1, #2]
 8023242:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8023246:	10d0      	asrs	r0, r2, #3
 8023248:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802324c:	00d2      	lsls	r2, r2, #3
 802324e:	fb15 f503 	smulbb	r5, r5, r3
 8023252:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023256:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802325a:	b2d2      	uxtb	r2, r2
 802325c:	fb04 5506 	mla	r5, r4, r6, r5
 8023260:	784c      	ldrb	r4, [r1, #1]
 8023262:	7809      	ldrb	r1, [r1, #0]
 8023264:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8023268:	fb14 f403 	smulbb	r4, r4, r3
 802326c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023270:	fb11 f303 	smulbb	r3, r1, r3
 8023274:	b2ad      	uxth	r5, r5
 8023276:	fb00 4406 	mla	r4, r0, r6, r4
 802327a:	fb02 3306 	mla	r3, r2, r6, r3
 802327e:	1c68      	adds	r0, r5, #1
 8023280:	b2a4      	uxth	r4, r4
 8023282:	b29b      	uxth	r3, r3
 8023284:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8023288:	1c62      	adds	r2, r4, #1
 802328a:	1c58      	adds	r0, r3, #1
 802328c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8023290:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023294:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023298:	0964      	lsrs	r4, r4, #5
 802329a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802329e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80232a2:	4328      	orrs	r0, r5
 80232a4:	4320      	orrs	r0, r4
 80232a6:	bd70      	pop	{r4, r5, r6, pc}

080232a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80232a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232ac:	b08f      	sub	sp, #60	@ 0x3c
 80232ae:	461c      	mov	r4, r3
 80232b0:	4682      	mov	sl, r0
 80232b2:	460e      	mov	r6, r1
 80232b4:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80232b8:	4615      	mov	r5, r2
 80232ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80232bc:	2f00      	cmp	r7, #0
 80232be:	f000 8141 	beq.w	8023544 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 80232c2:	6820      	ldr	r0, [r4, #0]
 80232c4:	aa0a      	add	r2, sp, #40	@ 0x28
 80232c6:	6861      	ldr	r1, [r4, #4]
 80232c8:	f04f 0802 	mov.w	r8, #2
 80232cc:	3504      	adds	r5, #4
 80232ce:	c203      	stmia	r2!, {r0, r1}
 80232d0:	6818      	ldr	r0, [r3, #0]
 80232d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80232d4:	6859      	ldr	r1, [r3, #4]
 80232d6:	c203      	stmia	r2!, {r0, r1}
 80232d8:	a80a      	add	r0, sp, #40	@ 0x28
 80232da:	f7ef f94b 	bl	8012574 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80232de:	4621      	mov	r1, r4
 80232e0:	a80c      	add	r0, sp, #48	@ 0x30
 80232e2:	f7ef f96f 	bl	80125c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80232e6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80232ea:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80232ee:	f002 0301 	and.w	r3, r2, #1
 80232f2:	9306      	str	r3, [sp, #24]
 80232f4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80232f8:	f003 0101 	and.w	r1, r3, #1
 80232fc:	9105      	str	r1, [sp, #20]
 80232fe:	9805      	ldr	r0, [sp, #20]
 8023300:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8023304:	4403      	add	r3, r0
 8023306:	fb01 2303 	mla	r3, r1, r3, r2
 802330a:	fb93 f3f8 	sdiv	r3, r3, r8
 802330e:	441e      	add	r6, r3
 8023310:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8023314:	441a      	add	r2, r3
 8023316:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802331a:	4419      	add	r1, r3
 802331c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8023320:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8023324:	9303      	str	r3, [sp, #12]
 8023326:	4b89      	ldr	r3, [pc, #548]	@ (802354c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8023328:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802332c:	6818      	ldr	r0, [r3, #0]
 802332e:	6803      	ldr	r3, [r0, #0]
 8023330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023332:	4798      	blx	r3
 8023334:	4a86      	ldr	r2, [pc, #536]	@ (8023550 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8023336:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802333a:	2fff      	cmp	r7, #255	@ 0xff
 802333c:	8813      	ldrh	r3, [r2, #0]
 802333e:	4694      	mov	ip, r2
 8023340:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8023344:	fb03 9404 	mla	r4, r3, r4, r9
 8023348:	fb03 f30b 	mul.w	r3, r3, fp
 802334c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8023350:	d071      	beq.n	8023436 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8023352:	43f9      	mvns	r1, r7
 8023354:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023358:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802335c:	b2c9      	uxtb	r1, r1
 802335e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8023362:	9104      	str	r1, [sp, #16]
 8023364:	9b07      	ldr	r3, [sp, #28]
 8023366:	42a3      	cmp	r3, r4
 8023368:	f240 80e7 	bls.w	802353a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802336c:	9b06      	ldr	r3, [sp, #24]
 802336e:	2b00      	cmp	r3, #0
 8023370:	d03d      	beq.n	80233ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8023372:	7831      	ldrb	r1, [r6, #0]
 8023374:	4650      	mov	r0, sl
 8023376:	9b04      	ldr	r3, [sp, #16]
 8023378:	f106 0801 	add.w	r8, r6, #1
 802337c:	f001 010f 	and.w	r1, r1, #15
 8023380:	8822      	ldrh	r2, [r4, #0]
 8023382:	9300      	str	r3, [sp, #0]
 8023384:	463b      	mov	r3, r7
 8023386:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802338a:	4429      	add	r1, r5
 802338c:	f7ff ff56 	bl	802323c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8023390:	9b03      	ldr	r3, [sp, #12]
 8023392:	f824 0b02 	strh.w	r0, [r4], #2
 8023396:	f103 3bff 	add.w	fp, r3, #4294967295
 802339a:	f1bb 0f01 	cmp.w	fp, #1
 802339e:	46a1      	mov	r9, r4
 80233a0:	f104 0404 	add.w	r4, r4, #4
 80233a4:	dd27      	ble.n	80233f6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 80233a6:	f898 1000 	ldrb.w	r1, [r8]
 80233aa:	4650      	mov	r0, sl
 80233ac:	9b04      	ldr	r3, [sp, #16]
 80233ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80233b2:	0909      	lsrs	r1, r1, #4
 80233b4:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80233b8:	9300      	str	r3, [sp, #0]
 80233ba:	463b      	mov	r3, r7
 80233bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80233c0:	4429      	add	r1, r5
 80233c2:	f7ff ff3b 	bl	802323c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80233c6:	f824 0c04 	strh.w	r0, [r4, #-4]
 80233ca:	f818 1b01 	ldrb.w	r1, [r8], #1
 80233ce:	4650      	mov	r0, sl
 80233d0:	9b04      	ldr	r3, [sp, #16]
 80233d2:	f001 010f 	and.w	r1, r1, #15
 80233d6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80233da:	9300      	str	r3, [sp, #0]
 80233dc:	463b      	mov	r3, r7
 80233de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80233e2:	4429      	add	r1, r5
 80233e4:	f7ff ff2a 	bl	802323c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80233e8:	f824 0c02 	strh.w	r0, [r4, #-2]
 80233ec:	e7d5      	b.n	802339a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 80233ee:	46b0      	mov	r8, r6
 80233f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80233f4:	e7d1      	b.n	802339a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 80233f6:	d10f      	bne.n	8023418 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 80233f8:	f898 1000 	ldrb.w	r1, [r8]
 80233fc:	4650      	mov	r0, sl
 80233fe:	9b04      	ldr	r3, [sp, #16]
 8023400:	0909      	lsrs	r1, r1, #4
 8023402:	f8b9 2000 	ldrh.w	r2, [r9]
 8023406:	9300      	str	r3, [sp, #0]
 8023408:	463b      	mov	r3, r7
 802340a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802340e:	4429      	add	r1, r5
 8023410:	f7ff ff14 	bl	802323c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8023414:	f829 0b02 	strh.w	r0, [r9], #2
 8023418:	9b08      	ldr	r3, [sp, #32]
 802341a:	9a05      	ldr	r2, [sp, #20]
 802341c:	881c      	ldrh	r4, [r3, #0]
 802341e:	9b03      	ldr	r3, [sp, #12]
 8023420:	1ae4      	subs	r4, r4, r3
 8023422:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023426:	4413      	add	r3, r2
 8023428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802342a:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802342e:	fb93 f3f2 	sdiv	r3, r3, r2
 8023432:	441e      	add	r6, r3
 8023434:	e796      	b.n	8023364 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8023436:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802343a:	4f46      	ldr	r7, [pc, #280]	@ (8023554 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802343c:	42a3      	cmp	r3, r4
 802343e:	d97c      	bls.n	802353a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8023440:	9a06      	ldr	r2, [sp, #24]
 8023442:	2a00      	cmp	r2, #0
 8023444:	d054      	beq.n	80234f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8023446:	7830      	ldrb	r0, [r6, #0]
 8023448:	1c71      	adds	r1, r6, #1
 802344a:	f000 000f 	and.w	r0, r0, #15
 802344e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023452:	eb05 0e00 	add.w	lr, r5, r0
 8023456:	5c28      	ldrb	r0, [r5, r0]
 8023458:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802345c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8023460:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8023464:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023468:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802346c:	ea42 020e 	orr.w	r2, r2, lr
 8023470:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8023474:	f824 2b02 	strh.w	r2, [r4], #2
 8023478:	9a03      	ldr	r2, [sp, #12]
 802347a:	f102 3eff 	add.w	lr, r2, #4294967295
 802347e:	f1be 0f01 	cmp.w	lr, #1
 8023482:	4620      	mov	r0, r4
 8023484:	f104 0404 	add.w	r4, r4, #4
 8023488:	dd36      	ble.n	80234f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802348a:	7808      	ldrb	r0, [r1, #0]
 802348c:	f1ae 0e02 	sub.w	lr, lr, #2
 8023490:	0900      	lsrs	r0, r0, #4
 8023492:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023496:	eb05 0a00 	add.w	sl, r5, r0
 802349a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802349e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80234a2:	00d2      	lsls	r2, r2, #3
 80234a4:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80234a8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80234ac:	ea49 0202 	orr.w	r2, r9, r2
 80234b0:	f815 9000 	ldrb.w	r9, [r5, r0]
 80234b4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80234b8:	f824 2c04 	strh.w	r2, [r4, #-4]
 80234bc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80234c0:	f000 000f 	and.w	r0, r0, #15
 80234c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80234c8:	eb05 0a00 	add.w	sl, r5, r0
 80234cc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80234d0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80234d4:	00d2      	lsls	r2, r2, #3
 80234d6:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80234da:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80234de:	ea49 0202 	orr.w	r2, r9, r2
 80234e2:	f815 9000 	ldrb.w	r9, [r5, r0]
 80234e6:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80234ea:	f824 2c02 	strh.w	r2, [r4, #-2]
 80234ee:	e7c6      	b.n	802347e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80234f0:	4631      	mov	r1, r6
 80234f2:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80234f6:	e7c2      	b.n	802347e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80234f8:	d111      	bne.n	802351e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 80234fa:	7809      	ldrb	r1, [r1, #0]
 80234fc:	0909      	lsrs	r1, r1, #4
 80234fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023502:	186c      	adds	r4, r5, r1
 8023504:	5c69      	ldrb	r1, [r5, r1]
 8023506:	78a2      	ldrb	r2, [r4, #2]
 8023508:	7864      	ldrb	r4, [r4, #1]
 802350a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802350e:	00e4      	lsls	r4, r4, #3
 8023510:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8023514:	4322      	orrs	r2, r4
 8023516:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802351a:	f820 2b02 	strh.w	r2, [r0], #2
 802351e:	9a03      	ldr	r2, [sp, #12]
 8023520:	f8bc 4000 	ldrh.w	r4, [ip]
 8023524:	9905      	ldr	r1, [sp, #20]
 8023526:	1aa4      	subs	r4, r4, r2
 8023528:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802352c:	440a      	add	r2, r1
 802352e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8023532:	fb92 f2f8 	sdiv	r2, r2, r8
 8023536:	4416      	add	r6, r2
 8023538:	e780      	b.n	802343c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802353a:	4b04      	ldr	r3, [pc, #16]	@ (802354c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802353c:	6818      	ldr	r0, [r3, #0]
 802353e:	6803      	ldr	r3, [r0, #0]
 8023540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023542:	4798      	blx	r3
 8023544:	b00f      	add	sp, #60	@ 0x3c
 8023546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802354a:	bf00      	nop
 802354c:	20001df4 	.word	0x20001df4
 8023550:	20001dee 	.word	0x20001dee
 8023554:	fffff800 	.word	0xfffff800

08023558 <CRC_Lock>:
 8023558:	4a2d      	ldr	r2, [pc, #180]	@ (8023610 <CRC_Lock+0xb8>)
 802355a:	b530      	push	{r4, r5, lr}
 802355c:	6813      	ldr	r3, [r2, #0]
 802355e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8023562:	f023 0301 	bic.w	r3, r3, #1
 8023566:	6013      	str	r3, [r2, #0]
 8023568:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802356c:	4b29      	ldr	r3, [pc, #164]	@ (8023614 <CRC_Lock+0xbc>)
 802356e:	681c      	ldr	r4, [r3, #0]
 8023570:	4014      	ands	r4, r2
 8023572:	42ac      	cmp	r4, r5
 8023574:	d005      	beq.n	8023582 <CRC_Lock+0x2a>
 8023576:	681c      	ldr	r4, [r3, #0]
 8023578:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802357c:	4014      	ands	r4, r2
 802357e:	42ac      	cmp	r4, r5
 8023580:	d125      	bne.n	80235ce <CRC_Lock+0x76>
 8023582:	4b25      	ldr	r3, [pc, #148]	@ (8023618 <CRC_Lock+0xc0>)
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	2b00      	cmp	r3, #0
 8023588:	d139      	bne.n	80235fe <CRC_Lock+0xa6>
 802358a:	4b24      	ldr	r3, [pc, #144]	@ (802361c <CRC_Lock+0xc4>)
 802358c:	681a      	ldr	r2, [r3, #0]
 802358e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023592:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8023596:	d00d      	beq.n	80235b4 <CRC_Lock+0x5c>
 8023598:	681a      	ldr	r2, [r3, #0]
 802359a:	f240 4483 	movw	r4, #1155	@ 0x483
 802359e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80235a2:	42a2      	cmp	r2, r4
 80235a4:	d006      	beq.n	80235b4 <CRC_Lock+0x5c>
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	f240 4285 	movw	r2, #1157	@ 0x485
 80235ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80235b0:	4293      	cmp	r3, r2
 80235b2:	d124      	bne.n	80235fe <CRC_Lock+0xa6>
 80235b4:	4b1a      	ldr	r3, [pc, #104]	@ (8023620 <CRC_Lock+0xc8>)
 80235b6:	2201      	movs	r2, #1
 80235b8:	601a      	str	r2, [r3, #0]
 80235ba:	681a      	ldr	r2, [r3, #0]
 80235bc:	2a00      	cmp	r2, #0
 80235be:	d1fc      	bne.n	80235ba <CRC_Lock+0x62>
 80235c0:	4b18      	ldr	r3, [pc, #96]	@ (8023624 <CRC_Lock+0xcc>)
 80235c2:	6018      	str	r0, [r3, #0]
 80235c4:	6818      	ldr	r0, [r3, #0]
 80235c6:	1a43      	subs	r3, r0, r1
 80235c8:	4258      	negs	r0, r3
 80235ca:	4158      	adcs	r0, r3
 80235cc:	e00e      	b.n	80235ec <CRC_Lock+0x94>
 80235ce:	681b      	ldr	r3, [r3, #0]
 80235d0:	4013      	ands	r3, r2
 80235d2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80235d6:	4293      	cmp	r3, r2
 80235d8:	d111      	bne.n	80235fe <CRC_Lock+0xa6>
 80235da:	4b13      	ldr	r3, [pc, #76]	@ (8023628 <CRC_Lock+0xd0>)
 80235dc:	f240 4286 	movw	r2, #1158	@ 0x486
 80235e0:	681b      	ldr	r3, [r3, #0]
 80235e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80235e6:	4293      	cmp	r3, r2
 80235e8:	d001      	beq.n	80235ee <CRC_Lock+0x96>
 80235ea:	2000      	movs	r0, #0
 80235ec:	bd30      	pop	{r4, r5, pc}
 80235ee:	4b0f      	ldr	r3, [pc, #60]	@ (802362c <CRC_Lock+0xd4>)
 80235f0:	2201      	movs	r2, #1
 80235f2:	601a      	str	r2, [r3, #0]
 80235f4:	681a      	ldr	r2, [r3, #0]
 80235f6:	2a00      	cmp	r2, #0
 80235f8:	d1fc      	bne.n	80235f4 <CRC_Lock+0x9c>
 80235fa:	4b0d      	ldr	r3, [pc, #52]	@ (8023630 <CRC_Lock+0xd8>)
 80235fc:	e7e1      	b.n	80235c2 <CRC_Lock+0x6a>
 80235fe:	4b0d      	ldr	r3, [pc, #52]	@ (8023634 <CRC_Lock+0xdc>)
 8023600:	2201      	movs	r2, #1
 8023602:	601a      	str	r2, [r3, #0]
 8023604:	681a      	ldr	r2, [r3, #0]
 8023606:	2a00      	cmp	r2, #0
 8023608:	d1fc      	bne.n	8023604 <CRC_Lock+0xac>
 802360a:	4b0b      	ldr	r3, [pc, #44]	@ (8023638 <CRC_Lock+0xe0>)
 802360c:	e7d9      	b.n	80235c2 <CRC_Lock+0x6a>
 802360e:	bf00      	nop
 8023610:	e0002000 	.word	0xe0002000
 8023614:	e000ed00 	.word	0xe000ed00
 8023618:	e0042000 	.word	0xe0042000
 802361c:	5c001000 	.word	0x5c001000
 8023620:	58024c08 	.word	0x58024c08
 8023624:	58024c00 	.word	0x58024c00
 8023628:	46008ff0 	.word	0x46008ff0
 802362c:	46024c08 	.word	0x46024c08
 8023630:	46024c00 	.word	0x46024c00
 8023634:	40023008 	.word	0x40023008
 8023638:	40023000 	.word	0x40023000

0802363c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802363c:	6101      	str	r1, [r0, #16]
 802363e:	4770      	bx	lr

08023640 <_ZN8touchgfx8Gestures4tickEv>:
 8023640:	7b83      	ldrb	r3, [r0, #14]
 8023642:	b14b      	cbz	r3, 8023658 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023644:	8903      	ldrh	r3, [r0, #8]
 8023646:	3301      	adds	r3, #1
 8023648:	b29b      	uxth	r3, r3
 802364a:	2b07      	cmp	r3, #7
 802364c:	8103      	strh	r3, [r0, #8]
 802364e:	bf81      	itttt	hi
 8023650:	2300      	movhi	r3, #0
 8023652:	8143      	strhhi	r3, [r0, #10]
 8023654:	8183      	strhhi	r3, [r0, #12]
 8023656:	7383      	strbhi	r3, [r0, #14]
 8023658:	4770      	bx	lr
	...

0802365c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802365c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023660:	4698      	mov	r8, r3
 8023662:	8883      	ldrh	r3, [r0, #4]
 8023664:	4604      	mov	r4, r0
 8023666:	4617      	mov	r7, r2
 8023668:	f8ad 3006 	strh.w	r3, [sp, #6]
 802366c:	eba8 0303 	sub.w	r3, r8, r3
 8023670:	4a19      	ldr	r2, [pc, #100]	@ (80236d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8023672:	460e      	mov	r6, r1
 8023674:	b21b      	sxth	r3, r3
 8023676:	88c1      	ldrh	r1, [r0, #6]
 8023678:	9200      	str	r2, [sp, #0]
 802367a:	2000      	movs	r0, #0
 802367c:	2b00      	cmp	r3, #0
 802367e:	8aa2      	ldrh	r2, [r4, #20]
 8023680:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8023684:	bfb8      	it	lt
 8023686:	425b      	neglt	r3, r3
 8023688:	f88d 0004 	strb.w	r0, [sp, #4]
 802368c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023690:	b21b      	sxth	r3, r3
 8023692:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023696:	f8ad 500c 	strh.w	r5, [sp, #12]
 802369a:	4293      	cmp	r3, r2
 802369c:	dc07      	bgt.n	80236ae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802369e:	1a69      	subs	r1, r5, r1
 80236a0:	b209      	sxth	r1, r1
 80236a2:	2900      	cmp	r1, #0
 80236a4:	bfb8      	it	lt
 80236a6:	4249      	neglt	r1, r1
 80236a8:	b209      	sxth	r1, r1
 80236aa:	428a      	cmp	r2, r1
 80236ac:	da10      	bge.n	80236d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80236ae:	6920      	ldr	r0, [r4, #16]
 80236b0:	4669      	mov	r1, sp
 80236b2:	eba8 0606 	sub.w	r6, r8, r6
 80236b6:	1bef      	subs	r7, r5, r7
 80236b8:	6803      	ldr	r3, [r0, #0]
 80236ba:	685b      	ldr	r3, [r3, #4]
 80236bc:	4798      	blx	r3
 80236be:	2300      	movs	r3, #0
 80236c0:	2001      	movs	r0, #1
 80236c2:	8166      	strh	r6, [r4, #10]
 80236c4:	8123      	strh	r3, [r4, #8]
 80236c6:	81a7      	strh	r7, [r4, #12]
 80236c8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80236cc:	80e5      	strh	r5, [r4, #6]
 80236ce:	73a0      	strb	r0, [r4, #14]
 80236d0:	b004      	add	sp, #16
 80236d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236d6:	bf00      	nop
 80236d8:	08026058 	.word	0x08026058

080236dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80236dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236de:	461e      	mov	r6, r3
 80236e0:	1e4b      	subs	r3, r1, #1
 80236e2:	b085      	sub	sp, #20
 80236e4:	4604      	mov	r4, r0
 80236e6:	2b01      	cmp	r3, #1
 80236e8:	460d      	mov	r5, r1
 80236ea:	4617      	mov	r7, r2
 80236ec:	d84b      	bhi.n	8023786 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80236ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80236f2:	1cd3      	adds	r3, r2, #3
 80236f4:	b29b      	uxth	r3, r3
 80236f6:	2b06      	cmp	r3, #6
 80236f8:	d916      	bls.n	8023728 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80236fa:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802379c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80236fe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023702:	f8cd c004 	str.w	ip, [sp, #4]
 8023706:	f04f 0c00 	mov.w	ip, #0
 802370a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802370e:	6900      	ldr	r0, [r0, #16]
 8023710:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023714:	a901      	add	r1, sp, #4
 8023716:	f88d c008 	strb.w	ip, [sp, #8]
 802371a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802371e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023722:	6803      	ldr	r3, [r0, #0]
 8023724:	689b      	ldr	r3, [r3, #8]
 8023726:	4798      	blx	r3
 8023728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802372c:	1cd3      	adds	r3, r2, #3
 802372e:	b29b      	uxth	r3, r3
 8023730:	2b06      	cmp	r3, #6
 8023732:	d916      	bls.n	8023762 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023734:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802379c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023738:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802373c:	f8cd c004 	str.w	ip, [sp, #4]
 8023740:	f04f 0c01 	mov.w	ip, #1
 8023744:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023748:	6920      	ldr	r0, [r4, #16]
 802374a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802374e:	a901      	add	r1, sp, #4
 8023750:	f88d c008 	strb.w	ip, [sp, #8]
 8023754:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023758:	f8ad 300e 	strh.w	r3, [sp, #14]
 802375c:	6803      	ldr	r3, [r0, #0]
 802375e:	689b      	ldr	r3, [r3, #8]
 8023760:	4798      	blx	r3
 8023762:	4b0d      	ldr	r3, [pc, #52]	@ (8023798 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8023764:	a901      	add	r1, sp, #4
 8023766:	6920      	ldr	r0, [r4, #16]
 8023768:	9301      	str	r3, [sp, #4]
 802376a:	2300      	movs	r3, #0
 802376c:	f88d 5008 	strb.w	r5, [sp, #8]
 8023770:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023774:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023778:	f8ad 300e 	strh.w	r3, [sp, #14]
 802377c:	6803      	ldr	r3, [r0, #0]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	4798      	blx	r3
 8023782:	b005      	add	sp, #20
 8023784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023786:	2900      	cmp	r1, #0
 8023788:	d1eb      	bne.n	8023762 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802378a:	80a2      	strh	r2, [r4, #4]
 802378c:	80c6      	strh	r6, [r0, #6]
 802378e:	60a1      	str	r1, [r4, #8]
 8023790:	81a1      	strh	r1, [r4, #12]
 8023792:	73a1      	strb	r1, [r4, #14]
 8023794:	e7e5      	b.n	8023762 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023796:	bf00      	nop
 8023798:	08026044 	.word	0x08026044
 802379c:	0802606c 	.word	0x0802606c

080237a0 <__aeabi_atexit>:
 80237a0:	460b      	mov	r3, r1
 80237a2:	4601      	mov	r1, r0
 80237a4:	4618      	mov	r0, r3
 80237a6:	f000 b911 	b.w	80239cc <__cxa_atexit>

080237aa <_ZdlPvj>:
 80237aa:	f000 b812 	b.w	80237d2 <_ZdlPv>

080237ae <__cxa_guard_acquire>:
 80237ae:	6802      	ldr	r2, [r0, #0]
 80237b0:	07d2      	lsls	r2, r2, #31
 80237b2:	4603      	mov	r3, r0
 80237b4:	d405      	bmi.n	80237c2 <__cxa_guard_acquire+0x14>
 80237b6:	7842      	ldrb	r2, [r0, #1]
 80237b8:	b102      	cbz	r2, 80237bc <__cxa_guard_acquire+0xe>
 80237ba:	deff      	udf	#255	@ 0xff
 80237bc:	2001      	movs	r0, #1
 80237be:	7058      	strb	r0, [r3, #1]
 80237c0:	4770      	bx	lr
 80237c2:	2000      	movs	r0, #0
 80237c4:	4770      	bx	lr

080237c6 <__cxa_guard_release>:
 80237c6:	2301      	movs	r3, #1
 80237c8:	6003      	str	r3, [r0, #0]
 80237ca:	4770      	bx	lr

080237cc <__cxa_pure_virtual>:
 80237cc:	b508      	push	{r3, lr}
 80237ce:	f000 f80f 	bl	80237f0 <_ZSt9terminatev>

080237d2 <_ZdlPv>:
 80237d2:	f000 b845 	b.w	8023860 <free>

080237d6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80237d6:	b508      	push	{r3, lr}
 80237d8:	4780      	blx	r0
 80237da:	f000 f80e 	bl	80237fa <abort>
	...

080237e0 <_ZSt13get_terminatev>:
 80237e0:	4b02      	ldr	r3, [pc, #8]	@ (80237ec <_ZSt13get_terminatev+0xc>)
 80237e2:	6818      	ldr	r0, [r3, #0]
 80237e4:	f3bf 8f5b 	dmb	ish
 80237e8:	4770      	bx	lr
 80237ea:	bf00      	nop
 80237ec:	2000021c 	.word	0x2000021c

080237f0 <_ZSt9terminatev>:
 80237f0:	b508      	push	{r3, lr}
 80237f2:	f7ff fff5 	bl	80237e0 <_ZSt13get_terminatev>
 80237f6:	f7ff ffee 	bl	80237d6 <_ZN10__cxxabiv111__terminateEPFvvE>

080237fa <abort>:
 80237fa:	b508      	push	{r3, lr}
 80237fc:	2006      	movs	r0, #6
 80237fe:	f000 fa3b 	bl	8023c78 <raise>
 8023802:	2001      	movs	r0, #1
 8023804:	f7dd ff68 	bl	80016d8 <_exit>

08023808 <__assert_func>:
 8023808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802380a:	4614      	mov	r4, r2
 802380c:	461a      	mov	r2, r3
 802380e:	4b09      	ldr	r3, [pc, #36]	@ (8023834 <__assert_func+0x2c>)
 8023810:	681b      	ldr	r3, [r3, #0]
 8023812:	4605      	mov	r5, r0
 8023814:	68d8      	ldr	r0, [r3, #12]
 8023816:	b954      	cbnz	r4, 802382e <__assert_func+0x26>
 8023818:	4b07      	ldr	r3, [pc, #28]	@ (8023838 <__assert_func+0x30>)
 802381a:	461c      	mov	r4, r3
 802381c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023820:	9100      	str	r1, [sp, #0]
 8023822:	462b      	mov	r3, r5
 8023824:	4905      	ldr	r1, [pc, #20]	@ (802383c <__assert_func+0x34>)
 8023826:	f000 f983 	bl	8023b30 <fiprintf>
 802382a:	f7ff ffe6 	bl	80237fa <abort>
 802382e:	4b04      	ldr	r3, [pc, #16]	@ (8023840 <__assert_func+0x38>)
 8023830:	e7f4      	b.n	802381c <__assert_func+0x14>
 8023832:	bf00      	nop
 8023834:	2000022c 	.word	0x2000022c
 8023838:	080263db 	.word	0x080263db
 802383c:	080263ad 	.word	0x080263ad
 8023840:	080263a0 	.word	0x080263a0

08023844 <atexit>:
 8023844:	2300      	movs	r3, #0
 8023846:	4601      	mov	r1, r0
 8023848:	461a      	mov	r2, r3
 802384a:	4618      	mov	r0, r3
 802384c:	f000 bab4 	b.w	8023db8 <__register_exitproc>

08023850 <malloc>:
 8023850:	4b02      	ldr	r3, [pc, #8]	@ (802385c <malloc+0xc>)
 8023852:	4601      	mov	r1, r0
 8023854:	6818      	ldr	r0, [r3, #0]
 8023856:	f000 b82d 	b.w	80238b4 <_malloc_r>
 802385a:	bf00      	nop
 802385c:	2000022c 	.word	0x2000022c

08023860 <free>:
 8023860:	4b02      	ldr	r3, [pc, #8]	@ (802386c <free+0xc>)
 8023862:	4601      	mov	r1, r0
 8023864:	6818      	ldr	r0, [r3, #0]
 8023866:	f000 bb03 	b.w	8023e70 <_free_r>
 802386a:	bf00      	nop
 802386c:	2000022c 	.word	0x2000022c

08023870 <sbrk_aligned>:
 8023870:	b570      	push	{r4, r5, r6, lr}
 8023872:	4e0f      	ldr	r6, [pc, #60]	@ (80238b0 <sbrk_aligned+0x40>)
 8023874:	460c      	mov	r4, r1
 8023876:	6831      	ldr	r1, [r6, #0]
 8023878:	4605      	mov	r5, r0
 802387a:	b911      	cbnz	r1, 8023882 <sbrk_aligned+0x12>
 802387c:	f000 fa4c 	bl	8023d18 <_sbrk_r>
 8023880:	6030      	str	r0, [r6, #0]
 8023882:	4621      	mov	r1, r4
 8023884:	4628      	mov	r0, r5
 8023886:	f000 fa47 	bl	8023d18 <_sbrk_r>
 802388a:	1c43      	adds	r3, r0, #1
 802388c:	d103      	bne.n	8023896 <sbrk_aligned+0x26>
 802388e:	f04f 34ff 	mov.w	r4, #4294967295
 8023892:	4620      	mov	r0, r4
 8023894:	bd70      	pop	{r4, r5, r6, pc}
 8023896:	1cc4      	adds	r4, r0, #3
 8023898:	f024 0403 	bic.w	r4, r4, #3
 802389c:	42a0      	cmp	r0, r4
 802389e:	d0f8      	beq.n	8023892 <sbrk_aligned+0x22>
 80238a0:	1a21      	subs	r1, r4, r0
 80238a2:	4628      	mov	r0, r5
 80238a4:	f000 fa38 	bl	8023d18 <_sbrk_r>
 80238a8:	3001      	adds	r0, #1
 80238aa:	d1f2      	bne.n	8023892 <sbrk_aligned+0x22>
 80238ac:	e7ef      	b.n	802388e <sbrk_aligned+0x1e>
 80238ae:	bf00      	nop
 80238b0:	20002848 	.word	0x20002848

080238b4 <_malloc_r>:
 80238b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80238b8:	1ccd      	adds	r5, r1, #3
 80238ba:	f025 0503 	bic.w	r5, r5, #3
 80238be:	3508      	adds	r5, #8
 80238c0:	2d0c      	cmp	r5, #12
 80238c2:	bf38      	it	cc
 80238c4:	250c      	movcc	r5, #12
 80238c6:	2d00      	cmp	r5, #0
 80238c8:	4606      	mov	r6, r0
 80238ca:	db01      	blt.n	80238d0 <_malloc_r+0x1c>
 80238cc:	42a9      	cmp	r1, r5
 80238ce:	d904      	bls.n	80238da <_malloc_r+0x26>
 80238d0:	230c      	movs	r3, #12
 80238d2:	6033      	str	r3, [r6, #0]
 80238d4:	2000      	movs	r0, #0
 80238d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80238da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80239b0 <_malloc_r+0xfc>
 80238de:	f000 f869 	bl	80239b4 <__malloc_lock>
 80238e2:	f8d8 3000 	ldr.w	r3, [r8]
 80238e6:	461c      	mov	r4, r3
 80238e8:	bb44      	cbnz	r4, 802393c <_malloc_r+0x88>
 80238ea:	4629      	mov	r1, r5
 80238ec:	4630      	mov	r0, r6
 80238ee:	f7ff ffbf 	bl	8023870 <sbrk_aligned>
 80238f2:	1c43      	adds	r3, r0, #1
 80238f4:	4604      	mov	r4, r0
 80238f6:	d158      	bne.n	80239aa <_malloc_r+0xf6>
 80238f8:	f8d8 4000 	ldr.w	r4, [r8]
 80238fc:	4627      	mov	r7, r4
 80238fe:	2f00      	cmp	r7, #0
 8023900:	d143      	bne.n	802398a <_malloc_r+0xd6>
 8023902:	2c00      	cmp	r4, #0
 8023904:	d04b      	beq.n	802399e <_malloc_r+0xea>
 8023906:	6823      	ldr	r3, [r4, #0]
 8023908:	4639      	mov	r1, r7
 802390a:	4630      	mov	r0, r6
 802390c:	eb04 0903 	add.w	r9, r4, r3
 8023910:	f000 fa02 	bl	8023d18 <_sbrk_r>
 8023914:	4581      	cmp	r9, r0
 8023916:	d142      	bne.n	802399e <_malloc_r+0xea>
 8023918:	6821      	ldr	r1, [r4, #0]
 802391a:	1a6d      	subs	r5, r5, r1
 802391c:	4629      	mov	r1, r5
 802391e:	4630      	mov	r0, r6
 8023920:	f7ff ffa6 	bl	8023870 <sbrk_aligned>
 8023924:	3001      	adds	r0, #1
 8023926:	d03a      	beq.n	802399e <_malloc_r+0xea>
 8023928:	6823      	ldr	r3, [r4, #0]
 802392a:	442b      	add	r3, r5
 802392c:	6023      	str	r3, [r4, #0]
 802392e:	f8d8 3000 	ldr.w	r3, [r8]
 8023932:	685a      	ldr	r2, [r3, #4]
 8023934:	bb62      	cbnz	r2, 8023990 <_malloc_r+0xdc>
 8023936:	f8c8 7000 	str.w	r7, [r8]
 802393a:	e00f      	b.n	802395c <_malloc_r+0xa8>
 802393c:	6822      	ldr	r2, [r4, #0]
 802393e:	1b52      	subs	r2, r2, r5
 8023940:	d420      	bmi.n	8023984 <_malloc_r+0xd0>
 8023942:	2a0b      	cmp	r2, #11
 8023944:	d917      	bls.n	8023976 <_malloc_r+0xc2>
 8023946:	1961      	adds	r1, r4, r5
 8023948:	42a3      	cmp	r3, r4
 802394a:	6025      	str	r5, [r4, #0]
 802394c:	bf18      	it	ne
 802394e:	6059      	strne	r1, [r3, #4]
 8023950:	6863      	ldr	r3, [r4, #4]
 8023952:	bf08      	it	eq
 8023954:	f8c8 1000 	streq.w	r1, [r8]
 8023958:	5162      	str	r2, [r4, r5]
 802395a:	604b      	str	r3, [r1, #4]
 802395c:	4630      	mov	r0, r6
 802395e:	f000 f82f 	bl	80239c0 <__malloc_unlock>
 8023962:	f104 000b 	add.w	r0, r4, #11
 8023966:	1d23      	adds	r3, r4, #4
 8023968:	f020 0007 	bic.w	r0, r0, #7
 802396c:	1ac2      	subs	r2, r0, r3
 802396e:	bf1c      	itt	ne
 8023970:	1a1b      	subne	r3, r3, r0
 8023972:	50a3      	strne	r3, [r4, r2]
 8023974:	e7af      	b.n	80238d6 <_malloc_r+0x22>
 8023976:	6862      	ldr	r2, [r4, #4]
 8023978:	42a3      	cmp	r3, r4
 802397a:	bf0c      	ite	eq
 802397c:	f8c8 2000 	streq.w	r2, [r8]
 8023980:	605a      	strne	r2, [r3, #4]
 8023982:	e7eb      	b.n	802395c <_malloc_r+0xa8>
 8023984:	4623      	mov	r3, r4
 8023986:	6864      	ldr	r4, [r4, #4]
 8023988:	e7ae      	b.n	80238e8 <_malloc_r+0x34>
 802398a:	463c      	mov	r4, r7
 802398c:	687f      	ldr	r7, [r7, #4]
 802398e:	e7b6      	b.n	80238fe <_malloc_r+0x4a>
 8023990:	461a      	mov	r2, r3
 8023992:	685b      	ldr	r3, [r3, #4]
 8023994:	42a3      	cmp	r3, r4
 8023996:	d1fb      	bne.n	8023990 <_malloc_r+0xdc>
 8023998:	2300      	movs	r3, #0
 802399a:	6053      	str	r3, [r2, #4]
 802399c:	e7de      	b.n	802395c <_malloc_r+0xa8>
 802399e:	230c      	movs	r3, #12
 80239a0:	6033      	str	r3, [r6, #0]
 80239a2:	4630      	mov	r0, r6
 80239a4:	f000 f80c 	bl	80239c0 <__malloc_unlock>
 80239a8:	e794      	b.n	80238d4 <_malloc_r+0x20>
 80239aa:	6005      	str	r5, [r0, #0]
 80239ac:	e7d6      	b.n	802395c <_malloc_r+0xa8>
 80239ae:	bf00      	nop
 80239b0:	2000284c 	.word	0x2000284c

080239b4 <__malloc_lock>:
 80239b4:	4801      	ldr	r0, [pc, #4]	@ (80239bc <__malloc_lock+0x8>)
 80239b6:	f000 b9fc 	b.w	8023db2 <__retarget_lock_acquire_recursive>
 80239ba:	bf00      	nop
 80239bc:	20002990 	.word	0x20002990

080239c0 <__malloc_unlock>:
 80239c0:	4801      	ldr	r0, [pc, #4]	@ (80239c8 <__malloc_unlock+0x8>)
 80239c2:	f000 b9f7 	b.w	8023db4 <__retarget_lock_release_recursive>
 80239c6:	bf00      	nop
 80239c8:	20002990 	.word	0x20002990

080239cc <__cxa_atexit>:
 80239cc:	b510      	push	{r4, lr}
 80239ce:	4604      	mov	r4, r0
 80239d0:	4804      	ldr	r0, [pc, #16]	@ (80239e4 <__cxa_atexit+0x18>)
 80239d2:	4613      	mov	r3, r2
 80239d4:	b120      	cbz	r0, 80239e0 <__cxa_atexit+0x14>
 80239d6:	460a      	mov	r2, r1
 80239d8:	2002      	movs	r0, #2
 80239da:	4621      	mov	r1, r4
 80239dc:	f000 f9ec 	bl	8023db8 <__register_exitproc>
 80239e0:	bd10      	pop	{r4, pc}
 80239e2:	bf00      	nop
 80239e4:	08023db9 	.word	0x08023db9

080239e8 <std>:
 80239e8:	2300      	movs	r3, #0
 80239ea:	b510      	push	{r4, lr}
 80239ec:	4604      	mov	r4, r0
 80239ee:	e9c0 3300 	strd	r3, r3, [r0]
 80239f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80239f6:	6083      	str	r3, [r0, #8]
 80239f8:	8181      	strh	r1, [r0, #12]
 80239fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80239fc:	81c2      	strh	r2, [r0, #14]
 80239fe:	6183      	str	r3, [r0, #24]
 8023a00:	4619      	mov	r1, r3
 8023a02:	2208      	movs	r2, #8
 8023a04:	305c      	adds	r0, #92	@ 0x5c
 8023a06:	f000 f906 	bl	8023c16 <memset>
 8023a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8023a40 <std+0x58>)
 8023a0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8023a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8023a44 <std+0x5c>)
 8023a10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023a12:	4b0d      	ldr	r3, [pc, #52]	@ (8023a48 <std+0x60>)
 8023a14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023a16:	4b0d      	ldr	r3, [pc, #52]	@ (8023a4c <std+0x64>)
 8023a18:	6323      	str	r3, [r4, #48]	@ 0x30
 8023a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8023a50 <std+0x68>)
 8023a1c:	6224      	str	r4, [r4, #32]
 8023a1e:	429c      	cmp	r4, r3
 8023a20:	d006      	beq.n	8023a30 <std+0x48>
 8023a22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023a26:	4294      	cmp	r4, r2
 8023a28:	d002      	beq.n	8023a30 <std+0x48>
 8023a2a:	33d0      	adds	r3, #208	@ 0xd0
 8023a2c:	429c      	cmp	r4, r3
 8023a2e:	d105      	bne.n	8023a3c <std+0x54>
 8023a30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a38:	f000 b9ba 	b.w	8023db0 <__retarget_lock_init_recursive>
 8023a3c:	bd10      	pop	{r4, pc}
 8023a3e:	bf00      	nop
 8023a40:	08023b91 	.word	0x08023b91
 8023a44:	08023bb3 	.word	0x08023bb3
 8023a48:	08023beb 	.word	0x08023beb
 8023a4c:	08023c0f 	.word	0x08023c0f
 8023a50:	20002850 	.word	0x20002850

08023a54 <stdio_exit_handler>:
 8023a54:	4a02      	ldr	r2, [pc, #8]	@ (8023a60 <stdio_exit_handler+0xc>)
 8023a56:	4903      	ldr	r1, [pc, #12]	@ (8023a64 <stdio_exit_handler+0x10>)
 8023a58:	4803      	ldr	r0, [pc, #12]	@ (8023a68 <stdio_exit_handler+0x14>)
 8023a5a:	f000 b87b 	b.w	8023b54 <_fwalk_sglue>
 8023a5e:	bf00      	nop
 8023a60:	20000220 	.word	0x20000220
 8023a64:	080245ad 	.word	0x080245ad
 8023a68:	20000230 	.word	0x20000230

08023a6c <cleanup_stdio>:
 8023a6c:	6841      	ldr	r1, [r0, #4]
 8023a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8023aa0 <cleanup_stdio+0x34>)
 8023a70:	4299      	cmp	r1, r3
 8023a72:	b510      	push	{r4, lr}
 8023a74:	4604      	mov	r4, r0
 8023a76:	d001      	beq.n	8023a7c <cleanup_stdio+0x10>
 8023a78:	f000 fd98 	bl	80245ac <_fflush_r>
 8023a7c:	68a1      	ldr	r1, [r4, #8]
 8023a7e:	4b09      	ldr	r3, [pc, #36]	@ (8023aa4 <cleanup_stdio+0x38>)
 8023a80:	4299      	cmp	r1, r3
 8023a82:	d002      	beq.n	8023a8a <cleanup_stdio+0x1e>
 8023a84:	4620      	mov	r0, r4
 8023a86:	f000 fd91 	bl	80245ac <_fflush_r>
 8023a8a:	68e1      	ldr	r1, [r4, #12]
 8023a8c:	4b06      	ldr	r3, [pc, #24]	@ (8023aa8 <cleanup_stdio+0x3c>)
 8023a8e:	4299      	cmp	r1, r3
 8023a90:	d004      	beq.n	8023a9c <cleanup_stdio+0x30>
 8023a92:	4620      	mov	r0, r4
 8023a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a98:	f000 bd88 	b.w	80245ac <_fflush_r>
 8023a9c:	bd10      	pop	{r4, pc}
 8023a9e:	bf00      	nop
 8023aa0:	20002850 	.word	0x20002850
 8023aa4:	200028b8 	.word	0x200028b8
 8023aa8:	20002920 	.word	0x20002920

08023aac <global_stdio_init.part.0>:
 8023aac:	b510      	push	{r4, lr}
 8023aae:	4b0b      	ldr	r3, [pc, #44]	@ (8023adc <global_stdio_init.part.0+0x30>)
 8023ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8023ae0 <global_stdio_init.part.0+0x34>)
 8023ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8023ae4 <global_stdio_init.part.0+0x38>)
 8023ab4:	601a      	str	r2, [r3, #0]
 8023ab6:	4620      	mov	r0, r4
 8023ab8:	2200      	movs	r2, #0
 8023aba:	2104      	movs	r1, #4
 8023abc:	f7ff ff94 	bl	80239e8 <std>
 8023ac0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023ac4:	2201      	movs	r2, #1
 8023ac6:	2109      	movs	r1, #9
 8023ac8:	f7ff ff8e 	bl	80239e8 <std>
 8023acc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023ad0:	2202      	movs	r2, #2
 8023ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ad6:	2112      	movs	r1, #18
 8023ad8:	f7ff bf86 	b.w	80239e8 <std>
 8023adc:	20002988 	.word	0x20002988
 8023ae0:	20002850 	.word	0x20002850
 8023ae4:	08023a55 	.word	0x08023a55

08023ae8 <__sfp_lock_acquire>:
 8023ae8:	4801      	ldr	r0, [pc, #4]	@ (8023af0 <__sfp_lock_acquire+0x8>)
 8023aea:	f000 b962 	b.w	8023db2 <__retarget_lock_acquire_recursive>
 8023aee:	bf00      	nop
 8023af0:	20002992 	.word	0x20002992

08023af4 <__sfp_lock_release>:
 8023af4:	4801      	ldr	r0, [pc, #4]	@ (8023afc <__sfp_lock_release+0x8>)
 8023af6:	f000 b95d 	b.w	8023db4 <__retarget_lock_release_recursive>
 8023afa:	bf00      	nop
 8023afc:	20002992 	.word	0x20002992

08023b00 <__sinit>:
 8023b00:	b510      	push	{r4, lr}
 8023b02:	4604      	mov	r4, r0
 8023b04:	f7ff fff0 	bl	8023ae8 <__sfp_lock_acquire>
 8023b08:	6a23      	ldr	r3, [r4, #32]
 8023b0a:	b11b      	cbz	r3, 8023b14 <__sinit+0x14>
 8023b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b10:	f7ff bff0 	b.w	8023af4 <__sfp_lock_release>
 8023b14:	4b04      	ldr	r3, [pc, #16]	@ (8023b28 <__sinit+0x28>)
 8023b16:	6223      	str	r3, [r4, #32]
 8023b18:	4b04      	ldr	r3, [pc, #16]	@ (8023b2c <__sinit+0x2c>)
 8023b1a:	681b      	ldr	r3, [r3, #0]
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	d1f5      	bne.n	8023b0c <__sinit+0xc>
 8023b20:	f7ff ffc4 	bl	8023aac <global_stdio_init.part.0>
 8023b24:	e7f2      	b.n	8023b0c <__sinit+0xc>
 8023b26:	bf00      	nop
 8023b28:	08023a6d 	.word	0x08023a6d
 8023b2c:	20002988 	.word	0x20002988

08023b30 <fiprintf>:
 8023b30:	b40e      	push	{r1, r2, r3}
 8023b32:	b503      	push	{r0, r1, lr}
 8023b34:	4601      	mov	r1, r0
 8023b36:	ab03      	add	r3, sp, #12
 8023b38:	4805      	ldr	r0, [pc, #20]	@ (8023b50 <fiprintf+0x20>)
 8023b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8023b3e:	6800      	ldr	r0, [r0, #0]
 8023b40:	9301      	str	r3, [sp, #4]
 8023b42:	f000 fa09 	bl	8023f58 <_vfiprintf_r>
 8023b46:	b002      	add	sp, #8
 8023b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8023b4c:	b003      	add	sp, #12
 8023b4e:	4770      	bx	lr
 8023b50:	2000022c 	.word	0x2000022c

08023b54 <_fwalk_sglue>:
 8023b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023b58:	4607      	mov	r7, r0
 8023b5a:	4688      	mov	r8, r1
 8023b5c:	4614      	mov	r4, r2
 8023b5e:	2600      	movs	r6, #0
 8023b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023b64:	f1b9 0901 	subs.w	r9, r9, #1
 8023b68:	d505      	bpl.n	8023b76 <_fwalk_sglue+0x22>
 8023b6a:	6824      	ldr	r4, [r4, #0]
 8023b6c:	2c00      	cmp	r4, #0
 8023b6e:	d1f7      	bne.n	8023b60 <_fwalk_sglue+0xc>
 8023b70:	4630      	mov	r0, r6
 8023b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023b76:	89ab      	ldrh	r3, [r5, #12]
 8023b78:	2b01      	cmp	r3, #1
 8023b7a:	d907      	bls.n	8023b8c <_fwalk_sglue+0x38>
 8023b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023b80:	3301      	adds	r3, #1
 8023b82:	d003      	beq.n	8023b8c <_fwalk_sglue+0x38>
 8023b84:	4629      	mov	r1, r5
 8023b86:	4638      	mov	r0, r7
 8023b88:	47c0      	blx	r8
 8023b8a:	4306      	orrs	r6, r0
 8023b8c:	3568      	adds	r5, #104	@ 0x68
 8023b8e:	e7e9      	b.n	8023b64 <_fwalk_sglue+0x10>

08023b90 <__sread>:
 8023b90:	b510      	push	{r4, lr}
 8023b92:	460c      	mov	r4, r1
 8023b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b98:	f000 f898 	bl	8023ccc <_read_r>
 8023b9c:	2800      	cmp	r0, #0
 8023b9e:	bfab      	itete	ge
 8023ba0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8023ba4:	181b      	addge	r3, r3, r0
 8023ba6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023baa:	bfac      	ite	ge
 8023bac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023bae:	81a3      	strhlt	r3, [r4, #12]
 8023bb0:	bd10      	pop	{r4, pc}

08023bb2 <__swrite>:
 8023bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023bb6:	461f      	mov	r7, r3
 8023bb8:	898b      	ldrh	r3, [r1, #12]
 8023bba:	05db      	lsls	r3, r3, #23
 8023bbc:	4605      	mov	r5, r0
 8023bbe:	460c      	mov	r4, r1
 8023bc0:	4616      	mov	r6, r2
 8023bc2:	d505      	bpl.n	8023bd0 <__swrite+0x1e>
 8023bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023bc8:	2302      	movs	r3, #2
 8023bca:	2200      	movs	r2, #0
 8023bcc:	f000 f86c 	bl	8023ca8 <_lseek_r>
 8023bd0:	89a3      	ldrh	r3, [r4, #12]
 8023bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023bd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023bda:	81a3      	strh	r3, [r4, #12]
 8023bdc:	4632      	mov	r2, r6
 8023bde:	463b      	mov	r3, r7
 8023be0:	4628      	mov	r0, r5
 8023be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023be6:	f000 b8a7 	b.w	8023d38 <_write_r>

08023bea <__sseek>:
 8023bea:	b510      	push	{r4, lr}
 8023bec:	460c      	mov	r4, r1
 8023bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023bf2:	f000 f859 	bl	8023ca8 <_lseek_r>
 8023bf6:	1c43      	adds	r3, r0, #1
 8023bf8:	89a3      	ldrh	r3, [r4, #12]
 8023bfa:	bf15      	itete	ne
 8023bfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023bfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023c02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023c06:	81a3      	strheq	r3, [r4, #12]
 8023c08:	bf18      	it	ne
 8023c0a:	81a3      	strhne	r3, [r4, #12]
 8023c0c:	bd10      	pop	{r4, pc}

08023c0e <__sclose>:
 8023c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c12:	f000 b839 	b.w	8023c88 <_close_r>

08023c16 <memset>:
 8023c16:	4402      	add	r2, r0
 8023c18:	4603      	mov	r3, r0
 8023c1a:	4293      	cmp	r3, r2
 8023c1c:	d100      	bne.n	8023c20 <memset+0xa>
 8023c1e:	4770      	bx	lr
 8023c20:	f803 1b01 	strb.w	r1, [r3], #1
 8023c24:	e7f9      	b.n	8023c1a <memset+0x4>

08023c26 <_raise_r>:
 8023c26:	291f      	cmp	r1, #31
 8023c28:	b538      	push	{r3, r4, r5, lr}
 8023c2a:	4605      	mov	r5, r0
 8023c2c:	460c      	mov	r4, r1
 8023c2e:	d904      	bls.n	8023c3a <_raise_r+0x14>
 8023c30:	2316      	movs	r3, #22
 8023c32:	6003      	str	r3, [r0, #0]
 8023c34:	f04f 30ff 	mov.w	r0, #4294967295
 8023c38:	bd38      	pop	{r3, r4, r5, pc}
 8023c3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023c3c:	b112      	cbz	r2, 8023c44 <_raise_r+0x1e>
 8023c3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023c42:	b94b      	cbnz	r3, 8023c58 <_raise_r+0x32>
 8023c44:	4628      	mov	r0, r5
 8023c46:	f000 f865 	bl	8023d14 <_getpid_r>
 8023c4a:	4622      	mov	r2, r4
 8023c4c:	4601      	mov	r1, r0
 8023c4e:	4628      	mov	r0, r5
 8023c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023c54:	f000 b84c 	b.w	8023cf0 <_kill_r>
 8023c58:	2b01      	cmp	r3, #1
 8023c5a:	d00a      	beq.n	8023c72 <_raise_r+0x4c>
 8023c5c:	1c59      	adds	r1, r3, #1
 8023c5e:	d103      	bne.n	8023c68 <_raise_r+0x42>
 8023c60:	2316      	movs	r3, #22
 8023c62:	6003      	str	r3, [r0, #0]
 8023c64:	2001      	movs	r0, #1
 8023c66:	e7e7      	b.n	8023c38 <_raise_r+0x12>
 8023c68:	2100      	movs	r1, #0
 8023c6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023c6e:	4620      	mov	r0, r4
 8023c70:	4798      	blx	r3
 8023c72:	2000      	movs	r0, #0
 8023c74:	e7e0      	b.n	8023c38 <_raise_r+0x12>
	...

08023c78 <raise>:
 8023c78:	4b02      	ldr	r3, [pc, #8]	@ (8023c84 <raise+0xc>)
 8023c7a:	4601      	mov	r1, r0
 8023c7c:	6818      	ldr	r0, [r3, #0]
 8023c7e:	f7ff bfd2 	b.w	8023c26 <_raise_r>
 8023c82:	bf00      	nop
 8023c84:	2000022c 	.word	0x2000022c

08023c88 <_close_r>:
 8023c88:	b538      	push	{r3, r4, r5, lr}
 8023c8a:	4d06      	ldr	r5, [pc, #24]	@ (8023ca4 <_close_r+0x1c>)
 8023c8c:	2300      	movs	r3, #0
 8023c8e:	4604      	mov	r4, r0
 8023c90:	4608      	mov	r0, r1
 8023c92:	602b      	str	r3, [r5, #0]
 8023c94:	f7dd fd64 	bl	8001760 <_close>
 8023c98:	1c43      	adds	r3, r0, #1
 8023c9a:	d102      	bne.n	8023ca2 <_close_r+0x1a>
 8023c9c:	682b      	ldr	r3, [r5, #0]
 8023c9e:	b103      	cbz	r3, 8023ca2 <_close_r+0x1a>
 8023ca0:	6023      	str	r3, [r4, #0]
 8023ca2:	bd38      	pop	{r3, r4, r5, pc}
 8023ca4:	2000298c 	.word	0x2000298c

08023ca8 <_lseek_r>:
 8023ca8:	b538      	push	{r3, r4, r5, lr}
 8023caa:	4d07      	ldr	r5, [pc, #28]	@ (8023cc8 <_lseek_r+0x20>)
 8023cac:	4604      	mov	r4, r0
 8023cae:	4608      	mov	r0, r1
 8023cb0:	4611      	mov	r1, r2
 8023cb2:	2200      	movs	r2, #0
 8023cb4:	602a      	str	r2, [r5, #0]
 8023cb6:	461a      	mov	r2, r3
 8023cb8:	f7dd fd79 	bl	80017ae <_lseek>
 8023cbc:	1c43      	adds	r3, r0, #1
 8023cbe:	d102      	bne.n	8023cc6 <_lseek_r+0x1e>
 8023cc0:	682b      	ldr	r3, [r5, #0]
 8023cc2:	b103      	cbz	r3, 8023cc6 <_lseek_r+0x1e>
 8023cc4:	6023      	str	r3, [r4, #0]
 8023cc6:	bd38      	pop	{r3, r4, r5, pc}
 8023cc8:	2000298c 	.word	0x2000298c

08023ccc <_read_r>:
 8023ccc:	b538      	push	{r3, r4, r5, lr}
 8023cce:	4d07      	ldr	r5, [pc, #28]	@ (8023cec <_read_r+0x20>)
 8023cd0:	4604      	mov	r4, r0
 8023cd2:	4608      	mov	r0, r1
 8023cd4:	4611      	mov	r1, r2
 8023cd6:	2200      	movs	r2, #0
 8023cd8:	602a      	str	r2, [r5, #0]
 8023cda:	461a      	mov	r2, r3
 8023cdc:	f7dd fd07 	bl	80016ee <_read>
 8023ce0:	1c43      	adds	r3, r0, #1
 8023ce2:	d102      	bne.n	8023cea <_read_r+0x1e>
 8023ce4:	682b      	ldr	r3, [r5, #0]
 8023ce6:	b103      	cbz	r3, 8023cea <_read_r+0x1e>
 8023ce8:	6023      	str	r3, [r4, #0]
 8023cea:	bd38      	pop	{r3, r4, r5, pc}
 8023cec:	2000298c 	.word	0x2000298c

08023cf0 <_kill_r>:
 8023cf0:	b538      	push	{r3, r4, r5, lr}
 8023cf2:	4d07      	ldr	r5, [pc, #28]	@ (8023d10 <_kill_r+0x20>)
 8023cf4:	2300      	movs	r3, #0
 8023cf6:	4604      	mov	r4, r0
 8023cf8:	4608      	mov	r0, r1
 8023cfa:	4611      	mov	r1, r2
 8023cfc:	602b      	str	r3, [r5, #0]
 8023cfe:	f7dd fcdb 	bl	80016b8 <_kill>
 8023d02:	1c43      	adds	r3, r0, #1
 8023d04:	d102      	bne.n	8023d0c <_kill_r+0x1c>
 8023d06:	682b      	ldr	r3, [r5, #0]
 8023d08:	b103      	cbz	r3, 8023d0c <_kill_r+0x1c>
 8023d0a:	6023      	str	r3, [r4, #0]
 8023d0c:	bd38      	pop	{r3, r4, r5, pc}
 8023d0e:	bf00      	nop
 8023d10:	2000298c 	.word	0x2000298c

08023d14 <_getpid_r>:
 8023d14:	f7dd bcc8 	b.w	80016a8 <_getpid>

08023d18 <_sbrk_r>:
 8023d18:	b538      	push	{r3, r4, r5, lr}
 8023d1a:	4d06      	ldr	r5, [pc, #24]	@ (8023d34 <_sbrk_r+0x1c>)
 8023d1c:	2300      	movs	r3, #0
 8023d1e:	4604      	mov	r4, r0
 8023d20:	4608      	mov	r0, r1
 8023d22:	602b      	str	r3, [r5, #0]
 8023d24:	f7dd fd50 	bl	80017c8 <_sbrk>
 8023d28:	1c43      	adds	r3, r0, #1
 8023d2a:	d102      	bne.n	8023d32 <_sbrk_r+0x1a>
 8023d2c:	682b      	ldr	r3, [r5, #0]
 8023d2e:	b103      	cbz	r3, 8023d32 <_sbrk_r+0x1a>
 8023d30:	6023      	str	r3, [r4, #0]
 8023d32:	bd38      	pop	{r3, r4, r5, pc}
 8023d34:	2000298c 	.word	0x2000298c

08023d38 <_write_r>:
 8023d38:	b538      	push	{r3, r4, r5, lr}
 8023d3a:	4d07      	ldr	r5, [pc, #28]	@ (8023d58 <_write_r+0x20>)
 8023d3c:	4604      	mov	r4, r0
 8023d3e:	4608      	mov	r0, r1
 8023d40:	4611      	mov	r1, r2
 8023d42:	2200      	movs	r2, #0
 8023d44:	602a      	str	r2, [r5, #0]
 8023d46:	461a      	mov	r2, r3
 8023d48:	f7dd fcee 	bl	8001728 <_write>
 8023d4c:	1c43      	adds	r3, r0, #1
 8023d4e:	d102      	bne.n	8023d56 <_write_r+0x1e>
 8023d50:	682b      	ldr	r3, [r5, #0]
 8023d52:	b103      	cbz	r3, 8023d56 <_write_r+0x1e>
 8023d54:	6023      	str	r3, [r4, #0]
 8023d56:	bd38      	pop	{r3, r4, r5, pc}
 8023d58:	2000298c 	.word	0x2000298c

08023d5c <__errno>:
 8023d5c:	4b01      	ldr	r3, [pc, #4]	@ (8023d64 <__errno+0x8>)
 8023d5e:	6818      	ldr	r0, [r3, #0]
 8023d60:	4770      	bx	lr
 8023d62:	bf00      	nop
 8023d64:	2000022c 	.word	0x2000022c

08023d68 <__libc_init_array>:
 8023d68:	b570      	push	{r4, r5, r6, lr}
 8023d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8023da0 <__libc_init_array+0x38>)
 8023d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8023da4 <__libc_init_array+0x3c>)
 8023d6e:	1b64      	subs	r4, r4, r5
 8023d70:	10a4      	asrs	r4, r4, #2
 8023d72:	2600      	movs	r6, #0
 8023d74:	42a6      	cmp	r6, r4
 8023d76:	d109      	bne.n	8023d8c <__libc_init_array+0x24>
 8023d78:	4d0b      	ldr	r5, [pc, #44]	@ (8023da8 <__libc_init_array+0x40>)
 8023d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8023dac <__libc_init_array+0x44>)
 8023d7c:	f000 fd56 	bl	802482c <_init>
 8023d80:	1b64      	subs	r4, r4, r5
 8023d82:	10a4      	asrs	r4, r4, #2
 8023d84:	2600      	movs	r6, #0
 8023d86:	42a6      	cmp	r6, r4
 8023d88:	d105      	bne.n	8023d96 <__libc_init_array+0x2e>
 8023d8a:	bd70      	pop	{r4, r5, r6, pc}
 8023d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023d90:	4798      	blx	r3
 8023d92:	3601      	adds	r6, #1
 8023d94:	e7ee      	b.n	8023d74 <__libc_init_array+0xc>
 8023d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8023d9a:	4798      	blx	r3
 8023d9c:	3601      	adds	r6, #1
 8023d9e:	e7f2      	b.n	8023d86 <__libc_init_array+0x1e>
 8023da0:	080265ec 	.word	0x080265ec
 8023da4:	080265ec 	.word	0x080265ec
 8023da8:	080265ec 	.word	0x080265ec
 8023dac:	08026600 	.word	0x08026600

08023db0 <__retarget_lock_init_recursive>:
 8023db0:	4770      	bx	lr

08023db2 <__retarget_lock_acquire_recursive>:
 8023db2:	4770      	bx	lr

08023db4 <__retarget_lock_release_recursive>:
 8023db4:	4770      	bx	lr
	...

08023db8 <__register_exitproc>:
 8023db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023dbc:	4d27      	ldr	r5, [pc, #156]	@ (8023e5c <__register_exitproc+0xa4>)
 8023dbe:	4607      	mov	r7, r0
 8023dc0:	6828      	ldr	r0, [r5, #0]
 8023dc2:	4691      	mov	r9, r2
 8023dc4:	460e      	mov	r6, r1
 8023dc6:	4698      	mov	r8, r3
 8023dc8:	f7ff fff3 	bl	8023db2 <__retarget_lock_acquire_recursive>
 8023dcc:	4a24      	ldr	r2, [pc, #144]	@ (8023e60 <__register_exitproc+0xa8>)
 8023dce:	6814      	ldr	r4, [r2, #0]
 8023dd0:	b93c      	cbnz	r4, 8023de2 <__register_exitproc+0x2a>
 8023dd2:	4b24      	ldr	r3, [pc, #144]	@ (8023e64 <__register_exitproc+0xac>)
 8023dd4:	6013      	str	r3, [r2, #0]
 8023dd6:	4a24      	ldr	r2, [pc, #144]	@ (8023e68 <__register_exitproc+0xb0>)
 8023dd8:	b112      	cbz	r2, 8023de0 <__register_exitproc+0x28>
 8023dda:	6812      	ldr	r2, [r2, #0]
 8023ddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8023de0:	4c20      	ldr	r4, [pc, #128]	@ (8023e64 <__register_exitproc+0xac>)
 8023de2:	6863      	ldr	r3, [r4, #4]
 8023de4:	2b1f      	cmp	r3, #31
 8023de6:	dd06      	ble.n	8023df6 <__register_exitproc+0x3e>
 8023de8:	6828      	ldr	r0, [r5, #0]
 8023dea:	f7ff ffe3 	bl	8023db4 <__retarget_lock_release_recursive>
 8023dee:	f04f 30ff 	mov.w	r0, #4294967295
 8023df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023df6:	b32f      	cbz	r7, 8023e44 <__register_exitproc+0x8c>
 8023df8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8023dfc:	b968      	cbnz	r0, 8023e1a <__register_exitproc+0x62>
 8023dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8023e6c <__register_exitproc+0xb4>)
 8023e00:	2b00      	cmp	r3, #0
 8023e02:	d0f1      	beq.n	8023de8 <__register_exitproc+0x30>
 8023e04:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8023e08:	f7ff fd22 	bl	8023850 <malloc>
 8023e0c:	2800      	cmp	r0, #0
 8023e0e:	d0eb      	beq.n	8023de8 <__register_exitproc+0x30>
 8023e10:	2300      	movs	r3, #0
 8023e12:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8023e16:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8023e1a:	6863      	ldr	r3, [r4, #4]
 8023e1c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023e20:	2201      	movs	r2, #1
 8023e22:	409a      	lsls	r2, r3
 8023e24:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023e28:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8023e2c:	4313      	orrs	r3, r2
 8023e2e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8023e32:	2f02      	cmp	r7, #2
 8023e34:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8023e38:	bf02      	ittt	eq
 8023e3a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8023e3e:	4313      	orreq	r3, r2
 8023e40:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8023e44:	6863      	ldr	r3, [r4, #4]
 8023e46:	6828      	ldr	r0, [r5, #0]
 8023e48:	1c5a      	adds	r2, r3, #1
 8023e4a:	3302      	adds	r3, #2
 8023e4c:	6062      	str	r2, [r4, #4]
 8023e4e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8023e52:	f7ff ffaf 	bl	8023db4 <__retarget_lock_release_recursive>
 8023e56:	2000      	movs	r0, #0
 8023e58:	e7cb      	b.n	8023df2 <__register_exitproc+0x3a>
 8023e5a:	bf00      	nop
 8023e5c:	2000027c 	.word	0x2000027c
 8023e60:	20002a20 	.word	0x20002a20
 8023e64:	20002994 	.word	0x20002994
 8023e68:	080263dc 	.word	0x080263dc
 8023e6c:	08023851 	.word	0x08023851

08023e70 <_free_r>:
 8023e70:	b538      	push	{r3, r4, r5, lr}
 8023e72:	4605      	mov	r5, r0
 8023e74:	2900      	cmp	r1, #0
 8023e76:	d041      	beq.n	8023efc <_free_r+0x8c>
 8023e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023e7c:	1f0c      	subs	r4, r1, #4
 8023e7e:	2b00      	cmp	r3, #0
 8023e80:	bfb8      	it	lt
 8023e82:	18e4      	addlt	r4, r4, r3
 8023e84:	f7ff fd96 	bl	80239b4 <__malloc_lock>
 8023e88:	4a1d      	ldr	r2, [pc, #116]	@ (8023f00 <_free_r+0x90>)
 8023e8a:	6813      	ldr	r3, [r2, #0]
 8023e8c:	b933      	cbnz	r3, 8023e9c <_free_r+0x2c>
 8023e8e:	6063      	str	r3, [r4, #4]
 8023e90:	6014      	str	r4, [r2, #0]
 8023e92:	4628      	mov	r0, r5
 8023e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e98:	f7ff bd92 	b.w	80239c0 <__malloc_unlock>
 8023e9c:	42a3      	cmp	r3, r4
 8023e9e:	d908      	bls.n	8023eb2 <_free_r+0x42>
 8023ea0:	6820      	ldr	r0, [r4, #0]
 8023ea2:	1821      	adds	r1, r4, r0
 8023ea4:	428b      	cmp	r3, r1
 8023ea6:	bf01      	itttt	eq
 8023ea8:	6819      	ldreq	r1, [r3, #0]
 8023eaa:	685b      	ldreq	r3, [r3, #4]
 8023eac:	1809      	addeq	r1, r1, r0
 8023eae:	6021      	streq	r1, [r4, #0]
 8023eb0:	e7ed      	b.n	8023e8e <_free_r+0x1e>
 8023eb2:	461a      	mov	r2, r3
 8023eb4:	685b      	ldr	r3, [r3, #4]
 8023eb6:	b10b      	cbz	r3, 8023ebc <_free_r+0x4c>
 8023eb8:	42a3      	cmp	r3, r4
 8023eba:	d9fa      	bls.n	8023eb2 <_free_r+0x42>
 8023ebc:	6811      	ldr	r1, [r2, #0]
 8023ebe:	1850      	adds	r0, r2, r1
 8023ec0:	42a0      	cmp	r0, r4
 8023ec2:	d10b      	bne.n	8023edc <_free_r+0x6c>
 8023ec4:	6820      	ldr	r0, [r4, #0]
 8023ec6:	4401      	add	r1, r0
 8023ec8:	1850      	adds	r0, r2, r1
 8023eca:	4283      	cmp	r3, r0
 8023ecc:	6011      	str	r1, [r2, #0]
 8023ece:	d1e0      	bne.n	8023e92 <_free_r+0x22>
 8023ed0:	6818      	ldr	r0, [r3, #0]
 8023ed2:	685b      	ldr	r3, [r3, #4]
 8023ed4:	6053      	str	r3, [r2, #4]
 8023ed6:	4408      	add	r0, r1
 8023ed8:	6010      	str	r0, [r2, #0]
 8023eda:	e7da      	b.n	8023e92 <_free_r+0x22>
 8023edc:	d902      	bls.n	8023ee4 <_free_r+0x74>
 8023ede:	230c      	movs	r3, #12
 8023ee0:	602b      	str	r3, [r5, #0]
 8023ee2:	e7d6      	b.n	8023e92 <_free_r+0x22>
 8023ee4:	6820      	ldr	r0, [r4, #0]
 8023ee6:	1821      	adds	r1, r4, r0
 8023ee8:	428b      	cmp	r3, r1
 8023eea:	bf04      	itt	eq
 8023eec:	6819      	ldreq	r1, [r3, #0]
 8023eee:	685b      	ldreq	r3, [r3, #4]
 8023ef0:	6063      	str	r3, [r4, #4]
 8023ef2:	bf04      	itt	eq
 8023ef4:	1809      	addeq	r1, r1, r0
 8023ef6:	6021      	streq	r1, [r4, #0]
 8023ef8:	6054      	str	r4, [r2, #4]
 8023efa:	e7ca      	b.n	8023e92 <_free_r+0x22>
 8023efc:	bd38      	pop	{r3, r4, r5, pc}
 8023efe:	bf00      	nop
 8023f00:	2000284c 	.word	0x2000284c

08023f04 <__sfputc_r>:
 8023f04:	6893      	ldr	r3, [r2, #8]
 8023f06:	3b01      	subs	r3, #1
 8023f08:	2b00      	cmp	r3, #0
 8023f0a:	b410      	push	{r4}
 8023f0c:	6093      	str	r3, [r2, #8]
 8023f0e:	da08      	bge.n	8023f22 <__sfputc_r+0x1e>
 8023f10:	6994      	ldr	r4, [r2, #24]
 8023f12:	42a3      	cmp	r3, r4
 8023f14:	db01      	blt.n	8023f1a <__sfputc_r+0x16>
 8023f16:	290a      	cmp	r1, #10
 8023f18:	d103      	bne.n	8023f22 <__sfputc_r+0x1e>
 8023f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023f1e:	f000 bb6d 	b.w	80245fc <__swbuf_r>
 8023f22:	6813      	ldr	r3, [r2, #0]
 8023f24:	1c58      	adds	r0, r3, #1
 8023f26:	6010      	str	r0, [r2, #0]
 8023f28:	7019      	strb	r1, [r3, #0]
 8023f2a:	4608      	mov	r0, r1
 8023f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023f30:	4770      	bx	lr

08023f32 <__sfputs_r>:
 8023f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f34:	4606      	mov	r6, r0
 8023f36:	460f      	mov	r7, r1
 8023f38:	4614      	mov	r4, r2
 8023f3a:	18d5      	adds	r5, r2, r3
 8023f3c:	42ac      	cmp	r4, r5
 8023f3e:	d101      	bne.n	8023f44 <__sfputs_r+0x12>
 8023f40:	2000      	movs	r0, #0
 8023f42:	e007      	b.n	8023f54 <__sfputs_r+0x22>
 8023f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f48:	463a      	mov	r2, r7
 8023f4a:	4630      	mov	r0, r6
 8023f4c:	f7ff ffda 	bl	8023f04 <__sfputc_r>
 8023f50:	1c43      	adds	r3, r0, #1
 8023f52:	d1f3      	bne.n	8023f3c <__sfputs_r+0xa>
 8023f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023f58 <_vfiprintf_r>:
 8023f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f5c:	460d      	mov	r5, r1
 8023f5e:	b09d      	sub	sp, #116	@ 0x74
 8023f60:	4614      	mov	r4, r2
 8023f62:	4698      	mov	r8, r3
 8023f64:	4606      	mov	r6, r0
 8023f66:	b118      	cbz	r0, 8023f70 <_vfiprintf_r+0x18>
 8023f68:	6a03      	ldr	r3, [r0, #32]
 8023f6a:	b90b      	cbnz	r3, 8023f70 <_vfiprintf_r+0x18>
 8023f6c:	f7ff fdc8 	bl	8023b00 <__sinit>
 8023f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023f72:	07d9      	lsls	r1, r3, #31
 8023f74:	d405      	bmi.n	8023f82 <_vfiprintf_r+0x2a>
 8023f76:	89ab      	ldrh	r3, [r5, #12]
 8023f78:	059a      	lsls	r2, r3, #22
 8023f7a:	d402      	bmi.n	8023f82 <_vfiprintf_r+0x2a>
 8023f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023f7e:	f7ff ff18 	bl	8023db2 <__retarget_lock_acquire_recursive>
 8023f82:	89ab      	ldrh	r3, [r5, #12]
 8023f84:	071b      	lsls	r3, r3, #28
 8023f86:	d501      	bpl.n	8023f8c <_vfiprintf_r+0x34>
 8023f88:	692b      	ldr	r3, [r5, #16]
 8023f8a:	b99b      	cbnz	r3, 8023fb4 <_vfiprintf_r+0x5c>
 8023f8c:	4629      	mov	r1, r5
 8023f8e:	4630      	mov	r0, r6
 8023f90:	f000 fb72 	bl	8024678 <__swsetup_r>
 8023f94:	b170      	cbz	r0, 8023fb4 <_vfiprintf_r+0x5c>
 8023f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023f98:	07dc      	lsls	r4, r3, #31
 8023f9a:	d504      	bpl.n	8023fa6 <_vfiprintf_r+0x4e>
 8023f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8023fa0:	b01d      	add	sp, #116	@ 0x74
 8023fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fa6:	89ab      	ldrh	r3, [r5, #12]
 8023fa8:	0598      	lsls	r0, r3, #22
 8023faa:	d4f7      	bmi.n	8023f9c <_vfiprintf_r+0x44>
 8023fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023fae:	f7ff ff01 	bl	8023db4 <__retarget_lock_release_recursive>
 8023fb2:	e7f3      	b.n	8023f9c <_vfiprintf_r+0x44>
 8023fb4:	2300      	movs	r3, #0
 8023fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fb8:	2320      	movs	r3, #32
 8023fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8023fc2:	2330      	movs	r3, #48	@ 0x30
 8023fc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024174 <_vfiprintf_r+0x21c>
 8023fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023fcc:	f04f 0901 	mov.w	r9, #1
 8023fd0:	4623      	mov	r3, r4
 8023fd2:	469a      	mov	sl, r3
 8023fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023fd8:	b10a      	cbz	r2, 8023fde <_vfiprintf_r+0x86>
 8023fda:	2a25      	cmp	r2, #37	@ 0x25
 8023fdc:	d1f9      	bne.n	8023fd2 <_vfiprintf_r+0x7a>
 8023fde:	ebba 0b04 	subs.w	fp, sl, r4
 8023fe2:	d00b      	beq.n	8023ffc <_vfiprintf_r+0xa4>
 8023fe4:	465b      	mov	r3, fp
 8023fe6:	4622      	mov	r2, r4
 8023fe8:	4629      	mov	r1, r5
 8023fea:	4630      	mov	r0, r6
 8023fec:	f7ff ffa1 	bl	8023f32 <__sfputs_r>
 8023ff0:	3001      	adds	r0, #1
 8023ff2:	f000 80a7 	beq.w	8024144 <_vfiprintf_r+0x1ec>
 8023ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023ff8:	445a      	add	r2, fp
 8023ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8023ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8024000:	2b00      	cmp	r3, #0
 8024002:	f000 809f 	beq.w	8024144 <_vfiprintf_r+0x1ec>
 8024006:	2300      	movs	r3, #0
 8024008:	f04f 32ff 	mov.w	r2, #4294967295
 802400c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024010:	f10a 0a01 	add.w	sl, sl, #1
 8024014:	9304      	str	r3, [sp, #16]
 8024016:	9307      	str	r3, [sp, #28]
 8024018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802401c:	931a      	str	r3, [sp, #104]	@ 0x68
 802401e:	4654      	mov	r4, sl
 8024020:	2205      	movs	r2, #5
 8024022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024026:	4853      	ldr	r0, [pc, #332]	@ (8024174 <_vfiprintf_r+0x21c>)
 8024028:	f7dc f8f2 	bl	8000210 <memchr>
 802402c:	9a04      	ldr	r2, [sp, #16]
 802402e:	b9d8      	cbnz	r0, 8024068 <_vfiprintf_r+0x110>
 8024030:	06d1      	lsls	r1, r2, #27
 8024032:	bf44      	itt	mi
 8024034:	2320      	movmi	r3, #32
 8024036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802403a:	0713      	lsls	r3, r2, #28
 802403c:	bf44      	itt	mi
 802403e:	232b      	movmi	r3, #43	@ 0x2b
 8024040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024044:	f89a 3000 	ldrb.w	r3, [sl]
 8024048:	2b2a      	cmp	r3, #42	@ 0x2a
 802404a:	d015      	beq.n	8024078 <_vfiprintf_r+0x120>
 802404c:	9a07      	ldr	r2, [sp, #28]
 802404e:	4654      	mov	r4, sl
 8024050:	2000      	movs	r0, #0
 8024052:	f04f 0c0a 	mov.w	ip, #10
 8024056:	4621      	mov	r1, r4
 8024058:	f811 3b01 	ldrb.w	r3, [r1], #1
 802405c:	3b30      	subs	r3, #48	@ 0x30
 802405e:	2b09      	cmp	r3, #9
 8024060:	d94b      	bls.n	80240fa <_vfiprintf_r+0x1a2>
 8024062:	b1b0      	cbz	r0, 8024092 <_vfiprintf_r+0x13a>
 8024064:	9207      	str	r2, [sp, #28]
 8024066:	e014      	b.n	8024092 <_vfiprintf_r+0x13a>
 8024068:	eba0 0308 	sub.w	r3, r0, r8
 802406c:	fa09 f303 	lsl.w	r3, r9, r3
 8024070:	4313      	orrs	r3, r2
 8024072:	9304      	str	r3, [sp, #16]
 8024074:	46a2      	mov	sl, r4
 8024076:	e7d2      	b.n	802401e <_vfiprintf_r+0xc6>
 8024078:	9b03      	ldr	r3, [sp, #12]
 802407a:	1d19      	adds	r1, r3, #4
 802407c:	681b      	ldr	r3, [r3, #0]
 802407e:	9103      	str	r1, [sp, #12]
 8024080:	2b00      	cmp	r3, #0
 8024082:	bfbb      	ittet	lt
 8024084:	425b      	neglt	r3, r3
 8024086:	f042 0202 	orrlt.w	r2, r2, #2
 802408a:	9307      	strge	r3, [sp, #28]
 802408c:	9307      	strlt	r3, [sp, #28]
 802408e:	bfb8      	it	lt
 8024090:	9204      	strlt	r2, [sp, #16]
 8024092:	7823      	ldrb	r3, [r4, #0]
 8024094:	2b2e      	cmp	r3, #46	@ 0x2e
 8024096:	d10a      	bne.n	80240ae <_vfiprintf_r+0x156>
 8024098:	7863      	ldrb	r3, [r4, #1]
 802409a:	2b2a      	cmp	r3, #42	@ 0x2a
 802409c:	d132      	bne.n	8024104 <_vfiprintf_r+0x1ac>
 802409e:	9b03      	ldr	r3, [sp, #12]
 80240a0:	1d1a      	adds	r2, r3, #4
 80240a2:	681b      	ldr	r3, [r3, #0]
 80240a4:	9203      	str	r2, [sp, #12]
 80240a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80240aa:	3402      	adds	r4, #2
 80240ac:	9305      	str	r3, [sp, #20]
 80240ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024184 <_vfiprintf_r+0x22c>
 80240b2:	7821      	ldrb	r1, [r4, #0]
 80240b4:	2203      	movs	r2, #3
 80240b6:	4650      	mov	r0, sl
 80240b8:	f7dc f8aa 	bl	8000210 <memchr>
 80240bc:	b138      	cbz	r0, 80240ce <_vfiprintf_r+0x176>
 80240be:	9b04      	ldr	r3, [sp, #16]
 80240c0:	eba0 000a 	sub.w	r0, r0, sl
 80240c4:	2240      	movs	r2, #64	@ 0x40
 80240c6:	4082      	lsls	r2, r0
 80240c8:	4313      	orrs	r3, r2
 80240ca:	3401      	adds	r4, #1
 80240cc:	9304      	str	r3, [sp, #16]
 80240ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80240d2:	4829      	ldr	r0, [pc, #164]	@ (8024178 <_vfiprintf_r+0x220>)
 80240d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80240d8:	2206      	movs	r2, #6
 80240da:	f7dc f899 	bl	8000210 <memchr>
 80240de:	2800      	cmp	r0, #0
 80240e0:	d03f      	beq.n	8024162 <_vfiprintf_r+0x20a>
 80240e2:	4b26      	ldr	r3, [pc, #152]	@ (802417c <_vfiprintf_r+0x224>)
 80240e4:	bb1b      	cbnz	r3, 802412e <_vfiprintf_r+0x1d6>
 80240e6:	9b03      	ldr	r3, [sp, #12]
 80240e8:	3307      	adds	r3, #7
 80240ea:	f023 0307 	bic.w	r3, r3, #7
 80240ee:	3308      	adds	r3, #8
 80240f0:	9303      	str	r3, [sp, #12]
 80240f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240f4:	443b      	add	r3, r7
 80240f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80240f8:	e76a      	b.n	8023fd0 <_vfiprintf_r+0x78>
 80240fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80240fe:	460c      	mov	r4, r1
 8024100:	2001      	movs	r0, #1
 8024102:	e7a8      	b.n	8024056 <_vfiprintf_r+0xfe>
 8024104:	2300      	movs	r3, #0
 8024106:	3401      	adds	r4, #1
 8024108:	9305      	str	r3, [sp, #20]
 802410a:	4619      	mov	r1, r3
 802410c:	f04f 0c0a 	mov.w	ip, #10
 8024110:	4620      	mov	r0, r4
 8024112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024116:	3a30      	subs	r2, #48	@ 0x30
 8024118:	2a09      	cmp	r2, #9
 802411a:	d903      	bls.n	8024124 <_vfiprintf_r+0x1cc>
 802411c:	2b00      	cmp	r3, #0
 802411e:	d0c6      	beq.n	80240ae <_vfiprintf_r+0x156>
 8024120:	9105      	str	r1, [sp, #20]
 8024122:	e7c4      	b.n	80240ae <_vfiprintf_r+0x156>
 8024124:	fb0c 2101 	mla	r1, ip, r1, r2
 8024128:	4604      	mov	r4, r0
 802412a:	2301      	movs	r3, #1
 802412c:	e7f0      	b.n	8024110 <_vfiprintf_r+0x1b8>
 802412e:	ab03      	add	r3, sp, #12
 8024130:	9300      	str	r3, [sp, #0]
 8024132:	462a      	mov	r2, r5
 8024134:	4b12      	ldr	r3, [pc, #72]	@ (8024180 <_vfiprintf_r+0x228>)
 8024136:	a904      	add	r1, sp, #16
 8024138:	4630      	mov	r0, r6
 802413a:	f3af 8000 	nop.w
 802413e:	4607      	mov	r7, r0
 8024140:	1c78      	adds	r0, r7, #1
 8024142:	d1d6      	bne.n	80240f2 <_vfiprintf_r+0x19a>
 8024144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024146:	07d9      	lsls	r1, r3, #31
 8024148:	d405      	bmi.n	8024156 <_vfiprintf_r+0x1fe>
 802414a:	89ab      	ldrh	r3, [r5, #12]
 802414c:	059a      	lsls	r2, r3, #22
 802414e:	d402      	bmi.n	8024156 <_vfiprintf_r+0x1fe>
 8024150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024152:	f7ff fe2f 	bl	8023db4 <__retarget_lock_release_recursive>
 8024156:	89ab      	ldrh	r3, [r5, #12]
 8024158:	065b      	lsls	r3, r3, #25
 802415a:	f53f af1f 	bmi.w	8023f9c <_vfiprintf_r+0x44>
 802415e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024160:	e71e      	b.n	8023fa0 <_vfiprintf_r+0x48>
 8024162:	ab03      	add	r3, sp, #12
 8024164:	9300      	str	r3, [sp, #0]
 8024166:	462a      	mov	r2, r5
 8024168:	4b05      	ldr	r3, [pc, #20]	@ (8024180 <_vfiprintf_r+0x228>)
 802416a:	a904      	add	r1, sp, #16
 802416c:	4630      	mov	r0, r6
 802416e:	f000 f879 	bl	8024264 <_printf_i>
 8024172:	e7e4      	b.n	802413e <_vfiprintf_r+0x1e6>
 8024174:	080263e0 	.word	0x080263e0
 8024178:	080263ea 	.word	0x080263ea
 802417c:	00000000 	.word	0x00000000
 8024180:	08023f33 	.word	0x08023f33
 8024184:	080263e6 	.word	0x080263e6

08024188 <_printf_common>:
 8024188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802418c:	4616      	mov	r6, r2
 802418e:	4698      	mov	r8, r3
 8024190:	688a      	ldr	r2, [r1, #8]
 8024192:	690b      	ldr	r3, [r1, #16]
 8024194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024198:	4293      	cmp	r3, r2
 802419a:	bfb8      	it	lt
 802419c:	4613      	movlt	r3, r2
 802419e:	6033      	str	r3, [r6, #0]
 80241a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80241a4:	4607      	mov	r7, r0
 80241a6:	460c      	mov	r4, r1
 80241a8:	b10a      	cbz	r2, 80241ae <_printf_common+0x26>
 80241aa:	3301      	adds	r3, #1
 80241ac:	6033      	str	r3, [r6, #0]
 80241ae:	6823      	ldr	r3, [r4, #0]
 80241b0:	0699      	lsls	r1, r3, #26
 80241b2:	bf42      	ittt	mi
 80241b4:	6833      	ldrmi	r3, [r6, #0]
 80241b6:	3302      	addmi	r3, #2
 80241b8:	6033      	strmi	r3, [r6, #0]
 80241ba:	6825      	ldr	r5, [r4, #0]
 80241bc:	f015 0506 	ands.w	r5, r5, #6
 80241c0:	d106      	bne.n	80241d0 <_printf_common+0x48>
 80241c2:	f104 0a19 	add.w	sl, r4, #25
 80241c6:	68e3      	ldr	r3, [r4, #12]
 80241c8:	6832      	ldr	r2, [r6, #0]
 80241ca:	1a9b      	subs	r3, r3, r2
 80241cc:	42ab      	cmp	r3, r5
 80241ce:	dc26      	bgt.n	802421e <_printf_common+0x96>
 80241d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80241d4:	6822      	ldr	r2, [r4, #0]
 80241d6:	3b00      	subs	r3, #0
 80241d8:	bf18      	it	ne
 80241da:	2301      	movne	r3, #1
 80241dc:	0692      	lsls	r2, r2, #26
 80241de:	d42b      	bmi.n	8024238 <_printf_common+0xb0>
 80241e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80241e4:	4641      	mov	r1, r8
 80241e6:	4638      	mov	r0, r7
 80241e8:	47c8      	blx	r9
 80241ea:	3001      	adds	r0, #1
 80241ec:	d01e      	beq.n	802422c <_printf_common+0xa4>
 80241ee:	6823      	ldr	r3, [r4, #0]
 80241f0:	6922      	ldr	r2, [r4, #16]
 80241f2:	f003 0306 	and.w	r3, r3, #6
 80241f6:	2b04      	cmp	r3, #4
 80241f8:	bf02      	ittt	eq
 80241fa:	68e5      	ldreq	r5, [r4, #12]
 80241fc:	6833      	ldreq	r3, [r6, #0]
 80241fe:	1aed      	subeq	r5, r5, r3
 8024200:	68a3      	ldr	r3, [r4, #8]
 8024202:	bf0c      	ite	eq
 8024204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024208:	2500      	movne	r5, #0
 802420a:	4293      	cmp	r3, r2
 802420c:	bfc4      	itt	gt
 802420e:	1a9b      	subgt	r3, r3, r2
 8024210:	18ed      	addgt	r5, r5, r3
 8024212:	2600      	movs	r6, #0
 8024214:	341a      	adds	r4, #26
 8024216:	42b5      	cmp	r5, r6
 8024218:	d11a      	bne.n	8024250 <_printf_common+0xc8>
 802421a:	2000      	movs	r0, #0
 802421c:	e008      	b.n	8024230 <_printf_common+0xa8>
 802421e:	2301      	movs	r3, #1
 8024220:	4652      	mov	r2, sl
 8024222:	4641      	mov	r1, r8
 8024224:	4638      	mov	r0, r7
 8024226:	47c8      	blx	r9
 8024228:	3001      	adds	r0, #1
 802422a:	d103      	bne.n	8024234 <_printf_common+0xac>
 802422c:	f04f 30ff 	mov.w	r0, #4294967295
 8024230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024234:	3501      	adds	r5, #1
 8024236:	e7c6      	b.n	80241c6 <_printf_common+0x3e>
 8024238:	18e1      	adds	r1, r4, r3
 802423a:	1c5a      	adds	r2, r3, #1
 802423c:	2030      	movs	r0, #48	@ 0x30
 802423e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024242:	4422      	add	r2, r4
 8024244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802424c:	3302      	adds	r3, #2
 802424e:	e7c7      	b.n	80241e0 <_printf_common+0x58>
 8024250:	2301      	movs	r3, #1
 8024252:	4622      	mov	r2, r4
 8024254:	4641      	mov	r1, r8
 8024256:	4638      	mov	r0, r7
 8024258:	47c8      	blx	r9
 802425a:	3001      	adds	r0, #1
 802425c:	d0e6      	beq.n	802422c <_printf_common+0xa4>
 802425e:	3601      	adds	r6, #1
 8024260:	e7d9      	b.n	8024216 <_printf_common+0x8e>
	...

08024264 <_printf_i>:
 8024264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024268:	7e0f      	ldrb	r7, [r1, #24]
 802426a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802426c:	2f78      	cmp	r7, #120	@ 0x78
 802426e:	4691      	mov	r9, r2
 8024270:	4680      	mov	r8, r0
 8024272:	460c      	mov	r4, r1
 8024274:	469a      	mov	sl, r3
 8024276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802427a:	d807      	bhi.n	802428c <_printf_i+0x28>
 802427c:	2f62      	cmp	r7, #98	@ 0x62
 802427e:	d80a      	bhi.n	8024296 <_printf_i+0x32>
 8024280:	2f00      	cmp	r7, #0
 8024282:	f000 80d2 	beq.w	802442a <_printf_i+0x1c6>
 8024286:	2f58      	cmp	r7, #88	@ 0x58
 8024288:	f000 80b9 	beq.w	80243fe <_printf_i+0x19a>
 802428c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024294:	e03a      	b.n	802430c <_printf_i+0xa8>
 8024296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802429a:	2b15      	cmp	r3, #21
 802429c:	d8f6      	bhi.n	802428c <_printf_i+0x28>
 802429e:	a101      	add	r1, pc, #4	@ (adr r1, 80242a4 <_printf_i+0x40>)
 80242a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80242a4:	080242fd 	.word	0x080242fd
 80242a8:	08024311 	.word	0x08024311
 80242ac:	0802428d 	.word	0x0802428d
 80242b0:	0802428d 	.word	0x0802428d
 80242b4:	0802428d 	.word	0x0802428d
 80242b8:	0802428d 	.word	0x0802428d
 80242bc:	08024311 	.word	0x08024311
 80242c0:	0802428d 	.word	0x0802428d
 80242c4:	0802428d 	.word	0x0802428d
 80242c8:	0802428d 	.word	0x0802428d
 80242cc:	0802428d 	.word	0x0802428d
 80242d0:	08024411 	.word	0x08024411
 80242d4:	0802433b 	.word	0x0802433b
 80242d8:	080243cb 	.word	0x080243cb
 80242dc:	0802428d 	.word	0x0802428d
 80242e0:	0802428d 	.word	0x0802428d
 80242e4:	08024433 	.word	0x08024433
 80242e8:	0802428d 	.word	0x0802428d
 80242ec:	0802433b 	.word	0x0802433b
 80242f0:	0802428d 	.word	0x0802428d
 80242f4:	0802428d 	.word	0x0802428d
 80242f8:	080243d3 	.word	0x080243d3
 80242fc:	6833      	ldr	r3, [r6, #0]
 80242fe:	1d1a      	adds	r2, r3, #4
 8024300:	681b      	ldr	r3, [r3, #0]
 8024302:	6032      	str	r2, [r6, #0]
 8024304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802430c:	2301      	movs	r3, #1
 802430e:	e09d      	b.n	802444c <_printf_i+0x1e8>
 8024310:	6833      	ldr	r3, [r6, #0]
 8024312:	6820      	ldr	r0, [r4, #0]
 8024314:	1d19      	adds	r1, r3, #4
 8024316:	6031      	str	r1, [r6, #0]
 8024318:	0606      	lsls	r6, r0, #24
 802431a:	d501      	bpl.n	8024320 <_printf_i+0xbc>
 802431c:	681d      	ldr	r5, [r3, #0]
 802431e:	e003      	b.n	8024328 <_printf_i+0xc4>
 8024320:	0645      	lsls	r5, r0, #25
 8024322:	d5fb      	bpl.n	802431c <_printf_i+0xb8>
 8024324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024328:	2d00      	cmp	r5, #0
 802432a:	da03      	bge.n	8024334 <_printf_i+0xd0>
 802432c:	232d      	movs	r3, #45	@ 0x2d
 802432e:	426d      	negs	r5, r5
 8024330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024334:	4859      	ldr	r0, [pc, #356]	@ (802449c <_printf_i+0x238>)
 8024336:	230a      	movs	r3, #10
 8024338:	e011      	b.n	802435e <_printf_i+0xfa>
 802433a:	6821      	ldr	r1, [r4, #0]
 802433c:	6833      	ldr	r3, [r6, #0]
 802433e:	0608      	lsls	r0, r1, #24
 8024340:	f853 5b04 	ldr.w	r5, [r3], #4
 8024344:	d402      	bmi.n	802434c <_printf_i+0xe8>
 8024346:	0649      	lsls	r1, r1, #25
 8024348:	bf48      	it	mi
 802434a:	b2ad      	uxthmi	r5, r5
 802434c:	2f6f      	cmp	r7, #111	@ 0x6f
 802434e:	4853      	ldr	r0, [pc, #332]	@ (802449c <_printf_i+0x238>)
 8024350:	6033      	str	r3, [r6, #0]
 8024352:	bf14      	ite	ne
 8024354:	230a      	movne	r3, #10
 8024356:	2308      	moveq	r3, #8
 8024358:	2100      	movs	r1, #0
 802435a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802435e:	6866      	ldr	r6, [r4, #4]
 8024360:	60a6      	str	r6, [r4, #8]
 8024362:	2e00      	cmp	r6, #0
 8024364:	bfa2      	ittt	ge
 8024366:	6821      	ldrge	r1, [r4, #0]
 8024368:	f021 0104 	bicge.w	r1, r1, #4
 802436c:	6021      	strge	r1, [r4, #0]
 802436e:	b90d      	cbnz	r5, 8024374 <_printf_i+0x110>
 8024370:	2e00      	cmp	r6, #0
 8024372:	d04b      	beq.n	802440c <_printf_i+0x1a8>
 8024374:	4616      	mov	r6, r2
 8024376:	fbb5 f1f3 	udiv	r1, r5, r3
 802437a:	fb03 5711 	mls	r7, r3, r1, r5
 802437e:	5dc7      	ldrb	r7, [r0, r7]
 8024380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024384:	462f      	mov	r7, r5
 8024386:	42bb      	cmp	r3, r7
 8024388:	460d      	mov	r5, r1
 802438a:	d9f4      	bls.n	8024376 <_printf_i+0x112>
 802438c:	2b08      	cmp	r3, #8
 802438e:	d10b      	bne.n	80243a8 <_printf_i+0x144>
 8024390:	6823      	ldr	r3, [r4, #0]
 8024392:	07df      	lsls	r7, r3, #31
 8024394:	d508      	bpl.n	80243a8 <_printf_i+0x144>
 8024396:	6923      	ldr	r3, [r4, #16]
 8024398:	6861      	ldr	r1, [r4, #4]
 802439a:	4299      	cmp	r1, r3
 802439c:	bfde      	ittt	le
 802439e:	2330      	movle	r3, #48	@ 0x30
 80243a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80243a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80243a8:	1b92      	subs	r2, r2, r6
 80243aa:	6122      	str	r2, [r4, #16]
 80243ac:	f8cd a000 	str.w	sl, [sp]
 80243b0:	464b      	mov	r3, r9
 80243b2:	aa03      	add	r2, sp, #12
 80243b4:	4621      	mov	r1, r4
 80243b6:	4640      	mov	r0, r8
 80243b8:	f7ff fee6 	bl	8024188 <_printf_common>
 80243bc:	3001      	adds	r0, #1
 80243be:	d14a      	bne.n	8024456 <_printf_i+0x1f2>
 80243c0:	f04f 30ff 	mov.w	r0, #4294967295
 80243c4:	b004      	add	sp, #16
 80243c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243ca:	6823      	ldr	r3, [r4, #0]
 80243cc:	f043 0320 	orr.w	r3, r3, #32
 80243d0:	6023      	str	r3, [r4, #0]
 80243d2:	4833      	ldr	r0, [pc, #204]	@ (80244a0 <_printf_i+0x23c>)
 80243d4:	2778      	movs	r7, #120	@ 0x78
 80243d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80243da:	6823      	ldr	r3, [r4, #0]
 80243dc:	6831      	ldr	r1, [r6, #0]
 80243de:	061f      	lsls	r7, r3, #24
 80243e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80243e4:	d402      	bmi.n	80243ec <_printf_i+0x188>
 80243e6:	065f      	lsls	r7, r3, #25
 80243e8:	bf48      	it	mi
 80243ea:	b2ad      	uxthmi	r5, r5
 80243ec:	6031      	str	r1, [r6, #0]
 80243ee:	07d9      	lsls	r1, r3, #31
 80243f0:	bf44      	itt	mi
 80243f2:	f043 0320 	orrmi.w	r3, r3, #32
 80243f6:	6023      	strmi	r3, [r4, #0]
 80243f8:	b11d      	cbz	r5, 8024402 <_printf_i+0x19e>
 80243fa:	2310      	movs	r3, #16
 80243fc:	e7ac      	b.n	8024358 <_printf_i+0xf4>
 80243fe:	4827      	ldr	r0, [pc, #156]	@ (802449c <_printf_i+0x238>)
 8024400:	e7e9      	b.n	80243d6 <_printf_i+0x172>
 8024402:	6823      	ldr	r3, [r4, #0]
 8024404:	f023 0320 	bic.w	r3, r3, #32
 8024408:	6023      	str	r3, [r4, #0]
 802440a:	e7f6      	b.n	80243fa <_printf_i+0x196>
 802440c:	4616      	mov	r6, r2
 802440e:	e7bd      	b.n	802438c <_printf_i+0x128>
 8024410:	6833      	ldr	r3, [r6, #0]
 8024412:	6825      	ldr	r5, [r4, #0]
 8024414:	6961      	ldr	r1, [r4, #20]
 8024416:	1d18      	adds	r0, r3, #4
 8024418:	6030      	str	r0, [r6, #0]
 802441a:	062e      	lsls	r6, r5, #24
 802441c:	681b      	ldr	r3, [r3, #0]
 802441e:	d501      	bpl.n	8024424 <_printf_i+0x1c0>
 8024420:	6019      	str	r1, [r3, #0]
 8024422:	e002      	b.n	802442a <_printf_i+0x1c6>
 8024424:	0668      	lsls	r0, r5, #25
 8024426:	d5fb      	bpl.n	8024420 <_printf_i+0x1bc>
 8024428:	8019      	strh	r1, [r3, #0]
 802442a:	2300      	movs	r3, #0
 802442c:	6123      	str	r3, [r4, #16]
 802442e:	4616      	mov	r6, r2
 8024430:	e7bc      	b.n	80243ac <_printf_i+0x148>
 8024432:	6833      	ldr	r3, [r6, #0]
 8024434:	1d1a      	adds	r2, r3, #4
 8024436:	6032      	str	r2, [r6, #0]
 8024438:	681e      	ldr	r6, [r3, #0]
 802443a:	6862      	ldr	r2, [r4, #4]
 802443c:	2100      	movs	r1, #0
 802443e:	4630      	mov	r0, r6
 8024440:	f7db fee6 	bl	8000210 <memchr>
 8024444:	b108      	cbz	r0, 802444a <_printf_i+0x1e6>
 8024446:	1b80      	subs	r0, r0, r6
 8024448:	6060      	str	r0, [r4, #4]
 802444a:	6863      	ldr	r3, [r4, #4]
 802444c:	6123      	str	r3, [r4, #16]
 802444e:	2300      	movs	r3, #0
 8024450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024454:	e7aa      	b.n	80243ac <_printf_i+0x148>
 8024456:	6923      	ldr	r3, [r4, #16]
 8024458:	4632      	mov	r2, r6
 802445a:	4649      	mov	r1, r9
 802445c:	4640      	mov	r0, r8
 802445e:	47d0      	blx	sl
 8024460:	3001      	adds	r0, #1
 8024462:	d0ad      	beq.n	80243c0 <_printf_i+0x15c>
 8024464:	6823      	ldr	r3, [r4, #0]
 8024466:	079b      	lsls	r3, r3, #30
 8024468:	d413      	bmi.n	8024492 <_printf_i+0x22e>
 802446a:	68e0      	ldr	r0, [r4, #12]
 802446c:	9b03      	ldr	r3, [sp, #12]
 802446e:	4298      	cmp	r0, r3
 8024470:	bfb8      	it	lt
 8024472:	4618      	movlt	r0, r3
 8024474:	e7a6      	b.n	80243c4 <_printf_i+0x160>
 8024476:	2301      	movs	r3, #1
 8024478:	4632      	mov	r2, r6
 802447a:	4649      	mov	r1, r9
 802447c:	4640      	mov	r0, r8
 802447e:	47d0      	blx	sl
 8024480:	3001      	adds	r0, #1
 8024482:	d09d      	beq.n	80243c0 <_printf_i+0x15c>
 8024484:	3501      	adds	r5, #1
 8024486:	68e3      	ldr	r3, [r4, #12]
 8024488:	9903      	ldr	r1, [sp, #12]
 802448a:	1a5b      	subs	r3, r3, r1
 802448c:	42ab      	cmp	r3, r5
 802448e:	dcf2      	bgt.n	8024476 <_printf_i+0x212>
 8024490:	e7eb      	b.n	802446a <_printf_i+0x206>
 8024492:	2500      	movs	r5, #0
 8024494:	f104 0619 	add.w	r6, r4, #25
 8024498:	e7f5      	b.n	8024486 <_printf_i+0x222>
 802449a:	bf00      	nop
 802449c:	080263f1 	.word	0x080263f1
 80244a0:	08026402 	.word	0x08026402

080244a4 <__sflush_r>:
 80244a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80244a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244ac:	0716      	lsls	r6, r2, #28
 80244ae:	4605      	mov	r5, r0
 80244b0:	460c      	mov	r4, r1
 80244b2:	d454      	bmi.n	802455e <__sflush_r+0xba>
 80244b4:	684b      	ldr	r3, [r1, #4]
 80244b6:	2b00      	cmp	r3, #0
 80244b8:	dc02      	bgt.n	80244c0 <__sflush_r+0x1c>
 80244ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80244bc:	2b00      	cmp	r3, #0
 80244be:	dd48      	ble.n	8024552 <__sflush_r+0xae>
 80244c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80244c2:	2e00      	cmp	r6, #0
 80244c4:	d045      	beq.n	8024552 <__sflush_r+0xae>
 80244c6:	2300      	movs	r3, #0
 80244c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80244cc:	682f      	ldr	r7, [r5, #0]
 80244ce:	6a21      	ldr	r1, [r4, #32]
 80244d0:	602b      	str	r3, [r5, #0]
 80244d2:	d030      	beq.n	8024536 <__sflush_r+0x92>
 80244d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80244d6:	89a3      	ldrh	r3, [r4, #12]
 80244d8:	0759      	lsls	r1, r3, #29
 80244da:	d505      	bpl.n	80244e8 <__sflush_r+0x44>
 80244dc:	6863      	ldr	r3, [r4, #4]
 80244de:	1ad2      	subs	r2, r2, r3
 80244e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80244e2:	b10b      	cbz	r3, 80244e8 <__sflush_r+0x44>
 80244e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80244e6:	1ad2      	subs	r2, r2, r3
 80244e8:	2300      	movs	r3, #0
 80244ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80244ec:	6a21      	ldr	r1, [r4, #32]
 80244ee:	4628      	mov	r0, r5
 80244f0:	47b0      	blx	r6
 80244f2:	1c43      	adds	r3, r0, #1
 80244f4:	89a3      	ldrh	r3, [r4, #12]
 80244f6:	d106      	bne.n	8024506 <__sflush_r+0x62>
 80244f8:	6829      	ldr	r1, [r5, #0]
 80244fa:	291d      	cmp	r1, #29
 80244fc:	d82b      	bhi.n	8024556 <__sflush_r+0xb2>
 80244fe:	4a2a      	ldr	r2, [pc, #168]	@ (80245a8 <__sflush_r+0x104>)
 8024500:	410a      	asrs	r2, r1
 8024502:	07d6      	lsls	r6, r2, #31
 8024504:	d427      	bmi.n	8024556 <__sflush_r+0xb2>
 8024506:	2200      	movs	r2, #0
 8024508:	6062      	str	r2, [r4, #4]
 802450a:	04d9      	lsls	r1, r3, #19
 802450c:	6922      	ldr	r2, [r4, #16]
 802450e:	6022      	str	r2, [r4, #0]
 8024510:	d504      	bpl.n	802451c <__sflush_r+0x78>
 8024512:	1c42      	adds	r2, r0, #1
 8024514:	d101      	bne.n	802451a <__sflush_r+0x76>
 8024516:	682b      	ldr	r3, [r5, #0]
 8024518:	b903      	cbnz	r3, 802451c <__sflush_r+0x78>
 802451a:	6560      	str	r0, [r4, #84]	@ 0x54
 802451c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802451e:	602f      	str	r7, [r5, #0]
 8024520:	b1b9      	cbz	r1, 8024552 <__sflush_r+0xae>
 8024522:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024526:	4299      	cmp	r1, r3
 8024528:	d002      	beq.n	8024530 <__sflush_r+0x8c>
 802452a:	4628      	mov	r0, r5
 802452c:	f7ff fca0 	bl	8023e70 <_free_r>
 8024530:	2300      	movs	r3, #0
 8024532:	6363      	str	r3, [r4, #52]	@ 0x34
 8024534:	e00d      	b.n	8024552 <__sflush_r+0xae>
 8024536:	2301      	movs	r3, #1
 8024538:	4628      	mov	r0, r5
 802453a:	47b0      	blx	r6
 802453c:	4602      	mov	r2, r0
 802453e:	1c50      	adds	r0, r2, #1
 8024540:	d1c9      	bne.n	80244d6 <__sflush_r+0x32>
 8024542:	682b      	ldr	r3, [r5, #0]
 8024544:	2b00      	cmp	r3, #0
 8024546:	d0c6      	beq.n	80244d6 <__sflush_r+0x32>
 8024548:	2b1d      	cmp	r3, #29
 802454a:	d001      	beq.n	8024550 <__sflush_r+0xac>
 802454c:	2b16      	cmp	r3, #22
 802454e:	d11e      	bne.n	802458e <__sflush_r+0xea>
 8024550:	602f      	str	r7, [r5, #0]
 8024552:	2000      	movs	r0, #0
 8024554:	e022      	b.n	802459c <__sflush_r+0xf8>
 8024556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802455a:	b21b      	sxth	r3, r3
 802455c:	e01b      	b.n	8024596 <__sflush_r+0xf2>
 802455e:	690f      	ldr	r7, [r1, #16]
 8024560:	2f00      	cmp	r7, #0
 8024562:	d0f6      	beq.n	8024552 <__sflush_r+0xae>
 8024564:	0793      	lsls	r3, r2, #30
 8024566:	680e      	ldr	r6, [r1, #0]
 8024568:	bf08      	it	eq
 802456a:	694b      	ldreq	r3, [r1, #20]
 802456c:	600f      	str	r7, [r1, #0]
 802456e:	bf18      	it	ne
 8024570:	2300      	movne	r3, #0
 8024572:	eba6 0807 	sub.w	r8, r6, r7
 8024576:	608b      	str	r3, [r1, #8]
 8024578:	f1b8 0f00 	cmp.w	r8, #0
 802457c:	dde9      	ble.n	8024552 <__sflush_r+0xae>
 802457e:	6a21      	ldr	r1, [r4, #32]
 8024580:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8024582:	4643      	mov	r3, r8
 8024584:	463a      	mov	r2, r7
 8024586:	4628      	mov	r0, r5
 8024588:	47b0      	blx	r6
 802458a:	2800      	cmp	r0, #0
 802458c:	dc08      	bgt.n	80245a0 <__sflush_r+0xfc>
 802458e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024596:	81a3      	strh	r3, [r4, #12]
 8024598:	f04f 30ff 	mov.w	r0, #4294967295
 802459c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245a0:	4407      	add	r7, r0
 80245a2:	eba8 0800 	sub.w	r8, r8, r0
 80245a6:	e7e7      	b.n	8024578 <__sflush_r+0xd4>
 80245a8:	dfbffffe 	.word	0xdfbffffe

080245ac <_fflush_r>:
 80245ac:	b538      	push	{r3, r4, r5, lr}
 80245ae:	690b      	ldr	r3, [r1, #16]
 80245b0:	4605      	mov	r5, r0
 80245b2:	460c      	mov	r4, r1
 80245b4:	b913      	cbnz	r3, 80245bc <_fflush_r+0x10>
 80245b6:	2500      	movs	r5, #0
 80245b8:	4628      	mov	r0, r5
 80245ba:	bd38      	pop	{r3, r4, r5, pc}
 80245bc:	b118      	cbz	r0, 80245c6 <_fflush_r+0x1a>
 80245be:	6a03      	ldr	r3, [r0, #32]
 80245c0:	b90b      	cbnz	r3, 80245c6 <_fflush_r+0x1a>
 80245c2:	f7ff fa9d 	bl	8023b00 <__sinit>
 80245c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245ca:	2b00      	cmp	r3, #0
 80245cc:	d0f3      	beq.n	80245b6 <_fflush_r+0xa>
 80245ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80245d0:	07d0      	lsls	r0, r2, #31
 80245d2:	d404      	bmi.n	80245de <_fflush_r+0x32>
 80245d4:	0599      	lsls	r1, r3, #22
 80245d6:	d402      	bmi.n	80245de <_fflush_r+0x32>
 80245d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80245da:	f7ff fbea 	bl	8023db2 <__retarget_lock_acquire_recursive>
 80245de:	4628      	mov	r0, r5
 80245e0:	4621      	mov	r1, r4
 80245e2:	f7ff ff5f 	bl	80244a4 <__sflush_r>
 80245e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80245e8:	07da      	lsls	r2, r3, #31
 80245ea:	4605      	mov	r5, r0
 80245ec:	d4e4      	bmi.n	80245b8 <_fflush_r+0xc>
 80245ee:	89a3      	ldrh	r3, [r4, #12]
 80245f0:	059b      	lsls	r3, r3, #22
 80245f2:	d4e1      	bmi.n	80245b8 <_fflush_r+0xc>
 80245f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80245f6:	f7ff fbdd 	bl	8023db4 <__retarget_lock_release_recursive>
 80245fa:	e7dd      	b.n	80245b8 <_fflush_r+0xc>

080245fc <__swbuf_r>:
 80245fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245fe:	460e      	mov	r6, r1
 8024600:	4614      	mov	r4, r2
 8024602:	4605      	mov	r5, r0
 8024604:	b118      	cbz	r0, 802460e <__swbuf_r+0x12>
 8024606:	6a03      	ldr	r3, [r0, #32]
 8024608:	b90b      	cbnz	r3, 802460e <__swbuf_r+0x12>
 802460a:	f7ff fa79 	bl	8023b00 <__sinit>
 802460e:	69a3      	ldr	r3, [r4, #24]
 8024610:	60a3      	str	r3, [r4, #8]
 8024612:	89a3      	ldrh	r3, [r4, #12]
 8024614:	071a      	lsls	r2, r3, #28
 8024616:	d501      	bpl.n	802461c <__swbuf_r+0x20>
 8024618:	6923      	ldr	r3, [r4, #16]
 802461a:	b943      	cbnz	r3, 802462e <__swbuf_r+0x32>
 802461c:	4621      	mov	r1, r4
 802461e:	4628      	mov	r0, r5
 8024620:	f000 f82a 	bl	8024678 <__swsetup_r>
 8024624:	b118      	cbz	r0, 802462e <__swbuf_r+0x32>
 8024626:	f04f 37ff 	mov.w	r7, #4294967295
 802462a:	4638      	mov	r0, r7
 802462c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802462e:	6823      	ldr	r3, [r4, #0]
 8024630:	6922      	ldr	r2, [r4, #16]
 8024632:	1a98      	subs	r0, r3, r2
 8024634:	6963      	ldr	r3, [r4, #20]
 8024636:	b2f6      	uxtb	r6, r6
 8024638:	4283      	cmp	r3, r0
 802463a:	4637      	mov	r7, r6
 802463c:	dc05      	bgt.n	802464a <__swbuf_r+0x4e>
 802463e:	4621      	mov	r1, r4
 8024640:	4628      	mov	r0, r5
 8024642:	f7ff ffb3 	bl	80245ac <_fflush_r>
 8024646:	2800      	cmp	r0, #0
 8024648:	d1ed      	bne.n	8024626 <__swbuf_r+0x2a>
 802464a:	68a3      	ldr	r3, [r4, #8]
 802464c:	3b01      	subs	r3, #1
 802464e:	60a3      	str	r3, [r4, #8]
 8024650:	6823      	ldr	r3, [r4, #0]
 8024652:	1c5a      	adds	r2, r3, #1
 8024654:	6022      	str	r2, [r4, #0]
 8024656:	701e      	strb	r6, [r3, #0]
 8024658:	6962      	ldr	r2, [r4, #20]
 802465a:	1c43      	adds	r3, r0, #1
 802465c:	429a      	cmp	r2, r3
 802465e:	d004      	beq.n	802466a <__swbuf_r+0x6e>
 8024660:	89a3      	ldrh	r3, [r4, #12]
 8024662:	07db      	lsls	r3, r3, #31
 8024664:	d5e1      	bpl.n	802462a <__swbuf_r+0x2e>
 8024666:	2e0a      	cmp	r6, #10
 8024668:	d1df      	bne.n	802462a <__swbuf_r+0x2e>
 802466a:	4621      	mov	r1, r4
 802466c:	4628      	mov	r0, r5
 802466e:	f7ff ff9d 	bl	80245ac <_fflush_r>
 8024672:	2800      	cmp	r0, #0
 8024674:	d0d9      	beq.n	802462a <__swbuf_r+0x2e>
 8024676:	e7d6      	b.n	8024626 <__swbuf_r+0x2a>

08024678 <__swsetup_r>:
 8024678:	b538      	push	{r3, r4, r5, lr}
 802467a:	4b29      	ldr	r3, [pc, #164]	@ (8024720 <__swsetup_r+0xa8>)
 802467c:	4605      	mov	r5, r0
 802467e:	6818      	ldr	r0, [r3, #0]
 8024680:	460c      	mov	r4, r1
 8024682:	b118      	cbz	r0, 802468c <__swsetup_r+0x14>
 8024684:	6a03      	ldr	r3, [r0, #32]
 8024686:	b90b      	cbnz	r3, 802468c <__swsetup_r+0x14>
 8024688:	f7ff fa3a 	bl	8023b00 <__sinit>
 802468c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024690:	0719      	lsls	r1, r3, #28
 8024692:	d422      	bmi.n	80246da <__swsetup_r+0x62>
 8024694:	06da      	lsls	r2, r3, #27
 8024696:	d407      	bmi.n	80246a8 <__swsetup_r+0x30>
 8024698:	2209      	movs	r2, #9
 802469a:	602a      	str	r2, [r5, #0]
 802469c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80246a0:	81a3      	strh	r3, [r4, #12]
 80246a2:	f04f 30ff 	mov.w	r0, #4294967295
 80246a6:	e033      	b.n	8024710 <__swsetup_r+0x98>
 80246a8:	0758      	lsls	r0, r3, #29
 80246aa:	d512      	bpl.n	80246d2 <__swsetup_r+0x5a>
 80246ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80246ae:	b141      	cbz	r1, 80246c2 <__swsetup_r+0x4a>
 80246b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80246b4:	4299      	cmp	r1, r3
 80246b6:	d002      	beq.n	80246be <__swsetup_r+0x46>
 80246b8:	4628      	mov	r0, r5
 80246ba:	f7ff fbd9 	bl	8023e70 <_free_r>
 80246be:	2300      	movs	r3, #0
 80246c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80246c2:	89a3      	ldrh	r3, [r4, #12]
 80246c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80246c8:	81a3      	strh	r3, [r4, #12]
 80246ca:	2300      	movs	r3, #0
 80246cc:	6063      	str	r3, [r4, #4]
 80246ce:	6923      	ldr	r3, [r4, #16]
 80246d0:	6023      	str	r3, [r4, #0]
 80246d2:	89a3      	ldrh	r3, [r4, #12]
 80246d4:	f043 0308 	orr.w	r3, r3, #8
 80246d8:	81a3      	strh	r3, [r4, #12]
 80246da:	6923      	ldr	r3, [r4, #16]
 80246dc:	b94b      	cbnz	r3, 80246f2 <__swsetup_r+0x7a>
 80246de:	89a3      	ldrh	r3, [r4, #12]
 80246e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80246e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80246e8:	d003      	beq.n	80246f2 <__swsetup_r+0x7a>
 80246ea:	4621      	mov	r1, r4
 80246ec:	4628      	mov	r0, r5
 80246ee:	f000 f83f 	bl	8024770 <__smakebuf_r>
 80246f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246f6:	f013 0201 	ands.w	r2, r3, #1
 80246fa:	d00a      	beq.n	8024712 <__swsetup_r+0x9a>
 80246fc:	2200      	movs	r2, #0
 80246fe:	60a2      	str	r2, [r4, #8]
 8024700:	6962      	ldr	r2, [r4, #20]
 8024702:	4252      	negs	r2, r2
 8024704:	61a2      	str	r2, [r4, #24]
 8024706:	6922      	ldr	r2, [r4, #16]
 8024708:	b942      	cbnz	r2, 802471c <__swsetup_r+0xa4>
 802470a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802470e:	d1c5      	bne.n	802469c <__swsetup_r+0x24>
 8024710:	bd38      	pop	{r3, r4, r5, pc}
 8024712:	0799      	lsls	r1, r3, #30
 8024714:	bf58      	it	pl
 8024716:	6962      	ldrpl	r2, [r4, #20]
 8024718:	60a2      	str	r2, [r4, #8]
 802471a:	e7f4      	b.n	8024706 <__swsetup_r+0x8e>
 802471c:	2000      	movs	r0, #0
 802471e:	e7f7      	b.n	8024710 <__swsetup_r+0x98>
 8024720:	2000022c 	.word	0x2000022c

08024724 <__swhatbuf_r>:
 8024724:	b570      	push	{r4, r5, r6, lr}
 8024726:	460c      	mov	r4, r1
 8024728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802472c:	2900      	cmp	r1, #0
 802472e:	b096      	sub	sp, #88	@ 0x58
 8024730:	4615      	mov	r5, r2
 8024732:	461e      	mov	r6, r3
 8024734:	da0d      	bge.n	8024752 <__swhatbuf_r+0x2e>
 8024736:	89a3      	ldrh	r3, [r4, #12]
 8024738:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802473c:	f04f 0100 	mov.w	r1, #0
 8024740:	bf14      	ite	ne
 8024742:	2340      	movne	r3, #64	@ 0x40
 8024744:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024748:	2000      	movs	r0, #0
 802474a:	6031      	str	r1, [r6, #0]
 802474c:	602b      	str	r3, [r5, #0]
 802474e:	b016      	add	sp, #88	@ 0x58
 8024750:	bd70      	pop	{r4, r5, r6, pc}
 8024752:	466a      	mov	r2, sp
 8024754:	f000 f848 	bl	80247e8 <_fstat_r>
 8024758:	2800      	cmp	r0, #0
 802475a:	dbec      	blt.n	8024736 <__swhatbuf_r+0x12>
 802475c:	9901      	ldr	r1, [sp, #4]
 802475e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024762:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024766:	4259      	negs	r1, r3
 8024768:	4159      	adcs	r1, r3
 802476a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802476e:	e7eb      	b.n	8024748 <__swhatbuf_r+0x24>

08024770 <__smakebuf_r>:
 8024770:	898b      	ldrh	r3, [r1, #12]
 8024772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024774:	079d      	lsls	r5, r3, #30
 8024776:	4606      	mov	r6, r0
 8024778:	460c      	mov	r4, r1
 802477a:	d507      	bpl.n	802478c <__smakebuf_r+0x1c>
 802477c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024780:	6023      	str	r3, [r4, #0]
 8024782:	6123      	str	r3, [r4, #16]
 8024784:	2301      	movs	r3, #1
 8024786:	6163      	str	r3, [r4, #20]
 8024788:	b003      	add	sp, #12
 802478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802478c:	ab01      	add	r3, sp, #4
 802478e:	466a      	mov	r2, sp
 8024790:	f7ff ffc8 	bl	8024724 <__swhatbuf_r>
 8024794:	9f00      	ldr	r7, [sp, #0]
 8024796:	4605      	mov	r5, r0
 8024798:	4639      	mov	r1, r7
 802479a:	4630      	mov	r0, r6
 802479c:	f7ff f88a 	bl	80238b4 <_malloc_r>
 80247a0:	b948      	cbnz	r0, 80247b6 <__smakebuf_r+0x46>
 80247a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80247a6:	059a      	lsls	r2, r3, #22
 80247a8:	d4ee      	bmi.n	8024788 <__smakebuf_r+0x18>
 80247aa:	f023 0303 	bic.w	r3, r3, #3
 80247ae:	f043 0302 	orr.w	r3, r3, #2
 80247b2:	81a3      	strh	r3, [r4, #12]
 80247b4:	e7e2      	b.n	802477c <__smakebuf_r+0xc>
 80247b6:	89a3      	ldrh	r3, [r4, #12]
 80247b8:	6020      	str	r0, [r4, #0]
 80247ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80247be:	81a3      	strh	r3, [r4, #12]
 80247c0:	9b01      	ldr	r3, [sp, #4]
 80247c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80247c6:	b15b      	cbz	r3, 80247e0 <__smakebuf_r+0x70>
 80247c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80247cc:	4630      	mov	r0, r6
 80247ce:	f000 f81d 	bl	802480c <_isatty_r>
 80247d2:	b128      	cbz	r0, 80247e0 <__smakebuf_r+0x70>
 80247d4:	89a3      	ldrh	r3, [r4, #12]
 80247d6:	f023 0303 	bic.w	r3, r3, #3
 80247da:	f043 0301 	orr.w	r3, r3, #1
 80247de:	81a3      	strh	r3, [r4, #12]
 80247e0:	89a3      	ldrh	r3, [r4, #12]
 80247e2:	431d      	orrs	r5, r3
 80247e4:	81a5      	strh	r5, [r4, #12]
 80247e6:	e7cf      	b.n	8024788 <__smakebuf_r+0x18>

080247e8 <_fstat_r>:
 80247e8:	b538      	push	{r3, r4, r5, lr}
 80247ea:	4d07      	ldr	r5, [pc, #28]	@ (8024808 <_fstat_r+0x20>)
 80247ec:	2300      	movs	r3, #0
 80247ee:	4604      	mov	r4, r0
 80247f0:	4608      	mov	r0, r1
 80247f2:	4611      	mov	r1, r2
 80247f4:	602b      	str	r3, [r5, #0]
 80247f6:	f7dc ffbf 	bl	8001778 <_fstat>
 80247fa:	1c43      	adds	r3, r0, #1
 80247fc:	d102      	bne.n	8024804 <_fstat_r+0x1c>
 80247fe:	682b      	ldr	r3, [r5, #0]
 8024800:	b103      	cbz	r3, 8024804 <_fstat_r+0x1c>
 8024802:	6023      	str	r3, [r4, #0]
 8024804:	bd38      	pop	{r3, r4, r5, pc}
 8024806:	bf00      	nop
 8024808:	2000298c 	.word	0x2000298c

0802480c <_isatty_r>:
 802480c:	b538      	push	{r3, r4, r5, lr}
 802480e:	4d06      	ldr	r5, [pc, #24]	@ (8024828 <_isatty_r+0x1c>)
 8024810:	2300      	movs	r3, #0
 8024812:	4604      	mov	r4, r0
 8024814:	4608      	mov	r0, r1
 8024816:	602b      	str	r3, [r5, #0]
 8024818:	f7dc ffbe 	bl	8001798 <_isatty>
 802481c:	1c43      	adds	r3, r0, #1
 802481e:	d102      	bne.n	8024826 <_isatty_r+0x1a>
 8024820:	682b      	ldr	r3, [r5, #0]
 8024822:	b103      	cbz	r3, 8024826 <_isatty_r+0x1a>
 8024824:	6023      	str	r3, [r4, #0]
 8024826:	bd38      	pop	{r3, r4, r5, pc}
 8024828:	2000298c 	.word	0x2000298c

0802482c <_init>:
 802482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802482e:	bf00      	nop
 8024830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024832:	bc08      	pop	{r3}
 8024834:	469e      	mov	lr, r3
 8024836:	4770      	bx	lr

08024838 <_fini>:
 8024838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802483a:	bf00      	nop
 802483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802483e:	bc08      	pop	{r3}
 8024840:	469e      	mov	lr, r3
 8024842:	4770      	bx	lr
